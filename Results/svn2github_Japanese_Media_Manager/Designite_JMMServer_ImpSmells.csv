Implementation smell,Namespace,Class,File,Method,Description
Long Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAnimeDetail,The method has 137 lines of code.
Long Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The method has 134 lines of code.
Long Method,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The method has 100 lines of code.
Long Method,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetItemsFromSerie,The method has 130 lines of code.
Long Method,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The method has 127 lines of code.
Long Method,JMMServer,JMMServiceImplementationREST,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationREST.cs,GetImage,The method has 211 lines of code.
Long Method,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The method has 242 lines of code.
Long Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeRatings,The method has 289 lines of code.
Long Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllAnimeDetailed,The method has 176 lines of code.
Long Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllSeries,The method has 150 lines of code.
Long Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveServerSettings,The method has 135 lines of code.
Long Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The method has 205 lines of code.
Long Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupFileSummary,The method has 146 lines of code.
Long Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The method has 129 lines of code.
Long Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetMyListFilesForRemoval,The method has 101 lines of code.
Long Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetMissingEpisodes,The method has 125 lines of code.
Long Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetTraktFriendInfo,The method has 161 lines of code.
Long Method,JMMServer,JMMServiceImplementationImage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationImage.cs,GetImage,The method has 179 lines of code.
Long Method,JMMServer,Languages,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Languages.cs,GetLanguageDescription,The method has 102 lines of code.
Long Method,JMMServer,ServerSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\ServerSettings.cs,DebugSettingsToLog,The method has 116 lines of code.
Long Method,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,UpdateUsingGroup,The method has 249 lines of code.
Long Method,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The method has 345 lines of code.
Long Method,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,EvaluateGroupFilter,The method has 344 lines of code.
Long Method,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The method has 490 lines of code.
Long Method,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The method has 241 lines of code.
Long Method,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,MainWindow,The method has 122 lines of code.
Long Method,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerMyAnime2_DoWork,The method has 120 lines of code.
Long Method,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnToolbarHelp_Click,The method has 126 lines of code.
Long Method,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The method has 134 lines of code.
Long Method,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The method has 119 lines of code.
Long Method,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The method has 227 lines of code.
Long Method,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The method has 206 lines of code.
Long Method,JMMServer.Commands,CommandRequest_DownloadImage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_DownloadImage.cs,ProcessCommand,The method has 207 lines of code.
Long Method,JMMServer.Commands,CommandRequest_HashFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The method has 210 lines of code.
Long Method,JMMServer.Commands,CommandRequest_ProcessFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_ProcessFile.cs,ProcessFile_AniDB,The method has 168 lines of code.
Long Method,JMMServer.Commands,CommandRequest_SyncMyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_SyncMyList.cs,ProcessCommand,The method has 135 lines of code.
Long Method,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,CreateInitialGroupFilters,The method has 103 lines of code.
Long Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,ToContractDetailed,The method has 112 lines of code.
Long Method,JMMServer.Entities,AnimeEpisode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeEpisode.cs,GetVideoDetailedContracts,The method has 110 lines of code.
Long Method,JMMServer.Entities,AnimeGroup,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeGroup.cs,ToContract,The method has 127 lines of code.
Long Method,JMMServer.Entities,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeSeries.cs,UpdateStats,The method has 183 lines of code.
Long Method,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The method has 140 lines of code.
Long Method,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,MoveFileIfRequired,The method has 128 lines of code.
Long Method,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,Process,The method has 133 lines of code.
Long Method,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,ReplaceEntityNamesByCharacter,The method has 208 lines of code.
Long Method,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The method has 119 lines of code.
Long Method,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The method has 102 lines of code.
Complex Method,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,SaveResultsForAnimeXML,Cyclomatic complexity of the method is 10
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAllGroups,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetEpisodesRecentlyAddedSummary,Cyclomatic complexity of the method is 10
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAnimeWithNewEpisodes,Cyclomatic complexity of the method is 11
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAnimeContinueWatching_old,Cyclomatic complexity of the method is 9
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAnimeContinueWatching,Cyclomatic complexity of the method is 18
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAnimeCalendar,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SearchAnime,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAnimeDetail,Cyclomatic complexity of the method is 28
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,Cyclomatic complexity of the method is 32
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetCharactersForAnime,Cyclomatic complexity of the method is 10
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetTraktShoutsForAnime,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAniDBRecommendationsForAnime,Cyclomatic complexity of the method is 14
Complex Method,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetSimilarAnimeForAnime,Cyclomatic complexity of the method is 15
Complex Method,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,Cyclomatic complexity of the method is 17
Complex Method,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromVideoLocalEp,Cyclomatic complexity of the method is 17
Complex Method,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,Search,Cyclomatic complexity of the method is 31
Complex Method,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromSerie,Cyclomatic complexity of the method is 9
Complex Method,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetItemsFromGroup,Cyclomatic complexity of the method is 10
Complex Method,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,EpisodeTypeTranslated,Cyclomatic complexity of the method is 19
Complex Method,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetItemsFromSerie,Cyclomatic complexity of the method is 17
Complex Method,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,Cyclomatic complexity of the method is 16
Complex Method,JMMServer,JMMServiceImplementationREST,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationREST.cs,GetImage,Cyclomatic complexity of the method is 79
Complex Method,JMMServer,Digest,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\Digest.cs,Hash,Cyclomatic complexity of the method is 15
Complex Method,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_IntegrityCheck,Cyclomatic complexity of the method is 19
Complex Method,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_NewFiles,Cyclomatic complexity of the method is 9
Complex Method,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,Cyclomatic complexity of the method is 73
Complex Method,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,DeleteImportFolder,Cyclomatic complexity of the method is 10
Complex Method,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,UpdateAniDBFileData,Cyclomatic complexity of the method is 10
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllGroups,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,DeleteAnimeGroup,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeGroupsForFilter,Cyclomatic complexity of the method is 15
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveGroupFilter,Cyclomatic complexity of the method is 11
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,MoveSeries,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveSeries,Cyclomatic complexity of the method is 9
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CreateSeriesFromAnime,Cyclomatic complexity of the method is 13
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllAnime,Cyclomatic complexity of the method is 12
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeRatings,Cyclomatic complexity of the method is 33
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllAnimeDetailed,Cyclomatic complexity of the method is 38
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllSeries,Cyclomatic complexity of the method is 33
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodesForSeries,Cyclomatic complexity of the method is 14
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodesForSeriesOld,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveServerSettings,Cyclomatic complexity of the method is 13
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetMyReleaseGroupsForAniDBEpisode,Cyclomatic complexity of the method is 9
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveImportFolder,Cyclomatic complexity of the method is 13
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllEpisodesWithMultipleFiles,Cyclomatic complexity of the method is 13
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetFilesByGroupAndResolution,Cyclomatic complexity of the method is 10
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetFilesByGroup,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,Cyclomatic complexity of the method is 45
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupFileSummary,Cyclomatic complexity of the method is 42
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetCrossRefDetails,Cyclomatic complexity of the method is 27
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,EnableDisableImage,Cyclomatic complexity of the method is 57
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SetDefaultImage,Cyclomatic complexity of the method is 18
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RemoveLinkAniDBOther,Cyclomatic complexity of the method is 9
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetNextUnwatchedEpisode,Cyclomatic complexity of the method is 14
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllUnwatchedEpisodes,Cyclomatic complexity of the method is 15
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetContinueWatchingFilter,Cyclomatic complexity of the method is 17
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodesToWatch_RecentlyWatched,Cyclomatic complexity of the method is 9
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodesRecentlyAdded,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodesRecentlyAddedSummary,Cyclomatic complexity of the method is 11
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetSeriesWithMissingEpisodes,Cyclomatic complexity of the method is 22
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveUser,Cyclomatic complexity of the method is 13
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,DeleteUser,Cyclomatic complexity of the method is 14
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,Cyclomatic complexity of the method is 33
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,Cyclomatic complexity of the method is 11
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetReleaseGroupsForAnime,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetMyListFilesForRemoval,Cyclomatic complexity of the method is 16
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetMissingEpisodes,Cyclomatic complexity of the method is 18
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetTraktFriendInfo,Cyclomatic complexity of the method is 30
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,IncrementEpisodeStats,Cyclomatic complexity of the method is 20
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RecreateAllGroups,Cyclomatic complexity of the method is 14
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SearchForFiles,Cyclomatic complexity of the method is 20
Complex Method,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveRenameScript,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,JMMServiceImplementationImage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationImage.cs,GetImage,Cyclomatic complexity of the method is 66
Complex Method,JMMServer,Languages,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Languages.cs,GetLanguageDescription,Cyclomatic complexity of the method is 49
Complex Method,JMMServer,ServerSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\ServerSettings.cs,DebugSettingsToLog,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,UpdateUsingGroup,Cyclomatic complexity of the method is 52
Complex Method,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,Cyclomatic complexity of the method is 71
Complex Method,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,EvaluateGroupFilter,Cyclomatic complexity of the method is 188
Complex Method,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,SysInfoToString,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\GroupFilterHelper.cs,GetTextForEnum_Sorting,Cyclomatic complexity of the method is 13
Complex Method,JMMServer,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\GroupFilterHelper.cs,GetSortDescription,Cyclomatic complexity of the method is 53
Complex Method,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestH,Cyclomatic complexity of the method is 19
Complex Method,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,Cyclomatic complexity of the method is 18
Complex Method,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,GetNewFileName,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,Cyclomatic complexity of the method is 70
Complex Method,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTest,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTest,Cyclomatic complexity of the method is 18
Complex Method,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,Cyclomatic complexity of the method is 25
Complex Method,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,Cyclomatic complexity of the method is 31
Complex Method,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,Cyclomatic complexity of the method is 9
Complex Method,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerFileEvents_DoWork,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,cboDatabaseType_SelectionChanged,Cyclomatic complexity of the method is 15
Complex Method,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,Cyclomatic complexity of the method is 10
Complex Method,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerMyAnime2_DoWork,Cyclomatic complexity of the method is 16
Complex Method,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,GenerateAzureList,Cyclomatic complexity of the method is 8
Complex Method,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerTraktFriends_DoWork,Cyclomatic complexity of the method is 13
Complex Method,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,StopHost,Cyclomatic complexity of the method is 9
Complex Method,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,Cyclomatic complexity of the method is 20
Complex Method,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessVotes,Cyclomatic complexity of the method is 8
Complex Method,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,GetEpisodeType,Cyclomatic complexity of the method is 8
Complex Method,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,Cyclomatic complexity of the method is 14
Complex Method,AniDBAPI.Commands,AniDBCommand_AddFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,Cyclomatic complexity of the method is 10
Complex Method,AniDBAPI.Commands,AniDBCommand_GetAnimeDescription,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeDescription.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,AniDBAPI.Commands,AniDBCommand_GetEpisodeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetEpisodeInfo.cs,Init,Cyclomatic complexity of the method is 15
Complex Method,AniDBAPI.Commands,AniDBCommand_GetGroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetGroupStatus.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,AniDBAPI.Commands,AniDBCommand_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,AniDBAPI.Commands,AniDBCommand_MarkFileAsDeleted,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_MarkFileAsDeleted.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,AniDBAPI.Commands,AniDBCommand_NotifyGet,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_NotifyGet.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,AniDBAPI.Commands,AniDBCommand_UpdateFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Process,Cyclomatic complexity of the method is 15
Complex Method,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,Cyclomatic complexity of the method is 13
Complex Method,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,InitEpisode,Cyclomatic complexity of the method is 16
Complex Method,AniDBAPI.Commands,AniDBHTTPCommand_GetFullAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBHTTPCommand_GetFullAnime.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,Cyclomatic complexity of the method is 46
Complex Method,JMMServer.Commands,CommandRequest_GetFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetFile.cs,ProcessCommand,Cyclomatic complexity of the method is 8
Complex Method,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,Cyclomatic complexity of the method is 150
Complex Method,JMMServer.Commands,CommandProcessorGeneral,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorGeneral.cs,workerCommands_DoWork,Cyclomatic complexity of the method is 10
Complex Method,JMMServer.Commands,CommandProcessorHasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorHasher.cs,workerCommands_DoWork,Cyclomatic complexity of the method is 10
Complex Method,JMMServer.Commands,CommandProcessorImages,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorImages.cs,workerCommands_DoWork,Cyclomatic complexity of the method is 10
Complex Method,JMMServer.Commands,CommandRequest_AddFileToMyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_AddFileToMyList.cs,ProcessCommand,Cyclomatic complexity of the method is 11
Complex Method,JMMServer.Commands,CommandRequest_DownloadImage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_DownloadImage.cs,ProcessCommand,Cyclomatic complexity of the method is 109
Complex Method,JMMServer.Commands,CommandRequest_DownloadImage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_DownloadImage.cs,GetFileURL,Cyclomatic complexity of the method is 27
Complex Method,JMMServer.Commands,CommandRequest_DownloadImage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_DownloadImage.cs,GetFileName,Cyclomatic complexity of the method is 27
Complex Method,JMMServer.Commands,CommandRequest_GetAniDBTitles,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetAniDBTitles.cs,ProcessCommand,Cyclomatic complexity of the method is 11
Complex Method,JMMServer.Commands,CommandRequest_GetCalendar,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetCalendar.cs,ProcessCommand,Cyclomatic complexity of the method is 8
Complex Method,JMMServer.Commands,CommandRequest_GetReleaseGroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetReleaseGroupStatus.cs,ProcessCommand,Cyclomatic complexity of the method is 14
Complex Method,JMMServer.Commands,CommandRequest_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetUpdated.cs,ProcessCommand,Cyclomatic complexity of the method is 12
Complex Method,JMMServer.Commands,CommandRequest_HashFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,Cyclomatic complexity of the method is 27
Complex Method,JMMServer.Commands,CommandRequest_MovieDBSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_MovieDBSearchAnime.cs,ProcessCommand,Cyclomatic complexity of the method is 13
Complex Method,JMMServer.Commands,CommandRequest_ProcessFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_ProcessFile.cs,ProcessFile_AniDB,Cyclomatic complexity of the method is 33
Complex Method,JMMServer.Commands,CommandRequest_SyncMyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_SyncMyList.cs,ProcessCommand,Cyclomatic complexity of the method is 28
Complex Method,JMMServer.Commands,CommandRequest_SyncMyVotes,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_SyncMyVotes.cs,ProcessCommand,Cyclomatic complexity of the method is 9
Complex Method,JMMServer.Commands,CommandRequest_TraktSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\Trakt\CommandRequest_TraktSearchAnime.cs,ProcessCommand,Cyclomatic complexity of the method is 21
Complex Method,JMMServer.Commands,CommandRequest_TvDBSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\TvDB\CommandRequest_TvDBSearchAnime.cs,ProcessCommand,Cyclomatic complexity of the method is 13
Complex Method,JMMServer.Commands,CommandRequest_UpdateMyListFileStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_UpdateMyListFileStatus.cs,ProcessCommand,Cyclomatic complexity of the method is 8
Complex Method,JMMServer.Commands.MAL,CommandRequest_MALDownloadStatusFromMAL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALDownloadStatusFromMAL.cs,ProcessCommand,Cyclomatic complexity of the method is 17
Complex Method,JMMServer.Commands.MAL,CommandRequest_MALSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALSearchAnime.cs,ProcessCommand,Cyclomatic complexity of the method is 10
Complex Method,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,MigrateTvDBLinks_V1_to_V2,Cyclomatic complexity of the method is 13
Complex Method,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateInitialSchema,Cyclomatic complexity of the method is 10
Complex Method,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateInitialSchema,Cyclomatic complexity of the method is 10
Complex Method,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,GetDatabasePath,Cyclomatic complexity of the method is 9
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDictTvDBSeasonsSpecials,Cyclomatic complexity of the method is 9
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDefaultPosterPathNoBlanks,Cyclomatic complexity of the method is 10
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDefaultPosterDetailsNoBlanks,Cyclomatic complexity of the method is 16
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDefaultFanartDetailsNoBlanks,Cyclomatic complexity of the method is 17
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDefaultFanartOnlineURL,Cyclomatic complexity of the method is 17
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateEpisodes,Cyclomatic complexity of the method is 21
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateTitles,Cyclomatic complexity of the method is 9
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateCategories,Cyclomatic complexity of the method is 11
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateTags,Cyclomatic complexity of the method is 11
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateCharacters,Cyclomatic complexity of the method is 27
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateRelations,Cyclomatic complexity of the method is 10
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,ToContractAzure,Cyclomatic complexity of the method is 15
Complex Method,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,ToContractDetailed,Cyclomatic complexity of the method is 26
Complex Method,JMMServer.Entities,AniDB_Anime_DefaultImage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime_DefaultImage.cs,ToContract,Cyclomatic complexity of the method is 42
Complex Method,JMMServer.Entities,AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_File.cs,CreateLanguages,Cyclomatic complexity of the method is 11
Complex Method,JMMServer.Entities,AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_File.cs,CreateCrossEpisodes,Cyclomatic complexity of the method is 9
Complex Method,JMMServer.Entities,AnimeEpisode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeEpisode.cs,SaveWatchedStatus,Cyclomatic complexity of the method is 9
Complex Method,JMMServer.Entities,AnimeGroup,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeGroup.cs,GetRelatedGroupsFromAnimeID,Cyclomatic complexity of the method is 8
Complex Method,JMMServer.Entities,AnimeGroup,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeGroup.cs,ToContract,Cyclomatic complexity of the method is 25
Complex Method,JMMServer.Entities,AnimeGroup,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeGroup.cs,UpdateStats,Cyclomatic complexity of the method is 11
Complex Method,JMMServer.Entities,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeSeries.cs,ToContract,Cyclomatic complexity of the method is 21
Complex Method,JMMServer.Entities,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeSeries.cs,UpdateStats,Cyclomatic complexity of the method is 49
Complex Method,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,Cyclomatic complexity of the method is 34
Complex Method,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,MoveFileIfRequired,Cyclomatic complexity of the method is 21
Complex Method,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,GetMime,Cyclomatic complexity of the method is 14
Complex Method,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,Process,Cyclomatic complexity of the method is 21
Complex Method,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,Cyclomatic complexity of the method is 25
Complex Method,JMMServer.Providers.MyAnimeList,HttpUtilityV2,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,HtmlDecode,Cyclomatic complexity of the method is 11
Complex Method,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetActivityFriends,Cyclomatic complexity of the method is 15
Complex Method,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetFriends,Cyclomatic complexity of the method is 12
Complex Method,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,SaveExtendedShowInfo,Cyclomatic complexity of the method is 13
Complex Method,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,DownloadAllImages,Cyclomatic complexity of the method is 15
Complex Method,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,SyncCollectionToTrakt_Series,Cyclomatic complexity of the method is 10
Complex Method,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetTraktEpisodeNumber,Cyclomatic complexity of the method is 8
Complex Method,JMMServer.Providers.TraktTV,TraktTVUser,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVUser.cs,ToContract,Cyclomatic complexity of the method is 11
Complex Method,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,DownloadAutomaticImages,Cyclomatic complexity of the method is 11
Complex Method,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,ParseBanners,Cyclomatic complexity of the method is 22
Complex Method,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,UpdateAllInfoAndImages,Cyclomatic complexity of the method is 16
Complex Method,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,LinkAniDBTvDB,Cyclomatic complexity of the method is 10
Complex Method,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,IncrementalTvDBUpdate,Cyclomatic complexity of the method is 12
Complex Method,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAllVideoQualityByGroup,Cyclomatic complexity of the method is 8
Complex Method,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAllVideoQualityByAnime,Cyclomatic complexity of the method is 8
Complex Method,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAudioLanguageStatsForAnime,Cyclomatic complexity of the method is 8
Complex Method,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsForAnime,Cyclomatic complexity of the method is 8
Complex Method,JMMServer.Repositories,AniDB_VoteRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_VoteRepository.cs,Delete,Cyclomatic complexity of the method is 8
Complex Method,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetEpisodesWithMultipleFiles,Cyclomatic complexity of the method is 8
Complex Method,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,Delete,Cyclomatic complexity of the method is 9
Complex Method,JMMServer.Repositories,AnimeGroupRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeGroupRepository.cs,Delete,Cyclomatic complexity of the method is 11
Complex Method,JMMServer.Repositories,AnimeSeriesRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeSeriesRepository.cs,Save,Cyclomatic complexity of the method is 11
Complex Method,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,Delete,Cyclomatic complexity of the method is 10
Complex Method,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,Cyclomatic complexity of the method is 12
Complex Method,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,Cyclomatic complexity of the method is 24
Complex Method,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,Cyclomatic complexity of the method is 24
Complex Method,JMMServer.Providers.MovieDB,MovieDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MovieDB\MovieDBHelper.cs,SaveMovieToDatabase,Cyclomatic complexity of the method is 10
Complex Method,JMMServer.Providers.MovieDB,MovieDB_Movie_Result,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MovieDB\MovieDB_Movie_Result.cs,Populate,Cyclomatic complexity of the method is 8
Long Parameter List,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,Init,The method has 5 parameters.
Long Parameter List,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetItemsFromSerie,The method has 8 parameters.
Long Parameter List,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,VideoFromAnimeGroup,The method has 5 parameters.
Long Parameter List,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SetWatchedStatusOnSeries,The method has 5 parameters.
Long Parameter List,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetFilesByGroupAndResolution,The method has 6 parameters.
Long Parameter List,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SetDefaultImage,The method has 5 parameters.
Long Parameter List,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,LinkAniDBTvDB,The method has 7 parameters.
Long Parameter List,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RemoveLinkAniDBTvDB,The method has 6 parameters.
Long Parameter List,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,LinkAniDBMAL,The method has 5 parameters.
Long Parameter List,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,LinkAniDBMALUpdated,The method has 7 parameters.
Long Parameter List,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,BitBlt,The method has 9 parameters.
Long Parameter List,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,ProcessNumericalOperators,The method has 6 parameters.
Long Parameter List,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The method has 6 parameters.
Long Parameter List,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileName,The method has 7 parameters.
Long Parameter List,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameREPLACE,The method has 7 parameters.
Long Parameter List,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The method has 7 parameters.
Long Parameter List,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTest,The method has 6 parameters.
Long Parameter List,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTest,The method has 7 parameters.
Long Parameter List,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,StartStreamingVideo,The method has 10 parameters.
Long Parameter List,AniDBAPI.Commands,AniDBCommand_UpdateFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Init,The method has 5 parameters.
Long Parameter List,JMMServer.Commands,CommandRequest_WebCacheDeleteXRefAniDBTvDB,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheDeleteXRefAniDBTvDB.cs,CommandRequest_WebCacheDeleteXRefAniDBTvDB,The method has 6 parameters.
Long Parameter List,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,PopulateAndSaveFromHTTP,The method has 11 parameters.
Long Parameter List,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetRelatedAnimeRecursive,The method has 5 parameters.
Long Parameter List,JMMServer.Entities,AnimeEpisode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeEpisode.cs,ToggleWatchedStatus,The method has 5 parameters.
Long Parameter List,JMMServer.Entities,AnimeEpisode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeEpisode.cs,ToggleWatchedStatus,The method has 7 parameters.
Long Parameter List,JMMServer.Entities,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeSeries.cs,ToContract,The method has 12 parameters.
Long Parameter List,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The method has 8 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_MylistStatsMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_MylistStatsMap.cs,AniDB_MylistStatsMap,The method has 18 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_RecommendationMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_RecommendationMap.cs,AniDB_RecommendationMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,BookmarkedAnimeMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\BookmarkedAnimeMap.cs,BookmarkedAnimeMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,CrossRef_AniDB_MALMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\CrossRef_AniDB_MALMap.cs,CrossRef_AniDB_MALMap,The method has 7 parameters.
Long Parameter List,JMMServer.Mappings,CrossRef_AniDB_TvDBV2Map,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\CrossRef_AniDB_TvDBV2Map.cs,CrossRef_AniDB_TvDBV2Map,The method has 9 parameters.
Long Parameter List,JMMServer.Mappings,PlaylistMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\PlaylistMap.cs,PlaylistMap,The method has 6 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_AnimeMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_AnimeMap.cs,AniDB_AnimeMap,The method has 34 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_Anime_CharacterMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_Anime_CharacterMap.cs,AniDB_Anime_CharacterMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_Anime_DefaultImageMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_Anime_DefaultImageMap.cs,AniDB_Anime_DefaultImageMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_Anime_SimilarMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_Anime_SimilarMap.cs,AniDB_Anime_SimilarMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_Anime_TitleMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_Anime_TitleMap.cs,AniDB_Anime_TitleMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_CategoryMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_CategoryMap.cs,AniDB_CategoryMap,The method has 6 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_CharacterMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_CharacterMap.cs,AniDB_CharacterMap,The method has 7 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_EpisodeMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_EpisodeMap.cs,AniDB_EpisodeMap,The method has 12 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_FileMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_FileMap.cs,AniDB_FileMap,The method has 29 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_GroupStatusMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_GroupStatusMap.cs,AniDB_GroupStatusMap,The method has 9 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_ReleaseGroupMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_ReleaseGroupMap.cs,AniDB_ReleaseGroupMap,The method has 12 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_ReviewMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_ReviewMap.cs,AniDB_ReviewMap,The method has 10 parameters.
Long Parameter List,JMMServer.Mappings,AniDB_TagMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AniDB_TagMap.cs,AniDB_TagMap,The method has 8 parameters.
Long Parameter List,JMMServer.Mappings,AnimeEpisodeMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AnimeEpisodeMap.cs,AnimeEpisodeMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,AnimeEpisode_UserMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AnimeEpisode_UserMap.cs,AnimeEpisode_UserMap,The method has 8 parameters.
Long Parameter List,JMMServer.Mappings,AnimeGroupMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AnimeGroupMap.cs,AnimeGroupMap,The method has 13 parameters.
Long Parameter List,JMMServer.Mappings,AnimeGroup_UserMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AnimeGroup_UserMap.cs,AnimeGroup_UserMap,The method has 10 parameters.
Long Parameter List,JMMServer.Mappings,AnimeSeriesMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AnimeSeriesMap.cs,AnimeSeriesMap,The method has 12 parameters.
Long Parameter List,JMMServer.Mappings,AnimeSeries_UserMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\AnimeSeries_UserMap.cs,AnimeSeries_UserMap,The method has 9 parameters.
Long Parameter List,JMMServer.Mappings,CrossRef_AniDB_OtherMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\CrossRef_AniDB_OtherMap.cs,CrossRef_AniDB_OtherMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,CrossRef_AniDB_TraktMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\CrossRef_AniDB_TraktMap.cs,CrossRef_AniDB_TraktMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,CrossRef_AniDB_TvDBMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\CrossRef_AniDB_TvDBMap.cs,CrossRef_AniDB_TvDBMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,CrossRef_File_EpisodeMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\CrossRef_File_EpisodeMap.cs,CrossRef_File_EpisodeMap,The method has 9 parameters.
Long Parameter List,JMMServer.Mappings,DuplicateFileMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\DuplicateFileMap.cs,DuplicateFileMap,The method has 7 parameters.
Long Parameter List,JMMServer.Mappings,FileNameHashMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\FileNameHashMap.cs,FileNameHashMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,GroupFilterConditionMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\GroupFilterConditionMap.cs,GroupFilterConditionMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,GroupFilterMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\GroupFilterMap.cs,GroupFilterMap,The method has 6 parameters.
Long Parameter List,JMMServer.Mappings,ImportFolderMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\ImportFolderMap.cs,ImportFolderMap,The method has 7 parameters.
Long Parameter List,JMMServer.Mappings,JMMUserMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\JMMUserMap.cs,JMMUserMap,The method has 8 parameters.
Long Parameter List,JMMServer.Mappings,MovieDB_FanartMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\MovieDB_FanartMap.cs,MovieDB_FanartMap,The method has 9 parameters.
Long Parameter List,JMMServer.Mappings,MovieDB_MovieMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\MovieDB_MovieMap.cs,MovieDB_MovieMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,MovieDB_PosterMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\MovieDB_PosterMap.cs,MovieDB_PosterMap,The method has 9 parameters.
Long Parameter List,JMMServer.Mappings,Trakt_EpisodeMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\Trakt_EpisodeMap.cs,Trakt_EpisodeMap,The method has 8 parameters.
Long Parameter List,JMMServer.Mappings,Trakt_FriendMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\Trakt_FriendMap.cs,Trakt_FriendMap,The method has 11 parameters.
Long Parameter List,JMMServer.Mappings,Trakt_ImageFanartMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\Trakt_ImageFanartMap.cs,Trakt_ImageFanartMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,Trakt_ImagePosterMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\Trakt_ImagePosterMap.cs,Trakt_ImagePosterMap,The method has 5 parameters.
Long Parameter List,JMMServer.Mappings,Trakt_ShowMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\Trakt_ShowMap.cs,Trakt_ShowMap,The method has 7 parameters.
Long Parameter List,JMMServer.Mappings,TvDB_EpisodeMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\TvDB_EpisodeMap.cs,TvDB_EpisodeMap,The method has 14 parameters.
Long Parameter List,JMMServer.Mappings,TvDB_ImageFanartMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\TvDB_ImageFanartMap.cs,TvDB_ImageFanartMap,The method has 12 parameters.
Long Parameter List,JMMServer.Mappings,TvDB_ImagePosterMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\TvDB_ImagePosterMap.cs,TvDB_ImagePosterMap,The method has 9 parameters.
Long Parameter List,JMMServer.Mappings,TvDB_ImageWideBannerMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\TvDB_ImageWideBannerMap.cs,TvDB_ImageWideBannerMap,The method has 9 parameters.
Long Parameter List,JMMServer.Mappings,TvDB_SeriesMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\TvDB_SeriesMap.cs,TvDB_SeriesMap,The method has 9 parameters.
Long Parameter List,JMMServer.Mappings,VideoInfoMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\VideoInfoMap.cs,VideoInfoMap,The method has 14 parameters.
Long Parameter List,JMMServer.Mappings,VideoLocalMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\VideoLocalMap.cs,VideoLocalMap,The method has 13 parameters.
Long Parameter List,JMMServer.Providers.Azure,AzureWebAPI,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\Azure\AzureWebAPI.cs,Delete_CrossRefAniDBTvDB,The method has 6 parameters.
Long Parameter List,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,LinkAniDBMAL,The method has 6 parameters.
Long Parameter List,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,AddAnime,The method has 6 parameters.
Long Parameter List,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,ModifyAnime,The method has 6 parameters.
Long Parameter List,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateAnime,The method has 6 parameters.
Long Parameter List,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,LinkAniDBTrakt,The method has 5 parameters.
Long Parameter List,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetTraktEpisodeNumber,The method has 6 parameters.
Long Parameter List,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetTraktEpisodeNumber,The method has 9 parameters.
Long Parameter List,JMMServer.Providers.TraktTV,TraktTVPost_ShowScrobble,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVPost_ShowScrobble.cs,GetTraktEpisodeNumber,The method has 5 parameters.
Long Parameter List,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,LinkAniDBTvDB,The method has 7 parameters.
Long Parameter List,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,RemoveLinkAniDBTvDB,The method has 6 parameters.
Long Parameter List,JMMServer.Repositories,CrossRef_AniDB_TvDBV2Repository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TvDBV2Repository.cs,GetByTvDBID,The method has 7 parameters.
Long Parameter List,JMMServer.Repositories,CrossRef_AniDB_TvDBV2Repository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TvDBV2Repository.cs,GetByTvDBID,The method has 6 parameters.
Long Parameter List,NHibernateTest.Mappings,CommandRequestMap,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Mappings\CommandRequestMap.cs,CommandRequestMap,The method has 6 parameters.
Long Identifier,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllAnimeDetailed,The length of the parameter dictAnimeEpisodeVideoQualStats is 30.
Long Identifier,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the parameter cr_CommandRequest_Azure_SendAnimeTitle is 38.
Long Identifier,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the parameter cr_CommandRequest_GetAniDBTitles is 32.
Long Identifier,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the parameter cr_CommandRequest_Azure_SendAnimeXML is 36.
Long Identifier,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the parameter cr_CommandRequest_Azure_SendAnimeFull is 37.
Long Identifier,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the parameter cr_WebCache_SendXRefAniDBTrakt is 30.
Long Identifier,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the parameter cr_WebCache_DeleteXRefAniDBTrakt is 32.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,ExtendPause,The length of the statement  "	ServerInfo.Instance.ExtendedPauseString = string.Format ("Paused communications for {0} seconds: {1} "' secsToPause' pauseReason); " is 130.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,logoutTimer_Elapsed,The length of the statement  "				ServerInfo.Instance.WaitingOnResponseAniDBUDPString = string.Format ("Waiting on response for {0} seconds..."' ts.TotalSeconds); " is 128.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,Login,The length of the statement  "	enHelperActivityType ev = login.Process (ref soUdp' ref remoteIpEndPoint' curSessionID' new UnicodeEncoding (true' false)); " is 123.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,GetMyListFileStatus,The length of the statement  "		enHelperActivityType ev = cmdGetFileStatus.Process (ref soUdp' ref remoteIpEndPoint' curSessionID' new UnicodeEncoding (true' false)); " is 134.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,UpdateMyListStats,The length of the statement  "		enHelperActivityType ev = cmdGetMylistStats.Process (ref soUdp' ref remoteIpEndPoint' curSessionID' new UnicodeEncoding (true' false)); " is 135.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,GetUpdated,The length of the statement  "		enHelperActivityType ev = cmdUpdated.Process (ref soUdp' ref remoteIpEndPoint' curSessionID' new UnicodeEncoding (true' false)); " is 128.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,UpdateMyListFileStatus,The length of the statement  "		enHelperActivityType ev = cmdUpdateFile.Process (ref soUdp' ref remoteIpEndPoint' curSessionID' new UnicodeEncoding (true' false)); " is 131.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,UpdateMyListFileStatus,The length of the statement  "		enHelperActivityType ev = cmdUpdateFile.Process (ref soUdp' ref remoteIpEndPoint' curSessionID' new UnicodeEncoding (true' false)); " is 131.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,GetReleaseGroupStatusUDP,The length of the statement  "				List<AniDB_Episode> eps = repAniEp.GetByAnimeIDAndEpisodeNumber (animeID' getCmd.GrpStatusCollection.LatestEpisodeNumber); " is 122.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,SaveResultsForAnimeXML,The length of the statement  "	anime.PopulateAndSaveFromHTTP (session' getAnimeCmd.Anime' getAnimeCmd.Episodes' getAnimeCmd.Titles' getAnimeCmd.Categories' getAnimeCmd.Tags' getAnimeCmd.Characters' getAnimeCmd.Relations' getAnimeCmd.SimilarAnime' getAnimeCmd.Recommendations' downloadRelations); " is 264.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,SaveResultsForAnimeXML,The length of the statement  "	CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (anime.AniDB_AnimeID' JMMImageType.AniDB_Cover' false); " is 123.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,SaveResultsForAnimeXML,The length of the statement  "				logger.Debug ("Downloading character image: {0} - {1}({2}) - {3}"' anime.MainTitle' chr.CharName' chr.CharID' chr.PosterPath); " is 126.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,SaveResultsForAnimeXML,The length of the statement  "				logger.Debug ("Downloading seiyuu image: {0} - {1}({2}) - {3}"' anime.MainTitle' seiyuu.SeiyuuName' seiyuu.SeiyuuID' seiyuu.PosterPath); " is 136.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,ValidAniDBCredentials,The length of the statement  "	if (string.IsNullOrEmpty (this.userName) || string.IsNullOrEmpty (this.password) || string.IsNullOrEmpty (this.serverName) || string.IsNullOrEmpty (this.serverPort) || string.IsNullOrEmpty (this.clientPort)) { " is 209.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,ValidAniDBCredentials,The length of the statement  "		//OnAniDBStatusEvent(new AniDBStatusEventArgs(enHelperActivityType.OtherError' "ERROR: Please enter valid AniDB credentials via Configuration first")); " is 151.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,BindToLocalPort,The length of the statement  "	// Dont send Expect 100 requests. These requests arnt always supported by remote internet devices' in which case can cause failure. " is 131.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,BindToLocalPort,The length of the statement  "	logger.Info ("BindToLocalPort: Bound to local address: {0} - Port: {1} ({2})"' localIpEndPoint.ToString ()' clientPort' localIpEndPoint.AddressFamily); " is 151.
Long Statement,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,BindToRemotePort,The length of the statement  "		logger.Info ("BindToRemotePort: Bound to remote address: " + remoteIpEndPoint.Address.ToString () + " : " + remoteIpEndPoint.Port.ToString ()); " is 143.
Long Statement,JMMServer,CustomHttpBinding,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\CustomHttpBinding.cs,CreateBindingElements,The length of the statement  "	BindingElement security = SecurityBindingElement.CreateSecureConversationBindingElement (SecurityBindingElement.CreateUserNameForSslBindingElement (true)); " is 155.
Long Statement,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetEpisodesRecentlyAddedSummary,The length of the statement  "			string sql = "Select ae.AnimeSeriesID' max(vl.DateTimeCreated) as MaxDate " + "From VideoLocal vl " + "INNER JOIN CrossRef_File_Episode xref ON vl.Hash = xref.Hash " + "INNER JOIN AnimeEpisode ae ON ae.AniDB_EpisodeID = xref.EpisodeID " + "GROUP BY ae.AnimeSeriesID " + "ORDER BY MaxDate desc "; " is 295.
Long Statement,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAnimeWithNewEpisodes,The length of the statement  "			string sql = "Select ae.AnimeSeriesID' max(vl.DateTimeCreated) as MaxDate " + "From VideoLocal vl " + "INNER JOIN CrossRef_File_Episode xref ON vl.Hash = xref.Hash " + "INNER JOIN AnimeEpisode ae ON ae.AniDB_EpisodeID = xref.EpisodeID " + "GROUP BY ae.AnimeSeriesID " + "ORDER BY MaxDate desc "; " is 295.
Long Statement,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAnimeContinueWatching,The length of the statement  "					if (gfTemp.GroupFilterName.Equals (Constants.GroupFilterName.ContinueWatching' StringComparison.InvariantCultureIgnoreCase)) { " is 126.
Long Statement,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAnimeContinueWatching,The length of the statement  "			if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gf.GroupFilterID))) { " is 170.
Long Statement,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The length of the statement  "			List<CrossRef_AniDB_TvDBV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBV2> (tvSummary.CrossRefTvDBV2' sortCriteria); " is 125.
Long Statement,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The length of the statement  "					int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (ep.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1); " is 164.
Long Statement,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The length of the statement  "		List<CrossRef_AniDB_TvDBV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBV2> (tvSummary.CrossRefTvDBV2' sortCriteria); " is 125.
Long Statement,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The length of the statement  "					int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (ep.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1); " is 164.
Long Statement,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetCharactersForAnime,The length of the statement  "			foreach (AniDB_Anime_Character animeChar in animeChars.Where (item => item.CharType.Equals ("main character in"' StringComparison.InvariantCultureIgnoreCase))) { " is 161.
Long Statement,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetCharactersForAnime,The length of the statement  "			foreach (AniDB_Anime_Character animeChar in animeChars.Where (item => !item.CharType.Equals ("main character in"' StringComparison.InvariantCultureIgnoreCase))) { " is 162.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetOptions,The length of the statement  "		WebOperationContext.Current.OutgoingResponse.Headers.Add ("Access-Control-Allow-Methods"' "POST' GET' OPTIONS' DELETE' PUT' HEAD"); " is 131.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetOptions,The length of the statement  "		WebOperationContext.Current.OutgoingResponse.Headers.Add ("Access-Control-Allow-Headers"' "accept' x-plex-token' x-plex-client-identifier' x-plex-username' x-plex-product' x-plex-device' x-plex-platform' x-plex-platform-version' x-plex-version' x-plex-device-name"); " is 266.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The length of the statement  "				if ((!StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) || (!StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gg.GroupFilterID))) { " is 172.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The length of the statement  "				pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID); " is 209.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The length of the statement  "				pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/0/" + (int)JMMType.GroupUnsort + "/0"); " is 170.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The length of the statement  "				pp.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_unsort.png"); " is 129.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromVideoLocalEp,The length of the statement  "	l.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/0/" + (int)type + "/" + v.VideoLocalID); " is 170.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromVideoLocalEp,The length of the statement  "	l.AddedAt = ((Int32)(v.DateTimeCreated.Subtract (new DateTime (1970' 1' 1))).TotalSeconds).ToString (CultureInfo.InvariantCulture); " is 131.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromVideoLocalEp,The length of the statement  "	l.UpdatedAt = ((Int32)(v.DateTimeUpdated.Subtract (new DateTime (1970' 1' 1))).TotalSeconds).ToString (CultureInfo.InvariantCulture); " is 133.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromVideoLocalEp,The length of the statement  "	l.OriginallyAvailableAt = v.DateTimeCreated.Year.ToString ("0000") + "-" + v.DateTimeCreated.Month.ToString ("00") + "-" + v.DateTimeCreated.Day.ToString ("00"); " is 161.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromVideoLocalEp,The length of the statement  "				//s.Key = ServerUrl(int.Parse(ServerSettings.JMMServerPort)' MainWindow.PathAddressREST + "/GetStream/" + "file/" + Base64EncodeUrl(s.File)); " is 141.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromVideoLocalEp,The length of the statement  "			//p.Key = ServerUrl(int.Parse(ServerSettings.JMMServerPort)' MainWindow.PathAddressREST + "/GetStream/" + "videolocal/" + v.VideoLocalID + "/file" + ff); " is 153.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetUser,The length of the statement  "	return userId != 0 ? repUsers.GetByID (session' userId) : repUsers.GetAll (session).FirstOrDefault (a => a.Username == "Default"); " is 130.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromGroup,The length of the statement  "	p.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + userid + "/" + (int)JMMType.Group + "/" + grp.AnimeGroupID.ToString ()); " is 206.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromGroup,The length of the statement  "		p.Thumb = poster != null ? GenPoster (poster) : ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_404V.png"); " is 164.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GenPoster,The length of the statement  "	return ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressREST + "/GetThumb/" + (int)im.ImageType + "/" + im.ImageID + "/1.0"); " is 151.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GenArt,The length of the statement  "	return ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressREST + "/GetImage/" + (int)im.ImageType + "/" + im.ImageID); " is 142.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GenPoster,The length of the statement  "	return ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressREST + "/GetThumb/" + (int)im.ImageType + "/" + im.AnimeID + "/1.0"); " is 151.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GenArt,The length of the statement  "	return ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressREST + "/GetImage/" + (int)im.ImageType + "/" + im.AnimeID); " is 142.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromSerie,The length of the statement  "	p.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + userid + "/" + (int)JMMType.Serie + "/" + ser.AnimeSeriesID); " is 195.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromSerie,The length of the statement  "			p.OriginallyAvailableAt = anime.AirDate.Value.Year.ToString ("0000") + "-" + anime.AirDate.Value.Month.ToString ("00") + "-" + anime.AirDate.Value.Day.ToString ("00"); " is 167.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromSerie,The length of the statement  "		p.Thumb = poster != null ? GenPoster (poster) : ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_404V.png"); " is 164.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,ServerUrl,The length of the statement  "	return WebOperationContext.Current.IncomingRequest.UriTemplateMatch.RequestUri.Scheme + "://" + WebOperationContext.Current.IncomingRequest.UriTemplateMatch.RequestUri.Host + ":" + port + "/" + path; " is 199.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,ReplaceSchemeHost,The length of the statement  "	return str.Replace ("{SCHEME}"' WebOperationContext.Current.IncomingRequest.UriTemplateMatch.RequestUri.Scheme).Replace ("{HOST}"' WebOperationContext.Current.IncomingRequest.UriTemplateMatch.RequestUri.Host); " is 209.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetItemsFromSerie,The length of the statement  "		List<AnimeEpisode> episodes = ser.GetAnimeEpisodes (session).Where (a => a.GetVideoLocals (session).Count > 0).ToList (); " is 121.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetItemsFromSerie,The length of the statement  "					v.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.Serie + "/" + ee.Type + "_" + ser.AnimeSeriesID); " is 219.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetItemsFromSerie,The length of the statement  "					v.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/" + ee.Image); " is 124.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetItemsFromSerie,The length of the statement  "				v.OriginallyAvailableAt = aep.AirDateAsDate.Value.Year.ToString ("0000") + "-" + aep.AirDateAsDate.Value.Month.ToString ("00") + "-" + aep.AirDateAsDate.Value.Day.ToString ("00"); " is 179.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetItemsFromSerie,The length of the statement  "				v.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressREST + "/GetThumb/" + (int)contract.ImageType + "/" + contract.ImageID + "/1.33333"); " is 170.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetItemsFromSerie,The length of the statement  "				v.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_404.png"); " is 125.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The length of the statement  "			string msg = string.Format ("Got groups for filter DB: {0} - {1} in {2} ms"' gf.GroupFilterName' allGrps.Count' ts.TotalMilliseconds); " is 134.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The length of the statement  "			if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gf.GroupFilterID))) { " is 170.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The length of the statement  "                                        retGroups.Add(Joint.CreateFromSerie(ser.ToContract(ser.GetUserRecord(session' user.JMMUserID)'true)' cgrp' ser.AirDate' user.JMMUserID));" is 137.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The length of the statement  "                                    AnimeSeries ser = grp.DefaultAnimeSeriesID.HasValue ? allSeries.FirstOrDefault(a => a.AnimeSeriesID == grp.DefaultAnimeSeriesID.Value) : JMMServiceImplementation.GetSeriesForGroup(grp.AnimeGroupID' allSeries);" is 209.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The length of the statement  "                                        retGroups.Add(Joint.CreateFromGroup(cgrp'ser.ToContract(ser.GetUserRecord(session' user.JMMUserID)'true)'user.JMMUserID));" is 122.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The length of the statement  "			msg = string.Format ("Got groups for filter EVAL: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds); " is 131.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The length of the statement  "				//                        m.Directories = StoreLimits(m'retGroups.OrderBy(a => a.Group.SortName).Select(a => a.ToVideo()).ToList()); " is 132.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The length of the statement  "			msg = string.Format ("Got groups final: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds); " is 121.
Long Statement,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,VideoFromAnimeGroup,The length of the statement  "		AnimeSeries ser = grp.DefaultAnimeSeriesID.HasValue ? allSeries.FirstOrDefault (a => a.AnimeSeriesID == grp.DefaultAnimeSeriesID.Value) : JMMServiceImplementation.GetSeriesForGroup (grp.AnimeGroupID' allSeries); " is 211.
Long Statement,JMMServer,JMMServiceImplementationREST,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationREST.cs,GetThumb,The length of the statement  "			g.DrawImage (im' new Rectangle (0' 0' im2.Width' im2.Height)' new Rectangle (x' y' im2.Width' im2.Height)' GraphicsUnit.Pixel); " is 127.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "			CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (anime.AniDB_AnimeID' JMMImageType.AniDB_Cover' false); " is 123.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (tvPoster.TvDB_ImagePosterID' JMMImageType.TvDB_Cover' false); " is 130.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (tvFanart.TvDB_ImageFanartID' JMMImageType.TvDB_FanArt' false); " is 131.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (tvBanner.TvDB_ImageWideBannerID' JMMImageType.TvDB_Banner' false); " is 135.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "			CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (tvEpisode.TvDB_EpisodeID' JMMImageType.TvDB_Episode' false); " is 129.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (moviePoster.MovieDB_PosterID' JMMImageType.MovieDB_Poster' false); " is 135.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (movieFanart.MovieDB_FanartID' JMMImageType.MovieDB_FanArt' false); " is 135.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktPoster.Trakt_ImagePosterID' JMMImageType.Trakt_Poster' false); " is 136.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFanart.Trakt_ImageFanartID' JMMImageType.Trakt_Fanart' false); " is 136.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktEp.Trakt_EpisodeID' JMMImageType.Trakt_Episode' false); " is 129.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (chr.AniDB_CharacterID' JMMImageType.AniDB_Character' false); " is 129.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The length of the statement  "				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (seiyuu.AniDB_SeiyuuID' JMMImageType.AniDB_Creator' false); " is 127.
Long Statement,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,UpdateAniDBTitles,The length of the statement  "	bool process = ServerSettings.AniDB_Username.Equals ("jonbaby"' StringComparison.InvariantCultureIgnoreCase) || ServerSettings.AniDB_Username.Equals ("jmediamanager"' StringComparison.InvariantCultureIgnoreCase); " is 212.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeGroupsForFilter,The length of the statement  "			string msg = string.Format ("Got groups for filter DB: {0} - {1} in {2} ms"' gf.GroupFilterName' allGrps.Count' ts.TotalMilliseconds); " is 134.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeGroupsForFilter,The length of the statement  "			if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gf.GroupFilterID))) { " is 170.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeGroupsForFilter,The length of the statement  "			msg = string.Format ("Got groups for filter EVAL: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds); " is 131.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllGroupFiltersExtended,The length of the statement  "			if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [userID].ContainsKey (gf.GroupFilterID))) { " is 162.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveGroupFilter,The length of the statement  "				response.ErrorMessage = "Could not find existing Group Filter Condition with ID: " + gfc_con.GroupFilterConditionID.ToString (); " is 128.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,MoveSeries,The length of the statement  "		contractout.AnimeSeries = ser.ToContract (anime' xrefs' ser.CrossRefMovieDB' ser.GetUserRecord (userID)' sers' xrefMAL' false' null' null' null' null); " is 151.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveSeries,The length of the statement  "		contractout.AnimeSeries = ser.ToContract (anime' xrefs' ser.CrossRefMovieDB' ser.GetUserRecord (userID)' sers' xrefMAL' false' null' null' null' null); " is 151.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RemoveAssociationOnFile,The length of the statement  "				CommandRequest_WebCacheDeleteXRefFileEpisode cr = new CommandRequest_WebCacheDeleteXRefFileEpisode (vid.Hash' ep.AniDB_EpisodeID); " is 130.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateSingleFile,The length of the statement  "		CommandRequest_WebCacheSendXRefFileEpisode cr = new CommandRequest_WebCacheSendXRefFileEpisode (xref.CrossRef_File_EpisodeID); " is 126.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateSingleFile,The length of the statement  "			CommandRequest_TraktSyncCollectionSeries cmdTrakt = new CommandRequest_TraktSyncCollectionSeries (ser.AnimeSeriesID' ser.GetAnime ().MainTitle); " is 144.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateSingleFileWithMultipleEpisodes,The length of the statement  "			CommandRequest_WebCacheSendXRefFileEpisode cr = new CommandRequest_WebCacheSendXRefFileEpisode (xref.CrossRef_File_EpisodeID); " is 126.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateSingleFileWithMultipleEpisodes,The length of the statement  "			CommandRequest_TraktSyncCollectionSeries cmdTrakt = new CommandRequest_TraktSyncCollectionSeries (ser.AnimeSeriesID' ser.GetAnime ().MainTitle); " is 144.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,The length of the statement  "			CommandRequest_WebCacheSendXRefFileEpisode cr = new CommandRequest_WebCacheSendXRefFileEpisode (xref.CrossRef_File_EpisodeID); " is 126.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,The length of the statement  "			CommandRequest_TraktSyncCollectionSeries cmdTrakt = new CommandRequest_TraktSyncCollectionSeries (ser.AnimeSeriesID' ser.GetAnime ().MainTitle); " is 144.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CreateSeriesFromAnime,The length of the statement  "			response.AnimeSeries = ser.ToContract (anime' xrefs' ser.CrossRefMovieDB' ser.GetUserRecord (userID)' sers' xrefMAL' false' null' null' null' null); " is 148.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeRatings,The length of the statement  "				Dictionary<int' List<AniDB_Anime_Category>> allAnimeCatgeoriesDict = new Dictionary<int' List<AniDB_Anime_Category>>(); // " is 122.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeRatings,The length of the statement  "					if (vote.EntityID == anime.AnimeID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) { " is 133.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeRatings,The length of the statement  "					if (vote.EntityID == anime.AnimeID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) { " is 133.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeRatings,The length of the statement  "								if (contractAnimeDetailed.Stat_AllVideoQuality_Episodes.Length > 0) contractAnimeDetailed.Stat_AllVideoQuality_Episodes += "'";" is 127.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeRatings,The length of the statement  "				if (vote.EntityID == anime.AnimeID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) { " is 133.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllAnimeDetailed,The length of the statement  "		Dictionary<int' List<AniDB_Anime_Category>> allAnimeCatgeoriesDict = new Dictionary<int' List<AniDB_Anime_Category>> (); " is 120.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllAnimeDetailed,The length of the statement  "				if (vote.EntityID == anime.AnimeID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) { " is 133.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllSeries,The length of the statement  "			seriesContractList.Add (aser.ToContract (dictAnimes [aser.AniDB_ID]' xrefs' xrefMovie' userRec' tvseriesV2' xrefMAL' true' defPoster' defFanart' defWideBanner' titles)); " is 169.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetSeries,The length of the statement  "		return series.ToContract (anime' xrefs' series.CrossRefMovieDB' series.GetUserRecord (userID)' sers' xrefMAL' false' null' null' null' null); " is 141.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetSeriesForAnime,The length of the statement  "		return series.ToContract (anime' xrefs' series.CrossRefMovieDB' series.GetUserRecord (userID)' sers' xrefMAL' false' null' null' null' null); " is 141.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveServerSettings,The length of the statement  "		ServerSettings.AniDB_MyListStats_UpdateFrequency = (ScheduledUpdateFrequency)contractIn.AniDB_MyListStats_UpdateFrequency; " is 122.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveServerSettings,The length of the statement  "			JMMService.AnidbProcessor.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password' ServerSettings.AniDB_ServerAddress' ServerSettings.AniDB_ServerPort' ServerSettings.AniDB_ClientPort); " is 196.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveImportFolder,The length of the statement  "				if (imf.IsDropDestination == 1 && (!contract.ImportFolderID.HasValue || (contract.ImportFolderID.Value != imf.ImportFolderID))) { " is 129.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,TestAniDBConnection,The length of the statement  "		JMMService.AnidbProcessor.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password' ServerSettings.AniDB_ServerAddress' ServerSettings.AniDB_ServerPort' ServerSettings.AniDB_ClientPort); " is 196.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ReevaluateDuplicateFiles,The length of the statement  "				string msg = string.Format ("Deleting duplicate file record as one of the import folders can't be found: {0} --- {1}"' df.FilePathFile1' df.FilePathFile2); " is 155.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ReevaluateDuplicateFiles,The length of the statement  "				string msg = string.Format ("Deleting duplicate file record as they are actually point to the same file: {0}"' df.FullServerPath1); " is 131.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ReevaluateDuplicateFiles,The length of the statement  "				string msg = string.Format ("Deleting duplicate file record as one of the files can't be found: {0} --- {1}"' df.FullServerPath1' df.FullServerPath2); " is 150.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetFilesByGroupAndResolution,The length of the statement  "					if (relGroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && videoSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && resolution.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && thisBitDepth == videoBitDepth) { " is 292.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetFilesByGroupAndResolution,The length of the statement  "					if (relGroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && videoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && resolution.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && thisBitDepth == videoBitDepth) { " is 303.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SimplifyVideoSource,The length of the statement  "	if (origSource.Equals ("DTV"' StringComparison.InvariantCultureIgnoreCase) || origSource.Equals ("HDTV"' StringComparison.InvariantCultureIgnoreCase) || origSource.Equals ("www"' StringComparison.InvariantCultureIgnoreCase)) { " is 226.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The length of the statement  "							if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) { " is 310.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The length of the statement  "								if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) { " is 327.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The length of the statement  "			contract.SpecialsComplete = (contract.FileCountSpecials >= anime.EpisodeCountSpecial) && (anime.EpisodeCountSpecial > 0); " is 121.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The length of the statement  "						contract.NormalEpisodeNumberSummary += string.Format ("{0}-{1}"' baseEpNum' contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1]); " is 149.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The length of the statement  "		string msg2 = string.Format ("Timing for video quality {0} ({1}) : {2}/{3}/{4}/{5}/{6}/{7}/{8}  (AID: {9})"' anime.MainTitle' totalTiming' timingAnime' timingVids' timingEps' timingAniEps' timingAniFile' timingVidInfo' timingContracts' anime.AnimeID); " is 251.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupFileSummary,The length of the statement  "			contract.SpecialsComplete = (contract.FileCountSpecials >= anime.EpisodeCountSpecial) && (anime.EpisodeCountSpecial > 0); " is 121.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupFileSummary,The length of the statement  "						contract.NormalEpisodeNumberSummary += string.Format ("{0}-{1}"' baseEpNum' contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1]); " is 149.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetTVDBCrossRefWebCache,The length of the statement  "		List<JMMServer.Providers.Azure.CrossRef_AniDB_TvDB> results = JMMServer.Providers.Azure.AzureWebAPI.Get_CrossRefAniDBTvDB (animeID); " is 132.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,LinkAniDBTvDB,The length of the statement  "			TvDBHelper.RemoveLinkAniDBTvDB (xrefTemp.AnimeID' (enEpisodeType)xrefTemp.AniDBStartEpisodeType' xrefTemp.AniDBStartEpisodeNumber' xrefTemp.TvDBID' xrefTemp.TvDBSeasonNumber' xrefTemp.TvDBStartEpisodeNumber); " is 208.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,LinkAniDBTvDB,The length of the statement  "				msg = string.Format ("You have already linked Anime {0} ({1}) to this TvDB show/season/ep"' anime.MainTitle' xref.AnimeID); " is 123.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,LinkAniDBTvDB,The length of the statement  "		return TvDBHelper.LinkAniDBTvDB (animeID' (enEpisodeType)aniEpType' aniEpNumber' tvDBID' tvSeasonNumber' tvEpNumber' false); " is 124.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RemoveLinkAniDBTvDBForAnime,The length of the statement  "				if (image.ImageParentType == (int)JMMImageType.TvDB_Banner || image.ImageParentType == (int)JMMImageType.TvDB_Cover || image.ImageParentType == (int)JMMImageType.TvDB_FanArt) { " is 176.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RemoveLinkAniDBTvDBForAnime,The length of the statement  "			TvDBHelper.RemoveLinkAniDBTvDB (xref.AnimeID' (enEpisodeType)xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TvDBID' xref.TvDBSeasonNumber' xref.TvDBStartEpisodeNumber); " is 184.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RemoveLinkAniDBTvDB,The length of the statement  "			if (image.ImageParentType == (int)JMMImageType.TvDB_Banner || image.ImageParentType == (int)JMMImageType.TvDB_Cover || image.ImageParentType == (int)JMMImageType.TvDB_FanArt) { " is 176.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,LinkAniDBMAL,The length of the statement  "			return string.Format ("Not using MAL link as this Anime ID ({0}) is already in use by {1}/{2}/{3} ({4})"' animeID' xrefTemp.MALID' epType' epNumber' xrefTemp.MALTitle); " is 168.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RemoveLinkAniDBTrakt,The length of the statement  "			if (image.ImageParentType == (int)JMMImageType.Trakt_Fanart || image.ImageParentType == (int)JMMImageType.Trakt_Poster) { " is 121.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RemoveLinkAniDBOther,The length of the statement  "				if (image.ImageParentType == (int)JMMImageType.MovieDB_FanArt || image.ImageParentType == (int)JMMImageType.MovieDB_Poster) { " is 125.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetPreviousEpisodeForUnwatched,The length of the statement  "		List<AniDB_Episode> anieps = repAniEps.GetByAnimeIDAndEpisodeTypeNumber (series.AniDB_ID' (enEpisodeType)epType' epNum); " is 120.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetNextUnwatchedEpisode,The length of the statement  "					Contract_AnimeEpisode epContract = ep.ToContract (anidbep' new List<VideoLocal> ()' userRecord' series.GetUserRecord (session' userID)); " is 136.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAllUnwatchedEpisodes,The length of the statement  "					Contract_AnimeEpisode epContract = ep.ToContract (anidbep' new List<VideoLocal> ()' userRecord' series.GetUserRecord (userID)); " is 127.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetContinueWatchingFilter,The length of the statement  "					if (gfTemp.GroupFilterName.Equals (Constants.GroupFilterName.ContinueWatching' StringComparison.InvariantCultureIgnoreCase)) { " is 126.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetContinueWatchingFilter,The length of the statement  "			if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gf.GroupFilterID))) { " is 170.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodesRecentlyAddedSummary,The length of the statement  "			string sql = "Select ae.AnimeSeriesID' max(vl.DateTimeCreated) as MaxDate " + "From VideoLocal vl " + "INNER JOIN CrossRef_File_Episode xref ON vl.Hash = xref.Hash " + "INNER JOIN AnimeEpisode ae ON ae.AniDB_EpisodeID = xref.EpisodeID " + "GROUP BY ae.AnimeSeriesID " + "ORDER BY MaxDate desc "; " is 295.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetSeriesWithMissingEpisodes,The length of the statement  "			seriesContractList.Add (aser.ToContract (dictAnimes [aser.AniDB_ID]' xrefs' xrefMovie' userRec' sers' xrefMAL' false' null' null' null' null)); " is 143.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetMiniCalendar,The length of the statement  "		List<AniDB_Anime> animes = repAnime.GetForDate (DateTime.Today.AddDays (0 - numberOfDays)' DateTime.Today.AddDays (numberOfDays)); " is 130.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetMissingEpisodes,The length of the statement  "			//string msg = string.Format("Updating series {0} of {1} ({2}) -  {3}"' i' allSeries.Count' ser.Anime.MainTitle' DateTime.Now); " is 127.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetMissingEpisodes,The length of the statement  "							contract.GroupFileSummary += string.Format ("{0} - {1}/{2}/{3}bit ({4})"' gvq.GroupNameShort' gvq.Resolution' gvq.VideoSource' gvq.VideoBitDepth' gvq.NormalEpisodeNumberSummary); " is 178.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetMissingEpisodes,The length of the statement  "				string msg2 = string.Format ("Timing for series {0} ({1}) : {2}/{3}/{4}/{5}/{6}/{7} - {8} eps (AID: {9})"' ser.GetAnime ().MainTitle' totalTiming' timingVids' timingSeries' timingAnime' timingQuality' timingEps' timingAniEps' epCount' ser.GetAnime ().AnimeID); " is 260.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetTraktFriendInfo,The length of the statement  "						Trakt_Episode episode = repEpisodes.GetByShowIDSeasonAndEpisode (show.Trakt_ShowID' int.Parse (act.episode.season)' int.Parse (act.episode.number)); " is 148.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveRenameScript,The length of the statement  "				if (rs.IsEnabledOnImport == 1 && (!contract.RenameScriptID.HasValue || (contract.RenameScriptID.Value != rs.RenameScriptID))) { " is 127.
Long Statement,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,OnlineAnimeTitleSearch,The length of the statement  "		List<JMMServer.Providers.Azure.AnimeIDTitle> titles = JMMServer.Providers.Azure.AzureWebAPI.Get_AnimeTitle (titleQuery); " is 120.
Long Statement,JMMServer,ServerSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\ServerSettings.cs,DebugSettingsToLog,The length of the statement  "	string screenSize = System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width.ToString () + "x" + System.Windows.Forms.Screen.PrimaryScreen.Bounds.Height.ToString (); " is 163.
Long Statement,JMMServer,ServerSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\ServerSettings.cs,DebugSettingsToLog,The length of the statement  "			mediaInfoVersion = string.Format ("MediaInfo DLL {0}.{1}.{2}.{3}"' fvi.FileMajorPart' fvi.FileMinorPart' fvi.FileBuildPart' fvi.FilePrivatePart); " is 145.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,UpdateUsingGroup,The length of the statement  "				logger.Trace ("Updating cached stats for GROUP/Series - STEP 3 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds); " is 144.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,UpdateUsingGroup,The length of the statement  "				logger.Trace ("Updating cached stats for GROUP/Series - STEP 4 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds); " is 144.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,UpdateUsingGroup,The length of the statement  "				logger.Trace ("Updating cached stats for GROUP/Series - STEP 5 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds); " is 144.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,UpdateUsingGroup,The length of the statement  "				logger.Trace ("Updating cached stats for GROUP/Series - STEP 6 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds); " is 144.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,UpdateUsingGroup,The length of the statement  "				logger.Trace ("Updating cached stats for GROUP/Series - STEP 7 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds); " is 144.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The length of the statement  "						if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) { " is 121.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The length of the statement  "						if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) { " is 135.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) { " is 129.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) { " is 129.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) { " is 129.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) { " is 129.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && contractGroup.Stat_UserVoteOverall.Value < dUserRating) " is 123.
Long Statement,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && contractGroup.Stat_UserVoteOverall.Value > dUserRating) " is 120.
Long Statement,JMMServer,ImportFolderForm,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\ImportFolderForm.xaml.cs,btnSave_Click,The length of the statement  "		if (chkDropDestination.IsChecked.HasValue && chkDropSource.IsChecked.HasValue && chkDropDestination.IsChecked.Value && chkDropSource.IsChecked.Value) { " is 151.
Long Statement,JMMServer,ImportFolderForm,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\ImportFolderForm.xaml.cs,btnSave_Click,The length of the statement  "			MessageBox.Show ("An import folder cannot be both the drop source and the drop destination"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,JMMServer,ImportFolderForm,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\ImportFolderForm.xaml.cs,btnSave_Click,The length of the statement  "			MessageBox.Show ("The import folder location cannot be blank. Enter a valid path on JMM Server"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 150.
Long Statement,JMMServer,ImportFolderAdmin,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\ImportFolderAdmin.xaml.cs,btnDeleteImportFolder_Click,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete the Import Folder: {0}"' ns.ImportFolderLocation)' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 200.
Long Statement,JMMServer,ServerInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\ServerInfo.cs,Init,The length of the statement  "	JMMService.CmdProcessorGeneral.OnQueueCountChangedEvent += new Commands.CommandProcessorGeneral.QueueCountChangedHandler (CmdProcessorGeneral_OnQueueCountChangedEvent); " is 168.
Long Statement,JMMServer,ServerInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\ServerInfo.cs,Init,The length of the statement  "	JMMService.CmdProcessorGeneral.OnQueueStateChangedEvent += new Commands.CommandProcessorGeneral.QueueStateChangedHandler (CmdProcessorGeneral_OnQueueStateChangedEvent); " is 168.
Long Statement,JMMServer,ServerInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\ServerInfo.cs,Init,The length of the statement  "	JMMService.CmdProcessorHasher.OnQueueCountChangedEvent += new Commands.CommandProcessorHasher.QueueCountChangedHandler (CmdProcessorHasher_OnQueueCountChangedEvent); " is 165.
Long Statement,JMMServer,ServerInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\ServerInfo.cs,Init,The length of the statement  "	JMMService.CmdProcessorHasher.OnQueueStateChangedEvent += new Commands.CommandProcessorHasher.QueueStateChangedHandler (CmdProcessorHasher_OnQueueStateChangedEvent); " is 165.
Long Statement,JMMServer,ServerInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\ServerInfo.cs,Init,The length of the statement  "	JMMService.CmdProcessorImages.OnQueueCountChangedEvent += new Commands.CommandProcessorImages.QueueCountChangedHandler (CmdProcessorImages_OnQueueCountChangedEvent); " is 165.
Long Statement,JMMServer,ServerInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\ServerInfo.cs,Init,The length of the statement  "	JMMService.CmdProcessorImages.OnQueueStateChangedEvent += new Commands.CommandProcessorImages.QueueStateChangedHandler (CmdProcessorImages_OnQueueStateChangedEvent); " is 165.
Long Statement,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,AssemblyBuildDate,The length of the statement  "		dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2)); " is 126.
Long Statement,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,ExceptionToUI,The length of the statement  "	const string _strWhatUserCanDo = "Restart (app)' and try repeating your last action. Try alternative methods of performing the same action."; " is 141.
Long Statement,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,ExceptionToEventLog,The length of the statement  "		System.Diagnostics.EventLog.WriteEntry (System.AppDomain.CurrentDomain.FriendlyName' Environment.NewLine + _strException' EventLogEntryType.Error); " is 147.
Long Statement,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,BitmapToJPEG,The length of the statement  "	objEncoderParameters.Param [0] = new System.Drawing.Imaging.EncoderParameter (System.Drawing.Imaging.Encoder.Quality' lngCompression); " is 134.
Long Statement,JMMServer,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\GroupFilterHelper.cs,GetDateAsString,The length of the statement  "	return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0'); " is 131.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestS,The length of the statement  "		if (test.Trim ().Equals (Constants.FileRenameReserved.None' StringComparison.InvariantCultureIgnoreCase) && vid.GetAniDBFile ().Subtitles.Count == 0) { " is 151.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestF,The length of the statement  "		ProcessNumericalOperators (ref test' ref notCondition' ref greaterThan' ref greaterThanEqual' ref lessThan' ref lessThanEqual); " is 127.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestZ,The length of the statement  "		ProcessNumericalOperators (ref test' ref notCondition' ref greaterThan' ref greaterThanEqual' ref lessThan' ref lessThanEqual); " is 127.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestW,The length of the statement  "		ProcessNumericalOperators (ref test' ref notCondition' ref greaterThan' ref greaterThanEqual' ref lessThan' ref lessThanEqual); " is 127.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestU,The length of the statement  "		ProcessNumericalOperators (ref test' ref notCondition' ref greaterThan' ref greaterThanEqual' ref lessThan' ref lessThanEqual); " is 127.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestR,The length of the statement  "		if (test.Trim ().Equals (Constants.FileRenameReserved.Unknown' StringComparison.InvariantCultureIgnoreCase) && !hasSource) { " is 124.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestC,The length of the statement  "		if (test.Trim ().Equals (Constants.FileRenameReserved.Unknown' StringComparison.InvariantCultureIgnoreCase) && !hasSource) { " is 124.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestJ,The length of the statement  "		if (test.Trim ().Equals (Constants.FileRenameReserved.Unknown' StringComparison.InvariantCultureIgnoreCase) && !hasSource) { " is 124.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestT,The length of the statement  "		if (test.Trim ().Equals (Constants.FileRenameReserved.Unknown' StringComparison.InvariantCultureIgnoreCase) && !hasType) { " is 122.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestY,The length of the statement  "		ProcessNumericalOperators (ref test' ref notCondition' ref greaterThan' ref greaterThanEqual' ref lessThan' ref lessThanEqual); " is 127.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestE,The length of the statement  "		ProcessNumericalOperators (ref test' ref notCondition' ref greaterThan' ref greaterThanEqual' ref lessThan' ref lessThanEqual); " is 127.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestX,The length of the statement  "		ProcessNumericalOperators (ref test' ref notCondition' ref greaterThan' ref greaterThanEqual' ref lessThan' ref lessThanEqual); " is 127.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagOriginalFileName = Constants.FileRenameTag.OriginalFileName.Substring (1' Constants.FileRenameTag.OriginalFileName.Length - 1); " is 137.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagEpisodeNumber = Constants.FileRenameTag.EpisodeNumber.Substring (1' Constants.FileRenameTag.EpisodeNumber.Length - 1); " is 128.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagFileVersion = Constants.FileRenameTag.FileVersion.Substring (1' Constants.FileRenameTag.FileVersion.Length - 1); " is 122.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagAnimeNameEnglish = Constants.FileRenameTag.AnimeNameEnglish.Substring (1' Constants.FileRenameTag.AnimeNameEnglish.Length - 1); " is 137.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "					if (ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Main' StringComparison.InvariantCultureIgnoreCase) || ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Official' StringComparison.InvariantCultureIgnoreCase)) { " is 223.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagAnimeNameKanji = Constants.FileRenameTag.AnimeNameKanji.Substring (1' Constants.FileRenameTag.AnimeNameKanji.Length - 1); " is 131.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "					if (ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Main' StringComparison.InvariantCultureIgnoreCase) || ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Official' StringComparison.InvariantCultureIgnoreCase)) { " is 223.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagAnimeNameRomaji = Constants.FileRenameTag.AnimeNameRomaji.Substring (1' Constants.FileRenameTag.AnimeNameRomaji.Length - 1); " is 134.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "					if (ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Main' StringComparison.InvariantCultureIgnoreCase) || ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Official' StringComparison.InvariantCultureIgnoreCase)) { " is 223.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagEpisodeNameEnglish = Constants.FileRenameTag.EpisodeNameEnglish.Substring (1' Constants.FileRenameTag.EpisodeNameEnglish.Length - 1); " is 143.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagEpisodeNameRomaji = Constants.FileRenameTag.EpisodeNameRomaji.Substring (1' Constants.FileRenameTag.EpisodeNameRomaji.Length - 1); " is 140.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagGroupShortName = Constants.FileRenameTag.GroupShortName.Substring (1' Constants.FileRenameTag.GroupShortName.Length - 1); " is 131.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagGroupLongName = Constants.FileRenameTag.GroupLongName.Substring (1' Constants.FileRenameTag.GroupLongName.Length - 1); " is 128.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagDubLanguage = Constants.FileRenameTag.DubLanguage.Substring (1' Constants.FileRenameTag.DubLanguage.Length - 1); " is 122.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagSubLanguage = Constants.FileRenameTag.SubLanguage.Substring (1' Constants.FileRenameTag.SubLanguage.Length - 1); " is 122.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestI,The length of the statement  "		string tagVideoBitDepth = Constants.FileRenameTag.VideoBitDepth.Substring (1' Constants.FileRenameTag.VideoBitDepth.Length - 1); " is 128.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,Test,The length of the statement  "	"IF I(eng) DO ADD '%eng - '" + Environment.NewLine + // if the anime has an official/main title english add it to the string " is 124.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,Test,The length of the statement  "	"IF I(ann);I(!eng) DO ADD '%ann - '" + Environment.NewLine + //If the anime has a romaji title but not an english title add the romaji anime title " is 146.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,Test,The length of the statement  "	"IF I(epn);I(!epr) DO ADD '%epn'" + Environment.NewLine + //If the episode has an romaji title but not an english title add the romaji episode title " is 148.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The length of the statement  "				if (ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Main' StringComparison.InvariantCultureIgnoreCase) || ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Official' StringComparison.InvariantCultureIgnoreCase)) { " is 223.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The length of the statement  "				if (ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Main' StringComparison.InvariantCultureIgnoreCase) || ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Official' StringComparison.InvariantCultureIgnoreCase)) { " is 223.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The length of the statement  "				if (ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Main' StringComparison.InvariantCultureIgnoreCase) || ti.TitleType.Trim ().Equals (Constants.AnimeTitleType.Official' StringComparison.InvariantCultureIgnoreCase)) { " is 223.
Long Statement,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The length of the statement  "			if (aniFile.File_VideoResolution.Equals (Constants.FileRenameReserved.Unknown' StringComparison.InvariantCultureIgnoreCase)) " is 124.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,DownloadWebPage,The length of the statement  "		string msg = "---------- ERROR IN DOWNLOAD WEB PAGE ---------" + Environment.NewLine + url + Environment.NewLine + ex.ToString () + Environment.NewLine + "------------------------------------"; " is 193.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,DownloadWebBinary,The length of the statement  "		// this is true for instance for EVERY thailand internet connection (also needs to be set for banners/episodethumbs and any other http request we send) " is 151.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The length of the statement  "	val = val.Replace ("<br />"' Environment.NewLine).Replace ("<br/>"' Environment.NewLine).Replace ("<i>"' "").Replace ("</i>"' "").Replace ("<b>"' "").Replace ("</b>"' "").Replace ("[i]"' "").Replace ("[/i]"' "").Replace ("[b]"' "").Replace ("[/b]"' ""); " is 253.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The length of the statement  "	val = val.Replace ("<BR />"' Environment.NewLine).Replace ("<BR/>"' Environment.NewLine).Replace ("<I>"' "").Replace ("</I>"' "").Replace ("<B>"' "").Replace ("</B>"' "").Replace ("[I]"' "").Replace ("[/I]"' "").Replace ("[B]"' "").Replace ("[/B]"' ""); " is 253.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,FormatSecondsToDisplayTime,The length of the statement  "		return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0')); " is 126.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetPossibleSubtitleFiles,The length of the statement  "	subtileFiles.Add (Path.Combine (Path.GetDirectoryName (fileName)' Path.GetFileNameWithoutExtension (fileName) + ".srt")); " is 121.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetPossibleSubtitleFiles,The length of the statement  "	subtileFiles.Add (Path.Combine (Path.GetDirectoryName (fileName)' Path.GetFileNameWithoutExtension (fileName) + ".ass")); " is 121.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetPossibleSubtitleFiles,The length of the statement  "	subtileFiles.Add (Path.Combine (Path.GetDirectoryName (fileName)' Path.GetFileNameWithoutExtension (fileName) + ".ssa")); " is 121.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetPossibleSubtitleFiles,The length of the statement  "	subtileFiles.Add (Path.Combine (Path.GetDirectoryName (fileName)' Path.GetFileNameWithoutExtension (fileName) + ".idx")); " is 121.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetPossibleSubtitleFiles,The length of the statement  "	subtileFiles.Add (Path.Combine (Path.GetDirectoryName (fileName)' Path.GetFileNameWithoutExtension (fileName) + ".sub")); " is 121.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,StartStreamingVideo,The length of the statement  "		string encoderOptions = "vcodec=h264'vb=1768'venc=x264{profile=baseline'preset=faster'no-cabac'trellis=0'keyint=50}'deinterlace=-1'aenc=ffmpeg{aac-profile=low}'acodec=mp4a'ab=512'samplerate=48000'channels=2'audio-sync"; " is 219.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,StartStreamingVideo,The length of the statement  "		//if (!Context.Profile.TranscoderParameters.ContainsKey("noResize") || Context.Profile.TranscoderParameters["noResize"] != "yes") " is 129.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,StartStreamingVideo,The length of the statement  "		//string vlcStartTemplate = @" -v {0} --sout=#transcode%vcodec=WMV2'vb={1}'fps={2}'width={3}'acodec=wma2'ab={4}'channels=1'samplerate={5}'soverlay+:http%mux=asf'dst=:{6}/+ --no-sout-rtp-sap --no-sout-standard-sap --sout-all --ttl=1 --sout-keep --sout-transcode-high-priority --sub-language=en"; " is 294.
Long Statement,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,StartStreamingVideo,The length of the statement  "		//string vlcStart = string.Format(vlcStartTemplate' fileName' vidBitRate' fps' resWidth' audioBitRate' audioSamplerate' port); " is 126.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerFileEvents_DoWork,The length of the statement  "					// The reason for this is that when a directory is moved into a source directory (from the same drive) we will only recieve " is 123.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerFileEvents_DoWork,The length of the statement  "					// a create event will fire for the directory and each file contained within it (As they are all treated as separate operations) " is 128.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnChooseVLCLocation_Click,The length of the statement  "	Utils.StartStreamingVideo ("localhost"' @"e:\test\[Frostii]_K-On!_-_S5_(1280x720_Blu-ray_H264)_[8B9E0A76].mkv"' "12000"' "30"' "1280"' "128"' "44100"' "8088"' ref errorMsg' ref streamingAddress); " is 195.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnSaveDatabaseSettings_Click,The length of the statement  "			if (string.IsNullOrEmpty (txtMSSQL_DatabaseName.Text) || string.IsNullOrEmpty (txtMSSQL_Password.Password) || string.IsNullOrEmpty (cboMSSQLServerList.Text) || string.IsNullOrEmpty (txtMSSQL_Username.Text)) { " is 208.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnSaveDatabaseSettings_Click,The length of the statement  "			if (string.IsNullOrEmpty (txtMySQL_DatabaseName.Text) || string.IsNullOrEmpty (txtMySQL_Password.Password) || string.IsNullOrEmpty (txtMySQL_ServerAddress.Text) || string.IsNullOrEmpty (txtMySQL_Username.Text)) { " is 212.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,cboDatabaseType_SelectionChanged,The length of the statement  "		bool anySettingsMSSQL = !string.IsNullOrEmpty (ServerSettings.DatabaseName) || !string.IsNullOrEmpty (ServerSettings.DatabasePassword) || !string.IsNullOrEmpty (ServerSettings.DatabaseServer) || !string.IsNullOrEmpty (ServerSettings.DatabaseUsername); " is 251.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,cboDatabaseType_SelectionChanged,The length of the statement  "		bool anySettingsMySQL = !string.IsNullOrEmpty (ServerSettings.MySQL_SchemaName) || !string.IsNullOrEmpty (ServerSettings.MySQL_Password) || !string.IsNullOrEmpty (ServerSettings.MySQL_Hostname) || !string.IsNullOrEmpty (ServerSettings.MySQL_Username); " is 251.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The length of the statement  "			if (JMMService.CmdProcessorGeneral.QueueCount == 0 && JMMService.CmdProcessorHasher.QueueCount == 0 && JMMService.CmdProcessorImages.QueueCount == 0) " is 149.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The length of the statement  "		FileServer.FileServer.RegisterFirewallAndHttpUser (int.Parse (ServerSettings.JMMServerPort)' int.Parse (ServerSettings.JMMServerFilePort)); " is 139.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerMyAnime2_ProgressChanged,The length of the statement  "		txtMA2Progress.Text = string.Format ("Processing unlinked file {0} of {1}"' ma2Progress.CurrentFile' ma2Progress.TotalFiles); " is 125.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerMyAnime2_DoWork,The length of the statement  "			string sql = string.Format ("SELECT AniDB_EpisodeID from CrossRef_Episode_FileHash WHERE Hash = '{0}' AND FileSize = {1}"' vid.ED2KHash' vid.FileSize); " is 151.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,SendToAzure,The length of the statement  "	string aidsis 1226.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,MainWindow_Loaded,The length of the statement  "	if (ServerSettings.AniDB_Username.Equals ("jonbaby"' StringComparison.InvariantCultureIgnoreCase) || ServerSettings.AniDB_Username.Equals ("jmediamanager"' StringComparison.InvariantCultureIgnoreCase)) { " is 203.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,MinimizeToTray,The length of the statement  "	TippuTrayNotify.BalloonTipText = "JMM Server has been minimized to the system tray. To open the application' double-click the icon in the system tray."; " is 152.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,StartImageHost,The length of the statement  "	hostImage.AddServiceEndpoint (ServiceMetadataBehavior.MexContractName' MetadataExchangeBindings.CreateMexHttpBinding ()' "mex"); " is 128.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,StartStreamingHost_HTTP,The length of the statement  "	hostStreaming.AddServiceEndpoint (ServiceMetadataBehavior.MexContractName' MetadataExchangeBindings.CreateMexHttpBinding ()' "mex"); " is 132.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,StartStreamingHost,The length of the statement  "	hostStreaming.AddServiceEndpoint (ServiceMetadataBehavior.MexContractName' MetadataExchangeBindings.CreateMexHttpBinding ()' "mex"); " is 132.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,StartImageHostMetro,The length of the statement  "	hostMetroImage.AddServiceEndpoint (ServiceMetadataBehavior.MexContractName' MetadataExchangeBindings.CreateMexHttpBinding ()' "mex"); " is 133.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,StartMetroHost,The length of the statement  "	hostMetro.AddServiceEndpoint (ServiceMetadataBehavior.MexContractName' MetadataExchangeBindings.CreateMexHttpBinding ()' "mex"); " is 128.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,StartFileHost,The length of the statement  "	//                new MessagingServer(new ServiceFactory()' new MessagingServerConfiguration(new HttpMessageFactory())); " is 120.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,SetupAniDBProcessor,The length of the statement  "	JMMService.AnidbProcessor.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password' ServerSettings.AniDB_ServerAddress' ServerSettings.AniDB_ServerPort' ServerSettings.AniDB_ClientPort); " is 196.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,HashTest,The length of the statement  "	logger.Info ("ED2K only took {0} ms --- {1}/{2}/{3}/{4}"' doubleED2k' hashes.ed2k' hashes.crc32' hashes.md5' hashes.sha1); " is 122.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,HashTest,The length of the statement  "	logger.Info ("ED2K + CRCR32 took {0} ms --- {1}/{2}/{3}/{4}"' doubleCRC32' hashes2.ed2k' hashes2.crc32' hashes2.md5' hashes2.sha1); " is 131.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,HashTest,The length of the statement  "	logger.Info ("ED2K + MD5 took {0} ms --- {1}/{2}/{3}/{4}"' doubleMD5' hashes3.ed2k' hashes3.crc32' hashes3.md5' hashes3.sha1); " is 126.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,HashTest,The length of the statement  "	logger.Info ("ED2K + SHA1 took {0} ms --- {1}/{2}/{3}/{4}"' doubleSHA1' hashes4.ed2k' hashes4.crc32' hashes4.md5' hashes4.sha1); " is 128.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,HashTest,The length of the statement  "	logger.Info ("Everything took {0} ms --- {1}/{2}/{3}/{4}"' doubleAll' hashes5.ed2k' hashes5.crc32' hashes5.md5' hashes5.sha1); " is 126.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,ProcessFileTest,The length of the statement  "	//CommandRequest_HashFile cr_hashfile = new CommandRequest_HashFile(@"M:\[ Anime Test ]\[HorribleSubs] Dragon Crisis! - 02 [720p].mkv"' false); " is 143.
Long Statement,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,ProcessFileTest,The length of the statement  "	//CommandRequest_ProcessFile cr_procfile = new CommandRequest_ProcessFile(@"M:\[ Anime Test ]\[Doki] Saki - 01 (720x480 h264 DVD AAC) [DC73ACB9].mkv"); " is 151.
Long Statement,AniDBAPI,Calendar,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Calendar.cs,ToString,The length of the statement  "	return string.Format ("Calendar - AnimeID: {0}...Release Date: {1}({2})...Flags: {3}"' animeID' releaseDateRaw' releaseDate' dateFlags); " is 136.
Long Statement,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessEpisodeSource,The length of the statement  "	// 5. 02 ** episode number    Returned 'epno' includes special character (only if special) and padding (only if normal). Special characters are S(special)' C(credits)' T(trailer)' P(parody)' O(other) " is 199.
Long Statement,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessEpisodeSource,The length of the statement  "			<title xml:lang="x-jat">Asahina Mikuru no Bouken Episode 00</title>*/string adate = AniDBHTTPHelper.TryGetProperty (node' "airdate"); " is 133.
Long Statement,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,GetValidatedEpisodeNumber,The length of the statement  "	// string socketResponse = "220 FILE226237|3651|48951|3|63249613|feaf5388f7c0c5a38cd8d5e243c2c6e7|de3f16d8|high|DTV|MP3 CBR|128|XviD|894|640x360|avi|1420||1145836800|04'07|The Boredom of Suzumiya Haruhi|Suzumiya Haruhi no Taikutsu|x|802|48|a.f.k.|a.f.k."; " is 255.
Long Statement,AniDBAPI,Raw_AniDB_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Vote.cs,ToString,The length of the statement  "	return string.Format ("AniDB_Vote:: entityID: {0} | episodeNumber: {1} | episodeType: {2} |  voteValue: {3} | voteType: {4}"' EntityID' EpisodeNumber' EpisodeType' VoteValue' VoteType); " is 185.
Long Statement,AniDBAPI,APIUtils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Utils.cs,DownloadWebBinary,The length of the statement  "		// this is true for instance for EVERY thailand internet connection (also needs to be set for banners/episodethumbs and any other http request we send) " is 151.
Long Statement,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The length of the statement  "	commandText += string.Format ("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0')' aByte5.ToString ("X").PadLeft (2' '0')' aByte6.ToString ("X").PadLeft (2' '0')); " is 299.
Long Statement,AniDBAPI.Commands,AniDBCommand_GetCreatorInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetCreatorInfo.cs,Process,The length of the statement  "		// 245 CREATOR 200|?????|Suwabe Jun`ichi|1|17015.jpg||http://www.haikyo.or.jp/PROFILE/man/11470.html|Junichi_Suwabe|%E8%AB%8F%E8%A8%AA%E9%83%A8%E9%A0%86%E4%B8%80|1236300570 " is 172.
Long Statement,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The length of the statement  "	// 220 FILE572794|6107|99294|2723|c646d82a184a33f4e4f98af39f29a044|8452c4bf|high|HDTV|Vorbis (Ogg Vorbis)|148|H264/AVC|1773|1280x720|mkv|1470||1239494400|2|The Day It Began|Hajimari no Hi|712|14|Eclipse Productions|Eclipse " is 222.
Long Statement,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The length of the statement  "	commandText += string.Format ("&fmask={0}{1}{2}{3}{4}"' fByte1.ToString ("X").PadLeft (2' '0')' fByte2.ToString ("X").PadLeft (2' '0')' fByte3.ToString ("X").PadLeft (2' '0')' fByte4.ToString ("X").PadLeft (2' '0')' fByte5.ToString ("X").PadLeft (2' '0')); " is 256.
Long Statement,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The length of the statement  "	commandText += string.Format ("&amask={0}{1}{2}{3}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0')); " is 213.
Long Statement,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,GetKey,The length of the statement  "	return "AniDBCommand_Vote" + entityID.ToString () + "_" + episodeNumber.ToString () + "_" + voteType.ToString () + "_" + episodeType.ToString (); " is 145.
Long Statement,AniDBAPI.Commands,AniDBHTTPCommand_GetMyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBHTTPCommand_GetMyList.cs,WriteAnimeMyListToFile,The length of the statement  "	//string fileName = string.Format("MyList_{0}_{1}.xml"' DateTime.Now.ToString("yyyyMMdd")' DateTime.Now.ToString("HHmmss")); " is 124.
Long Statement,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The length of the statement  "			if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) { " is 325.
Long Statement,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ForceReconnection,The length of the statement  "			JMMService.AnidbProcessor.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password' ServerSettings.AniDB_ServerAddress' ServerSettings.AniDB_ServerPort' ServerSettings.AniDB_ClientPort); " is 196.
Long Statement,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the statement  "		CommandRequest_Azure_SendAnimeTitle cr_CommandRequest_Azure_SendAnimeTitle = new CommandRequest_Azure_SendAnimeTitle (); " is 120.
Long Statement,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the statement  "		CommandRequest_WebCacheDeleteXRefAniDBMAL cr_WebCacheDeleteXRefAniDBMAL = new CommandRequest_WebCacheDeleteXRefAniDBMAL (); " is 123.
Long Statement,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the statement  "		CommandRequest_TraktSyncCollectionSeries cr_Trakt_SyncCollectionSeries = new CommandRequest_TraktSyncCollectionSeries (); " is 121.
Long Statement,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the statement  "		CommandRequest_WebCacheSendXRefAniDBTrakt cr_WebCache_SendXRefAniDBTrakt = new CommandRequest_WebCacheSendXRefAniDBTrakt (); " is 124.
Long Statement,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the statement  "		CommandRequest_WebCacheDeleteXRefAniDBTrakt cr_WebCache_DeleteXRefAniDBTrakt = new CommandRequest_WebCacheDeleteXRefAniDBTrakt (); " is 130.
Long Statement,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the statement  "		CommandRequest_WebCacheSendXRefAniDBOther cr_WebCacheSendXRefAniDBOther = new CommandRequest_WebCacheSendXRefAniDBOther (); " is 123.
Long Statement,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The length of the statement  "		CommandRequest_WebCacheDeleteXRefFileEpisode cr_DeleteXRefFileEpisode = new CommandRequest_WebCacheDeleteXRefFileEpisode (); " is 124.
Long Statement,JMMServer.Commands,CommandRequestImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequestImplementation.cs,TryGetProperty,The length of the statement  "		//BaseConfig.MyAnimeLog.Write("Error in XMLService.TryGetProperty: {0}-{1}"' Utils.GetParentMethodName()' ex.ToString()); " is 121.
Long Statement,JMMServer.Commands,CommandRequest_AddFileToMyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_AddFileToMyList.cs,ProcessCommand,The length of the statement  "				newWatchedStatus = JMMService.AnidbProcessor.AddFileToMyList (xrefs [0].AnimeID' xrefs [0].Episode.EpisodeNumber' ref watchedDate); " is 131.
Long Statement,JMMServer.Commands,CommandRequest_AddFileToMyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_AddFileToMyList.cs,ProcessCommand,The length of the statement  "							logger.Info ("Setting file as watched' because episode was already watched: {0} - user: {1}"' vid.ToString ()' juser.Username); " is 127.
Long Statement,JMMServer.Commands,CommandRequest_GetAniDBTitles,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetAniDBTitles.cs,ProcessCommand,The length of the statement  "		bool process = (ServerSettings.AniDB_Username.Equals ("jonbaby"' StringComparison.InvariantCultureIgnoreCase) || ServerSettings.AniDB_Username.Equals ("jmediamanager"' StringComparison.InvariantCultureIgnoreCase)); " is 214.
Long Statement,JMMServer.Commands,CommandRequest_GetAniDBTitles,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetAniDBTitles.cs,ProcessCommand,The length of the statement  "			CommandRequest_Azure_SendAnimeTitle cmdAzure = new CommandRequest_Azure_SendAnimeTitle (aniTitle.AnimeID' aniTitle.MainTitle' aniTitle.Titles); " is 143.
Long Statement,JMMServer.Commands,CommandRequest_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetUpdated.cs,ProcessCommand,The length of the statement  "			logger.Info ("Web cache updates : Time={0} - Count={1} - List={2}"' webUpdateTime' colUpdates.UpdateCount' colUpdates.RawAnimeIDs); " is 131.
Long Statement,JMMServer.Commands,CommandRequest_HashFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The length of the statement  "			List<CrossRef_File_Episode> crossRefs = repCrossRefs.GetByFileNameAndSize (Path.GetFileName (vlocal.FilePath)' vlocal.FileSize); " is 128.
Long Statement,JMMServer.Commands,CommandRequest_HashFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The length of the statement  "			hashes = FileHashHelper.GetHashInfo (FileName' true' MainWindow.OnHashProgress' ServerSettings.Hash_CRC32' ServerSettings.Hash_MD5' ServerSettings.Hash_SHA1); " is 158.
Long Statement,JMMServer.Commands,CommandRequest_HashFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The length of the statement  "				List<DuplicateFile> dupFiles = repDups.GetByFilePathsAndImportFolder (vlocal.FilePath' vidTemp.FilePath' vlocal.ImportFolderID' vidTemp.ImportFolderID); " is 152.
Long Statement,JMMServer.Commands,CommandRequest_HashFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The length of the statement  "					dupFiles = repDups.GetByFilePathsAndImportFolder (vidTemp.FilePath' vlocal.FilePath' vidTemp.ImportFolderID' vlocal.ImportFolderID); " is 132.
Long Statement,JMMServer.Commands,CommandRequest_MovieDBSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_MovieDBSearchAnime.cs,ProcessSearchResults,The length of the statement  "		logger.Trace ("Found 1 moviedb results for search on {0} --- Linked to {1} ({2})"' searchCriteria' results [0].MovieName' results [0].MovieID); " is 143.
Long Statement,JMMServer.Commands,CommandRequest_ProcessFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_ProcessFile.cs,ProcessFile_AniDB,The length of the statement  "					logger.Debug ("Cannot find AniDB_File record or get cross ref from web cache record so exiting: {0}"' vidLocal.ED2KHash); " is 121.
Long Statement,JMMServer.Commands,CommandRequest_ProcessFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_ProcessFile.cs,ProcessFile_AniDB,The length of the statement  "		CommandRequest_TraktSyncCollectionSeries cmdTrakt = new CommandRequest_TraktSyncCollectionSeries (ser.AnimeSeriesID' ser.GetAnime ().MainTitle); " is 144.
Long Statement,JMMServer.Commands,CommandRequest_SyncMyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_SyncMyList.cs,ProcessCommand,The length of the statement  "							string msg = string.Format ("MYLISTDIFF:: File {0} - Local Status = {1}' AniDB Status = {2} --- {3}"' vl.FullServerPath' localStatus' myitem.IsWatched' action); " is 160.
Long Statement,JMMServer.Commands,CommandRequest_TraktSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\Trakt\CommandRequest_TraktSearchAnime.cs,ProcessCommand,The length of the statement  "						Trakt_Season traktSeason = repSeasons.GetByShowIDAndSeason (session' traktShow.Trakt_ShowID' xrefTvDBs [0].TvDBSeasonNumber); " is 125.
Long Statement,JMMServer.Commands,CommandRequest_TraktSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\Trakt\CommandRequest_TraktSearchAnime.cs,ProcessCommand,The length of the statement  "				List<JMMServer.Providers.Azure.CrossRef_AniDB_TvDB> cacheResults = JMMServer.Providers.Azure.AzureWebAPI.Get_CrossRefAniDBTvDB (AnimeID); " is 137.
Long Statement,JMMServer.Commands,CommandRequest_TraktSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\Trakt\CommandRequest_TraktSearchAnime.cs,ProcessCommand,The length of the statement  "							Trakt_Season traktSeason = repSeasons.GetByShowIDAndSeason (session' traktShow.Trakt_ShowID' cacheResults [0].TvDBSeasonNumber); " is 128.
Long Statement,JMMServer.Commands,CommandRequest_TraktSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\Trakt\CommandRequest_TraktSearchAnime.cs,ProcessSearchResults,The length of the statement  "		logger.Trace ("Found 1 trakt results for search on {0} --- Linked to {1} ({2})"' searchCriteria' results [0].title' results [0].TraktID); " is 137.
Long Statement,JMMServer.Commands,CommandRequest_TraktShowEpisodeUnseen,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\Trakt\CommandRequest_TraktShowEpisodeUnseen.cs,LoadFromDBCommand,The length of the statement  "		this.AnimeEpisodeID = int.Parse (TryGetProperty (docCreator' "CommandRequest_TraktShowEpisodeUnseen"' "AnimeEpisodeID")); " is 121.
Long Statement,JMMServer.Commands,CommandRequest_TraktSyncCollectionSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\Trakt\CommandRequest_TraktSyncCollectionSeries.cs,LoadFromDBCommand,The length of the statement  "		this.AnimeSeriesID = int.Parse (TryGetProperty (docCreator' "CommandRequest_TraktSyncCollectionSeries"' "AnimeSeriesID")); " is 122.
Long Statement,JMMServer.Commands,CommandRequest_TvDBUpdateSeriesAndEpisodes,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\TvDB\CommandRequest_TvDBUpdateSeriesAndEpisodes.cs,LoadFromDBCommand,The length of the statement  "		this.TvDBSeriesID = int.Parse (TryGetProperty (docCreator' "CommandRequest_TvDBUpdateSeriesAndEpisodes"' "TvDBSeriesID")); " is 122.
Long Statement,JMMServer.Commands,CommandRequest_TvDBUpdateSeriesAndEpisodes,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\TvDB\CommandRequest_TvDBUpdateSeriesAndEpisodes.cs,LoadFromDBCommand,The length of the statement  "		this.ForceRefresh = bool.Parse (TryGetProperty (docCreator' "CommandRequest_TvDBUpdateSeriesAndEpisodes"' "ForceRefresh")); " is 123.
Long Statement,JMMServer.Commands,CommandRequest_TvDBSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\TvDB\CommandRequest_TvDBSearchAnime.cs,ProcessCommand,The length of the statement  "					List<JMMServer.Providers.Azure.CrossRef_AniDB_TvDB> cacheResults = JMMServer.Providers.Azure.AzureWebAPI.Get_CrossRefAniDBTvDB (AnimeID); " is 137.
Long Statement,JMMServer.Commands,CommandRequest_TvDBSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\TvDB\CommandRequest_TvDBSearchAnime.cs,ProcessCommand,The length of the statement  "								TvDBHelper.LinkAniDBTvDB (AnimeID' (AniDBAPI.enEpisodeType)cacheResults [0].AniDBStartEpisodeType' cacheResults [0].AniDBStartEpisodeNumber' cacheResults [0].TvDBID' cacheResults [0].TvDBSeasonNumber' cacheResults [0].TvDBStartEpisodeNumber' true); " is 248.
Long Statement,JMMServer.Commands,CommandRequest_TvDBSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\TvDB\CommandRequest_TvDBSearchAnime.cs,ProcessSearchResults,The length of the statement  "		logger.Trace ("Found 1 tvdb results for search on {0} --- Linked to {1} ({2})"' searchCriteria' results [0].SeriesName' results [0].SeriesID); " is 142.
Long Statement,JMMServer.Commands,CommandRequest_TvDBSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\TvDB\CommandRequest_TvDBSearchAnime.cs,ProcessSearchResults,The length of the statement  "		logger.Trace ("Found multiple ({0}) tvdb results for search on so checking for english results {1}"' results.Count' searchCriteria); " is 132.
Long Statement,JMMServer.Commands,CommandRequest_TvDBSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\TvDB\CommandRequest_TvDBSearchAnime.cs,ProcessSearchResults,The length of the statement  "				logger.Trace ("Found english result for search on {0} --- Linked to {1} ({2})"' searchCriteria' sres.SeriesName' sres.SeriesID); " is 128.
Long Statement,JMMServer.Commands,CommandRequest_UpdateMyListFileStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_UpdateMyListFileStatus.cs,LoadFromDBCommand,The length of the statement  "		if (int.TryParse (TryGetProperty (docCreator' "CommandRequest_UpdateMyListFileStatus"' "WatchedDateAsSecs")' out dateSecs)) " is 123.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheDeleteXRefAniDBOther,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheDeleteXRefAniDBOther.cs,LoadFromDBCommand,The length of the statement  "		this.CrossRefType = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheDeleteXRefAniDBOther"' "CrossRefType")); " is 123.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheDeleteXRefAniDBTvDB,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheDeleteXRefAniDBTvDB.cs,ProcessCommand,The length of the statement  "		AzureWebAPI.Delete_CrossRefAniDBTvDB (AnimeID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber); " is 145.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheDeleteXRefAniDBTvDB,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheDeleteXRefAniDBTvDB.cs,LoadFromDBCommand,The length of the statement  "			this.AniDBStartEpisodeType = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheDeleteXRefAniDBTvDB"' "AniDBStartEpisodeType")); " is 140.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheDeleteXRefAniDBTvDB,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheDeleteXRefAniDBTvDB.cs,LoadFromDBCommand,The length of the statement  "			this.AniDBStartEpisodeNumber = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheDeleteXRefAniDBTvDB"' "AniDBStartEpisodeNumber")); " is 144.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheDeleteXRefAniDBTvDB,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheDeleteXRefAniDBTvDB.cs,LoadFromDBCommand,The length of the statement  "			this.TvDBSeasonNumber = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheDeleteXRefAniDBTvDB"' "TvDBSeasonNumber")); " is 130.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheDeleteXRefAniDBTvDB,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheDeleteXRefAniDBTvDB.cs,LoadFromDBCommand,The length of the statement  "			this.TvDBStartEpisodeNumber = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheDeleteXRefAniDBTvDB"' "TvDBStartEpisodeNumber")); " is 142.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheDeleteXRefFileEpisode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheDeleteXRefFileEpisode.cs,ProcessCommand,The length of the statement  "		logger.Error ("Error processing CommandRequest_WebCacheDeleteXRefFileEpisode: {0}-{1} - {2}"' Hash' EpisodeID' ex.ToString ()); " is 127.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheSendXRefAniDBOther,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheSendXRefAniDBOther.cs,LoadFromDBCommand,The length of the statement  "		this.CrossRef_AniDB_OtherID = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheSendXRefAniDBOther"' "CrossRef_AniDB_OtherID")); " is 141.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheSendXRefAniDBTrakt,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheSendXRefAniDBTrakt.cs,LoadFromDBCommand,The length of the statement  "		this.CrossRef_AniDB_TraktID = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheSendXRefAniDBTrakt"' "CrossRef_AniDB_TraktID")); " is 141.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheSendXRefAniDBTvDB,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheSendXRefAniDBTvDB.cs,LoadFromDBCommand,The length of the statement  "		this.CrossRef_AniDB_TvDBID = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheSendXRefAniDBTvDB"' "CrossRef_AniDB_TvDBID")); " is 138.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheSendXRefFileEpisode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheSendXRefFileEpisode.cs,ProcessCommand,The length of the statement  "		logger.Error ("Error processing CommandRequest_WebCacheSendXRefFileEpisode: {0} - {1}"' CrossRef_File_EpisodeID' ex.ToString ()); " is 129.
Long Statement,JMMServer.Commands,CommandRequest_WebCacheSendXRefFileEpisode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheSendXRefFileEpisode.cs,LoadFromDBCommand,The length of the statement  "		this.CrossRef_File_EpisodeID = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheSendXRefFileEpisode"' "CrossRef_File_EpisodeID")); " is 144.
Long Statement,JMMServer.Commands.Azure,CommandRequest_Azure_SendAnimeFull,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\Azure\CommandRequest_Azure_SendAnimeFull.cs,ProcessCommand,The length of the statement  "		bool process = (ServerSettings.AniDB_Username.Equals ("jonbaby"' StringComparison.InvariantCultureIgnoreCase) || ServerSettings.AniDB_Username.Equals ("jmediamanager"' StringComparison.InvariantCultureIgnoreCase)); " is 214.
Long Statement,JMMServer.Commands.Azure,CommandRequest_Azure_SendAnimeTitle,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\Azure\CommandRequest_Azure_SendAnimeTitle.cs,ProcessCommand,The length of the statement  "		bool process = (ServerSettings.AniDB_Username.Equals ("jonbaby"' StringComparison.InvariantCultureIgnoreCase) || ServerSettings.AniDB_Username.Equals ("jmediamanager"' StringComparison.InvariantCultureIgnoreCase)); " is 214.
Long Statement,JMMServer.Commands.Azure,CommandRequest_Azure_SendAnimeXML,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\Azure\CommandRequest_Azure_SendAnimeXML.cs,ProcessCommand,The length of the statement  "		bool process = (ServerSettings.AniDB_Username.Equals ("jonbaby"' StringComparison.InvariantCultureIgnoreCase) || ServerSettings.AniDB_Username.Equals ("jmediamanager"' StringComparison.InvariantCultureIgnoreCase)); " is 214.
Long Statement,JMMServer.Commands.MAL,CommandRequest_MALSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALSearchAnime.cs,ProcessCommand,The length of the statement  "						logger.Trace ("Found MAL match on web cache for {0} - id = {1} ({2}/{3})"' AnimeID' crossRef.MALID' crossRef.StartEpisodeType' crossRef.StartEpisodeNumber); " is 156.
Long Statement,JMMServer.Commands.MAL,CommandRequest_MALSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALSearchAnime.cs,ProcessCommand,The length of the statement  "						MALHelper.LinkAniDBMAL (AnimeID' crossRef.MALID' crossRef.MALTitle' crossRef.StartEpisodeType' crossRef.StartEpisodeNumber' true); " is 130.
Long Statement,JMMServer.Commands.MAL,CommandRequest_MALSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALSearchAnime.cs,ProcessCommand,The length of the statement  "			logger.Trace ("Using MAL search result for search on {0} : {1} ({2})"' searchCriteria' malResults.entry [0].id' malResults.entry [0].title); " is 140.
Long Statement,JMMServer.Commands.MAL,CommandRequest_MALSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALSearchAnime.cs,ProcessCommand,The length of the statement  "			MALHelper.LinkAniDBMAL (AnimeID' malResults.entry [0].id' malResults.entry [0].title' (int)enEpisodeType.Episode' 1' false); " is 124.
Long Statement,JMMServer.Commands.MAL,CommandRequest_MALSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALSearchAnime.cs,ProcessCommand,The length of the statement  "				if (res.title.Equals (anime.MainTitle' StringComparison.InvariantCultureIgnoreCase) && res.episodes == anime.EpisodeCountNormal) { " is 130.
Long Statement,JMMServer.Commands.WebCache,CommandRequest_WebCacheDeleteXRefAniDBMAL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheDeleteXRefAniDBMAL.cs,LoadFromDBCommand,The length of the statement  "		this.StartEpisodeType = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheDeleteXRefAniDBMAL"' "StartEpisodeType")); " is 129.
Long Statement,JMMServer.Commands.WebCache,CommandRequest_WebCacheDeleteXRefAniDBMAL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheDeleteXRefAniDBMAL.cs,LoadFromDBCommand,The length of the statement  "		this.StartEpisodeNumber = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheDeleteXRefAniDBMAL"' "StartEpisodeNumber")); " is 133.
Long Statement,JMMServer.Commands.WebCache,CommandRequest_WebCacheSendXRefAniDBMAL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\WebCache\CommandRequest_WebCacheSendXRefAniDBMAL.cs,LoadFromDBCommand,The length of the statement  "		this.CrossRef_AniDB_MALID = int.Parse (TryGetProperty (docCreator' "CommandRequest_WebCacheSendXRefAniDBMAL"' "CrossRef_AniDB_MALID")); " is 135.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,CreateSessionFactory,The length of the statement  "	if (ServerSettings.DatabaseType.Trim ().Equals (Constants.DatabaseType.SqlServer' StringComparison.InvariantCultureIgnoreCase)) { " is 129.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,CreateSessionFactory,The length of the statement  "		string connectionstring = string.Format (@"data source={0};initial catalog={1};persist security info=True;user id={2};password={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseName' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword); " is 259.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,CreateSessionFactory,The length of the statement  "		return Fluently.Configure ().Database (MsSqlConfiguration.MsSql2008.ConnectionString (connectionstring)).Mappings (m => m.FluentMappings.AddFromAssemblyOf<JMMService> ()).BuildSessionFactory (); " is 194.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,CreateSessionFactory,The length of the statement  "	else if (ServerSettings.DatabaseType.Trim ().Equals (Constants.DatabaseType.Sqlite' StringComparison.InvariantCultureIgnoreCase)) { " is 131.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,CreateSessionFactory,The length of the statement  "		return Fluently.Configure ().Database (SQLiteConfiguration.Standard.UsingFile (SQLite.GetDatabaseFilePath ())).Mappings (m => m.FluentMappings.AddFromAssemblyOf<JMMService> ()).BuildSessionFactory (); " is 200.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,CreateSessionFactory,The length of the statement  "	else if (ServerSettings.DatabaseType.Trim ().Equals (Constants.DatabaseType.MySQL' StringComparison.InvariantCultureIgnoreCase)) { " is 130.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,CreateSessionFactory,The length of the statement  "		return Fluently.Configure ().Database (MySQLConfiguration.Standard.ConnectionString (x => x.Database (ServerSettings.MySQL_SchemaName).Server (ServerSettings.MySQL_Hostname).Username (ServerSettings.MySQL_Username).Password (ServerSettings.MySQL_Password))).Mappings (m => m.FluentMappings.AddFromAssemblyOf<JMMService> ()).BuildSessionFactory (); " is 347.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,GetData,The length of the statement  "		if (ServerSettings.DatabaseType.Trim ().Equals (Constants.DatabaseType.SqlServer' StringComparison.InvariantCultureIgnoreCase)) " is 127.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,GetData,The length of the statement  "		else if (ServerSettings.DatabaseType.Trim ().Equals (Constants.DatabaseType.Sqlite' StringComparison.InvariantCultureIgnoreCase)) " is 129.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,GetData,The length of the statement  "		else if (ServerSettings.DatabaseType.Trim ().Equals (Constants.DatabaseType.MySQL' StringComparison.InvariantCultureIgnoreCase)) " is 128.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,CreateInitialRenameScript,The length of the statement  "	initialScript.Script = "// Sample Output: [Coalgirls]_Highschool_of_the_Dead_-_01_(1920x1080_Blu-ray_H264)_[90CC6DC1].mkv" + Environment.NewLine + "// Sub group name" + Environment.NewLine + "DO ADD '[%grp] '" + Environment.NewLine + "// Anime Name' use english name if it exists' otherwise use the Romaji name" + Environment.NewLine + "IF I(eng) DO ADD '%eng '" + Environment.NewLine + "IF I(ann);I(!eng) DO ADD '%ann '" + Environment.NewLine + "// Episode Number' don't use episode number for movies" + Environment.NewLine + "IF T(!Movie) DO ADD '- %enr'" + Environment.NewLine + "// If the file version is v2 or higher add it here" + Environment.NewLine + "IF F(!1) DO ADD 'v%ver'" + Environment.NewLine + "// Video Resolution" + Environment.NewLine + "DO ADD ' (%res'" + Environment.NewLine + "// Video Source (only if blu-ray or DVD)" + Environment.NewLine + "IF R(DVD)'R(Blu-ray) DO ADD ' %src'" + Environment.NewLine + "// Video Codec" + Environment.NewLine + "DO ADD ' %vid'" + Environment.NewLine + "// Video Bit Depth (only if 10bit)" + Environment.NewLine + "IF Z(10) DO ADD ' %bitbit'" + Environment.NewLine + "DO ADD ') '" + Environment.NewLine + "DO ADD '[%CRC]'" + Environment.NewLine + "" + Environment.NewLine + "// Replacement rules (cleanup)" + Environment.NewLine + "DO REPLACE ' ' '_' // replace spaces with underscores" + Environment.NewLine + "DO REPLACE 'H264/AVC' 'H264'" + Environment.NewLine + "DO REPLACE '0x0' ''" + Environment.NewLine + "DO REPLACE '__' '_'" + Environment.NewLine + "DO REPLACE '__' '_'" + Environment.NewLine + "" + Environment.NewLine + "// Replace all illegal file name characters" + Environment.NewLine + "DO REPLACE '<' '('" + Environment.NewLine + "DO REPLACE '>' ')'" + Environment.NewLine + "DO REPLACE ':' '-'" + Environment.NewLine + "DO REPLACE '" + ((Char)34).ToString () + "' '`'" + Environment.NewLine + "DO REPLACE '/' '_'" + Environment.NewLine + "DO REPLACE '/' '_'" + Environment.NewLine + "DO REPLACE '\\' '_'" + Environment.NewLine + "DO REPLACE '|' '_'" + Environment.NewLine + "DO REPLACE '?' '_'" + Environment.NewLine + "DO REPLACE '*' '_'" + Environment.NewLine; " is 2134.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,FixDuplicateTvDBLinks,The length of the statement  "		logger.Warn ("Deleting TvDB Link because of a duplicate: {0} ({1}) - {2}/{3}"' xref.AnimeID' msg' xref.TvDBID' xref.TvDBSeasonNumber); " is 134.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,FixDuplicateTraktLinks,The length of the statement  "		logger.Warn ("Deleting Trakt Link because of a duplicate: {0} ({1}) - {2}/{3}"' xref.AnimeID' msg' xref.TraktID' xref.TraktSeasonNumber); " is 137.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,MigrateTvDBLinks_V1_to_V2,The length of the statement  "				CrossRef_AniDB_TvDBV2 temp = repCrossRefTvDBNew.GetByTvDBID (xrefTvDB.TvDBID' 0' 1' xrefTvDB.AnimeID' (int)AniDBAPI.enEpisodeType.Special' 1); " is 142.
Long Statement,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,CreateContinueWatchingGroupFilter,The length of the statement  "				if (gfTemp.GroupFilterName.Equals (Constants.GroupFilterName.ContinueWatching' StringComparison.InvariantCultureIgnoreCase)) " is 124.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,GetConnectionString,The length of the statement  "	return string.Format ("Server={0};Database={1};User ID={2};Password={3}"' ServerSettings.MySQL_Hostname' ServerSettings.MySQL_SchemaName' ServerSettings.MySQL_Username' ServerSettings.MySQL_Password); " is 200.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,DatabaseAlreadyExists,The length of the statement  "		string connStr = string.Format ("Server={0};User ID={1};Password={2}"' ServerSettings.MySQL_Hostname' ServerSettings.MySQL_Username' ServerSettings.MySQL_Password); " is 164.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,DatabaseAlreadyExists,The length of the statement  "		string sql = string.Format ("SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '{0}'"' ServerSettings.MySQL_SchemaName); " is 142.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateDatabase,The length of the statement  "		string connStr = string.Format ("Server={0};User ID={1};Password={2}"' ServerSettings.MySQL_Hostname' ServerSettings.MySQL_Username' ServerSettings.MySQL_Password); " is 164.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateDatabase,The length of the statement  "		string sql = string.Format ("CREATE DATABASE {0} DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;"' ServerSettings.MySQL_SchemaName); " is 136.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_002,The length of the statement  "	cmds.Add ("CREATE TABLE `IgnoreAnime` ( " + " `IgnoreAnimeID` INT NOT NULL AUTO_INCREMENT ' " + " `JMMUserID` int NOT NULL' " + " `AnimeID` int NOT NULL' " + " `IgnoreType` int NOT NULL' " + " PRIMARY KEY (`IgnoreAnimeID`) ) ; "); " is 230.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_002,The length of the statement  "	cmds.Add ("ALTER TABLE `IgnoreAnime` ADD UNIQUE INDEX `UIX_IgnoreAnime_User_AnimeID` (`JMMUserID` ASC' `AnimeID` ASC' `IgnoreType` ASC) ;"); " is 140.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_003,The length of the statement  "	cmds.Add ("CREATE TABLE `Trakt_Friend` ( " + " `Trakt_FriendID` INT NOT NULL AUTO_INCREMENT ' " + " `Username` varchar(100) character set utf8 NOT NULL' " + " `FullName` varchar(100) character set utf8 NULL' " + " `Gender` varchar(100) character set utf8 NULL' " + " `Age` varchar(100) character set utf8 NULL' " + " `Location` varchar(100) character set utf8 NULL' " + " `About` text character set utf8 NULL' " + " `Joined` int NOT NULL' " + " `Avatar` text character set utf8 NULL' " + " `Url` text character set utf8 NULL' " + " `LastAvatarUpdate` datetime NOT NULL' " + " PRIMARY KEY (`Trakt_FriendID`) ) ; "); " is 614.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_007,The length of the statement  "	cmds.Add ("ALTER TABLE `CrossRef_AniDB_TvDB` ADD UNIQUE INDEX `UIX_CrossRef_AniDB_TvDB_Season` (`TvDBID` ASC' `TvDBSeasonNumber` ASC) ;"); " is 138.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_007,The length of the statement  "	cmds.Add ("ALTER TABLE `CrossRef_AniDB_Trakt` ADD UNIQUE INDEX `UIX_CrossRef_AniDB_Trakt_Season` (`TraktID` ASC' `TraktSeasonNumber` ASC) ;"); " is 142.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_009,The length of the statement  "	cmds.Add ("ALTER TABLE `CrossRef_File_Episode` CHANGE COLUMN `FileName` `FileName` text character set utf8 NOT NULL ;"); " is 120.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Category` CHANGE COLUMN `CategoryName` `CategoryName` text character set utf8 NOT NULL ;"); " is 121.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Category` CHANGE COLUMN `CategoryDescription` `CategoryDescription` text character set utf8 NOT NULL ;"); " is 135.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Anime_Relation` CHANGE COLUMN `RelationType` `RelationType` text character set utf8 NOT NULL ;"); " is 127.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_File` CHANGE COLUMN `File_Description` `File_Description` text character set utf8 NOT NULL ;"); " is 125.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_File` CHANGE COLUMN `Anime_GroupName` `Anime_GroupName` text character set utf8 NOT NULL ;"); " is 123.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_File` CHANGE COLUMN `Anime_GroupNameShort` `Anime_GroupNameShort` text character set utf8 NOT NULL ;"); " is 133.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_ReleaseGroup` CHANGE COLUMN `GroupNameShort` `GroupNameShort` text character set utf8 NOT NULL ;"); " is 129.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `CrossRef_File_Episode` CHANGE COLUMN `FileName` `FileName` text character set utf8 NOT NULL ;"); " is 120.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `ImportFolder` CHANGE COLUMN `ImportFolderLocation` `ImportFolderLocation` text character set utf8 NOT NULL ;"); " is 135.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `DuplicateFile` CHANGE COLUMN `FilePathFile1` `FilePathFile1` text character set utf8 NOT NULL ;"); " is 122.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `DuplicateFile` CHANGE COLUMN `FilePathFile2` `FilePathFile2` text character set utf8 NOT NULL ;"); " is 122.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `DuplicateFile` CHANGE COLUMN `FilePathFile2` `FilePathFile2` text character set utf8 NOT NULL ;"); " is 122.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("ALTER TABLE `DuplicateFile` CHANGE COLUMN `FilePathFile2` `FilePathFile2` text character set utf8 NOT NULL ;"); " is 122.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_012,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_MAL( " + " CrossRef_AniDB_MALID INT NOT NULL AUTO_INCREMENT' " + " AnimeID int NOT NULL' " + " MALID int NOT NULL' " + " MALTitle text' " + " CrossRefSource int NOT NULL' " + " PRIMARY KEY (`CrossRef_AniDB_MALID`) ) ; "); " is 260.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_013,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_MAL( " + " CrossRef_AniDB_MALID INT NOT NULL AUTO_INCREMENT' " + " AnimeID int NOT NULL' " + " MALID int NOT NULL' " + " MALTitle text' " + " StartEpisodeType int NOT NULL' " + " StartEpisodeNumber int NOT NULL' " + " CrossRefSource int NOT NULL' " + " PRIMARY KEY (`CrossRef_AniDB_MALID`) ) ; "); " is 336.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_013,The length of the statement  "	cmds.Add ("ALTER TABLE `CrossRef_AniDB_MAL` ADD UNIQUE INDEX `UIX_CrossRef_AniDB_MAL_Anime` (`MALID` ASC' `AnimeID` ASC' `StartEpisodeType` ASC' `StartEpisodeNumber` ASC) ;"); " is 175.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_014,The length of the statement  "	cmds.Add ("CREATE TABLE Playlist( " + " PlaylistID INT NOT NULL AUTO_INCREMENT' " + " PlaylistName text character set utf8' " + " PlaylistItems text character set utf8' " + " DefaultPlayOrder int NOT NULL' " + " PlayWatched int NOT NULL' " + " PlayUnwatched int NOT NULL' " + " PRIMARY KEY (`PlaylistID`) ) ; "); " is 312.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_016,The length of the statement  "	cmds.Add ("CREATE TABLE BookmarkedAnime( " + " BookmarkedAnimeID INT NOT NULL AUTO_INCREMENT' " + " AnimeID int NOT NULL' " + " Priority int NOT NULL' " + " Notes text character set utf8' " + " Downloading int NOT NULL' " + " PRIMARY KEY (`BookmarkedAnimeID`) ) ; "); " is 267.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_018,The length of the statement  "	cmds.Add ("CREATE TABLE `CrossRef_AniDB_TvDB_Episode` ( " + " `CrossRef_AniDB_TvDB_EpisodeID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `AniDBEpisodeID` int NOT NULL' " + " `TvDBEpisodeID` int NOT NULL' " + " PRIMARY KEY (`CrossRef_AniDB_TvDB_EpisodeID`) ) ; "); " is 285.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_018,The length of the statement  "	cmds.Add ("ALTER TABLE `CrossRef_AniDB_TvDB_Episode` ADD UNIQUE INDEX `UIX_CrossRef_AniDB_TvDB_Episode_AniDBEpisodeID` (`AniDBEpisodeID` ASC) ;"); " is 146.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_019,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_MylistStats` ( " + " `AniDB_MylistStatsID` INT NOT NULL AUTO_INCREMENT' " + " `Animes` int NOT NULL' " + " `Episodes` int NOT NULL' " + " `Files` int NOT NULL' " + " `SizeOfFiles` bigint NOT NULL' " + " `AddedAnimes` int NOT NULL' " + " `AddedEpisodes` int NOT NULL' " + " `AddedFiles` int NOT NULL' " + " `AddedGroups` int NOT NULL' " + " `LeechPct` int NOT NULL' " + " `GloryPct` int NOT NULL' " + " `ViewedPct` int NOT NULL' " + " `MylistPct` int NOT NULL' " + " `ViewedMylistPct` int NOT NULL' " + " `EpisodesViewed` int NOT NULL' " + " `Votes` int NOT NULL' " + " `Reviews` int NOT NULL' " + " `ViewiedLength` int NOT NULL' " + " PRIMARY KEY (`AniDB_MylistStatsID`) ) ; "); " is 709.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_020,The length of the statement  "	cmds.Add ("CREATE TABLE `FileFfdshowPreset` ( " + " `FileFfdshowPresetID` INT NOT NULL AUTO_INCREMENT' " + " `Hash` varchar(50) NOT NULL' " + " `FileSize` bigint NOT NULL' " + " `Preset` text character set utf8' " + " PRIMARY KEY (`FileFfdshowPresetID`) ) ; "); " is 261.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_020,The length of the statement  "	cmds.Add ("ALTER TABLE `FileFfdshowPreset` ADD UNIQUE INDEX `UIX_FileFfdshowPreset_Hash` (`Hash` ASC' `FileSize` ASC) ;"); " is 122.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_021,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Anime` CHANGE COLUMN `DisableExternalLinksFlag` `DisableExternalLinksFlag` int NOT NULL ;"); " is 122.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_023,The length of the statement  "	cmds.Add ("CREATE TABLE RenameScript( " + " RenameScriptID INT NOT NULL AUTO_INCREMENT' " + " ScriptName text character set utf8' " + " Script text character set utf8' " + " IsEnabledOnImport int NOT NULL' " + " PRIMARY KEY (`RenameScriptID`) ) ; "); " is 250.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_026,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Recommendation( " + " AniDB_RecommendationID INT NOT NULL AUTO_INCREMENT' " + " AnimeID int NOT NULL' " + " UserID int NOT NULL' " + " RecommendationType int NOT NULL' " + " RecommendationText text character set utf8' " + " PRIMARY KEY (`AniDB_RecommendationID`) ) ; "); " is 300.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_026,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Recommendation` ADD UNIQUE INDEX `UIX_AniDB_Recommendation` (`AnimeID` ASC' `UserID` ASC) ;"); " is 124.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_027,The length of the statement  "	cmds.Add ("update CrossRef_File_Episode SET CrossRefSource=1 WHERE Hash IN (Select Hash from ANIDB_File) AND CrossRefSource=2 ;"); " is 130.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_028,The length of the statement  "	cmds.Add ("CREATE TABLE LogMessage( " + " LogMessageID INT NOT NULL AUTO_INCREMENT' " + " LogType text character set utf8' " + " LogContent text character set utf8' " + " LogDate datetime NOT NULL' " + " PRIMARY KEY (`LogMessageID`) ) ; "); " is 240.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_029,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_TvDBV2( " + " CrossRef_AniDB_TvDBV2ID INT NOT NULL AUTO_INCREMENT' " + " AnimeID int NOT NULL' " + " AniDBStartEpisodeType int NOT NULL' " + " AniDBStartEpisodeNumber int NOT NULL' " + " TvDBID int NOT NULL' " + " TvDBSeasonNumber int NOT NULL' " + " TvDBStartEpisodeNumber int NOT NULL' " + " TvDBTitle text character set utf8' " + " CrossRefSource int NOT NULL' " + " PRIMARY KEY (`CrossRef_AniDB_TvDBV2ID`) ) ; "); " is 456.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_029,The length of the statement  "	cmds.Add ("ALTER TABLE `CrossRef_AniDB_TvDBV2` ADD UNIQUE INDEX `UIX_CrossRef_AniDB_TvDBV2` (`AnimeID` ASC' `TvDBID` ASC' `TvDBSeasonNumber` ASC' `TvDBStartEpisodeNumber` ASC' `AniDBStartEpisodeType` ASC' `AniDBStartEpisodeNumber` ASC) ;"); " is 240.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_Fix,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_MAL( " + " CrossRef_AniDB_MALID INT NOT NULL AUTO_INCREMENT' " + " AnimeID int NOT NULL' " + " MALID int NOT NULL' " + " MALTitle text' " + " StartEpisodeType int NOT NULL' " + " StartEpisodeNumber int NOT NULL' " + " CrossRefSource int NOT NULL' " + " PRIMARY KEY (`CrossRef_AniDB_MALID`) ) ; "); " is 336.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,UpdateSchema_Fix,The length of the statement  "	cmds.Add ("ALTER TABLE `CrossRef_AniDB_MAL` ADD UNIQUE INDEX `UIX_CrossRef_AniDB_MAL_Anime` (`MALID` ASC' `AnimeID` ASC' `StartEpisodeType` ASC' `StartEpisodeNumber` ASC) ;"); " is 175.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateInitialSchema,The length of the statement  "	//string sql = string.Format("select count(VERSIONS) from INFORMATION_SCHEMA where TABLE_SCHEMA = '{0}' and TABLE_NAME = 'VERSIONS' group by TABLE_NAME"' " is 153.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateInitialSchema,The length of the statement  "	string sql = string.Format ("select count(*) from information_schema.tables where table_schema='{0}' and table_name = 'VERSIONS'"' ServerSettings.MySQL_SchemaName); " is 164.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_Versions,The length of the statement  "	cmds.Add ("CREATE TABLE `Versions` ( " + " `VersionsID` INT NOT NULL AUTO_INCREMENT ' " + " `VersionType` VARCHAR(100) NOT NULL ' " + " `VersionValue` VARCHAR(100) NOT NULL '  " + " PRIMARY KEY (`VersionsID`) ) ; "); " is 216.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Anime` ( " + " `AniDB_AnimeID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` INT NOT NULL' " + " `EpisodeCount` INT NOT NULL' " + " `AirDate` datetime NULL' " + " `EndDate` datetime NULL' " + " `URL` text character set utf8 NULL' " + " `Picname` text character set utf8 NULL' " + " `BeginYear` INT NOT NULL' " + " `EndYear` INT NOT NULL' " + " `AnimeType` INT NOT NULL' " + " `MainTitle` varchar(500) character set utf8 NOT NULL' " + " `AllTitles` varchar(1500) character set utf8 NOT NULL' " + " `AllCategories` text character set utf8 NOT NULL' " + " `AllTags` text character set utf8 NOT NULL' " + " `Description` text character set utf8 NOT NULL' " + " `EpisodeCountNormal` INT NOT NULL' " + " `EpisodeCountSpecial` INT NOT NULL' " + " `Rating` INT NOT NULL' " + " `VoteCount` INT NOT NULL' " + " `TempRating` INT NOT NULL' " + " `TempVoteCount` INT NOT NULL' " + " `AvgReviewRating` INT NOT NULL' " + " `ReviewCount` int NOT NULL' " + " `DateTimeUpdated` datetime NOT NULL' " + " `DateTimeDescUpdated` datetime NOT NULL' " + " `ImageEnabled` int NOT NULL' " + " `AwardList` text character set utf8 NOT NULL' " + " `Restricted` int NOT NULL' " + " `AnimePlanetID` int NULL' " + " `ANNID` int NULL' " + " `AllCinemaID` int NULL' " + " `AnimeNfo` int NULL' " + " `LatestEpisodeNumber` int NULL' " + " PRIMARY KEY (`AniDB_AnimeID`) ) ; "); " is 1370.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Category,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Anime_Category` ( " + " `AniDB_Anime_CategoryID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `CategoryID` int NOT NULL' " + " `Weighting` int NOT NULL' " + " PRIMARY KEY (`AniDB_Anime_CategoryID`) ) ; "); " is 256.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Category,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Anime_Category` ADD UNIQUE INDEX `UIX_AniDB_Anime_Category_AnimeID_CategoryID` (`AnimeID` ASC' `CategoryID` ASC) ;"); " is 147.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Character,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Character ( " + " `AniDB_Anime_CharacterID`  INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `CharID` int NOT NULL' " + " `CharType` varchar(100) NOT NULL' " + " `EpisodeListRaw` text NULL' " + " PRIMARY KEY (`AniDB_Anime_CharacterID`) ) ; "); " is 296.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Character,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Anime_Character` ADD UNIQUE INDEX `UIX_AniDB_Anime_Character_AnimeID_CharID` (`AnimeID` ASC' `CharID` ASC) ;"); " is 141.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Relation,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Anime_Relation` ( " + " `AniDB_Anime_RelationID`  INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `RelatedAnimeID` int NOT NULL' " + " `RelationType` varchar(100) NOT NULL' " + " PRIMARY KEY (`AniDB_Anime_RelationID`) ) ; "); " is 273.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Relation,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Anime_Relation` ADD UNIQUE INDEX `UIX_AniDB_Anime_Relation_AnimeID_RelatedAnimeID` (`AnimeID` ASC' `RelatedAnimeID` ASC) ;"); " is 155.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Review,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Anime_Review` ( " + " `AniDB_Anime_ReviewID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `ReviewID` int NOT NULL' " + " PRIMARY KEY (`AniDB_Anime_ReviewID`) ) ; "); " is 216.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Review,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Anime_Review` ADD UNIQUE INDEX `UIX_AniDB_Anime_Review_AnimeID_ReviewID` (`AnimeID` ASC' `ReviewID` ASC) ;"); " is 139.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Similar,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Anime_Similar` ( " + " `AniDB_Anime_SimilarID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `SimilarAnimeID` int NOT NULL' " + " `Approval` int NOT NULL' " + " `Total` int NOT NULL' " + " PRIMARY KEY (`AniDB_Anime_SimilarID`) ) ; "); " is 284.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Similar,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Anime_Similar` ADD UNIQUE INDEX `UIX_AniDB_Anime_Similar_AnimeID_SimilarAnimeID` (`AnimeID` ASC' `SimilarAnimeID` ASC) ;"); " is 153.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Tag,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Anime_Tag` ( " + " `AniDB_Anime_TagID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `TagID` int NOT NULL' " + " `Approval` int NOT NULL' " + " PRIMARY KEY (`AniDB_Anime_TagID`) ) ; "); " is 235.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Tag,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Anime_Tag` ADD UNIQUE INDEX `UIX_AniDB_Anime_Tag_AnimeID_TagID` (`AnimeID` ASC' `TagID` ASC) ;"); " is 127.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_Title,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Anime_Title` ( " + " `AniDB_Anime_TitleID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `TitleType` varchar(50) character set utf8 NOT NULL' " + " `Language` varchar(50) character set utf8 NOT NULL' " + " `Title` varchar(500) character set utf8 NOT NULL' " + " PRIMARY KEY (`AniDB_Anime_TitleID`) ) ; "); " is 355.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Category,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Category` ( " + " `AniDB_CategoryID` INT NOT NULL AUTO_INCREMENT' " + " `CategoryID` int NOT NULL' " + " `ParentID` int NOT NULL' " + " `IsHentai` int NOT NULL' " + " `CategoryName` varchar(50) NOT NULL' " + " `CategoryDescription` text NOT NULL' " + " PRIMARY KEY (`AniDB_CategoryID`) ) ; "); " is 324.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Character,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Character` ( " + " `AniDB_CharacterID` INT NOT NULL AUTO_INCREMENT' " + " `CharID` int NOT NULL' " + " `CharName` varchar(200) character set utf8 NOT NULL' " + " `PicName` varchar(100) NOT NULL' " + " `CharKanjiName` text character set utf8 NOT NULL' " + " `CharDescription` text character set utf8 NOT NULL' " + " `CreatorListRaw` text NOT NULL' " + " PRIMARY KEY (`AniDB_CharacterID`) ) ; "); " is 425.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Character_Seiyuu,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Character_Seiyuu` ( " + " `AniDB_Character_SeiyuuID` INT NOT NULL AUTO_INCREMENT' " + " `CharID` int NOT NULL' " + " `SeiyuuID` int NOT NULL' " + " PRIMARY KEY (`AniDB_Character_SeiyuuID`) ) ; "); " is 227.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Character_Seiyuu,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Character_Seiyuu` ADD UNIQUE INDEX `UIX_AniDB_Character_Seiyuu_CharID_SeiyuuID` (`CharID` ASC' `SeiyuuID` ASC) ;"); " is 145.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Seiyuu,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Seiyuu` ( " + " `AniDB_SeiyuuID` INT NOT NULL AUTO_INCREMENT' " + " `SeiyuuID` int NOT NULL' " + " `SeiyuuName` varchar(200) character set utf8 NOT NULL' " + " `PicName` varchar(100) NOT NULL' " + " PRIMARY KEY (`AniDB_SeiyuuID`) ) ; "); " is 268.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Episode` ( " + " `AniDB_EpisodeID` INT NOT NULL AUTO_INCREMENT' " + " `EpisodeID` int NOT NULL' " + " `AnimeID` int NOT NULL' " + " `LengthSeconds` int NOT NULL' " + " `Rating` varchar(200) NOT NULL' " + " `Votes` varchar(200) NOT NULL' " + " `EpisodeNumber` int NOT NULL' " + " `EpisodeType` int NOT NULL' " + " `RomajiName` varchar(200) character set utf8 NOT NULL' " + " `EnglishName` varchar(200) character set utf8 NOT NULL' " + " `AirDate` int NOT NULL' " + " `DateTimeUpdated` datetime NOT NULL' " + " PRIMARY KEY (`AniDB_EpisodeID`) ) ; "); " is 579.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_File,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_File`( " + " `AniDB_FileID` INT NOT NULL AUTO_INCREMENT' " + " `FileID` int NOT NULL' " + " `Hash` varchar(50) NOT NULL' " + " `AnimeID` int NOT NULL' " + " `GroupID` int NOT NULL' " + " `File_Source` varchar(200) NOT NULL' " + " `File_AudioCodec` varchar(200) NOT NULL' " + " `File_VideoCodec` varchar(200) NOT NULL' " + " `File_VideoResolution` varchar(200) NOT NULL' " + " `File_FileExtension` varchar(200) NOT NULL' " + " `File_LengthSeconds` int NOT NULL' " + " `File_Description` varchar(500) NOT NULL' " + " `File_ReleaseDate` int NOT NULL' " + " `Anime_GroupName` varchar(200) character set utf8 NOT NULL' " + " `Anime_GroupNameShort` varchar(50) character set utf8 NOT NULL' " + " `Episode_Rating` int NOT NULL' " + " `Episode_Votes` int NOT NULL' " + " `DateTimeUpdated` datetime NOT NULL' " + " `IsWatched` int NOT NULL' " + " `WatchedDate` datetime NULL' " + " `CRC` varchar(200) NOT NULL' " + " `MD5` varchar(200) NOT NULL' " + " `SHA1` varchar(200) NOT NULL' " + " `FileName` varchar(500) character set utf8 NOT NULL' " + " `FileSize` bigint NOT NULL' " + " PRIMARY KEY (`AniDB_FileID`) ) ; "); " is 1139.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_GroupStatus,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_GroupStatus` ( " + " `AniDB_GroupStatusID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `GroupID` int NOT NULL' " + " `GroupName` varchar(200) character set utf8 NOT NULL' " + " `CompletionState` int NOT NULL' " + " `LastEpisodeNumber` int NOT NULL' " + " `Rating` int NOT NULL' " + " `Votes` int NOT NULL' " + " `EpisodeRange` text NOT NULL' " + " PRIMARY KEY (`AniDB_GroupStatusID`) ) ; "); " is 443.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_GroupStatus,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_GroupStatus` ADD UNIQUE INDEX `UIX_AniDB_GroupStatus_AnimeID_GroupID` (`AnimeID` ASC' `GroupID` ASC) ;"); " is 135.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_ReleaseGroup,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_ReleaseGroup` ( " + " `AniDB_ReleaseGroupID` INT NOT NULL AUTO_INCREMENT' " + " `GroupID` int NOT NULL' " + " `Rating` int NOT NULL' " + " `Votes` int NOT NULL' " + " `AnimeCount` int NOT NULL' " + " `FileCount` int NOT NULL' " + " `GroupName` varchar(200) character set utf8 NOT NULL' " + " `GroupNameShort` varchar(50) character set utf8 NOT NULL' " + " `IRCChannel` varchar(200) character set utf8 NOT NULL' " + " `IRCServer` varchar(200) character set utf8 NOT NULL' " + " `URL` varchar(200) character set utf8 NOT NULL' " + " `Picname` varchar(50) NOT NULL' " + " PRIMARY KEY (`AniDB_ReleaseGroupID`) ) ; "); " is 644.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Review,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Review` ( " + " `AniDB_ReviewID` INT NOT NULL AUTO_INCREMENT' " + " `ReviewID` int NOT NULL' " + " `AuthorID` int NOT NULL' " + " `RatingAnimation` int NOT NULL' " + " `RatingSound` int NOT NULL' " + " `RatingStory` int NOT NULL' " + " `RatingCharacter` int NOT NULL' " + " `RatingValue` int NOT NULL' " + " `RatingEnjoyment` int NOT NULL' " + " `ReviewText` text character set utf8 NOT NULL' " + " PRIMARY KEY (`AniDB_ReviewID`) ) ; "); " is 468.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Tag,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Tag` ( " + " `AniDB_TagID` INT NOT NULL AUTO_INCREMENT' " + " `TagID` int NOT NULL' " + " `Spoiler` int NOT NULL' " + " `LocalSpoiler` int NOT NULL' " + " `GlobalSpoiler` int NOT NULL' " + " `TagName` varchar(150) character set utf8 NOT NULL' " + " `TagCount` int NOT NULL' " + " `TagDescription` text character set utf8 NOT NULL' " + " PRIMARY KEY (`AniDB_TagID`) ) ; "); " is 403.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AnimeEpisode,The length of the statement  "	cmds.Add ("CREATE TABLE `AnimeEpisode` ( " + " `AnimeEpisodeID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeSeriesID` int NOT NULL' " + " `AniDB_EpisodeID` int NOT NULL' " + " `DateTimeUpdated` datetime NOT NULL' " + " `DateTimeCreated` datetime NOT NULL' " + " PRIMARY KEY (`AnimeEpisodeID`) ) ; "); " is 297.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AnimeEpisode_User,The length of the statement  "	cmds.Add ("CREATE TABLE `AnimeEpisode_User` ( " + " `AnimeEpisode_UserID` INT NOT NULL AUTO_INCREMENT' " + " `JMMUserID` int NOT NULL' " + " `AnimeEpisodeID` int NOT NULL' " + " `AnimeSeriesID` int NOT NULL' " + // we only have this column to improve performance " is 262.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AnimeEpisode_User,The length of the statement  "	" `WatchedDate` datetime NULL' " + " `PlayedCount` int NOT NULL' " + " `WatchedCount` int NOT NULL' " + " `StoppedCount` int NOT NULL' " + " PRIMARY KEY (`AnimeEpisode_UserID`) ) ; "); " is 184.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AnimeEpisode_User,The length of the statement  "	cmds.Add ("ALTER TABLE `AnimeEpisode_User` ADD UNIQUE INDEX `UIX_AnimeEpisode_User_User_EpisodeID` (`JMMUserID` ASC' `AnimeEpisodeID` ASC) ;"); " is 143.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AnimeEpisode_User,The length of the statement  "	cmds.Add ("ALTER TABLE `AnimeEpisode_User` ADD INDEX `IX_AnimeEpisode_User_User_AnimeSeriesID` (`JMMUserID` ASC' `AnimeSeriesID` ASC) ;"); " is 138.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_VideoLocal,The length of the statement  "	cmds.Add ("CREATE TABLE `VideoLocal` ( " + " `VideoLocalID` INT NOT NULL AUTO_INCREMENT' " + " `FilePath` text character set utf8 NOT NULL' " + " `ImportFolderID` int NOT NULL' " + " `Hash` varchar(50) NOT NULL' " + " `CRC32` varchar(50) NULL' " + " `MD5` varchar(50) NULL' " + " `SHA1` varchar(50) NULL' " + " `HashSource` int NOT NULL' " + " `FileSize` bigint NOT NULL' " + " `IsIgnored` int NOT NULL' " + " `DateTimeUpdated` datetime NOT NULL' " + " PRIMARY KEY (`VideoLocalID`) ) ; "); " is 489.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_VideoLocal_User,The length of the statement  "	cmds.Add ("CREATE TABLE VideoLocal_User( " + " `VideoLocal_UserID` INT NOT NULL AUTO_INCREMENT' " + " `JMMUserID` int NOT NULL' " + " `VideoLocalID` int NOT NULL' " + " `WatchedDate` datetime NOT NULL' " + " PRIMARY KEY (`VideoLocal_UserID`) ) ; "); " is 249.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_VideoLocal_User,The length of the statement  "	cmds.Add ("ALTER TABLE `VideoLocal_User` ADD UNIQUE INDEX `UIX_VideoLocal_User_User_VideoLocalID` (`JMMUserID` ASC' `VideoLocalID` ASC) ;"); " is 140.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AnimeGroup,The length of the statement  "	cmds.Add ("CREATE TABLE `AnimeGroup` ( " + " `AnimeGroupID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeGroupParentID` int NULL' " + " `GroupName` varchar(200) character set utf8 NOT NULL' " + " `Description` text character set utf8 NULL' " + " `IsManuallyNamed` int NOT NULL' " + " `DateTimeUpdated` datetime NOT NULL' " + " `DateTimeCreated` datetime NOT NULL' " + " `SortName` varchar(200) character set utf8 NOT NULL' " + " `MissingEpisodeCount` int NOT NULL' " + " `MissingEpisodeCountGroups` int NOT NULL' " + " `OverrideDescription` int NOT NULL' " + " `EpisodeAddedDate` datetime NULL' " + " PRIMARY KEY (`AnimeGroupID`) ) ; "); " is 633.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AnimeGroup_User,The length of the statement  "	cmds.Add ("CREATE TABLE `AnimeGroup_User` ( " + " `AnimeGroup_UserID` INT NOT NULL AUTO_INCREMENT' " + " `JMMUserID` int NOT NULL' " + " `AnimeGroupID` int NOT NULL' " + " `IsFave` int NOT NULL' " + " `UnwatchedEpisodeCount` int NOT NULL' " + " `WatchedEpisodeCount` int NOT NULL' " + " `WatchedDate` datetime NULL' " + " `PlayedCount` int NOT NULL' " + " `WatchedCount` int NOT NULL' " + " `StoppedCount` int NOT NULL' " + " PRIMARY KEY (`AnimeGroup_UserID`) ) ; "); " is 467.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AnimeGroup_User,The length of the statement  "	cmds.Add ("ALTER TABLE `AnimeGroup_User` ADD UNIQUE INDEX `UIX_AnimeGroup_User_User_GroupID` (`JMMUserID` ASC' `AnimeGroupID` ASC) ;"); " is 135.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AnimeSeries,The length of the statement  "	cmds.Add ("CREATE TABLE `AnimeSeries` ( " + " `AnimeSeriesID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeGroupID` int NOT NULL' " + " `AniDB_ID` int NOT NULL' " + " `DateTimeUpdated` datetime NOT NULL' " + " `DateTimeCreated` datetime NOT NULL' " + " `DefaultAudioLanguage` varchar(50) NULL' " + " `DefaultSubtitleLanguage` varchar(50) NULL' " + " `MissingEpisodeCount` int NOT NULL' " + " `MissingEpisodeCountGroups` int NOT NULL' " + " `LatestLocalEpisodeNumber` int NOT NULL' " + " `EpisodeAddedDate` datetime NULL' " + " PRIMARY KEY (`AnimeSeriesID`) ) ; "); " is 560.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AnimeSeries_User,The length of the statement  "	cmds.Add ("CREATE TABLE `AnimeSeries_User` ( " + " `AnimeSeries_UserID` INT NOT NULL AUTO_INCREMENT' " + " `JMMUserID` int NOT NULL' " + " `AnimeSeriesID` int NOT NULL' " + " `UnwatchedEpisodeCount` int NOT NULL' " + " `WatchedEpisodeCount` int NOT NULL' " + " `WatchedDate` datetime NULL' " + " `PlayedCount` int NOT NULL' " + " `WatchedCount` int NOT NULL' " + " `StoppedCount` int NOT NULL' " + " PRIMARY KEY (`AnimeSeries_UserID`) ) ; "); " is 442.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AnimeSeries_User,The length of the statement  "	cmds.Add ("ALTER TABLE `AnimeSeries_User` ADD UNIQUE INDEX `UIX_AnimeSeries_User_User_SeriesID` (`JMMUserID` ASC' `AnimeSeriesID` ASC) ;"); " is 139.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_CommandRequest,The length of the statement  "	cmds.Add ("CREATE TABLE `CommandRequest` ( " + " `CommandRequestID` INT NOT NULL AUTO_INCREMENT' " + " `Priority` int NOT NULL' " + " `CommandType` int NOT NULL' " + " `CommandID` varchar(250) NOT NULL' " + " `CommandDetails` text character set utf8 NOT NULL' " + " `DateTimeUpdated` datetime NOT NULL' " + " PRIMARY KEY (`CommandRequestID`) ) ; "); " is 349.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_CrossRef_AniDB_TvDB,The length of the statement  "	cmds.Add ("CREATE TABLE `CrossRef_AniDB_TvDB` ( " + " `CrossRef_AniDB_TvDBID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `TvDBID` int NOT NULL' " + " `TvDBSeasonNumber` int NOT NULL' " + " `CrossRefSource` int NOT NULL' " + " PRIMARY KEY (`CrossRef_AniDB_TvDBID`) ) ; "); " is 293.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_CrossRef_AniDB_Other,The length of the statement  "	cmds.Add ("CREATE TABLE `CrossRef_AniDB_Other` ( " + " `CrossRef_AniDB_OtherID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `CrossRefID` varchar(100) character set utf8 NOT NULL' " + " `CrossRefSource` int NOT NULL' " + " `CrossRefType` int NOT NULL' " + " PRIMARY KEY (`CrossRef_AniDB_OtherID`) ) ; "); " is 324.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_CrossRef_AniDB_Other,The length of the statement  "	cmds.Add ("ALTER TABLE `CrossRef_AniDB_Other` ADD UNIQUE INDEX `UIX_CrossRef_AniDB_Other` (`AnimeID` ASC' `CrossRefID` ASC' `CrossRefSource` ASC' `CrossRefType` ASC) ;"); " is 170.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_CrossRef_File_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE `CrossRef_File_Episode` ( " + " `CrossRef_File_EpisodeID` INT NOT NULL AUTO_INCREMENT' " + " `Hash` varchar(50) NULL' " + " `FileName` varchar(500) character set utf8 NOT NULL' " + " `FileSize` bigint NOT NULL' " + " `CrossRefSource` int NOT NULL' " + " `AnimeID` int NOT NULL' " + " `EpisodeID` int NOT NULL' " + " `Percentage` int NOT NULL' " + " `EpisodeOrder` int NOT NULL' " + " PRIMARY KEY (`CrossRef_File_EpisodeID`) ) ; "); " is 455.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_CrossRef_File_Episode,The length of the statement  "	cmds.Add ("ALTER TABLE `CrossRef_File_Episode` ADD UNIQUE INDEX `UIX_CrossRef_File_Episode_Hash_EpisodeID` (`Hash` ASC' `EpisodeID` ASC) ;"); " is 141.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_CrossRef_Languages_AniDB_File,The length of the statement  "	cmds.Add ("CREATE TABLE `CrossRef_Languages_AniDB_File` ( " + " `CrossRef_Languages_AniDB_FileID` INT NOT NULL AUTO_INCREMENT' " + " `FileID` int NOT NULL' " + " `LanguageID` int NOT NULL' " + " PRIMARY KEY (`CrossRef_Languages_AniDB_FileID`) ) ; "); " is 250.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_CrossRef_Subtitles_AniDB_File,The length of the statement  "	cmds.Add ("CREATE TABLE `CrossRef_Subtitles_AniDB_File` ( " + " `CrossRef_Subtitles_AniDB_FileID` INT NOT NULL AUTO_INCREMENT' " + " `FileID` int NOT NULL' " + " `LanguageID` int NOT NULL' " + " PRIMARY KEY (`CrossRef_Subtitles_AniDB_FileID`) ) ; "); " is 250.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_FileNameHash,The length of the statement  "	cmds.Add ("CREATE TABLE `FileNameHash` ( " + " `FileNameHashID` INT NOT NULL AUTO_INCREMENT' " + " `FileName` varchar(500) character set utf8 NOT NULL' " + " `FileSize` bigint NOT NULL' " + " `Hash` varchar(50) NOT NULL' " + " `DateTimeUpdated` datetime NOT NULL' " + " PRIMARY KEY (`FileNameHashID`) ) ; "); " is 308.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_FileNameHash,The length of the statement  "	//cmds.Add("ALTER TABLE `FileNameHash` ADD UNIQUE INDEX `UIX_FileNameHash` (`FileName` ASC' `FileSize` ASC' `Hash` ASC) ;"); " is 124.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_Language,The length of the statement  "	cmds.Add ("CREATE TABLE `Language` ( " + " `LanguageID` INT NOT NULL AUTO_INCREMENT' " + " `LanguageName` varchar(100) NOT NULL' " + " PRIMARY KEY (`LanguageID`) ) ; "); " is 169.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_ImportFolder,The length of the statement  "	cmds.Add ("CREATE TABLE `ImportFolder` ( " + " `ImportFolderID` INT NOT NULL AUTO_INCREMENT' " + " `ImportFolderType` int NOT NULL' " + " `ImportFolderName` varchar(500) character set utf8 NOT NULL' " + " `ImportFolderLocation` varchar(500) character set utf8 NOT NULL' " + " `IsDropSource` int NOT NULL' " + " `IsDropDestination` int NOT NULL' " + " PRIMARY KEY (`ImportFolderID`) ) ; "); " is 389.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_ScheduledUpdate,The length of the statement  "	cmds.Add ("CREATE TABLE `ScheduledUpdate` ( " + " `ScheduledUpdateID` INT NOT NULL AUTO_INCREMENT' " + " `UpdateType` int NOT NULL' " + " `LastUpdate` datetime NOT NULL' " + " `UpdateDetails` text character set utf8 NOT NULL' " + " PRIMARY KEY (`ScheduledUpdateID`) ) ; "); " is 273.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_VideoInfo,The length of the statement  "	cmds.Add ("CREATE TABLE `VideoInfo` ( " + " `VideoInfoID` INT NOT NULL AUTO_INCREMENT' " + " `Hash` varchar(50) NOT NULL' " + " `FileSize` bigint NOT NULL' " + " `FileName` text character set utf8 NOT NULL' " + " `DateTimeUpdated` datetime NOT NULL' " + " `VideoCodec` varchar(100) NOT NULL' " + " `VideoBitrate` varchar(100) NOT NULL' " + " `VideoFrameRate` varchar(100) NOT NULL' " + " `VideoResolution` varchar(100) NOT NULL' " + " `AudioCodec` varchar(100) NOT NULL' " + " `AudioBitrate` varchar(100) NOT NULL' " + " `Duration` bigint NOT NULL' " + " PRIMARY KEY (`VideoInfoID`) ) ; "); " is 590.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_DuplicateFile,The length of the statement  "	cmds.Add ("CREATE TABLE `DuplicateFile` ( " + " `DuplicateFileID` INT NOT NULL AUTO_INCREMENT' " + " `FilePathFile1` varchar(500) character set utf8 NOT NULL' " + " `FilePathFile2` varchar(500) character set utf8 NOT NULL' " + " `ImportFolderIDFile1` int NOT NULL' " + " `ImportFolderIDFile2` int NOT NULL' " + " `Hash` varchar(50) NOT NULL' " + " `DateTimeUpdated` datetime NOT NULL' " + " PRIMARY KEY (`DuplicateFileID`) ) ; "); " is 430.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_GroupFilter,The length of the statement  "	cmds.Add ("CREATE TABLE `GroupFilter` ( " + " `GroupFilterID` INT NOT NULL AUTO_INCREMENT' " + " `GroupFilterName` varchar(500) character set utf8 NOT NULL' " + " `ApplyToSeries` int NOT NULL' " + " `BaseCondition` int NOT NULL' " + " `SortingCriteria` text character set utf8' " + " PRIMARY KEY (`GroupFilterID`) ) ; "); " is 321.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_GroupFilterCondition,The length of the statement  "	cmds.Add ("CREATE TABLE `GroupFilterCondition` ( " + " `GroupFilterConditionID` INT NOT NULL AUTO_INCREMENT' " + " `GroupFilterID` int NOT NULL' " + " `ConditionType` int NOT NULL' " + " `ConditionOperator` int NOT NULL' " + " `ConditionParameter` text character set utf8 NOT NULL' " + " PRIMARY KEY (`GroupFilterConditionID`) ) ; "); " is 334.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Vote,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Vote` ( " + " `AniDB_VoteID` INT NOT NULL AUTO_INCREMENT' " + " `EntityID` int NOT NULL' " + " `VoteValue` int NOT NULL' " + " `VoteType` int NOT NULL' " + " PRIMARY KEY (`AniDB_VoteID`) ) ; "); " is 225.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_TvDB_ImageFanart,The length of the statement  "	cmds.Add ("CREATE TABLE `TvDB_ImageFanart` ( " + " `TvDB_ImageFanartID` INT NOT NULL AUTO_INCREMENT' " + " `Id` int NOT NULL' " + " `SeriesID` int NOT NULL' " + " `BannerPath` varchar(200) character set utf8'  " + " `BannerType` varchar(200) character set utf8'  " + " `BannerType2` varchar(200) character set utf8'  " + " `Colors` varchar(200) character set utf8'  " + " `Language` varchar(200) character set utf8'  " + " `ThumbnailPath` varchar(200) character set utf8'  " + " `VignettePath` varchar(200) character set utf8'  " + " `Enabled` int NOT NULL' " + " `Chosen` int NOT NULL' " + " PRIMARY KEY (`TvDB_ImageFanartID`) ) ; "); " is 635.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_TvDB_ImageWideBanner,The length of the statement  "	cmds.Add ("CREATE TABLE `TvDB_ImageWideBanner` ( " + " `TvDB_ImageWideBannerID` INT NOT NULL AUTO_INCREMENT' " + " `Id` int NOT NULL' " + " `SeriesID` int NOT NULL' " + " `BannerPath` varchar(200) character set utf8'  " + " `BannerType` varchar(200) character set utf8'  " + " `BannerType2` varchar(200) character set utf8'  " + " `Language`varchar(200) character set utf8'  " + " `Enabled` int NOT NULL' " + " `SeasonNumber` int' " + " PRIMARY KEY (`TvDB_ImageWideBannerID`) ) ; "); " is 483.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_TvDB_ImagePoster,The length of the statement  "	cmds.Add ("CREATE TABLE `TvDB_ImagePoster` ( " + " `TvDB_ImagePosterID` INT NOT NULL AUTO_INCREMENT' " + " `Id` int NOT NULL' " + " `SeriesID` int NOT NULL' " + " `BannerPath` varchar(200) character set utf8'  " + " `BannerType` varchar(200) character set utf8'  " + " `BannerType2` varchar(200) character set utf8'  " + " `Language` varchar(200) character set utf8'  " + " `Enabled` int NOT NULL' " + " `SeasonNumber` int' " + " PRIMARY KEY (`TvDB_ImagePosterID`) ) ; "); " is 472.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_TvDB_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE `TvDB_Episode` ( " + " `TvDB_EpisodeID` INT NOT NULL AUTO_INCREMENT' " + " `Id` int NOT NULL' " + " `SeriesID` int NOT NULL' " + " `SeasonID` int NOT NULL' " + " `SeasonNumber` int NOT NULL' " + " `EpisodeNumber` int NOT NULL' " + " `EpisodeName` varchar(200) character set utf8' " + " `Overview` text character set utf8' " + " `Filename` varchar(500) character set utf8' " + " `EpImgFlag` int NOT NULL' " + " `FirstAired` varchar(100) character set utf8' " + " `AbsoluteNumber` int' " + " `AirsAfterSeason` int' " + " `AirsBeforeEpisode` int' " + " `AirsBeforeSeason` int' " + " PRIMARY KEY (`TvDB_EpisodeID`) ) ; "); " is 642.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_TvDB_Series,The length of the statement  "	cmds.Add ("CREATE TABLE `TvDB_Series` ( " + " `TvDB_SeriesID` INT NOT NULL AUTO_INCREMENT' " + " `SeriesID` int NOT NULL' " + " `Overview` text character set utf8' " + " `SeriesName` varchar(250) character set utf8' " + " `Status` varchar(100)' " + " `Banner` varchar(100)' " + " `Fanart` varchar(100)' " + " `Poster` varchar(100)' " + " `Lastupdated` varchar(100)' " + " PRIMARY KEY (`TvDB_SeriesID`) ) ; "); " is 409.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_DefaultImage,The length of the statement  "	cmds.Add ("CREATE TABLE `AniDB_Anime_DefaultImage` ( " + " `AniDB_Anime_DefaultImageID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `ImageParentID` int NOT NULL' " + " `ImageParentType` int NOT NULL' " + " `ImageType` int NOT NULL' " + " PRIMARY KEY (`AniDB_Anime_DefaultImageID`) ) ; "); " is 309.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_AniDB_Anime_DefaultImage,The length of the statement  "	cmds.Add ("ALTER TABLE `AniDB_Anime_DefaultImage` ADD UNIQUE INDEX `UIX_AniDB_Anime_DefaultImage_ImageType` (`AnimeID` ASC' `ImageType` ASC) ;"); " is 145.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_MovieDB_Movie,The length of the statement  "	cmds.Add ("CREATE TABLE `MovieDB_Movie` ( " + " `MovieDB_MovieID` INT NOT NULL AUTO_INCREMENT' " + " `MovieId` int NOT NULL' " + " `MovieName` varchar(250) character set utf8' " + " `OriginalName` varchar(250) character set utf8' " + " `Overview` text character set utf8' " + " PRIMARY KEY (`MovieDB_MovieID`) ) ; "); " is 317.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_MovieDB_Poster,The length of the statement  "	cmds.Add ("CREATE TABLE `MovieDB_Poster` ( " + " `MovieDB_PosterID` INT NOT NULL AUTO_INCREMENT' " + " `ImageID` varchar(100)' " + " `MovieId` int NOT NULL' " + " `ImageType` varchar(100)' " + " `ImageSize` varchar(100)'  " + " `URL` text character set utf8'  " + " `ImageWidth` int NOT NULL'  " + " `ImageHeight` int NOT NULL'  " + " `Enabled` int NOT NULL' " + " PRIMARY KEY (`MovieDB_PosterID`) ) ; "); " is 405.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_MovieDB_Fanart,The length of the statement  "	cmds.Add ("CREATE TABLE `MovieDB_Fanart` ( " + " `MovieDB_FanartID` INT NOT NULL AUTO_INCREMENT' " + " `ImageID` varchar(100)' " + " `MovieId` int NOT NULL' " + " `ImageType` varchar(100)' " + " `ImageSize` varchar(100)'  " + " `URL` text character set utf8'  " + " `ImageWidth` int NOT NULL'  " + " `ImageHeight` int NOT NULL'  " + " `Enabled` int NOT NULL' " + " PRIMARY KEY (`MovieDB_FanartID`) ) ; "); " is 405.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_JMMUser,The length of the statement  "	cmds.Add ("CREATE TABLE `JMMUser` ( " + " `JMMUserID` INT NOT NULL AUTO_INCREMENT' " + " `Username` varchar(100) character set utf8' " + " `Password` varchar(100) character set utf8' " + " `IsAdmin` int NOT NULL' " + " `IsAniDBUser` int NOT NULL' " + " `IsTraktUser` int NOT NULL' " + " `HideCategories` text character set utf8' " + " PRIMARY KEY (`JMMUserID`) ) ; "); " is 368.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_Trakt_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE `Trakt_Episode` ( " + " `Trakt_EpisodeID` INT NOT NULL AUTO_INCREMENT' " + " `Trakt_ShowID` int NOT NULL' " + " `Season` int NOT NULL' " + " `EpisodeNumber` int NOT NULL' " + " `Title` varchar(500) character set utf8' " + " `URL` text character set utf8' " + " `Overview` text character set utf8' " + " `EpisodeImage` varchar(500) character set utf8' " + " PRIMARY KEY (`Trakt_EpisodeID`) ) ; "); " is 420.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_Trakt_ImagePoster,The length of the statement  "	cmds.Add ("CREATE TABLE `Trakt_ImagePoster` ( " + " `Trakt_ImagePosterID` INT NOT NULL AUTO_INCREMENT' " + " `Trakt_ShowID` int NOT NULL' " + " `Season` int NOT NULL' " + " `ImageURL` varchar(500) character set utf8' " + " `Enabled` int NOT NULL' " + " PRIMARY KEY (`Trakt_ImagePosterID`) ) ; "); " is 296.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_Trakt_ImageFanart,The length of the statement  "	cmds.Add ("CREATE TABLE `Trakt_ImageFanart` ( " + " `Trakt_ImageFanartID` INT NOT NULL AUTO_INCREMENT' " + " `Trakt_ShowID` int NOT NULL' " + " `Season` int NOT NULL' " + " `ImageURL` varchar(500) character set utf8' " + " `Enabled` int NOT NULL' " + " PRIMARY KEY (`Trakt_ImageFanartID`) ) ; "); " is 296.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_Trakt_Show,The length of the statement  "	cmds.Add ("CREATE TABLE `Trakt_Show` ( " + " `Trakt_ShowID` INT NOT NULL AUTO_INCREMENT' " + " `TraktID` varchar(100) character set utf8' " + " `Title` varchar(500) character set utf8' " + " `Year` varchar(50) character set utf8' " + " `URL` text character set utf8' " + " `Overview` text character set utf8' " + " `TvDB_ID` int NULL' " + " PRIMARY KEY (`Trakt_ShowID`) ) ; "); " is 377.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_Trakt_Season,The length of the statement  "	cmds.Add ("CREATE TABLE `Trakt_Season` ( " + " `Trakt_SeasonID` INT NOT NULL AUTO_INCREMENT' " + " `Trakt_ShowID` int NOT NULL' " + " `Season` int NOT NULL' " + " `URL` text character set utf8' " + " PRIMARY KEY (`Trakt_SeasonID`) ) ; "); " is 238.
Long Statement,JMMServer.Databases,MySQL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\MySQL.cs,CreateTableString_CrossRef_AniDB_Trakt,The length of the statement  "	cmds.Add ("CREATE TABLE `CrossRef_AniDB_Trakt` ( " + " `CrossRef_AniDB_TraktID` INT NOT NULL AUTO_INCREMENT' " + " `AnimeID` int NOT NULL' " + " `TraktID` varchar(100) character set utf8' " + " `TraktSeasonNumber` int NOT NULL' " + " `CrossRefSource` int NOT NULL' " + " PRIMARY KEY (`CrossRef_AniDB_TraktID`) ) ; "); " is 317.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_002,The length of the statement  "	cmds.Add ("CREATE TABLE IgnoreAnime( " + " IgnoreAnimeID INTEGER PRIMARY KEY AUTOINCREMENT' " + " JMMUserID int NOT NULL' " + " AnimeID int NOT NULL' " + " IgnoreType int NOT NULL)"); " is 183.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_003,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_Friend( " + " Trakt_FriendID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Username text NOT NULL' " + " FullName text NULL' " + " Gender text NULL' " + " Age text NULL' " + " Location text NULL' " + " About text NULL' " + " Joined int NOT NULL' " + " Avatar text NULL' " + " Url text NULL' " + " LastAvatarUpdate timestamp NOT NULL)"); " is 361.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_MAL( " + " CrossRef_AniDB_MALID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " MALID int NOT NULL' " + " MALTitle text' " + " CrossRefSource int NOT NULL " + " ); "); " is 227.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_011,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_MAL( " + " CrossRef_AniDB_MALID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " MALID int NOT NULL' " + " MALTitle text' " + " StartEpisodeType int NOT NULL' " + " StartEpisodeNumber int NOT NULL' " + " CrossRefSource int NOT NULL " + " ); "); " is 303.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_011,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_CrossRef_AniDB_MAL_Anime ON CrossRef_AniDB_MAL(AnimeID' StartEpisodeType' StartEpisodeNumber);"); " is 132.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_012,The length of the statement  "	cmds.Add ("CREATE TABLE Playlist( " + " PlaylistID INTEGER PRIMARY KEY AUTOINCREMENT' " + " PlaylistName text' " + " PlaylistItems text' " + " DefaultPlayOrder int NOT NULL' " + " PlayWatched int NOT NULL' " + " PlayUnwatched int NOT NULL " + " ); "); " is 251.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_014,The length of the statement  "	cmds.Add ("CREATE TABLE BookmarkedAnime( " + " BookmarkedAnimeID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " Priority int NOT NULL' " + " Notes text' " + " Downloading int NOT NULL " + " ); "); " is 218.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_016,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_TvDB_Episode( " + " CrossRef_AniDB_TvDB_EpisodeID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " AniDBEpisodeID int NOT NULL' " + " TvDBEpisodeID int NOT NULL " + " ); "); " is 232.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_016,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_CrossRef_AniDB_TvDB_Episode_AniDBEpisodeID ON CrossRef_AniDB_TvDB_Episode(AniDBEpisodeID);"); " is 128.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_017,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_MylistStats( " + " AniDB_MylistStatsID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Animes int NOT NULL' " + " Episodes int NOT NULL' " + " Files int NOT NULL' " + " SizeOfFiles INTEGER NOT NULL' " + " AddedAnimes int NOT NULL' " + " AddedEpisodes int NOT NULL' " + " AddedFiles int NOT NULL' " + " AddedGroups int NOT NULL' " + " LeechPct int NOT NULL' " + " GloryPct int NOT NULL' " + " ViewedPct int NOT NULL' " + " MylistPct int NOT NULL' " + " ViewedMylistPct int NOT NULL' " + " EpisodesViewed int NOT NULL' " + " Votes int NOT NULL' " + " Reviews int NOT NULL' " + " ViewiedLength int NOT NULL " + " ); "); " is 639.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_018,The length of the statement  "	cmds.Add ("CREATE TABLE FileFfdshowPreset( " + " FileFfdshowPresetID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Hash int NOT NULL' " + " FileSize INTEGER NOT NULL' " + " Preset text " + " ); "); " is 192.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_021,The length of the statement  "	cmds.Add ("CREATE TABLE RenameScript( " + " RenameScriptID INTEGER PRIMARY KEY AUTOINCREMENT' " + " ScriptName text' " + " Script text' " + " IsEnabledOnImport int NOT NULL " + " ); "); " is 185.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_025,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Recommendation( " + " AniDB_RecommendationID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " UserID int NOT NULL' " + " RecommendationType int NOT NULL' " + " RecommendationText text " + " ); "); " is 246.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_027,The length of the statement  "	cmds.Add ("update CrossRef_File_Episode SET CrossRefSource=1 WHERE Hash IN (Select Hash from ANIDB_File) AND CrossRefSource=2;"); " is 129.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_028,The length of the statement  "	cmds.Add ("CREATE TABLE LogMessage( " + " LogMessageID INTEGER PRIMARY KEY AUTOINCREMENT' " + " LogType text' " + " LogContent text' " + " LogDate timestamp NOT NULL " + " ); "); " is 178.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_029,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_TvDBV2( " + " CrossRef_AniDB_TvDBV2ID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " AniDBStartEpisodeType int NOT NULL' " + " AniDBStartEpisodeNumber int NOT NULL' " + " TvDBID int NOT NULL' " + " TvDBSeasonNumber int NOT NULL' " + " TvDBStartEpisodeNumber int NOT NULL' " + " TvDBTitle text' " + " CrossRefSource int NOT NULL " + " ); "); " is 401.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_029,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_CrossRef_AniDB_TvDBV2 ON CrossRef_AniDB_TvDBV2(AnimeID' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber' AniDBStartEpisodeType' AniDBStartEpisodeNumber);"); " is 192.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_Versions,The length of the statement  "	cmds.Add ("CREATE TABLE Versions ( " + " VersionsID INTEGER PRIMARY KEY AUTOINCREMENT' " + " VersionType Text NOT NULL' " + " VersionValue Text NOT NULL)"); " is 156.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime ( " + " AniDB_AnimeID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " EpisodeCount int NOT NULL' " + " AirDate timestamp NULL' " + " EndDate timestamp NULL' " + " URL text NULL' " + " Picname text NULL' " + " BeginYear int NOT NULL' " + " EndYear int NOT NULL' " + " AnimeType int NOT NULL' " + " MainTitle text NOT NULL' " + " AllTitles text NOT NULL' " + " AllCategories text NOT NULL' " + " AllTags text NOT NULL' " + " Description text NOT NULL' " + " EpisodeCountNormal int NOT NULL' " + " EpisodeCountSpecial int NOT NULL' " + " Rating int NOT NULL' " + " VoteCount int NOT NULL' " + " TempRating int NOT NULL' " + " TempVoteCount int NOT NULL' " + " AvgReviewRating int NOT NULL' " + " ReviewCount int NOT NULL' " + " DateTimeUpdated timestamp NOT NULL' " + " DateTimeDescUpdated timestamp NOT NULL' " + " ImageEnabled int NOT NULL' " + " AwardList text NOT NULL' " + " Restricted int NOT NULL' " + " AnimePlanetID int NULL' " + " ANNID int NULL' " + " AllCinemaID int NULL' " + " AnimeNfo int NULL' " + " LatestEpisodeNumber int NULL " + " );"); " is 1110.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_Category,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Category ( " + " AniDB_Anime_CategoryID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " CategoryID int NOT NULL' " + " Weighting int NOT NULL " + " ); "); " is 211.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_Category,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_AniDB_Anime_Category_AnimeID_CategoryID ON AniDB_Anime_Category (AnimeID' CategoryID);"); " is 124.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_Character,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Character ( " + " AniDB_Anime_CharacterID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " CharID int NOT NULL' " + " CharType text NOT NULL' " + " EpisodeListRaw text NOT NULL " + " ); "); " is 245.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_Relation,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Relation ( " + " AniDB_Anime_RelationID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " RelatedAnimeID int NOT NULL' " + " RelationType text NOT NULL " + " ); "); " is 219.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_Relation,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_AniDB_Anime_Relation_AnimeID_RelatedAnimeID ON AniDB_Anime_Relation(AnimeID' RelatedAnimeID);"); " is 131.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_Review,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Review ( " + " AniDB_Anime_ReviewID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " ReviewID int NOT NULL " + " ); "); " is 175.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_Similar,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Similar ( " + " AniDB_Anime_SimilarID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " SimilarAnimeID int NOT NULL' " + " Approval int NOT NULL' " + " Total int NOT NULL " + " ); "); " is 238.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_Similar,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_AniDB_Anime_Similar_AnimeID_SimilarAnimeID ON AniDB_Anime_Similar(AnimeID' SimilarAnimeID);"); " is 129.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_Tag,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Tag ( " + " AniDB_Anime_TagID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " TagID int NOT NULL' " + " Approval int NOT NULL " + " ); "); " is 195.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_Title,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Title ( " + " AniDB_Anime_TitleID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " TitleType text NOT NULL' " + " Language text NOT NULL' " + " Title text NULL " + " ); "); " is 228.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Category,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Category ( " + " AniDB_CategoryID INTEGER PRIMARY KEY AUTOINCREMENT' " + " CategoryID int NOT NULL' " + " ParentID int NOT NULL' " + " IsHentai int NOT NULL' " + " CategoryName text NOT NULL' " + " CategoryDescription text NOT NULL  " + " ); "); " is 275.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Character,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Character ( " + " AniDB_CharacterID INTEGER PRIMARY KEY AUTOINCREMENT' " + " CharID int NOT NULL' " + " CharName text NOT NULL' " + " PicName text NOT NULL' " + " CharKanjiName text NOT NULL' " + " CharDescription text NOT NULL' " + " CreatorListRaw text NOT NULL " + " ); "); " is 306.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Character_Seiyuu,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Character_Seiyuu ( " + " AniDB_Character_SeiyuuID INTEGER PRIMARY KEY AUTOINCREMENT' " + " CharID int NOT NULL' " + " SeiyuuID int NOT NULL " + " ); "); " is 182.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Character_Seiyuu,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_AniDB_Character_Seiyuu_CharID_SeiyuuID ON AniDB_Character_Seiyuu(CharID' SeiyuuID);"); " is 121.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Seiyuu,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Seiyuu ( " + " AniDB_SeiyuuID INTEGER PRIMARY KEY AUTOINCREMENT' " + " SeiyuuID int NOT NULL' " + " SeiyuuName text NOT NULL' " + " PicName text NOT NULL " + " ); "); " is 196.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Episode ( " + " AniDB_EpisodeID INTEGER PRIMARY KEY AUTOINCREMENT' " + " EpisodeID int NOT NULL' " + " AnimeID int NOT NULL' " + " LengthSeconds int NOT NULL' " + " Rating text NOT NULL' " + " Votes text NOT NULL' " + " EpisodeNumber int NOT NULL' " + " EpisodeType int NOT NULL' " + " RomajiName text NOT NULL' " + " EnglishName text NOT NULL' " + " AirDate int NOT NULL' " + " DateTimeUpdated timestamp NOT NULL " + " ); "); " is 456.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_File,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_File ( " + " AniDB_FileID INTEGER PRIMARY KEY AUTOINCREMENT' " + " FileID int NOT NULL' " + " Hash text NOT NULL' " + " AnimeID int NOT NULL' " + " GroupID int NOT NULL' " + " File_Source text NOT NULL' " + " File_AudioCodec text NOT NULL' " + " File_VideoCodec text NOT NULL' " + " File_VideoResolution text NOT NULL' " + " File_FileExtension text NOT NULL' " + " File_LengthSeconds int NOT NULL' " + " File_Description text NOT NULL' " + " File_ReleaseDate int NOT NULL' " + " Anime_GroupName text NOT NULL' " + " Anime_GroupNameShort text NOT NULL' " + " Episode_Rating int NOT NULL' " + " Episode_Votes int NOT NULL' " + " DateTimeUpdated timestamp NOT NULL' " + " IsWatched int NOT NULL' " + " WatchedDate timestamp NULL' " + " CRC text NOT NULL' " + " MD5 text NOT NULL' " + " SHA1 text NOT NULL' " + " FileName text NOT NULL' " + " FileSize INTEGER NOT NULL " + " ); "); " is 907.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_GroupStatus,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_GroupStatus ( " + " AniDB_GroupStatusID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " GroupID int NOT NULL' " + " GroupName text NOT NULL' " + " CompletionState int NOT NULL' " + " LastEpisodeNumber int NOT NULL' " + " Rating int NOT NULL' " + " Votes int NOT NULL' " + " EpisodeRange text NOT NULL " + " ); "); " is 364.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_ReleaseGroup,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_ReleaseGroup ( " + " AniDB_ReleaseGroupID INTEGER PRIMARY KEY AUTOINCREMENT' " + " GroupID int NOT NULL' " + " Rating int NOT NULL' " + " Votes int NOT NULL' " + " AnimeCount int NOT NULL' " + " FileCount int NOT NULL' " + " GroupName text NOT NULL' " + " GroupNameShort text NOT NULL' " + " IRCChannel text NOT NULL' " + " IRCServer text NOT NULL' " + " URL text NOT NULL' " + " Picname text NOT NULL " + " ); "); " is 444.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Review,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Review ( " + " AniDB_ReviewID INTEGER PRIMARY KEY AUTOINCREMENT' " + " ReviewID int NOT NULL' " + " AuthorID int NOT NULL' " + " RatingAnimation int NOT NULL' " + " RatingSound int NOT NULL' " + " RatingStory int NOT NULL' " + " RatingCharacter int NOT NULL' " + " RatingValue int NOT NULL' " + " RatingEnjoyment int NOT NULL' " + " ReviewText text NOT NULL " + " ); "); " is 400.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Tag,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Tag ( " + " AniDB_TagID INTEGER PRIMARY KEY AUTOINCREMENT' " + " TagID int NOT NULL' " + " Spoiler int NOT NULL' " + " LocalSpoiler int NOT NULL' " + " GlobalSpoiler int NOT NULL' " + " TagName text NOT NULL' " + " TagCount int NOT NULL' " + " TagDescription text NOT NULL " + " ); "); " is 315.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AnimeEpisode,The length of the statement  "	cmds.Add ("CREATE TABLE [AnimeEpisode]( " + " AnimeEpisodeID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeSeriesID int NOT NULL' " + " AniDB_EpisodeID int NOT NULL' " + " DateTimeUpdated timestamp NOT NULL' " + " DateTimeCreated timestamp NOT NULL " + " );"); " is 260.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AnimeEpisode_User,The length of the statement  "	cmds.Add ("CREATE TABLE AnimeEpisode_User( " + " AnimeEpisode_UserID INTEGER PRIMARY KEY AUTOINCREMENT' " + " JMMUserID int NOT NULL' " + " AnimeEpisodeID int NOT NULL' " + " AnimeSeriesID int NOT NULL' " + // we only have this column to improve performance " is 257.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AnimeEpisode_User,The length of the statement  "	" WatchedDate timestamp NULL' " + " PlayedCount int NOT NULL' " + " WatchedCount int NOT NULL' " + " StoppedCount int NOT NULL " + " );"); " is 138.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AnimeGroup,The length of the statement  "	cmds.Add ("CREATE TABLE AnimeGroup ( " + " AnimeGroupID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeGroupParentID int NULL' " + " GroupName text NOT NULL' " + " Description text NULL' " + " IsManuallyNamed int NOT NULL' " + " DateTimeUpdated timestamp NOT NULL' " + " DateTimeCreated timestamp NOT NULL' " + " SortName text NOT NULL' " + " MissingEpisodeCount int NOT NULL' " + " MissingEpisodeCountGroups int NOT NULL' " + " OverrideDescription int NOT NULL' " + " EpisodeAddedDate timestamp NULL " + " ); "); " is 512.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AnimeGroup_User,The length of the statement  "	cmds.Add ("CREATE TABLE AnimeGroup_User( " + " AnimeGroup_UserID INTEGER PRIMARY KEY AUTOINCREMENT' " + " JMMUserID int NOT NULL' " + " AnimeGroupID int NOT NULL' " + " IsFave int NOT NULL' " + " UnwatchedEpisodeCount int NOT NULL' " + " WatchedEpisodeCount int NOT NULL' " + " WatchedDate timestamp NULL' " + " PlayedCount int NOT NULL' " + " WatchedCount int NOT NULL' " + " StoppedCount int NOT NULL " + " ); "); " is 415.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AnimeSeries,The length of the statement  "	cmds.Add ("CREATE TABLE AnimeSeries ( " + " AnimeSeriesID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeGroupID int NOT NULL' " + " AniDB_ID int NOT NULL' " + " DateTimeUpdated timestamp NOT NULL' " + " DateTimeCreated timestamp NOT NULL' " + " DefaultAudioLanguage text NULL' " + " DefaultSubtitleLanguage text NULL' " + " MissingEpisodeCount int NOT NULL' " + " MissingEpisodeCountGroups int NOT NULL' " + " LatestLocalEpisodeNumber int NOT NULL' " + " EpisodeAddedDate timestamp NULL " + " ); "); " is 499.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AnimeSeries_User,The length of the statement  "	cmds.Add ("CREATE TABLE AnimeSeries_User( " + " AnimeSeries_UserID INTEGER PRIMARY KEY AUTOINCREMENT' " + " JMMUserID int NOT NULL' " + " AnimeSeriesID int NOT NULL' " + " UnwatchedEpisodeCount int NOT NULL' " + " WatchedEpisodeCount int NOT NULL' " + " WatchedDate timestamp NULL' " + " PlayedCount int NOT NULL' " + " WatchedCount int NOT NULL' " + " StoppedCount int NOT NULL " + " ); "); " is 391.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_CommandRequest,The length of the statement  "	cmds.Add ("CREATE TABLE CommandRequest ( " + " CommandRequestID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Priority int NOT NULL' " + " CommandType int NOT NULL' " + " CommandID text NOT NULL' " + " CommandDetails text NOT NULL' " + " DateTimeUpdated timestamp NOT NULL " + " ); "); " is 280.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_CrossRef_AniDB_TvDB,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_TvDB( " + " CrossRef_AniDB_TvDBID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " TvDBID int NOT NULL' " + " TvDBSeasonNumber int NOT NULL' " + " CrossRefSource int NOT NULL " + " ); "); " is 246.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_CrossRef_AniDB_TvDB,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_CrossRef_AniDB_TvDB ON CrossRef_AniDB_TvDB(AnimeID' TvDBID' TvDBSeasonNumber' CrossRefSource);"); " is 132.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_CrossRef_AniDB_Other,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_Other( " + " CrossRef_AniDB_OtherID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " CrossRefID text NOT NULL' " + " CrossRefSource int NOT NULL' " + " CrossRefType int NOT NULL " + " ); "); " is 249.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_CrossRef_AniDB_Other,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_CrossRef_AniDB_Other ON CrossRef_AniDB_Other(AnimeID' CrossRefID' CrossRefSource' CrossRefType);"); " is 134.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_CrossRef_File_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_File_Episode ( " + " CrossRef_File_EpisodeID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Hash text NULL' " + " FileName text NOT NULL' " + " FileSize INTEGER NOT NULL' " + " CrossRefSource int NOT NULL' " + " AnimeID int NOT NULL' " + " EpisodeID int NOT NULL' " + " Percentage int NOT NULL' " + " EpisodeOrder int NOT NULL " + " ); "); " is 366.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_CrossRef_Languages_AniDB_File,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_Languages_AniDB_File ( " + " CrossRef_Languages_AniDB_FileID INTEGER PRIMARY KEY AUTOINCREMENT' " + " FileID int NOT NULL' " + " LanguageID int NOT NULL " + " ); "); " is 198.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_CrossRef_Subtitles_AniDB_File,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_Subtitles_AniDB_File ( " + " CrossRef_Subtitles_AniDB_FileID INTEGER PRIMARY KEY AUTOINCREMENT' " + " FileID int NOT NULL' " + " LanguageID int NOT NULL " + " ); "); " is 198.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_FileNameHash,The length of the statement  "	cmds.Add ("CREATE TABLE FileNameHash ( " + " FileNameHashID INTEGER PRIMARY KEY AUTOINCREMENT' " + " FileName text NOT NULL' " + " FileSize INTEGER NOT NULL' " + " Hash text NOT NULL' " + " DateTimeUpdated timestamp NOT NULL " + " ); "); " is 237.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_Language,The length of the statement  "	cmds.Add ("CREATE TABLE Language ( " + " LanguageID INTEGER PRIMARY KEY AUTOINCREMENT' " + " LanguageName text NOT NULL " + " ); "); " is 132.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_ImportFolder,The length of the statement  "	cmds.Add ("CREATE TABLE ImportFolder ( " + " ImportFolderID INTEGER PRIMARY KEY AUTOINCREMENT' " + " ImportFolderType int NOT NULL' " + " ImportFolderName text NOT NULL' " + " ImportFolderLocation text NOT NULL' " + " IsDropSource int NOT NULL' " + " IsDropDestination int NOT NULL " + " ); "); " is 294.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_ScheduledUpdate,The length of the statement  "	cmds.Add ("CREATE TABLE ScheduledUpdate( " + " ScheduledUpdateID INTEGER PRIMARY KEY AUTOINCREMENT'  " + " UpdateType int NOT NULL' " + " LastUpdate timestamp NOT NULL' " + " UpdateDetails text NOT NULL " + " ); "); " is 215.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_VideoInfo,The length of the statement  "	cmds.Add ("CREATE TABLE VideoInfo ( " + " VideoInfoID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Hash text NOT NULL' " + " FileSize INTEGER NOT NULL' " + " FileName text NOT NULL' " + " DateTimeUpdated timestamp NOT NULL' " + " VideoCodec text NOT NULL' " + " VideoBitrate text NOT NULL' " + " VideoFrameRate text NOT NULL' " + " VideoResolution text NOT NULL' " + " AudioCodec text NOT NULL' " + " AudioBitrate text NOT NULL' " + " Duration INTEGER NOT NULL " + " ); "); " is 469.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_VideoLocal,The length of the statement  "	cmds.Add ("CREATE TABLE VideoLocal ( " + " VideoLocalID INTEGER PRIMARY KEY AUTOINCREMENT' " + " FilePath text NOT NULL' " + " ImportFolderID int NOT NULL' " + " Hash text NOT NULL' " + " CRC32 text NULL' " + " MD5 text NULL' " + " SHA1 text NULL' " + " HashSource int NOT NULL' " + " FileSize INTEGER NOT NULL' " + " IsIgnored int NOT NULL' " + " DateTimeUpdated timestamp NOT NULL " + " ); "); " is 395.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_VideoLocal_User,The length of the statement  "	cmds.Add ("CREATE TABLE VideoLocal_User( " + " VideoLocal_UserID INTEGER PRIMARY KEY AUTOINCREMENT' " + " JMMUserID int NOT NULL' " + " VideoLocalID int NOT NULL' " + " WatchedDate timestamp NOT NULL " + " ); "); " is 212.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_DuplicateFile,The length of the statement  "	cmds.Add ("CREATE TABLE DuplicateFile ( " + " DuplicateFileID INTEGER PRIMARY KEY AUTOINCREMENT' " + " FilePathFile1 text NOT NULL' " + " FilePathFile2 text NOT NULL' " + " ImportFolderIDFile1 int NOT NULL' " + " ImportFolderIDFile2 int NOT NULL' " + " Hash text NOT NULL' " + " DateTimeUpdated timestamp NOT NULL " + " ); "); " is 326.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_GroupFilter,The length of the statement  "	cmds.Add ("CREATE TABLE GroupFilter( " + " GroupFilterID INTEGER PRIMARY KEY AUTOINCREMENT' " + " GroupFilterName text NOT NULL' " + " ApplyToSeries int NOT NULL' " + " BaseCondition int NOT NULL' " + " SortingCriteria text " + " ); "); " is 236.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_GroupFilterCondition,The length of the statement  "	cmds.Add ("CREATE TABLE GroupFilterCondition( " + " GroupFilterConditionID INTEGER PRIMARY KEY AUTOINCREMENT' " + " GroupFilterID int NOT NULL' " + " ConditionType int NOT NULL' " + " ConditionOperator int NOT NULL' " + " ConditionParameter text NOT NULL " + " ); "); " is 267.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Vote,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Vote ( " + " AniDB_VoteID INTEGER PRIMARY KEY AUTOINCREMENT' " + " EntityID int NOT NULL' " + " VoteValue int NOT NULL' " + " VoteType int NOT NULL " + " ); "); " is 190.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_TvDB_ImageFanart,The length of the statement  "	cmds.Add ("CREATE TABLE TvDB_ImageFanart ( " + " TvDB_ImageFanartID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Id integer NOT NULL' " + " SeriesID integer NOT NULL' " + " BannerPath text' " + " BannerType text' " + " BannerType2 text' " + " Colors text' " + " Language text' " + " ThumbnailPath text' " + " VignettePath text' " + " Enabled integer NOT NULL' " + " Chosen INTEGER NULL)"); " is 385.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_TvDB_ImageWideBanner,The length of the statement  "	cmds.Add ("CREATE TABLE TvDB_ImageWideBanner ( " + " TvDB_ImageWideBannerID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Id integer NOT NULL' " + " SeriesID integer NOT NULL' " + " BannerPath text' " + " BannerType text' " + " BannerType2 text' " + " Language text' " + " Enabled integer NOT NULL' " + " SeasonNumber integer)"); " is 324.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_TvDB_ImagePoster,The length of the statement  "	cmds.Add ("CREATE TABLE TvDB_ImagePoster ( " + " TvDB_ImagePosterID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Id integer NOT NULL' " + " SeriesID integer NOT NULL' " + " BannerPath text' " + " BannerType text' " + " BannerType2 text' " + " Language text' " + " Enabled integer NOT NULL' " + " SeasonNumber integer)"); " is 316.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_TvDB_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE TvDB_Episode ( " + " TvDB_EpisodeID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Id integer NOT NULL' " + " SeriesID integer NOT NULL' " + " SeasonID integer NOT NULL' " + " SeasonNumber integer NOT NULL' " + " EpisodeNumber integer NOT NULL' " + " EpisodeName text' " + " Overview text' " + " Filename text' " + " EpImgFlag integer NOT NULL' " + " FirstAired text' " + " AbsoluteNumber integer' " + " AirsAfterSeason integer' " + " AirsBeforeEpisode integer' " + " AirsBeforeSeason integer)"); " is 514.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_TvDB_Series,The length of the statement  "	cmds.Add ("CREATE TABLE TvDB_Series( " + " TvDB_SeriesID INTEGER PRIMARY KEY AUTOINCREMENT' " + " SeriesID integer NOT NULL' " + " Overview text' " + " SeriesName text' " + " Status text' " + " Banner text' " + " Fanart text' " + " Poster text' " + " Lastupdated text)"); " is 271.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_DefaultImage,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_DefaultImage ( " + " AniDB_Anime_DefaultImageID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " ImageParentID int NOT NULL' " + " ImageParentType int NOT NULL' " + " ImageType int NOT NULL " + " );"); " is 257.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_AniDB_Anime_DefaultImage,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_AniDB_Anime_DefaultImage_ImageType ON AniDB_Anime_DefaultImage(AnimeID' ImageType)"); " is 120.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_MovieDB_Movie,The length of the statement  "	cmds.Add ("CREATE TABLE MovieDB_Movie( " + " MovieDB_MovieID INTEGER PRIMARY KEY AUTOINCREMENT' " + " MovieId int NOT NULL' " + " MovieName text' " + " OriginalName text' " + " Overview text " + " );"); " is 202.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_MovieDB_Poster,The length of the statement  "	cmds.Add ("CREATE TABLE MovieDB_Poster( " + " MovieDB_PosterID INTEGER PRIMARY KEY AUTOINCREMENT' " + " ImageID text' " + " MovieId int NOT NULL' " + " ImageType text' " + " ImageSize text'  " + " URL text'  " + " ImageWidth int NOT NULL'  " + " ImageHeight int NOT NULL'  " + " Enabled int NOT NULL " + " );"); " is 311.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_MovieDB_Fanart,The length of the statement  "	cmds.Add ("CREATE TABLE MovieDB_Fanart( " + " MovieDB_FanartID INTEGER PRIMARY KEY AUTOINCREMENT' " + " ImageID text' " + " MovieId int NOT NULL' " + " ImageType text' " + " ImageSize text'  " + " URL text'  " + " ImageWidth int NOT NULL'  " + " ImageHeight int NOT NULL'  " + " Enabled int NOT NULL " + " );"); " is 311.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_JMMUser,The length of the statement  "	cmds.Add ("CREATE TABLE JMMUser( " + " JMMUserID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Username text' " + " Password text' " + " IsAdmin int NOT NULL' " + " IsAniDBUser int NOT NULL' " + " IsTraktUser int NOT NULL' " + " HideCategories text " + " );"); " is 255.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_Trakt_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_Episode( " + " Trakt_EpisodeID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Trakt_ShowID int NOT NULL' " + " Season int NOT NULL' " + " EpisodeNumber int NOT NULL' " + " Title text' " + " URL text' " + " Overview text' " + " EpisodeImage text " + " );"); " is 280.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_Trakt_ImagePoster,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_ImagePoster( " + " Trakt_ImagePosterID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Trakt_ShowID int NOT NULL' " + " Season int NOT NULL' " + " ImageURL text' " + " Enabled int NOT NULL " + " );"); " is 223.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_Trakt_ImageFanart,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_ImageFanart( " + " Trakt_ImageFanartID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Trakt_ShowID int NOT NULL' " + " Season int NOT NULL' " + " ImageURL text' " + " Enabled int NOT NULL " + " );"); " is 223.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_Trakt_Show,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_Show( " + " Trakt_ShowID INTEGER PRIMARY KEY AUTOINCREMENT' " + " TraktID text' " + " Title text' " + " Year text' " + " URL text' " + " Overview text' " + " TvDB_ID int NULL " + " );"); " is 216.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_Trakt_Season,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_Season( " + " Trakt_SeasonID INTEGER PRIMARY KEY AUTOINCREMENT' " + " Trakt_ShowID int NOT NULL' " + " Season int NOT NULL' " + " URL text " + " );"); " is 180.
Long Statement,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,CreateTableString_CrossRef_AniDB_Trakt,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_Trakt( " + " CrossRef_AniDB_TraktID INTEGER PRIMARY KEY AUTOINCREMENT' " + " AnimeID int NOT NULL' " + " TraktID text' " + " TraktSeasonNumber int NOT NULL' " + " CrossRefSource int NOT NULL " + " );"); " is 241.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,GetConnectionString,The length of the statement  "	return string.Format ("Server={0};Database={1};UID={2};PWD={3};"' ServerSettings.DatabaseServer' ServerSettings.DatabaseName' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword); " is 192.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,DatabaseAlreadyExists,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' "master"))) { " is 227.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,GetData,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateDatabaseOld,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database=master"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword))) { " is 220.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateDatabase,The length of the statement  "	ServerConnection conn = new ServerConnection (ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword); " is 143.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_002,The length of the statement  "	cmds.Add ("CREATE TABLE IgnoreAnime( " + " IgnoreAnimeID int IDENTITY(1'1) NOT NULL' " + " JMMUserID int NOT NULL' " + " AnimeID int NOT NULL' " + " IgnoreType int NOT NULL' " + " CONSTRAINT [PK_IgnoreAnime] PRIMARY KEY CLUSTERED  " + " ( " + " IgnoreAnimeID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY]"); " is 430.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_002,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_003,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_Friend( " + " Trakt_FriendID int IDENTITY(1'1) NOT NULL' " + " Username nvarchar(100) NOT NULL' " + " FullName nvarchar(100) NULL' " + " Gender nvarchar(100) NULL' " + " Age nvarchar(100) NULL' " + " Location nvarchar(100) NULL' " + " About nvarchar(MAX) NULL' " + " Joined int NOT NULL' " + " Avatar nvarchar(MAX) NULL' " + " Url nvarchar(MAX) NULL' " + " LastAvatarUpdate datetime NOT NULL' " + " CONSTRAINT [PK_Trakt_Friend] PRIMARY KEY CLUSTERED  " + " ( " + " Trakt_FriendID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY]"); " is 681.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_003,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_004,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_005,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_006,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_007,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_008,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_009,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_010,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_MAL( " + " CrossRef_AniDB_MALID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " MALID int NOT NULL' " + " MALTitle nvarchar(500)' " + " CrossRefSource int NOT NULL' " + " CONSTRAINT [PK_CrossRef_AniDB_MAL] PRIMARY KEY CLUSTERED " + " ( " + " CrossRef_AniDB_MALID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 488.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_010,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_011,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_MAL( " + " CrossRef_AniDB_MALID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " MALID int NOT NULL' " + " MALTitle nvarchar(500)' " + " StartEpisodeType int NOT NULL' " + " StartEpisodeNumber int NOT NULL' " + " CrossRefSource int NOT NULL' " + " CONSTRAINT [PK_CrossRef_AniDB_MAL] PRIMARY KEY CLUSTERED " + " ( " + " CrossRef_AniDB_MALID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 564.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_011,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_CrossRef_AniDB_MAL_Anime ON CrossRef_AniDB_MAL(AnimeID' StartEpisodeType' StartEpisodeNumber)"); " is 131.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_011,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_012,The length of the statement  "	cmds.Add ("CREATE TABLE Playlist( " + " PlaylistID int IDENTITY(1'1) NOT NULL' " + " PlaylistName nvarchar(MAX) NULL' " + " PlaylistItems varchar(MAX) NULL' " + " DefaultPlayOrder int NOT NULL' " + " PlayWatched int NOT NULL' " + " PlayUnwatched int NOT NULL' " + " CONSTRAINT [PK_Playlist] PRIMARY KEY CLUSTERED " + " ( " + " PlaylistID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 510.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_012,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_013,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_014,The length of the statement  "	cmds.Add ("CREATE TABLE BookmarkedAnime( " + " BookmarkedAnimeID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " Priority int NOT NULL' " + " Notes nvarchar(MAX) NULL' " + " Downloading int NOT NULL' " + " CONSTRAINT [PK_BookmarkedAnime] PRIMARY KEY CLUSTERED " + " ( " + " BookmarkedAnimeID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 478.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_014,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_015,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_016,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_TvDB_Episode( " + " CrossRef_AniDB_TvDB_EpisodeID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " AniDBEpisodeID int NOT NULL' " + " TvDBEpisodeID int NOT NULL' " + " CONSTRAINT [PK_CrossRef_AniDB_TvDB_Episode] PRIMARY KEY CLUSTERED " + " ( " + " CrossRef_AniDB_TvDB_EpisodeID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 502.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_016,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_CrossRef_AniDB_TvDB_Episode_AniDBEpisodeID ON CrossRef_AniDB_TvDB_Episode(AniDBEpisodeID)"); " is 127.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_016,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_017,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_MylistStats( " + " AniDB_MylistStatsID int IDENTITY(1'1) NOT NULL' " + " Animes int NOT NULL' " + " Episodes int NOT NULL' " + " Files int NOT NULL' " + " SizeOfFiles bigint NOT NULL' " + " AddedAnimes int NOT NULL' " + " AddedEpisodes int NOT NULL' " + " AddedFiles int NOT NULL' " + " AddedGroups int NOT NULL' " + " LeechPct int NOT NULL' " + " GloryPct int NOT NULL' " + " ViewedPct int NOT NULL' " + " MylistPct int NOT NULL' " + " ViewedMylistPct int NOT NULL' " + " EpisodesViewed int NOT NULL' " + " Votes int NOT NULL' " + " Reviews int NOT NULL' " + " ViewiedLength int NOT NULL' " + " CONSTRAINT [PK_AniDB_MylistStats] PRIMARY KEY CLUSTERED " + " ( " + " AniDB_MylistStatsID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 888.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_017,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_018,The length of the statement  "	cmds.Add ("CREATE TABLE FileFfdshowPreset( " + " FileFfdshowPresetID int IDENTITY(1'1) NOT NULL' " + " Hash varchar(50) NOT NULL' " + " FileSize bigint NOT NULL' " + " Preset nvarchar(MAX) NULL' " + " CONSTRAINT [PK_FileFfdshowPreset] PRIMARY KEY CLUSTERED " + " ( " + " FileFfdshowPresetID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 463.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_018,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_019,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_020,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_021,The length of the statement  "	cmds.Add ("CREATE TABLE RenameScript( " + " RenameScriptID int IDENTITY(1'1) NOT NULL' " + " ScriptName nvarchar(MAX) NULL' " + " Script nvarchar(MAX) NULL' " + " IsEnabledOnImport int NOT NULL' " + " CONSTRAINT [PK_RenameScript] PRIMARY KEY CLUSTERED " + " ( " + " RenameScriptID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 453.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_021,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_022,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_023,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_024,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Recommendation ( " + " AniDB_RecommendationID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " UserID int NOT NULL' " + " RecommendationType int NOT NULL' " + " RecommendationText nvarchar(MAX)' " + " CONSTRAINT [PK_AniDB_Recommendation] PRIMARY KEY CLUSTERED " + " ( " + " AniDB_RecommendationID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 512.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_024,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_025,The length of the statement  "	cmds.Add ("update CrossRef_File_Episode SET CrossRefSource=1 WHERE Hash IN (Select Hash from ANIDB_File) AND CrossRefSource=2"); " is 128.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_025,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_026,The length of the statement  "	cmds.Add ("CREATE TABLE LogMessage ( " + " LogMessageID int IDENTITY(1'1) NOT NULL' " + " LogType nvarchar(MAX) NOT NULL' " + " LogContent nvarchar(MAX) NOT NULL' " + " LogDate datetime NOT NULL' " + " CONSTRAINT [PK_LogMessage] PRIMARY KEY CLUSTERED " + " ( " + " LogMessageID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 450.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_026,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_027,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_TvDBV2( " + " CrossRef_AniDB_TvDBV2ID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " AniDBStartEpisodeType int NOT NULL' " + " AniDBStartEpisodeNumber int NOT NULL' " + " TvDBID int NOT NULL' " + " TvDBSeasonNumber int NOT NULL' " + " TvDBStartEpisodeNumber int NOT NULL' " + " TvDBTitle nvarchar(MAX)' " + " CrossRefSource int NOT NULL' " + " CONSTRAINT [PK_CrossRef_AniDB_TvDBV2] PRIMARY KEY CLUSTERED " + " ( " + " CrossRef_AniDB_TvDBV2ID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 668.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_027,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_CrossRef_AniDB_TvDBV2 ON CrossRef_AniDB_TvDBV2(AnimeID' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber' AniDBStartEpisodeType' AniDBStartEpisodeNumber)"); " is 191.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,UpdateSchema_027,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,ExecuteSQLCommands,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateInitialSchema,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateInitialSchema,The length of the statement  "	using (SqlConnection tmpConn = new SqlConnection (string.Format ("Server={0};User ID={1};Password={2};database={3}"' ServerSettings.DatabaseServer' ServerSettings.DatabaseUsername' ServerSettings.DatabasePassword' ServerSettings.DatabaseName))) { " is 246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_Versions,The length of the statement  "	cmds.Add ("CREATE TABLE [Versions]( " + " [VersionsID] [int] IDENTITY(1'1) NOT NULL' " + " [VersionType] [varchar](100) NOT NULL' " + " [VersionValue] [varchar](100) NOT NULL'  " + " CONSTRAINT [PK_Versions] PRIMARY KEY CLUSTERED  " + " ( " + " [VersionsID] ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 430.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime( " + " AniDB_AnimeID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " EpisodeCount int NOT NULL' " + " AirDate datetime NULL' " + " EndDate datetime NULL' " + " URL varchar(max) NULL' " + " Picname varchar(max) NULL' " + " BeginYear int NOT NULL' " + " EndYear int NOT NULL' " + " AnimeType int NOT NULL' " + " MainTitle nvarchar(500) NOT NULL' " + " AllTitles nvarchar(1500) NOT NULL' " + " AllCategories nvarchar(MAX) NOT NULL' " + " AllTags nvarchar(MAX) NOT NULL' " + " Description varchar(max) NOT NULL' " + " EpisodeCountNormal int NOT NULL' " + " EpisodeCountSpecial int NOT NULL' " + " Rating int NOT NULL' " + " VoteCount int NOT NULL' " + " TempRating int NOT NULL' " + " TempVoteCount int NOT NULL' " + " AvgReviewRating int NOT NULL' " + " ReviewCount int NOT NULL' " + " DateTimeUpdated datetime NOT NULL' " + " DateTimeDescUpdated datetime NOT NULL' " + " ImageEnabled int NOT NULL' " + " AwardList varchar(max) NOT NULL' " + " Restricted int NOT NULL' " + " AnimePlanetID int NULL' " + " ANNID int NULL' " + " AllCinemaID int NULL' " + " AnimeNfo int NULL' " + " [LatestEpisodeNumber] [int] NULL' " + " CONSTRAINT [PK_AniDB_Anime] PRIMARY KEY CLUSTERED  " + " ( " + " [AniDB_AnimeID] ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 1420.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_Category,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Category ( " + " AniDB_Anime_CategoryID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " CategoryID int NOT NULL' " + " Weighting int NOT NULL' " + " CONSTRAINT [PK_AniDB_Anime_Category] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_Anime_CategoryID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 468.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_Category,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_AniDB_Anime_Category_AnimeID_CategoryID ON AniDB_Anime_Category(AnimeID' CategoryID)"); " is 122.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_Character,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Character ( " + " AniDB_Anime_CharacterID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " CharID int NOT NULL' " + " CharType varchar(100) NOT NULL' " + " EpisodeListRaw varchar(max) NULL' " + " CONSTRAINT [PK_AniDB_Anime_Character] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_Anime_CharacterID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 516.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_Relation,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Relation ( " + " AniDB_Anime_RelationID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " RelatedAnimeID int NOT NULL' " + " RelationType varchar(100) NOT NULL' " + " CONSTRAINT [PK_AniDB_Anime_Relation] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_Anime_RelationID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 484.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_Relation,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_AniDB_Anime_Relation_AnimeID_RelatedAnimeID ON AniDB_Anime_Relation(AnimeID' RelatedAnimeID)"); " is 130.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_Review,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Review ( " + " AniDB_Anime_ReviewID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " ReviewID int NOT NULL' " + " CONSTRAINT [PK_AniDB_Anime_Review] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_Anime_ReviewID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 428.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_Similar,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Similar ( " + " AniDB_Anime_SimilarID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " SimilarAnimeID int NOT NULL' " + " Approval int NOT NULL' " + " Total int NOT NULL' " + " CONSTRAINT [PK_AniDB_Anime_Similar] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_Anime_SimilarID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 493.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_Similar,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_AniDB_Anime_Similar_AnimeID_SimilarAnimeID ON AniDB_Anime_Similar(AnimeID' SimilarAnimeID)"); " is 128.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_Tag,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_Tag ( " + " AniDB_Anime_TagID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " TagID int NOT NULL' " + " Approval int NOT NULL' " + " CONSTRAINT [PK_AniDB_Anime_Tag] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_Anime_TagID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 442.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_Title,The length of the statement  "	cmds.Add ("CREATE TABLE [AniDB_Anime_Title]( " + " AniDB_Anime_TitleID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " TitleType varchar(50) NOT NULL' " + " Language nvarchar(50) NOT NULL' " + " Title nvarchar(500) NOT NULL' " + " CONSTRAINT [PK_AniDB_Anime_Title] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_Anime_TitleID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 508.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Category,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Category ( " + " AniDB_CategoryID int IDENTITY(1'1) NOT NULL' " + " CategoryID int NOT NULL' " + " ParentID int NOT NULL' " + " IsHentai int NOT NULL' " + " CategoryName varchar(50) NOT NULL' " + " CategoryDescription varchar(max) NOT NULL' " + " CONSTRAINT [PK_AniDB_Category] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_CategoryID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 534.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Character,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Character ( " + " AniDB_CharacterID int IDENTITY(1'1) NOT NULL' " + " CharID int NOT NULL' " + " CharName nvarchar(200) NOT NULL' " + " PicName varchar(100) NOT NULL' " + " CharKanjiName nvarchar(max) NOT NULL' " + " CharDescription nvarchar(max) NOT NULL' " + " CreatorListRaw varchar(max) NOT NULL' " + " CONSTRAINT [PK_AniDB_Character] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_CharacterID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 596.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Character_Seiyuu,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Character_Seiyuu ( " + " AniDB_Character_SeiyuuID int IDENTITY(1'1) NOT NULL' " + " CharID int NOT NULL' " + " SeiyuuID int NOT NULL " + " CONSTRAINT [PK_AniDB_Character_Seiyuu] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_Character_SeiyuuID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 442.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Character_Seiyuu,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_AniDB_Character_Seiyuu_CharID_SeiyuuID ON AniDB_Character_Seiyuu(CharID' SeiyuuID)"); " is 120.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Seiyuu,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Seiyuu ( " + " AniDB_SeiyuuID int IDENTITY(1'1) NOT NULL' " + " SeiyuuID int NOT NULL' " + " SeiyuuName nvarchar(200) NOT NULL' " + " PicName varchar(100) NOT NULL' " + " CONSTRAINT [PK_AniDB_Seiyuu] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_SeiyuuID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 454.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Episode( " + " AniDB_EpisodeID int IDENTITY(1'1) NOT NULL' " + " EpisodeID int NOT NULL' " + " AnimeID int NOT NULL' " + " LengthSeconds int NOT NULL' " + " Rating varchar(max) NOT NULL' " + " Votes varchar(max) NOT NULL' " + " EpisodeNumber int NOT NULL' " + " EpisodeType int NOT NULL' " + " RomajiName varchar(max) NOT NULL' " + " EnglishName varchar(max) NOT NULL' " + " AirDate int NOT NULL' " + " DateTimeUpdated datetime NOT NULL' " + " CONSTRAINT [PK_AniDB_Episode] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_EpisodeID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 729.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_File,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_File( " + " AniDB_FileID int IDENTITY(1'1) NOT NULL' " + " FileID int NOT NULL' " + " Hash varchar(50) NOT NULL' " + " AnimeID int NOT NULL' " + " GroupID int NOT NULL' " + " File_Source varchar(max) NOT NULL' " + " File_AudioCodec varchar(max) NOT NULL' " + " File_VideoCodec varchar(max) NOT NULL' " + " File_VideoResolution varchar(max) NOT NULL' " + " File_FileExtension varchar(max) NOT NULL' " + " File_LengthSeconds int NOT NULL' " + " File_Description varchar(max) NOT NULL' " + " File_ReleaseDate int NOT NULL' " + " Anime_GroupName nvarchar(max) NOT NULL' " + " Anime_GroupNameShort nvarchar(max) NOT NULL' " + " Episode_Rating int NOT NULL' " + " Episode_Votes int NOT NULL' " + " DateTimeUpdated datetime NOT NULL' " + " IsWatched int NOT NULL' " + " WatchedDate datetime NULL' " + " CRC varchar(max) NOT NULL' " + " MD5 varchar(max) NOT NULL' " + " SHA1 varchar(max) NOT NULL' " + " FileName nvarchar(max) NOT NULL' " + " FileSize bigint NOT NULL' " + " CONSTRAINT [PK_AniDB_File] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_FileID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 1246.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_GroupStatus,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_GroupStatus ( " + " AniDB_GroupStatusID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " GroupID int NOT NULL' " + " GroupName nvarchar(200) NOT NULL' " + " CompletionState int NOT NULL' " + " LastEpisodeNumber int NOT NULL' " + " Rating int NOT NULL' " + " Votes int NOT NULL' " + " EpisodeRange nvarchar(200) NOT NULL' " + " CONSTRAINT [PK_AniDB_GroupStatus] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_GroupStatusID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 633.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_ReleaseGroup,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_ReleaseGroup ( " + " AniDB_ReleaseGroupID int IDENTITY(1'1) NOT NULL' " + " GroupID int NOT NULL' " + " Rating int NOT NULL' " + " Votes int NOT NULL' " + " AnimeCount int NOT NULL' " + " FileCount int NOT NULL' " + " GroupName nvarchar(MAX) NOT NULL' " + " GroupNameShort nvarchar(200) NOT NULL' " + " IRCChannel nvarchar(200) NOT NULL' " + " IRCServer nvarchar(200) NOT NULL' " + " URL nvarchar(200) NOT NULL' " + " Picname nvarchar(200) NOT NULL' " + " CONSTRAINT [PK_AniDB_ReleaseGroup] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_ReleaseGroupID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 751.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Review,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Review ( " + " AniDB_ReviewID int IDENTITY(1'1) NOT NULL' " + " ReviewID int NOT NULL' " + " AuthorID int NOT NULL' " + " RatingAnimation int NOT NULL' " + " RatingSound int NOT NULL' " + " RatingStory int NOT NULL' " + " RatingCharacter int NOT NULL' " + " RatingValue int NOT NULL' " + " RatingEnjoyment int NOT NULL' " + " ReviewText nvarchar(MAX) NOT NULL' " + " CONSTRAINT [PK_AniDB_Review] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_ReviewID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 650.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Tag,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Tag ( " + " AniDB_TagID int IDENTITY(1'1) NOT NULL' " + " TagID int NOT NULL' " + " Spoiler int NOT NULL' " + " LocalSpoiler int NOT NULL' " + " GlobalSpoiler int NOT NULL' " + " TagName nvarchar(150) NOT NULL' " + " TagCount int NOT NULL' " + " TagDescription nvarchar(max) NOT NULL' " + " CONSTRAINT [PK_AniDB_Tag] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_TagID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 568.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AnimeEpisode,The length of the statement  "	cmds.Add ("CREATE TABLE AnimeEpisode( " + " AnimeEpisodeID int IDENTITY(1'1) NOT NULL' " + " AnimeSeriesID int NOT NULL' " + " AniDB_EpisodeID int NOT NULL' " + " DateTimeUpdated datetime NOT NULL' " + " DateTimeCreated datetime NOT NULL' " + " CONSTRAINT [PK_AnimeEpisode] PRIMARY KEY CLUSTERED  " + " ( " + " AnimeEpisodeID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY]"); " is 497.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AnimeEpisode_User,The length of the statement  "	cmds.Add ("CREATE TABLE AnimeEpisode_User( " + " AnimeEpisode_UserID int IDENTITY(1'1) NOT NULL' " + " JMMUserID int NOT NULL' " + " AnimeEpisodeID int NOT NULL' " + " AnimeSeriesID int NOT NULL' " + // we only have this column to improve performance " is 250.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AnimeEpisode_User,The length of the statement  "	" WatchedDate datetime NULL' " + " PlayedCount int NOT NULL' " + " WatchedCount int NOT NULL' " + " StoppedCount int NOT NULL' " + " CONSTRAINT [PK_AnimeEpisode_User] PRIMARY KEY CLUSTERED  " + " ( " + " AnimeEpisode_UserID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY]"); " is 395.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_VideoLocal,The length of the statement  "	cmds.Add ("CREATE TABLE VideoLocal( " + " VideoLocalID int IDENTITY(1'1) NOT NULL' " + " FilePath nvarchar(max) NOT NULL' " + " ImportFolderID int NOT NULL' " + " Hash varchar(50) NOT NULL' " + " CRC32 varchar(50) NULL' " + " MD5 varchar(50) NULL' " + " SHA1 varchar(50) NULL' " + " HashSource int NOT NULL' " + " FileSize bigint NOT NULL' " + " IsIgnored int NOT NULL' " + " DateTimeUpdated datetime NOT NULL' " + " CONSTRAINT [PK_VideoLocal] PRIMARY KEY CLUSTERED  " + " ( " + " VideoLocalID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 666.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_VideoLocal_User,The length of the statement  "	cmds.Add ("CREATE TABLE VideoLocal_User( " + " VideoLocal_UserID int IDENTITY(1'1) NOT NULL' " + " JMMUserID int NOT NULL' " + " VideoLocalID int NOT NULL' " + " WatchedDate datetime NOT NULL' " + " CONSTRAINT [PK_VideoLocal_User] PRIMARY KEY CLUSTERED  " + " ( " + " VideoLocal_UserID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 458.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AnimeGroup,The length of the statement  "	cmds.Add ("CREATE TABLE AnimeGroup( " + " AnimeGroupID int IDENTITY(1'1) NOT NULL' " + " AnimeGroupParentID int NULL' " + " GroupName nvarchar(max) NOT NULL' " + " Description nvarchar(max) NULL' " + " IsManuallyNamed int NOT NULL' " + " DateTimeUpdated datetime NOT NULL' " + " DateTimeCreated datetime NOT NULL' " + " SortName varchar(max) NOT NULL' " + " MissingEpisodeCount int NOT NULL' " + " MissingEpisodeCountGroups int NOT NULL' " + " OverrideDescription int NOT NULL' " + " EpisodeAddedDate datetime NULL' " + " CONSTRAINT [PK_AnimeGroup] PRIMARY KEY CLUSTERED  " + " ( " + " [AnimeGroupID] ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 773.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AnimeGroup_User,The length of the statement  "	cmds.Add ("CREATE TABLE AnimeGroup_User( " + " AnimeGroup_UserID int IDENTITY(1'1) NOT NULL' " + " JMMUserID int NOT NULL' " + " AnimeGroupID int NOT NULL' " + " IsFave int NOT NULL' " + " UnwatchedEpisodeCount int NOT NULL' " + " WatchedEpisodeCount int NOT NULL' " + " WatchedDate datetime NULL' " + " PlayedCount int NOT NULL' " + " WatchedCount int NOT NULL' " + " StoppedCount int NOT NULL' " + " CONSTRAINT [PK_AnimeGroup_User] PRIMARY KEY CLUSTERED  " + " ( " + " AnimeGroup_UserID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY]"); " is 660.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AnimeSeries,The length of the statement  "	cmds.Add ("CREATE TABLE AnimeSeries ( " + " AnimeSeriesID int IDENTITY(1'1) NOT NULL' " + " AnimeGroupID int NOT NULL' " + " AniDB_ID int NOT NULL' " + " DateTimeUpdated datetime NOT NULL' " + " DateTimeCreated datetime NOT NULL' " + " DefaultAudioLanguage varchar(max) NULL' " + " DefaultSubtitleLanguage varchar(max) NULL' " + " MissingEpisodeCount int NOT NULL' " + " MissingEpisodeCountGroups int NOT NULL' " + " LatestLocalEpisodeNumber int NOT NULL' " + " EpisodeAddedDate datetime NULL' " + " CONSTRAINT [PK_AnimeSeries] PRIMARY KEY CLUSTERED  " + " ( " + " AnimeSeriesID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 751.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AnimeSeries_User,The length of the statement  "	cmds.Add ("CREATE TABLE AnimeSeries_User( " + " AnimeSeries_UserID int IDENTITY(1'1) NOT NULL' " + " JMMUserID int NOT NULL' " + " AnimeSeriesID int NOT NULL' " + " UnwatchedEpisodeCount int NOT NULL' " + " WatchedEpisodeCount int NOT NULL' " + " WatchedDate datetime NULL' " + " PlayedCount int NOT NULL' " + " WatchedCount int NOT NULL' " + " StoppedCount int NOT NULL' " + " CONSTRAINT [PK_AnimeSeries_User] PRIMARY KEY CLUSTERED  " + " ( " + " AnimeSeries_UserID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY]"); " is 638.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_CommandRequest,The length of the statement  "	cmds.Add ("CREATE TABLE CommandRequest( " + " CommandRequestID int IDENTITY(1'1) NOT NULL' " + " Priority int NOT NULL' " + " CommandType int NOT NULL' " + " CommandID nvarchar(max) NOT NULL' " + " CommandDetails nvarchar(max) NOT NULL' " + " DateTimeUpdated datetime NOT NULL' " + " CONSTRAINT [PK_CommandRequest] PRIMARY KEY CLUSTERED  " + " ( " + " CommandRequestID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 541.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_CrossRef_AniDB_TvDB,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_TvDB( " + " CrossRef_AniDB_TvDBID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " TvDBID int NOT NULL' " + " TvDBSeasonNumber int NOT NULL' " + " CrossRefSource int NOT NULL' " + " CONSTRAINT [PK_CrossRef_AniDB_TvDB] PRIMARY KEY CLUSTERED " + " ( " + " CrossRef_AniDB_TvDBID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 500.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_CrossRef_AniDB_TvDB,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_CrossRef_AniDB_TvDB ON CrossRef_AniDB_TvDB(AnimeID' TvDBID' TvDBSeasonNumber' CrossRefSource)"); " is 131.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_CrossRef_AniDB_Other,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_Other( " + " CrossRef_AniDB_OtherID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " CrossRefID nvarchar(500) NOT NULL' " + " CrossRefSource int NOT NULL' " + " CrossRefType int NOT NULL' " + " CONSTRAINT [PK_CrossRef_AniDB_Other] PRIMARY KEY CLUSTERED " + " ( " + " CrossRef_AniDB_OtherID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 514.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_CrossRef_AniDB_Other,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_CrossRef_AniDB_Other ON CrossRef_AniDB_Other(AnimeID' CrossRefID' CrossRefSource' CrossRefType)"); " is 133.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_CrossRef_File_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_File_Episode( " + " CrossRef_File_EpisodeID int IDENTITY(1'1) NOT NULL' " + " Hash varchar(50) NULL' " + " FileName nvarchar(500) NOT NULL' " + " FileSize bigint NOT NULL' " + " CrossRefSource int NOT NULL' " + " AnimeID int NOT NULL' " + " EpisodeID int NOT NULL' " + " Percentage int NOT NULL' " + " EpisodeOrder int NOT NULL' " + " CONSTRAINT [PK_CrossRef_File_Episode] PRIMARY KEY CLUSTERED " + " ( " + " CrossRef_File_EpisodeID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 638.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_CrossRef_Languages_AniDB_File,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_Languages_AniDB_File( " + " CrossRef_Languages_AniDB_FileID int IDENTITY(1'1) NOT NULL' " + " FileID int NOT NULL' " + " LanguageID int NOT NULL' " + " CONSTRAINT [PK_CrossRef_Languages_AniDB_File] PRIMARY KEY CLUSTERED  " + " ( " + " CrossRef_Languages_AniDB_FileID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 472.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_CrossRef_Subtitles_AniDB_File,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_Subtitles_AniDB_File( " + " CrossRef_Subtitles_AniDB_FileID int IDENTITY(1'1) NOT NULL' " + " FileID int NOT NULL' " + " LanguageID int NOT NULL' " + " CONSTRAINT [PK_CrossRef_Subtitles_AniDB_File] PRIMARY KEY CLUSTERED  " + " ( " + " CrossRef_Subtitles_AniDB_FileID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 472.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_FileNameHash,The length of the statement  "	cmds.Add ("CREATE TABLE FileNameHash ( " + " FileNameHashID int IDENTITY(1'1) NOT NULL' " + " FileName nvarchar(500) NOT NULL' " + " FileSize bigint NOT NULL' " + " Hash varchar(50) NOT NULL' " + " DateTimeUpdated datetime NOT NULL' " + " CONSTRAINT [PK_FileNameHash] PRIMARY KEY CLUSTERED  " + " ( " + " FileNameHashID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 492.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_Language,The length of the statement  "	cmds.Add ("CREATE TABLE Language( " + " LanguageID int IDENTITY(1'1) NOT NULL' " + " LanguageName varchar(100) NOT NULL' " + " CONSTRAINT [PK_Language] PRIMARY KEY CLUSTERED  " + " ( " + " LanguageID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 372.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_ImportFolder,The length of the statement  "	cmds.Add ("CREATE TABLE ImportFolder( " + " ImportFolderID int IDENTITY(1'1) NOT NULL' " + " ImportFolderType int NOT NULL' " + " ImportFolderName nvarchar(max) NOT NULL' " + " ImportFolderLocation nvarchar(max) NOT NULL' " + " IsDropSource int NOT NULL' " + " IsDropDestination int NOT NULL' " + " CONSTRAINT [PK_ImportFolder] PRIMARY KEY CLUSTERED  " + " ( " + " ImportFolderID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 552.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_ScheduledUpdate,The length of the statement  "	cmds.Add ("CREATE TABLE ScheduledUpdate( " + " ScheduledUpdateID int IDENTITY(1'1) NOT NULL' " + " UpdateType int NOT NULL' " + " LastUpdate datetime NOT NULL' " + " UpdateDetails nvarchar(max) NOT NULL' " + " CONSTRAINT [PK_ScheduledUpdate] PRIMARY KEY CLUSTERED  " + " ( " + " ScheduledUpdateID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 469.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_VideoInfo,The length of the statement  "	cmds.Add ("CREATE TABLE VideoInfo ( " + " VideoInfoID int IDENTITY(1'1) NOT NULL' " + " Hash varchar(50) NOT NULL' " + " FileSize bigint NOT NULL' " + " FileName nvarchar(max) NOT NULL' " + " DateTimeUpdated datetime NOT NULL' " + " VideoCodec varchar(max) NOT NULL' " + " VideoBitrate varchar(max) NOT NULL' " + " VideoFrameRate varchar(max) NOT NULL' " + " VideoResolution varchar(max) NOT NULL' " + " AudioCodec varchar(max) NOT NULL' " + " AudioBitrate varchar(max) NOT NULL' " + " Duration bigint NOT NULL' " + " CONSTRAINT [PK_VideoInfo] PRIMARY KEY CLUSTERED  " + " ( " + " VideoInfoID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 765.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_DuplicateFile,The length of the statement  "	cmds.Add ("CREATE TABLE DuplicateFile( " + " DuplicateFileID int IDENTITY(1'1) NOT NULL' " + " FilePathFile1 nvarchar(max) NOT NULL' " + " FilePathFile2 nvarchar(max) NOT NULL' " + " ImportFolderIDFile1 int NOT NULL' " + " ImportFolderIDFile2 int NOT NULL' " + " Hash varchar(50) NOT NULL' " + " DateTimeUpdated datetime NOT NULL' " + " CONSTRAINT [PK_DuplicateFile] PRIMARY KEY CLUSTERED  " + " ( " + " DuplicateFileID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 592.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_GroupFilter,The length of the statement  "	cmds.Add ("CREATE TABLE GroupFilter( " + " GroupFilterID int IDENTITY(1'1) NOT NULL' " + " GroupFilterName nvarchar(max) NOT NULL' " + " ApplyToSeries int NOT NULL' " + " BaseCondition int NOT NULL' " + " SortingCriteria nvarchar(max)' " + " CONSTRAINT [PK_GroupFilter] PRIMARY KEY CLUSTERED  " + " ( " + " GroupFilterID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 493.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_GroupFilterCondition,The length of the statement  "	cmds.Add ("CREATE TABLE GroupFilterCondition( " + " GroupFilterConditionID int IDENTITY(1'1) NOT NULL' " + " GroupFilterID int NOT NULL' " + " ConditionType int NOT NULL' " + " ConditionOperator int NOT NULL' " + " ConditionParameter nvarchar(max) NOT NULL' " + " CONSTRAINT [PK_GroupFilterCondition] PRIMARY KEY CLUSTERED  " + " ( " + " GroupFilterConditionID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 533.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Vote,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Vote ( " + " AniDB_VoteID int IDENTITY(1'1) NOT NULL' " + " EntityID int NOT NULL' " + " VoteValue int NOT NULL' " + " VoteType int NOT NULL' " + " CONSTRAINT [PK_AniDB_Vote] PRIMARY KEY CLUSTERED  " + " ( " + " AniDB_VoteID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 427.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_TvDB_ImageFanart,The length of the statement  "	cmds.Add ("CREATE TABLE TvDB_ImageFanart( " + " TvDB_ImageFanartID int IDENTITY(1'1) NOT NULL' " + " Id int NOT NULL' " + " SeriesID int NOT NULL' " + " BannerPath nvarchar(MAX)'  " + " BannerType nvarchar(MAX)'  " + " BannerType2 nvarchar(MAX)'  " + " Colors nvarchar(MAX)'  " + " Language nvarchar(MAX)'  " + " ThumbnailPath nvarchar(MAX)'  " + " VignettePath nvarchar(MAX)'  " + " Enabled int NOT NULL' " + " Chosen int NOT NULL' " + " CONSTRAINT PK_TvDB_ImageFanart PRIMARY KEY CLUSTERED  " + " ( " + " TvDB_ImageFanartID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 698.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_TvDB_ImageWideBanner,The length of the statement  "	cmds.Add ("CREATE TABLE TvDB_ImageWideBanner( " + " TvDB_ImageWideBannerID int IDENTITY(1'1) NOT NULL' " + " Id int NOT NULL' " + " SeriesID int NOT NULL' " + " BannerPath nvarchar(MAX)'  " + " BannerType nvarchar(MAX)'  " + " BannerType2 nvarchar(MAX)'  " + " Language nvarchar(MAX)'  " + " Enabled int NOT NULL' " + " SeasonNumber int' " + " CONSTRAINT PK_TvDB_ImageWideBanner PRIMARY KEY CLUSTERED  " + " ( " + " TvDB_ImageWideBannerID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 611.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_TvDB_ImagePoster,The length of the statement  "	cmds.Add ("CREATE TABLE TvDB_ImagePoster( " + " TvDB_ImagePosterID int IDENTITY(1'1) NOT NULL' " + " Id int NOT NULL' " + " SeriesID int NOT NULL' " + " BannerPath nvarchar(MAX)'  " + " BannerType nvarchar(MAX)'  " + " BannerType2 nvarchar(MAX)'  " + " Language nvarchar(MAX)'  " + " Enabled int NOT NULL' " + " SeasonNumber int' " + " CONSTRAINT PK_TvDB_ImagePoster PRIMARY KEY CLUSTERED  " + " ( " + " TvDB_ImagePosterID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 595.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_TvDB_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE TvDB_Episode( " + " TvDB_EpisodeID int IDENTITY(1'1) NOT NULL' " + " Id int NOT NULL' " + " SeriesID int NOT NULL' " + " SeasonID int NOT NULL' " + " SeasonNumber int NOT NULL' " + " EpisodeNumber int NOT NULL' " + " EpisodeName nvarchar(MAX)' " + " Overview nvarchar(MAX)' " + " Filename nvarchar(MAX)' " + " EpImgFlag int NOT NULL' " + " FirstAired nvarchar(MAX)' " + " AbsoluteNumber int' " + " AirsAfterSeason int' " + " AirsBeforeEpisode int' " + " AirsBeforeSeason int' " + " CONSTRAINT PK_TvDB_Episode PRIMARY KEY CLUSTERED  " + " ( " + " TvDB_EpisodeID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 757.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_TvDB_Series,The length of the statement  "	cmds.Add ("CREATE TABLE TvDB_Series( " + " TvDB_SeriesID int IDENTITY(1'1) NOT NULL' " + " SeriesID int NOT NULL' " + " Overview nvarchar(MAX)' " + " SeriesName nvarchar(MAX)' " + " Status varchar(100)' " + " Banner varchar(100)' " + " Fanart varchar(100)' " + " Poster varchar(100)' " + " Lastupdated varchar(100)' " + " CONSTRAINT PK_TvDB_Series PRIMARY KEY CLUSTERED  " + " ( " + " TvDB_SeriesID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 571.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_DefaultImage,The length of the statement  "	cmds.Add ("CREATE TABLE AniDB_Anime_DefaultImage ( " + " AniDB_Anime_DefaultImageID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " ImageParentID int NOT NULL' " + " ImageParentType int NOT NULL' " + " ImageType int NOT NULL' " + " CONSTRAINT [PK_AniDB_Anime_DefaultImage] PRIMARY KEY CLUSTERED  " + " ( " + " [AniDB_Anime_DefaultImageID] ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 525.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_AniDB_Anime_DefaultImage,The length of the statement  "	cmds.Add ("CREATE UNIQUE INDEX UIX_AniDB_Anime_DefaultImage_ImageType ON AniDB_Anime_DefaultImage(AnimeID' ImageType)"); " is 120.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_MovieDB_Movie,The length of the statement  "	cmds.Add ("CREATE TABLE MovieDB_Movie( " + " MovieDB_MovieID int IDENTITY(1'1) NOT NULL' " + " MovieId int NOT NULL' " + " MovieName nvarchar(MAX)' " + " OriginalName nvarchar(MAX)' " + " Overview nvarchar(MAX)' " + " CONSTRAINT PK_MovieDB_Movie PRIMARY KEY CLUSTERED  " + " ( " + " MovieDB_MovieID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 471.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_MovieDB_Poster,The length of the statement  "	cmds.Add ("CREATE TABLE MovieDB_Poster( " + " MovieDB_PosterID int IDENTITY(1'1) NOT NULL' " + " ImageID varchar(100)' " + " MovieId int NOT NULL' " + " ImageType varchar(100)' " + " ImageSize varchar(100)'  " + " URL nvarchar(MAX)'  " + " ImageWidth int NOT NULL'  " + " ImageHeight int NOT NULL'  " + " Enabled int NOT NULL' " + " CONSTRAINT PK_MovieDB_Poster PRIMARY KEY CLUSTERED  " + " ( " + " MovieDB_PosterID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 588.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_MovieDB_Fanart,The length of the statement  "	cmds.Add ("CREATE TABLE MovieDB_Fanart( " + " MovieDB_FanartID int IDENTITY(1'1) NOT NULL' " + " ImageID varchar(100)' " + " MovieId int NOT NULL' " + " ImageType varchar(100)' " + " ImageSize varchar(100)'  " + " URL nvarchar(MAX)'  " + " ImageWidth int NOT NULL'  " + " ImageHeight int NOT NULL'  " + " Enabled int NOT NULL' " + " CONSTRAINT PK_MovieDB_Fanart PRIMARY KEY CLUSTERED  " + " ( " + " MovieDB_FanartID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 588.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_JMMUser,The length of the statement  "	cmds.Add ("CREATE TABLE JMMUser( " + " JMMUserID int IDENTITY(1'1) NOT NULL' " + " Username nvarchar(100)' " + " Password nvarchar(100)' " + " IsAdmin int NOT NULL' " + " IsAniDBUser int NOT NULL' " + " IsTraktUser int NOT NULL' " + " HideCategories nvarchar(MAX)' " + " CONSTRAINT PK_JMMUser PRIMARY KEY CLUSTERED  " + " ( " + " JMMUserID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 512.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_Trakt_Episode,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_Episode( " + " Trakt_EpisodeID int IDENTITY(1'1) NOT NULL' " + " Trakt_ShowID int NOT NULL' " + " Season int NOT NULL' " + " EpisodeNumber int NOT NULL' " + " Title nvarchar(MAX)' " + " URL nvarchar(500)' " + " Overview nvarchar(MAX)' " + " EpisodeImage nvarchar(500)' " + " CONSTRAINT PK_Trakt_Episode PRIMARY KEY CLUSTERED  " + " ( " + " Trakt_EpisodeID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 558.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_Trakt_ImagePoster,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_ImagePoster( " + " Trakt_ImagePosterID int IDENTITY(1'1) NOT NULL' " + " Trakt_ShowID int NOT NULL' " + " Season int NOT NULL' " + " ImageURL nvarchar(500)' " + " Enabled int NOT NULL' " + " CONSTRAINT PK_Trakt_ImagePoster PRIMARY KEY CLUSTERED  " + " ( " + " Trakt_ImagePosterID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 482.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_Trakt_ImageFanart,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_ImageFanart( " + " Trakt_ImageFanartID int IDENTITY(1'1) NOT NULL' " + " Trakt_ShowID int NOT NULL' " + " Season int NOT NULL' " + " ImageURL nvarchar(500)' " + " Enabled int NOT NULL' " + " CONSTRAINT PK_Trakt_ImageFanart PRIMARY KEY CLUSTERED  " + " ( " + " Trakt_ImageFanartID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 482.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_Trakt_Show,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_Show( " + " Trakt_ShowID int IDENTITY(1'1) NOT NULL' " + " TraktID nvarchar(500)' " + " Title nvarchar(MAX)' " + " Year nvarchar(500)' " + " URL nvarchar(500)' " + " Overview nvarchar(MAX)' " + " TvDB_ID int NULL' " + " CONSTRAINT PK_Trakt_Show PRIMARY KEY CLUSTERED  " + " ( " + " Trakt_ShowID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 497.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_Trakt_Season,The length of the statement  "	cmds.Add ("CREATE TABLE Trakt_Season( " + " Trakt_SeasonID int IDENTITY(1'1) NOT NULL' " + " Trakt_ShowID int NOT NULL' " + " Season int NOT NULL' " + " URL nvarchar(500)' " + " CONSTRAINT PK_Trakt_Season PRIMARY KEY CLUSTERED  " + " ( " + " Trakt_SeasonID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 429.
Long Statement,JMMServer.Databases,SQLServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLServer.cs,CreateTableString_CrossRef_AniDB_Trakt,The length of the statement  "	cmds.Add ("CREATE TABLE CrossRef_AniDB_Trakt( " + " CrossRef_AniDB_TraktID int IDENTITY(1'1) NOT NULL' " + " AnimeID int NOT NULL' " + " TraktID nvarchar(500)' " + " TraktSeasonNumber int NOT NULL' " + " CrossRefSource int NOT NULL' " + " CONSTRAINT [PK_CrossRef_AniDB_Trakt] PRIMARY KEY CLUSTERED " + " ( " + " CrossRef_AniDB_TraktID ASC " + " )WITH (PAD_INDEX  = OFF' STATISTICS_NORECOMPUTE  = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS  = ON' ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] " + " ) ON [PRIMARY] "); " is 507.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetFormattedTitle,The length of the statement  "		if (thisLanguage.Equals (Constants.AniDBLanguageType.Romaji) || thisLanguage.Equals (Constants.AniDBLanguageType.English)) { " is 124.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateEpisodes,The length of the statement  "		//List<AniDB_Episode> existingEps = repEps.GetByAnimeIDAndEpisodeTypeNumber(epraw.AnimeID' (enEpisodeType)epraw.EpisodeType' epraw.EpisodeNumber); " is 146.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateEpisodes,The length of the statement  "		var tempEps = session.CreateCriteria (typeof(AniDB_Episode)).Add (Restrictions.Eq ("AnimeID"' epraw.AnimeID)).Add (Restrictions.Eq ("EpisodeNumber"' epraw.EpisodeNumber)).Add (Restrictions.Eq ("EpisodeType"' epraw.EpisodeType)).List<AniDB_Episode> (); " is 251.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateEpisodes,The length of the statement  "		AniDB_Episode epNew = session.CreateCriteria (typeof(AniDB_Episode)).Add (Restrictions.Eq ("EpisodeID"' epraw.EpisodeID)).UniqueResult<AniDB_Episode> (); " is 153.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateTitles,The length of the statement  "	var titlesTemp = session.CreateCriteria (typeof(AniDB_Anime_Title)).Add (Restrictions.Eq ("AnimeID"' this.AnimeID)).List<AniDB_Anime_Title> (); " is 143.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateCategories,The length of the statement  "		AniDB_Category cat = session.CreateCriteria (typeof(AniDB_Category)).Add (Restrictions.Eq ("CategoryID"' rawcat.CategoryID)).UniqueResult<AniDB_Category> (); " is 157.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateCategories,The length of the statement  "		AniDB_Anime_Category anime_cat = session.CreateCriteria (typeof(AniDB_Anime_Category)).Add (Restrictions.Eq ("AnimeID"' rawcat.AnimeID)).Add (Restrictions.Eq ("CategoryID"' rawcat.CategoryID)).UniqueResult<AniDB_Anime_Category> (); " is 231.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateRelations,The length of the statement  "			logger.Info ("Adding command to download related anime for {0} ({1})' related anime ID = {2}"' this.MainTitle' this.AnimeID' anime_rel.RelatedAnimeID); " is 151.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateRelations,The length of the statement  "			//CommandRequest_GetAnimeHTTP cr_anime = new CommandRequest_GetAnimeHTTP(rawrel.RelatedAnimeID' false' downloadRelations); " is 122.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,CreateRecommendations,The length of the statement  "		AniDB_Recommendation rec = session.CreateCriteria (typeof(AniDB_Recommendation)).Add (Restrictions.Eq ("AnimeID"' rawRec.AnimeID)).Add (Restrictions.Eq ("UserID"' rawRec.UserID)).UniqueResult<AniDB_Recommendation> (); " is 217.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,ToContractAzure,The length of the statement  "		foreach (AniDB_Anime_Character animeChar in animeChars.Where (item => item.CharType.Equals ("main character in"' StringComparison.InvariantCultureIgnoreCase))) { " is 161.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,ToContractAzure,The length of the statement  "		foreach (AniDB_Anime_Character animeChar in animeChars.Where (item => !item.CharType.Equals ("main character in"' StringComparison.InvariantCultureIgnoreCase))) { " is 162.
Long Statement,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetRelatedAnimeRecursive,The length of the statement  "		if ((relationtype == "same setting") || (relationtype == "alternative setting") || (relationtype == "character") || (relationtype == "other")) { " is 144.
Long Statement,JMMServer.Entities,AnimeEpisode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeEpisode.cs,SaveWatchedStatus,The length of the statement  "			if (epUserRecord.WatchedDate.HasValue && watchedDate.HasValue && epUserRecord.WatchedDate.Value.Equals (watchedDate.Value)) { " is 125.
Long Statement,JMMServer.Entities,AnimeEpisode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeEpisode.cs,ToggleWatchedStatus,The length of the statement  "		vid.ToggleWatchedStatus (watched' updateOnline' watchedDate' updateStats' updateStatsCache' userID' scrobbleTrakt' true); " is 121.
Long Statement,JMMServer.Entities,AnimeGroup,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeGroup.cs,GetRelatedGroupsFromAnimeID,The length of the statement  "		if ((relationtype == "same setting") || (relationtype == "alternative setting") || (relationtype == "character") || (relationtype == "other")) { " is 144.
Long Statement,JMMServer.Entities,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeSeries.cs,GetSeriesName,The length of the statement  "			if (tvdbs != null && tvdbs.Count > 0 && !string.IsNullOrEmpty (tvdbs [0].SeriesName) && !tvdbs [0].SeriesName.ToUpper ().Contains ("**DUPLICATE")) " is 146.
Long Statement,JMMServer.Entities,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeSeries.cs,ToContract,The length of the statement  "	return this.ToContract (anime' tvDBCrossRefs' movieDBCrossRef' userRecord' sers' malDBCrossRef' false' null' null' null' null' forceimages); " is 140.
Long Statement,JMMServer.Entities,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeSeries.cs,UpdateStats,The length of the statement  "	logger.Info ("Starting Updating STATS for SERIES {0} ({1} - {2} - {3})"' this.ToString ()' watchedStats' missingEpsStats' updateAllGroupsAbove); " is 144.
Long Statement,JMMServer.Entities,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeSeries.cs,UpdateStats,The length of the statement  "			logger.Trace ("Got user records for SERIES {0}/{1} in {2}ms"' this.ToString ()' juser.Username' tsUser.TotalMilliseconds); " is 122.
Long Statement,JMMServer.Entities,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeSeries.cs,UpdateStats,The length of the statement  "	logger.Info ("Finished Updating STATS for SERIES {0} in {1}ms ({2} - {3} - {4})"' this.ToString ()' tsOverall.TotalMilliseconds' watchedStats' missingEpsStats' updateAllGroupsAbove); " is 182.
Long Statement,JMMServer.Entities,GroupFilter,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\GroupFilter.cs,ToContractExtended,The length of the statement  "	if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (this.GroupFilterID))) { " is 172.
Long Statement,JMMServer.Entities,GroupFilterCondition,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\GroupFilterCondition.cs,ToString,The length of the statement  "	return string.Format ("{0} - {1} - {2} - {3}"' GroupFilterConditionID' ConditionType' ConditionOperator' ConditionParameter); " is 125.
Long Statement,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The length of the statement  "				CommandRequest_UpdateMyListFileStatus cmd = new CommandRequest_UpdateMyListFileStatus (this.Hash' watched' false' watchedDate.HasValue ? Utils.GetAniDBDateAsSeconds (watchedDate) : 0); " is 184.
Long Statement,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The length of the statement  "				if (scrobbleTrakt && !string.IsNullOrEmpty (ServerSettings.Trakt_Username) && !string.IsNullOrEmpty (ServerSettings.Trakt_Password)) { " is 134.
Long Statement,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,MoveFileIfRequired,The length of the statement  "			foreach (string folderName in Directory.GetDirectories (this.ImportFolder.ImportFolderLocation' "*"' SearchOption.AllDirectories)) { " is 132.
Long Statement,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,RegisterFirewallAndHttpUser,The length of the statement  "	string everyone = new System.Security.Principal.SecurityIdentifier ("S-1-1-0").Translate (typeof(System.Security.Principal.NTAccount)).ToString (); " is 147.
Long Statement,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,RegisterFirewallAndHttpUser,The length of the statement  "	RunNetSh ("advfirewall firewall add rule name=\"JMM Server - Client Port\" dir=in action=allow protocol=TCP localport=" + jmmport); " is 131.
Long Statement,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,RegisterFirewallAndHttpUser,The length of the statement  "	RunNetSh ("advfirewall firewall add rule name=\"JMM Server - File Port\" dir=in action=allow protocol=TCP localport=" + jmmfileport); " is 133.
Long Statement,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,Base64DecodeUrl,The length of the statement  "	var base64EncodedBytes = System.Convert.FromBase64String (base64EncodedData.Replace ("-"' "+").Replace ("_"' "/").Replace ("'"' "=")); " is 134.
Long Statement,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,Process,The length of the statement  "			obj.Response.AddHeader ("Access-Control-Allow-Headers"' "accept' x-plex-token' x-plex-client-identifier' x-plex-username' x-plex-product' x-plex-device' x-plex-platform' x-plex-platform-version' x-plex-version' x-plex-device-name"); " is 232.
Long Statement,JMMServer.Providers.Azure,AzureWebAPI,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\Azure\AzureWebAPI.cs,Delete_CrossRefAniDBTvDB,The length of the statement  "	string uri = string.Format (@"http://{0}/api/CrossRef_AniDB_TvDB/{1}?p={2}&p2={3}&p3={4}&p4={5}&p5={6}&p6={7}&p7={8}"' azureHostBaseAddress' animeID' ServerSettings.AniDB_Username' aniDBStartEpisodeType' aniDBStartEpisodeNumber' tvDBID' tvDBSeasonNumber' tvDBStartEpisodeNumber' ServerSettings.WebCacheAuthKey); " is 311.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,LinkAniDBMAL,The length of the statement  "		string msg = string.Format ("Not using MAL link as this MAL ID ({0}) is already in use by {1}"' malID' xrefTemp.AnimeID); " is 121.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,RemoveLinkAniDBMAL,The length of the statement  "	CommandRequest_WebCacheDeleteXRefAniDBMAL req = new CommandRequest_WebCacheDeleteXRefAniDBMAL (animeID' epType' epNumber); " is 122.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,GetMALAnimeList,The length of the statement  "		string url = string.Format ("http://myanimelist.net/malappinfo.php?u={0}&status=all&type=anime"' ServerSettings.MAL_Username); " is 126.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The length of the statement  "		if (ServerSettings.MAL_NeverDecreaseWatchedNums)//if set' check watched number before update: take some time' as user anime list must be loaded " is 143.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The length of the statement  "		// MAL Equivalent = AniDB Normal Eps 1 - 25 / Code Geass: Hangyaku no Lelouch R2 / hxxp://myanimelist.net/anime/2904/Code_Geass:_Hangyaku_no_Lelouch_R2 " is 151.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The length of the statement  "		// MAL Equivalent = AniDB Special Eps 1 - 9 / Code Geass: Hangyaku no Lelouch R2 Picture Drama / hxxp://myanimelist.net/anime/5163/Code_Geass:_Hangyaku_no_Lelouch_R2_Picture_Drama " is 179.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The length of the statement  "		// MAL Equivalent = AniDB Special Eps 9 - 18 / Code Geass: Hangyaku no Lelouch R2: Flash Specials / hxxp://myanimelist.net/anime/9591/Code_Geass:_Hangyaku_no_Lelouch_R2:_Flash_Specials " is 184.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The length of the statement  "		// MAL Equivalent = AniDB Special Eps 20 / Code Geass: Hangyaku no Lelouch - Kiseki no Birthday Picture Drama / hxxp://myanimelist.net/anime/8728/Code_Geass:_Hangyaku_no_Lelouch_-_Kiseki_no_Birthday_Picture_Drama " is 212.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The length of the statement  "				if (xref.StartEpisodeType == (int)ep.EpisodeTypeEnum && epNum >= xref.StartEpisodeNumber && epNum <= GetUpperEpisodeLimit (crossRefs' xref)) { " is 142.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The length of the statement  "						if (!string.IsNullOrEmpty (contract.AniDB_Anime_GroupNameShort) && !fanSubGroups.Contains (contract.AniDB_Anime_GroupNameShort)) " is 128.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The length of the statement  "				logger.Error ("updateMAL' episode number > matching anime episode total : {0} ({1}) / {2}"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID' epNumber); " is 165.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The length of the statement  "				string confirmationMessage = string.Format ("MAL successfully updated' mal id: {0}' ep: {1}' score: {2}"' malID' lastWatchedEpNumber' score); " is 141.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,AddAnime,The length of the statement  "		string animeValuesXMLString = string.Format ("?data=<entry><episode>{0}</episode><status>{1}</status><score>{2}</score><downloaded_episodes>{3}</downloaded_episodes><fansub_group>{4}</fansub_group></entry>"' lastEpisodeWatched' status' score' downloadedEps' fanSubs); " is 267.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,AddAnime,The length of the statement  "		res = SendMALAuthenticatedRequest ("http://myanimelist.net/api/animelist/add/" + animeId + ".xml" + animeValuesXMLString); " is 122.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,ModifyAnime,The length of the statement  "		string animeValuesXMLString = string.Format ("?data=<entry><episode>{0}</episode><status>{1}</status><score>{2}</score><downloaded_episodes>{3}</downloaded_episodes><fansub_group>{4}</fansub_group></entry>"' lastEpisodeWatched' status' score' downloadedEps' fanSubs); " is 267.
Long Statement,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,ModifyAnime,The length of the statement  "		res = SendMALAuthenticatedRequest ("http://myanimelist.net/api/animelist/update/" + animeId + ".xml" + animeValuesXMLString); " is 125.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetShowShouts,The length of the statement  "					CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true); " is 130.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetActivityFriends,The length of the statement  "					CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true); " is 130.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetActivityFriends,The length of the statement  "				Trakt_Episode episode = repEpisodes.GetByShowIDSeasonAndEpisode (show.Trakt_ShowID' int.Parse (act.episode.season)' int.Parse (act.episode.number)); " is 148.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetActivityFriends,The length of the statement  "						CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (episode.Trakt_EpisodeID' JMMImageType.Trakt_Episode' false); " is 129.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetFriends,The length of the statement  "		string url = string.Format (Constants.TraktTvURLs.URLGetFriends' Constants.TraktTvURLs.APIKey' ServerSettings.Trakt_Username); " is 126.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetFriends,The length of the statement  "				friends = JSONHelper.Deserialize<List<TraktTVUser>>(json);*/Trakt_ShowRepository repShows = new Trakt_ShowRepository (); " is 120.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetFriends,The length of the statement  "					CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true); " is 130.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetFriends,The length of the statement  "					Trakt_Episode episode = repEpisodes.GetByShowIDSeasonAndEpisode (show.Trakt_ShowID' int.Parse (wtch.episode.season)' int.Parse (wtch.episode.number)); " is 150.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetFriends,The length of the statement  "							CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (episode.Trakt_EpisodeID' JMMImageType.Trakt_Episode' false); " is 129.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,SaveExtendedShowInfo,The length of the statement  "				Trakt_Episode episode = repEpisodes.GetByShowIDSeasonAndEpisode (show.Trakt_ShowID' int.Parse (ep.season)' int.Parse (ep.episode)); " is 131.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,LinkAniDBTrakt,The length of the statement  "		string msg = string.Format ("Not using Trakt link as one already exists {0} ({1}) - {2}"' traktID' seasonNumber' animeID); " is 122.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,LinkAniDBTrakt,The length of the statement  "	CommandRequest_WebCacheSendXRefAniDBTrakt req = new CommandRequest_WebCacheSendXRefAniDBTrakt (xref.CrossRef_AniDB_TraktID); " is 124.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetUserCollection,The length of the statement  "		string url = string.Format (Constants.TraktTvURLs.URLUserLibraryShowsCollection' Constants.TraktTvURLs.APIKey' ServerSettings.Trakt_Username); " is 142.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetUserWatched,The length of the statement  "		string url = string.Format (Constants.TraktTvURLs.URLUserLibraryShowsWatched' Constants.TraktTvURLs.APIKey' ServerSettings.Trakt_Username); " is 139.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,DownloadAllImages,The length of the statement  "						CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (fanart.Trakt_ImageFanartID' JMMImageType.Trakt_Fanart' false); " is 131.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,DownloadAllImages,The length of the statement  "							CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (poster.Trakt_ImagePosterID' JMMImageType.Trakt_Poster' false); " is 131.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,DownloadAllImages,The length of the statement  "							CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (ep.Trakt_EpisodeID' JMMImageType.Trakt_Episode' false); " is 124.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,MarkEpisodeWatched,The length of the statement  "		GetTraktEpisodeNumber (ep' ep.GetAnimeSeries ()' show' xref.TraktSeasonNumber' ref retEpNum' ref retSeason' dictTraktEpisodes' dictTraktSpecials' dictTraktSeasons); " is 164.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,MarkEpisodeUnwatched,The length of the statement  "		GetTraktEpisodeNumber (ep' ep.GetAnimeSeries ()' show' xref.TraktSeasonNumber' ref retEpNum' ref retSeason' dictTraktEpisodes' dictTraktSpecials' dictTraktSeasons); " is 164.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,SyncCollectionToTrakt_Series,The length of the statement  "				GetTraktEpisodeNumber (ep' series' show' xref.TraktSeasonNumber' ref retEpNum' ref retSeason' dictTraktEpisodes' dictTraktSpecials' dictTraktSeasons); " is 150.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,SyncCollectionToTrakt,The length of the statement  "			CommandRequest_TraktSyncCollectionSeries cmd = new CommandRequest_TraktSyncCollectionSeries (series.AnimeSeriesID' series.GetAnime ().MainTitle); " is 145.
Long Statement,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetTraktEpisodeNumber,The length of the statement  "	GetTraktEpisodeNumber (aniepisode' ser' show' season' ref traktEpNum' ref traktSeason' dictTraktEpisodes' dictTraktSpecials' dictTraktSeasons); " is 143.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,GetSeriesInfoOnline,The length of the statement  "		string url = string.Format (Constants.TvDBURLs.urlSeriesBaseXML' URLMirror' Constants.TvDBURLs.apiKey' seriesID' ServerSettings.TvDB_Language); " is 143.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,GetFullSeriesInfo,The length of the statement  "		string url = string.Format (Constants.TvDBURLs.urlFullSeriesData' urlMirror' Constants.TvDBURLs.apiKey' seriesID' ServerSettings.TvDB_Language); " is 144.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,DownloadAutomaticImages,The length of the statement  "					CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (img.TvDB_ImageFanartID' JMMImageType.TvDB_FanArt' forceDownload); " is 134.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,DownloadAutomaticImages,The length of the statement  "					CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (img.TvDB_ImagePosterID' JMMImageType.TvDB_Cover' forceDownload); " is 133.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,DownloadAutomaticImages,The length of the statement  "					CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (img.TvDB_ImageWideBannerID' JMMImageType.TvDB_Banner' forceDownload); " is 138.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,UpdateAllInfoAndImages,The length of the statement  "								CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (ep.TvDB_EpisodeID' JMMImageType.TvDB_Episode' forceRefresh); " is 129.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,LinkAniDBTvDB,The length of the statement  "		List<CrossRef_AniDB_TvDBV2> xrefTemps = repCrossRef.GetByAnimeIDEpTypeEpNumber (session' animeID' (int)aniEpType' aniEpNumber); " is 127.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,LinkAniDBTvDB,The length of the statement  "				TvDBHelper.RemoveLinkAniDBTvDB (xrefTemp.AnimeID' (enEpisodeType)xrefTemp.AniDBStartEpisodeType' xrefTemp.AniDBStartEpisodeNumber' xrefTemp.TvDBID' xrefTemp.TvDBSeasonNumber' xrefTemp.TvDBStartEpisodeNumber); " is 208.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,LinkAniDBTvDB,The length of the statement  "		CommandRequest_TvDBUpdateSeriesAndEpisodes cmdSeriesEps = new CommandRequest_TvDBUpdateSeriesAndEpisodes (tvDBID' false); " is 121.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,LinkAniDBTvDB,The length of the statement  "		CrossRef_AniDB_TvDBV2 xref = repCrossRef.GetByTvDBID (session' tvDBID' tvSeasonNumber' tvEpNumber' animeID' (int)aniEpType' aniEpNumber); " is 137.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,LinkAniDBTvDB,The length of the statement  "			CommandRequest_WebCacheSendXRefAniDBTvDB req = new CommandRequest_WebCacheSendXRefAniDBTvDB (xref.CrossRef_AniDB_TvDBV2ID); " is 123.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,RemoveLinkAniDBTvDB,The length of the statement  "	CrossRef_AniDB_TvDBV2 xref = repCrossRef.GetByTvDBID (tvDBID' tvSeasonNumber' tvEpNumber' animeID' (int)aniEpType' aniEpNumber); " is 128.
Long Statement,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,RemoveLinkAniDBTvDB,The length of the statement  "	CommandRequest_WebCacheDeleteXRefAniDBTvDB req = new CommandRequest_WebCacheDeleteXRefAniDBTvDB (animeID' (int)aniEpType' aniEpNumber' tvDBID' tvSeasonNumber' tvEpNumber); " is 171.
Long Statement,JMMServer.Repositories,AniDB_RecommendationRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_RecommendationRepository.cs,GetByAnimeID,The length of the statement  "	var votes = session.CreateCriteria (typeof(AniDB_Recommendation)).Add (Restrictions.Eq ("AnimeID"' id)).List<AniDB_Recommendation> (); " is 134.
Long Statement,JMMServer.Repositories,BookmarkedAnimeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\BookmarkedAnimeRepository.cs,GetByAnimeID,The length of the statement  "		BookmarkedAnime cr = session.CreateCriteria (typeof(BookmarkedAnime)).Add (Restrictions.Eq ("AnimeID"' animeID)).UniqueResult<BookmarkedAnime> (); " is 146.
Long Statement,JMMServer.Repositories,BookmarkedAnimeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\BookmarkedAnimeRepository.cs,GetAll,The length of the statement  "		var series = session.CreateCriteria (typeof(BookmarkedAnime)).AddOrder (Order.Asc ("Priority")).List<BookmarkedAnime> (); " is 121.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_MALRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_MALRepository.cs,GetByAnimeID,The length of the statement  "	var xrefs = session.CreateCriteria (typeof(CrossRef_AniDB_MAL)).Add (Restrictions.Eq ("AnimeID"' id)).AddOrder (Order.Asc ("StartEpisodeType")).AddOrder (Order.Asc ("StartEpisodeNumber")).List<CrossRef_AniDB_MAL> (); " is 216.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_MALRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_MALRepository.cs,GetByMALID,The length of the statement  "		CrossRef_AniDB_MAL cr = session.CreateCriteria (typeof(CrossRef_AniDB_MAL)).Add (Restrictions.Eq ("MALID"' id)).UniqueResult<CrossRef_AniDB_MAL> (); " is 148.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_MALRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_MALRepository.cs,GetByAnimeConstraint,The length of the statement  "		CrossRef_AniDB_MAL cr = session.CreateCriteria (typeof(CrossRef_AniDB_MAL)).Add (Restrictions.Eq ("AnimeID"' animeID)).Add (Restrictions.Eq ("StartEpisodeType"' epType)).Add (Restrictions.Eq ("StartEpisodeNumber"' epNumber)).AddOrder (Order.Asc ("StartEpisodeType")).AddOrder (Order.Asc ("StartEpisodeNumber")).UniqueResult<CrossRef_AniDB_MAL> (); " is 347.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_TvDBV2Repository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TvDBV2Repository.cs,GetByAnimeID,The length of the statement  "	var xrefs = session.CreateCriteria (typeof(CrossRef_AniDB_TvDBV2)).Add (Restrictions.Eq ("AnimeID"' id)).AddOrder (Order.Asc ("AniDBStartEpisodeType")).AddOrder (Order.Asc ("AniDBStartEpisodeNumber")).List<CrossRef_AniDB_TvDBV2> (); " is 232.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_TvDBV2Repository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TvDBV2Repository.cs,GetByAnimeIDEpTypeEpNumber,The length of the statement  "	var xrefs = session.CreateCriteria (typeof(CrossRef_AniDB_TvDBV2)).Add (Restrictions.Eq ("AnimeID"' id)).Add (Restrictions.Eq ("AniDBStartEpisodeType"' aniEpType)).Add (Restrictions.Eq ("AniDBStartEpisodeNumber"' aniEpisodeNumber)).List<CrossRef_AniDB_TvDBV2> (); " is 263.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_TvDBV2Repository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TvDBV2Repository.cs,GetByTvDBID,The length of the statement  "	CrossRef_AniDB_TvDBV2 cr = session.CreateCriteria (typeof(CrossRef_AniDB_TvDBV2)).Add (Restrictions.Eq ("TvDBID"' id)).Add (Restrictions.Eq ("TvDBSeasonNumber"' season)).Add (Restrictions.Eq ("TvDBStartEpisodeNumber"' episodeNumber)).Add (Restrictions.Eq ("AnimeID"' animeID)).Add (Restrictions.Eq ("AniDBStartEpisodeType"' aniEpType)).Add (Restrictions.Eq ("AniDBStartEpisodeNumber"' aniEpisodeNumber)).UniqueResult<CrossRef_AniDB_TvDBV2> (); " is 443.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_TvDB_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TvDB_EpisodeRepository.cs,GetByAniDBEpisodeID,The length of the statement  "		CrossRef_AniDB_TvDB_Episode cr = session.CreateCriteria (typeof(CrossRef_AniDB_TvDB_Episode)).Add (Restrictions.Eq ("AniDBEpisodeID"' id)).UniqueResult<CrossRef_AniDB_TvDB_Episode> (); " is 184.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_TvDB_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TvDB_EpisodeRepository.cs,GetByAnimeID,The length of the statement  "	var objs = session.CreateCriteria (typeof(CrossRef_AniDB_TvDB_Episode)).Add (Restrictions.Eq ("AnimeID"' id)).List<CrossRef_AniDB_TvDB_Episode> (); " is 147.
Long Statement,JMMServer.Repositories,FileFfdshowPresetRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\FileFfdshowPresetRepository.cs,GetByHashAndSize,The length of the statement  "		FileFfdshowPreset obj = session.CreateCriteria (typeof(FileFfdshowPreset)).Add (Restrictions.Eq ("Hash"' hash)).Add (Restrictions.Eq ("FileSize"' fsize)).UniqueResult<FileFfdshowPreset> (); " is 189.
Long Statement,JMMServer.Repositories,LogMessageRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\LogMessageRepository.cs,GetByLogType,The length of the statement  "	var objs = session.CreateCriteria (typeof(LogMessage)).Add (Restrictions.Eq ("LogType"' logType)).AddOrder (Order.Desc ("LogDate")).List<LogMessage> (); " is 152.
Long Statement,JMMServer.Repositories,RenameScriptRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\RenameScriptRepository.cs,GetDefaultScript,The length of the statement  "		RenameScript cr = session.CreateCriteria (typeof(RenameScript)).Add (Restrictions.Eq ("IsEnabledOnImport"' 1)).UniqueResult<RenameScript> (); " is 141.
Long Statement,JMMServer.Repositories,AniDB_AnimeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_AnimeRepository.cs,GetByAnimeID,The length of the statement  "		AniDB_Anime cr = session.CreateCriteria (typeof(AniDB_Anime)).Add (Restrictions.Eq ("AnimeID"' id)).UniqueResult<AniDB_Anime> (); " is 129.
Long Statement,JMMServer.Repositories,AniDB_AnimeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_AnimeRepository.cs,GetByAnimeID,The length of the statement  "	AniDB_Anime cr = session.CreateCriteria (typeof(AniDB_Anime)).Add (Restrictions.Eq ("AnimeID"' id)).UniqueResult<AniDB_Anime> (); " is 129.
Long Statement,JMMServer.Repositories,AniDB_AnimeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_AnimeRepository.cs,GetForDate,The length of the statement  "	var objs = session.CreateCriteria (typeof(AniDB_Anime)).Add (Restrictions.Ge ("AirDate"' startDate)).Add (Restrictions.Le ("AirDate"' endDate)).AddOrder (Order.Asc ("AirDate")).List<AniDB_Anime> (); " is 198.
Long Statement,JMMServer.Repositories,AniDB_AnimeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_AnimeRepository.cs,SearchByName,The length of the statement  "	var objs = session.CreateCriteria (typeof(AniDB_Anime)).Add (Restrictions.InsensitiveLike ("AllTitles"' queryText' MatchMode.Anywhere)).List<AniDB_Anime> (); " is 157.
Long Statement,JMMServer.Repositories,AniDB_Anime_CategoryRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_CategoryRepository.cs,GetByAnimeIDAndCategoryID,The length of the statement  "		AniDB_Anime_Category cr = session.CreateCriteria (typeof(AniDB_Anime_Category)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("CategoryID"' catid)).UniqueResult<AniDB_Anime_Category> (); " is 205.
Long Statement,JMMServer.Repositories,AniDB_Anime_CategoryRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_CategoryRepository.cs,GetByAnimeID,The length of the statement  "		var cats = session.CreateCriteria (typeof(AniDB_Anime_Category)).Add (Restrictions.Eq ("AnimeID"' id)).AddOrder (Order.Desc ("Weighting")).List<AniDB_Anime_Category> (); " is 169.
Long Statement,JMMServer.Repositories,AniDB_Anime_CategoryRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_CategoryRepository.cs,GetByAnimeID,The length of the statement  "	var cats = session.CreateCriteria (typeof(AniDB_Anime_Category)).Add (Restrictions.Eq ("AnimeID"' id)).AddOrder (Order.Desc ("Weighting")).List<AniDB_Anime_Category> (); " is 169.
Long Statement,JMMServer.Repositories,AniDB_Anime_CategoryRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_CategoryRepository.cs,GetAllForLocalSeries,The length of the statement  "		var animeCats = session.CreateQuery ("FROM AniDB_Anime_Category aac WHERE aac.AnimeID in (Select aser.AniDB_ID From AnimeSeries aser)").List<AniDB_Anime_Category> (); " is 166.
Long Statement,JMMServer.Repositories,AniDB_Anime_CharacterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_CharacterRepository.cs,GetByAnimeID,The length of the statement  "		var cats = session.CreateCriteria (typeof(AniDB_Anime_Character)).Add (Restrictions.Eq ("AnimeID"' id)).List<AniDB_Anime_Character> (); " is 135.
Long Statement,JMMServer.Repositories,AniDB_Anime_CharacterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_CharacterRepository.cs,GetByAnimeID,The length of the statement  "	var cats = session.CreateCriteria (typeof(AniDB_Anime_Character)).Add (Restrictions.Eq ("AnimeID"' id)).List<AniDB_Anime_Character> (); " is 135.
Long Statement,JMMServer.Repositories,AniDB_Anime_CharacterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_CharacterRepository.cs,GetByCharID,The length of the statement  "		var cats = session.CreateCriteria (typeof(AniDB_Anime_Character)).Add (Restrictions.Eq ("CharID"' id)).List<AniDB_Anime_Character> (); " is 134.
Long Statement,JMMServer.Repositories,AniDB_Anime_CharacterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_CharacterRepository.cs,GetByAnimeIDAndCharID,The length of the statement  "		AniDB_Anime_Character cr = session.CreateCriteria (typeof(AniDB_Anime_Character)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("CharID"' charid)).UniqueResult<AniDB_Anime_Character> (); " is 205.
Long Statement,JMMServer.Repositories,AniDB_Anime_DefaultImageRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_DefaultImageRepository.cs,GetByAnimeIDAndImagezSizeType,The length of the statement  "	AniDB_Anime_DefaultImage cr = session.CreateCriteria (typeof(AniDB_Anime_DefaultImage)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("ImageType"' imageType)).UniqueResult<AniDB_Anime_DefaultImage> (); " is 220.
Long Statement,JMMServer.Repositories,AniDB_Anime_DefaultImageRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_DefaultImageRepository.cs,GetByAnimeID,The length of the statement  "		var cats = session.CreateCriteria (typeof(AniDB_Anime_DefaultImage)).Add (Restrictions.Eq ("AnimeID"' id)).List<AniDB_Anime_DefaultImage> (); " is 141.
Long Statement,JMMServer.Repositories,AniDB_Anime_RelationRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_RelationRepository.cs,GetByAnimeIDAndRelationID,The length of the statement  "	AniDB_Anime_Relation cr = session.CreateCriteria (typeof(AniDB_Anime_Relation)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("RelatedAnimeID"' relatedanimeid)).UniqueResult<AniDB_Anime_Relation> (); " is 218.
Long Statement,JMMServer.Repositories,AniDB_Anime_RelationRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_RelationRepository.cs,GetByAnimeID,The length of the statement  "	var cats = session.CreateCriteria (typeof(AniDB_Anime_Relation)).Add (Restrictions.Eq ("AnimeID"' id)).List<AniDB_Anime_Relation> (); " is 133.
Long Statement,JMMServer.Repositories,AniDB_Anime_ReviewRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_ReviewRepository.cs,GetByAnimeIDAndReviewID,The length of the statement  "		AniDB_Anime_Review cr = session.CreateCriteria (typeof(AniDB_Anime_Review)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("ReviewID"' reviewid)).UniqueResult<AniDB_Anime_Review> (); " is 200.
Long Statement,JMMServer.Repositories,AniDB_Anime_ReviewRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_ReviewRepository.cs,GetByAnimeID,The length of the statement  "		var cats = session.CreateCriteria (typeof(AniDB_Anime_Review)).Add (Restrictions.Eq ("AnimeID"' id)).List<AniDB_Anime_Review> (); " is 129.
Long Statement,JMMServer.Repositories,AniDB_Anime_SimilarRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_SimilarRepository.cs,GetByAnimeIDAndSimilarID,The length of the statement  "		AniDB_Anime_Similar cr = session.CreateCriteria (typeof(AniDB_Anime_Similar)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("SimilarAnimeID"' similaranimeid)).UniqueResult<AniDB_Anime_Similar> (); " is 215.
Long Statement,JMMServer.Repositories,AniDB_Anime_SimilarRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_SimilarRepository.cs,GetByAnimeIDAndSimilarID,The length of the statement  "	AniDB_Anime_Similar cr = session.CreateCriteria (typeof(AniDB_Anime_Similar)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("SimilarAnimeID"' similaranimeid)).UniqueResult<AniDB_Anime_Similar> (); " is 215.
Long Statement,JMMServer.Repositories,AniDB_Anime_SimilarRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_SimilarRepository.cs,GetByAnimeID,The length of the statement  "	var cats = session.CreateCriteria (typeof(AniDB_Anime_Similar)).Add (Restrictions.Eq ("AnimeID"' id)).AddOrder (Order.Desc ("Approval")).List<AniDB_Anime_Similar> (); " is 166.
Long Statement,JMMServer.Repositories,AniDB_Anime_TagRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_TagRepository.cs,GetByAnimeIDAndTagID,The length of the statement  "		AniDB_Anime_Tag cr = session.CreateCriteria (typeof(AniDB_Anime_Tag)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("TagID"' tagid)).UniqueResult<AniDB_Anime_Tag> (); " is 185.
Long Statement,JMMServer.Repositories,AniDB_Anime_TagRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_TagRepository.cs,GetByAnimeIDAndTagID,The length of the statement  "	AniDB_Anime_Tag cr = session.CreateCriteria (typeof(AniDB_Anime_Tag)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("TagID"' tagid)).UniqueResult<AniDB_Anime_Tag> (); " is 185.
Long Statement,JMMServer.Repositories,AniDB_Anime_TagRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_TagRepository.cs,GetByAnimeID,The length of the statement  "		var tags = session.CreateCriteria (typeof(AniDB_Anime_Tag)).Add (Restrictions.Eq ("AnimeID"' id)).List<AniDB_Anime_Tag> (); " is 123.
Long Statement,JMMServer.Repositories,AniDB_Anime_TagRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_TagRepository.cs,GetByAnimeID,The length of the statement  "	var tags = session.CreateCriteria (typeof(AniDB_Anime_Tag)).Add (Restrictions.Eq ("AnimeID"' id)).List<AniDB_Anime_Tag> (); " is 123.
Long Statement,JMMServer.Repositories,AniDB_Anime_TagRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_TagRepository.cs,GetAllForLocalSeries,The length of the statement  "		var tags = session.CreateQuery ("FROM AniDB_Anime_Tag tag WHERE tag.AnimeID in (Select aser.AniDB_ID From AnimeSeries aser)").List<AniDB_Anime_Tag> (); " is 151.
Long Statement,JMMServer.Repositories,AniDB_Anime_TitleRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_TitleRepository.cs,GetByAnimeID,The length of the statement  "		var titles = session.CreateCriteria (typeof(AniDB_Anime_Title)).Add (Restrictions.Eq ("AnimeID"' id)).List<AniDB_Anime_Title> (); " is 129.
Long Statement,JMMServer.Repositories,AniDB_Anime_TitleRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_TitleRepository.cs,GetByAnimeID,The length of the statement  "	var titles = session.CreateCriteria (typeof(AniDB_Anime_Title)).Add (Restrictions.Eq ("AnimeID"' id)).List<AniDB_Anime_Title> (); " is 129.
Long Statement,JMMServer.Repositories,AniDB_Anime_TitleRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_TitleRepository.cs,GetByAnimeIDLanguageTypeValue,The length of the statement  "		var titles = session.CreateCriteria (typeof(AniDB_Anime_Title)).Add (Restrictions.Eq ("AnimeID"' animeID)).Add (Restrictions.Eq ("TitleType"' titleType)).Add (Restrictions.Eq ("Language"' language)).Add (Restrictions.Eq ("Title"' titleValue)).List<AniDB_Anime_Title> (); " is 270.
Long Statement,JMMServer.Repositories,AniDB_Anime_TitleRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Anime_TitleRepository.cs,GetAllForLocalSeries,The length of the statement  "		var titles = session.CreateQuery ("FROM AniDB_Anime_Title aat WHERE aat.AnimeID IN (Select aser.AniDB_ID From AnimeSeries aser)").List<AniDB_Anime_Title> (); " is 157.
Long Statement,JMMServer.Repositories,AniDB_CategoryRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_CategoryRepository.cs,GetByCategoryID,The length of the statement  "	AniDB_Category cr = session.CreateCriteria (typeof(AniDB_Category)).Add (Restrictions.Eq ("CategoryID"' id)).UniqueResult<AniDB_Category> (); " is 141.
Long Statement,JMMServer.Repositories,AniDB_CategoryRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_CategoryRepository.cs,GetByAnimeID,The length of the statement  "		var cats = session.CreateQuery ("Select cat FROM AniDB_Category as cat' AniDB_Anime_Category as xref WHERE cat.CategoryID = xref.CategoryID AND xref.AnimeID= :animeID").SetParameter ("animeID"' animeID).List<AniDB_Category> (); " is 227.
Long Statement,JMMServer.Repositories,AniDB_CategoryRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_CategoryRepository.cs,GetByAnimeID,The length of the statement  "	var cats = session.CreateQuery ("Select cat FROM AniDB_Category as cat' AniDB_Anime_Category as xref WHERE cat.CategoryID = xref.CategoryID AND xref.AnimeID= :animeID").SetParameter ("animeID"' animeID).List<AniDB_Category> (); " is 227.
Long Statement,JMMServer.Repositories,AniDB_CategoryRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_CategoryRepository.cs,GetAllForLocalSeries,The length of the statement  "		var animeCats = session.CreateQuery ("FROM AniDB_Category ac WHERE ac.CategoryID in (SELECT aac.CategoryID FROM AniDB_Anime_Category aac' AnimeSeries aser WHERE aac.AnimeID = aser.AniDB_ID)").List<AniDB_Category> (); " is 216.
Long Statement,JMMServer.Repositories,AniDB_CharacterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_CharacterRepository.cs,GetByCharID,The length of the statement  "	AniDB_Character cr = session.CreateCriteria (typeof(AniDB_Character)).Add (Restrictions.Eq ("CharID"' id)).UniqueResult<AniDB_Character> (); " is 140.
Long Statement,JMMServer.Repositories,AniDB_Character_SeiyuuRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Character_SeiyuuRepository.cs,GetByCharIDAndSeiyuuID,The length of the statement  "		AniDB_Character_Seiyuu cr = session.CreateCriteria (typeof(AniDB_Character_Seiyuu)).Add (Restrictions.Eq ("CharID"' animeid)).Add (Restrictions.Eq ("SeiyuuID"' catid)).UniqueResult<AniDB_Character_Seiyuu> (); " is 208.
Long Statement,JMMServer.Repositories,AniDB_Character_SeiyuuRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Character_SeiyuuRepository.cs,GetByCharIDAndSeiyuuID,The length of the statement  "	AniDB_Character_Seiyuu cr = session.CreateCriteria (typeof(AniDB_Character_Seiyuu)).Add (Restrictions.Eq ("CharID"' animeid)).Add (Restrictions.Eq ("SeiyuuID"' catid)).UniqueResult<AniDB_Character_Seiyuu> (); " is 208.
Long Statement,JMMServer.Repositories,AniDB_Character_SeiyuuRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Character_SeiyuuRepository.cs,GetByCharID,The length of the statement  "	var objs = session.CreateCriteria (typeof(AniDB_Character_Seiyuu)).Add (Restrictions.Eq ("CharID"' id)).List<AniDB_Character_Seiyuu> (); " is 136.
Long Statement,JMMServer.Repositories,AniDB_Character_SeiyuuRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_Character_SeiyuuRepository.cs,GetBySeiyuuID,The length of the statement  "		var objs = session.CreateCriteria (typeof(AniDB_Character_Seiyuu)).Add (Restrictions.Eq ("SeiyuuID"' id)).List<AniDB_Character_Seiyuu> (); " is 138.
Long Statement,JMMServer.Repositories,AniDB_SeiyuuRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_SeiyuuRepository.cs,GetBySeiyuuID,The length of the statement  "		AniDB_Seiyuu cr = session.CreateCriteria (typeof(AniDB_Seiyuu)).Add (Restrictions.Eq ("SeiyuuID"' id)).UniqueResult<AniDB_Seiyuu> (); " is 133.
Long Statement,JMMServer.Repositories,AniDB_SeiyuuRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_SeiyuuRepository.cs,GetBySeiyuuID,The length of the statement  "	AniDB_Seiyuu cr = session.CreateCriteria (typeof(AniDB_Seiyuu)).Add (Restrictions.Eq ("SeiyuuID"' id)).UniqueResult<AniDB_Seiyuu> (); " is 133.
Long Statement,JMMServer.Repositories,AniDB_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_EpisodeRepository.cs,GetByEpisodeID,The length of the statement  "		AniDB_Episode cr = session.CreateCriteria (typeof(AniDB_Episode)).Add (Restrictions.Eq ("EpisodeID"' id)).UniqueResult<AniDB_Episode> (); " is 137.
Long Statement,JMMServer.Repositories,AniDB_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_EpisodeRepository.cs,GetByAnimeIDAndEpisodeNumber,The length of the statement  "		var eps = session.CreateCriteria (typeof(AniDB_Episode)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("EpisodeNumber"' epnumber)).Add (Restrictions.Eq ("EpisodeType"' (int)enEpisodeType.Episode)).List<AniDB_Episode> (); " is 239.
Long Statement,JMMServer.Repositories,AniDB_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_EpisodeRepository.cs,GetByAnimeIDAndEpisodeTypeNumber,The length of the statement  "		var eps = session.CreateCriteria (typeof(AniDB_Episode)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("EpisodeNumber"' epnumber)).Add (Restrictions.Eq ("EpisodeType"' (int)epType)).List<AniDB_Episode> (); " is 224.
Long Statement,JMMServer.Repositories,AniDB_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_EpisodeRepository.cs,GetEpisodesWithMultipleFiles,The length of the statement  "		var eps = session.CreateQuery ("FROM AniDB_Episode x WHERE x.EpisodeID IN (Select xref.EpisodeID FROM CrossRef_File_Episode xref GROUP BY xref.EpisodeID HAVING COUNT(xref.EpisodeID) > 1)").List<AniDB_Episode> (); " is 212.
Long Statement,JMMServer.Repositories,AniDB_FileRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_FileRepository.cs,GetByHash,The length of the statement  "	AniDB_File cr = session.CreateCriteria (typeof(AniDB_File)).Add (Restrictions.Eq ("Hash"' hash)).UniqueResult<AniDB_File> (); " is 125.
Long Statement,JMMServer.Repositories,AniDB_FileRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_FileRepository.cs,GetByHashAndFileSize,The length of the statement  "		AniDB_File cr = session.CreateCriteria (typeof(AniDB_File)).Add (Restrictions.Eq ("Hash"' hash)).Add (Restrictions.Eq ("FileSize"' fsize)).UniqueResult<AniDB_File> (); " is 167.
Long Statement,JMMServer.Repositories,AniDB_FileRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_FileRepository.cs,GetByFileID,The length of the statement  "		AniDB_File cr = session.CreateCriteria (typeof(AniDB_File)).Add (Restrictions.Eq ("FileID"' fileID)).UniqueResult<AniDB_File> (); " is 129.
Long Statement,JMMServer.Repositories,AniDB_FileRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_FileRepository.cs,GetByResolution,The length of the statement  "		var objs = session.CreateCriteria (typeof(AniDB_File)).Add (Restrictions.Eq ("File_VideoResolution"' res)).List<AniDB_File> (); " is 127.
Long Statement,JMMServer.Repositories,AniDB_GroupStatusRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_GroupStatusRepository.cs,GetByAnimeIDAndGroupID,The length of the statement  "		AniDB_GroupStatus cr = session.CreateCriteria (typeof(AniDB_GroupStatus)).Add (Restrictions.Eq ("AnimeID"' animeid)).Add (Restrictions.Eq ("GroupID"' groupid)).UniqueResult<AniDB_GroupStatus> (); " is 195.
Long Statement,JMMServer.Repositories,AniDB_GroupStatusRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_GroupStatusRepository.cs,GetByAnimeID,The length of the statement  "		var objs = session.CreateCriteria (typeof(AniDB_GroupStatus)).Add (Restrictions.Eq ("AnimeID"' id)).List<AniDB_GroupStatus> (); " is 127.
Long Statement,JMMServer.Repositories,AniDB_ReleaseGroupRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_ReleaseGroupRepository.cs,GetByGroupID,The length of the statement  "		AniDB_ReleaseGroup cr = session.CreateCriteria (typeof(AniDB_ReleaseGroup)).Add (Restrictions.Eq ("GroupID"' id)).UniqueResult<AniDB_ReleaseGroup> (); " is 150.
Long Statement,JMMServer.Repositories,AniDB_ReviewRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_ReviewRepository.cs,GetByReviewID,The length of the statement  "		AniDB_Review cr = session.CreateCriteria (typeof(AniDB_Review)).Add (Restrictions.Eq ("ReviewID"' id)).UniqueResult<AniDB_Review> (); " is 133.
Long Statement,JMMServer.Repositories,AniDB_TagRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_TagRepository.cs,GetByAnimeID,The length of the statement  "		var tags = session.CreateQuery ("Select tag FROM AniDB_Tag as tag' AniDB_Anime_Tag as xref WHERE tag.TagID = xref.TagID AND xref.AnimeID= :animeID").SetParameter ("animeID"' animeID).List<AniDB_Tag> (); " is 202.
Long Statement,JMMServer.Repositories,AniDB_TagRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_TagRepository.cs,GetByAnimeID,The length of the statement  "	var tags = session.CreateQuery ("Select tag FROM AniDB_Tag as tag' AniDB_Anime_Tag as xref WHERE tag.TagID = xref.TagID AND xref.AnimeID= :animeID").SetParameter ("animeID"' animeID).List<AniDB_Tag> (); " is 202.
Long Statement,JMMServer.Repositories,AniDB_TagRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_TagRepository.cs,GetByTagID,The length of the statement  "		AniDB_Tag cr = session.CreateCriteria (typeof(AniDB_Tag)).Add (Restrictions.Eq ("TagID"' id)).UniqueResult<AniDB_Tag> (); " is 121.
Long Statement,JMMServer.Repositories,AniDB_TagRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_TagRepository.cs,GetByTagID,The length of the statement  "	AniDB_Tag cr = session.CreateCriteria (typeof(AniDB_Tag)).Add (Restrictions.Eq ("TagID"' id)).UniqueResult<AniDB_Tag> (); " is 121.
Long Statement,JMMServer.Repositories,AniDB_TagRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_TagRepository.cs,GetAllForLocalSeries,The length of the statement  "		var tags = session.CreateQuery ("FROM AniDB_Tag tag WHERE tag.TagID in (SELECT aat.TagID FROM AniDB_Anime_Tag aat' AnimeSeries aser WHERE aat.AnimeID = aser.AniDB_ID)").List<AniDB_Tag> (); " is 188.
Long Statement,JMMServer.Repositories,AniDB_VoteRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_VoteRepository.cs,GetByEntityAndType,The length of the statement  "		AniDB_Vote cr = session.CreateCriteria (typeof(AniDB_Vote)).Add (Restrictions.Eq ("EntityID"' entID)).Add (Restrictions.Eq ("VoteType"' (int)voteType)).UniqueResult<AniDB_Vote> (); " is 180.
Long Statement,JMMServer.Repositories,AniDB_VoteRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_VoteRepository.cs,GetByAnimeID,The length of the statement  "		var votes = session.CreateCriteria (typeof(AniDB_Vote)).Add (Restrictions.Eq ("EntityID"' animeID)).List<AniDB_Vote> (); " is 120.
Long Statement,JMMServer.Repositories,AniDB_VoteRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AniDB_VoteRepository.cs,GetByAnimeID,The length of the statement  "	var votes = session.CreateCriteria (typeof(AniDB_Vote)).Add (Restrictions.Eq ("EntityID"' animeID)).List<AniDB_Vote> (); " is 120.
Long Statement,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetBySeriesID,The length of the statement  "	var eps = session.CreateCriteria (typeof(AnimeEpisode)).Add (Restrictions.Eq ("AnimeSeriesID"' seriesid)).List<AnimeEpisode> (); " is 128.
Long Statement,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetByAniDBEpisodeID,The length of the statement  "	AnimeEpisode obj = session.CreateCriteria (typeof(AnimeEpisode)).Add (Restrictions.Eq ("AniDB_EpisodeID"' epid)).UniqueResult<AnimeEpisode> (); " is 143.
Long Statement,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetByAniEpisodeIDAndSeriesID,The length of the statement  "	var eps = session.CreateCriteria (typeof(AnimeEpisode)).Add (Restrictions.Eq ("AniDB_EpisodeID"' epid)).Add (Restrictions.Eq ("AnimeSeriesID"' seriesid)).List<AnimeEpisode> (); " is 176.
Long Statement,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetByHash,The length of the statement  "	var eps = session.CreateQuery ("Select ae FROM AnimeEpisode as ae' CrossRef_File_Episode as xref WHERE ae.AniDB_EpisodeID = xref.EpisodeID AND xref.Hash= :Hash").SetParameter ("Hash"' hash).List<AnimeEpisode> (); " is 212.
Long Statement,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetEpisodesWithMultipleFiles,The length of the statement  "		//FROM AnimeEpisode x WHERE x.AniDB_EpisodeID IN (Select xref.EpisodeID FROM CrossRef_File_Episode xref WHERE xref.Hash IN (Select vl.Hash from VideoLocal vl) GROUP BY xref.EpisodeID HAVING COUNT(xref.EpisodeID) > 1) " is 216.
Long Statement,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetEpisodesWithMultipleFiles,The length of the statement  "		//FROM AnimeEpisode x INNER JOIN (select xref.EpisodeID as EpisodeID from CrossRef_File_Episode xref inner join VideoLocal vl ON xref.Hash = vl.Hash group by xref.EpisodeID  having count(xref.EpisodeID)>1) g ON g.EpisodeID = x.AniDB_EpisodeID " is 242.
Long Statement,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetEpisodesWithMultipleFiles,The length of the statement  "		if (ServerSettings.DatabaseType.Trim ().Equals (Constants.DatabaseType.MySQL' StringComparison.InvariantCultureIgnoreCase)) { " is 125.
Long Statement,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetEpisodesWithMultipleFiles,The length of the statement  "			string sql = "Select x.AnimeEpisodeID " + "FROM AnimeEpisode x " + "INNER JOIN  " + "(select xref.EpisodeID as EpisodeID " + "from CrossRef_File_Episode xref " + "inner join VideoLocal vl ON xref.Hash = vl.Hash "; " is 213.
Long Statement,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetEpisodesWithMultipleFiles,The length of the statement  "			string sql = "FROM AnimeEpisode x WHERE x.AniDB_EpisodeID IN " + "(Select xref.EpisodeID FROM CrossRef_File_Episode xref WHERE xref.Hash IN " + "(Select vl.Hash from VideoLocal vl "; " is 182.
Long Statement,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetUnwatchedEpisodes,The length of the statement  "		var eps = session.CreateQuery ("FROM AnimeEpisode x WHERE x.AnimeEpisodeID NOT IN (SELECT AnimeEpisodeID FROM AnimeEpisode_User WHERE AnimeSeriesID = :AnimeSeriesID AND JMMUserID = :JMMUserID) AND x.AnimeSeriesID = :AnimeSeriesID").SetParameter ("AnimeSeriesID"' seriesid).SetParameter ("JMMUserID"' userid).List<AnimeEpisode> (); " is 330.
Long Statement,JMMServer.Repositories,AnimeEpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisodeRepository.cs,GetMostRecentlyAdded,The length of the statement  "		var eps = session.CreateCriteria (typeof(AnimeEpisode)).Add (Restrictions.Eq ("AnimeSeriesID"' seriesID)).AddOrder (Order.Desc ("DateTimeCreated")).SetMaxResults (1).List<AnimeEpisode> (); " is 188.
Long Statement,JMMServer.Repositories,AnimeEpisode_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisode_UserRepository.cs,GetBySeriesID,The length of the statement  "		var eps = session.CreateCriteria (typeof(AnimeEpisode_User)).Add (Restrictions.Eq ("AnimeSeriesID"' seriesid)).List<AnimeEpisode_User> (); " is 138.
Long Statement,JMMServer.Repositories,AnimeEpisode_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisode_UserRepository.cs,GetByUserIDAndEpisodeID,The length of the statement  "	AnimeEpisode_User obj = session.CreateCriteria (typeof(AnimeEpisode_User)).Add (Restrictions.Eq ("JMMUserID"' userid)).Add (Restrictions.Eq ("AnimeEpisodeID"' epid)).UniqueResult<AnimeEpisode_User> (); " is 201.
Long Statement,JMMServer.Repositories,AnimeEpisode_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisode_UserRepository.cs,GetByUserID,The length of the statement  "		var eps = session.CreateCriteria (typeof(AnimeEpisode_User)).Add (Restrictions.Eq ("JMMUserID"' userid)).List<AnimeEpisode_User> (); " is 132.
Long Statement,JMMServer.Repositories,AnimeEpisode_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisode_UserRepository.cs,GetMostRecentlyWatched,The length of the statement  "	var eps = session.CreateCriteria (typeof(AnimeEpisode_User)).Add (Restrictions.Eq ("JMMUserID"' userID)).Add (Restrictions.Gt ("WatchedCount"' 0)).AddOrder (Order.Desc ("WatchedDate")).SetMaxResults (100).List<AnimeEpisode_User> (); " is 232.
Long Statement,JMMServer.Repositories,AnimeEpisode_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisode_UserRepository.cs,GetByEpisodeID,The length of the statement  "		var eps = session.CreateCriteria (typeof(AnimeEpisode_User)).Add (Restrictions.Eq ("AnimeEpisodeID"' epid)).List<AnimeEpisode_User> (); " is 135.
Long Statement,JMMServer.Repositories,AnimeEpisode_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeEpisode_UserRepository.cs,GetByUserIDAndSeriesID,The length of the statement  "	var eps = session.CreateCriteria (typeof(AnimeEpisode_User)).Add (Restrictions.Eq ("JMMUserID"' userid)).Add (Restrictions.Eq ("AnimeSeriesID"' seriesid)).List<AnimeEpisode_User> (); " is 182.
Long Statement,JMMServer.Repositories,AnimeGroupRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeGroupRepository.cs,GetByParentID,The length of the statement  "	var grps = session.CreateCriteria (typeof(AnimeGroup)).Add (Restrictions.Eq ("AnimeGroupParentID"' parentid)).List<AnimeGroup> (); " is 130.
Long Statement,JMMServer.Repositories,AnimeGroup_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeGroup_UserRepository.cs,GetByUserAndGroupID,The length of the statement  "	AnimeGroup_User cr = session.CreateCriteria (typeof(AnimeGroup_User)).Add (Restrictions.Eq ("JMMUserID"' userid)).Add (Restrictions.Eq ("AnimeGroupID"' groupid)).UniqueResult<AnimeGroup_User> (); " is 195.
Long Statement,JMMServer.Repositories,AnimeGroup_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeGroup_UserRepository.cs,GetByUserID,The length of the statement  "		var grps = session.CreateCriteria (typeof(AnimeGroup_User)).Add (Restrictions.Eq ("JMMUserID"' userid)).List<AnimeGroup_User> (); " is 129.
Long Statement,JMMServer.Repositories,AnimeGroup_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeGroup_UserRepository.cs,GetByUserID,The length of the statement  "	var grps = session.CreateCriteria (typeof(AnimeGroup_User)).Add (Restrictions.Eq ("JMMUserID"' userid)).List<AnimeGroup_User> (); " is 129.
Long Statement,JMMServer.Repositories,AnimeGroup_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeGroup_UserRepository.cs,GetByGroupID,The length of the statement  "		var grps = session.CreateCriteria (typeof(AnimeGroup_User)).Add (Restrictions.Eq ("AnimeGroupID"' groupid)).List<AnimeGroup_User> (); " is 133.
Long Statement,JMMServer.Repositories,AnimeSeriesRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeSeriesRepository.cs,GetByAnimeID,The length of the statement  "	AnimeSeries cr = session.CreateCriteria (typeof(AnimeSeries)).Add (Restrictions.Eq ("AniDB_ID"' id)).UniqueResult<AnimeSeries> (); " is 130.
Long Statement,JMMServer.Repositories,AnimeSeriesRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeSeriesRepository.cs,GetByGroupID,The length of the statement  "	var series = session.CreateCriteria (typeof(AnimeSeries)).Add (Restrictions.Eq ("AnimeGroupID"' groupid)).List<AnimeSeries> (); " is 127.
Long Statement,JMMServer.Repositories,AnimeSeriesRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeSeriesRepository.cs,GetWithMissingEpisodes,The length of the statement  "		var series = session.CreateCriteria (typeof(AnimeSeries)).Add (Restrictions.Gt ("MissingEpisodeCountGroups"' 0)).AddOrder (Order.Desc ("EpisodeAddedDate")).List<AnimeSeries> (); " is 177.
Long Statement,JMMServer.Repositories,AnimeSeriesRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeSeriesRepository.cs,GetMostRecentlyAdded,The length of the statement  "	var sers = session.CreateCriteria (typeof(AnimeSeries)).AddOrder (Order.Desc ("DateTimeCreated")).SetMaxResults (maxResults + 15).List<AnimeSeries> (); " is 151.
Long Statement,JMMServer.Repositories,AnimeSeries_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeSeries_UserRepository.cs,GetByUserAndSeriesID,The length of the statement  "	AnimeSeries_User cr = session.CreateCriteria (typeof(AnimeSeries_User)).Add (Restrictions.Eq ("JMMUserID"' userid)).Add (Restrictions.Eq ("AnimeSeriesID"' seriesid)).UniqueResult<AnimeSeries_User> (); " is 200.
Long Statement,JMMServer.Repositories,AnimeSeries_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeSeries_UserRepository.cs,GetByUserID,The length of the statement  "		var sers = session.CreateCriteria (typeof(AnimeSeries_User)).Add (Restrictions.Eq ("JMMUserID"' userid)).List<AnimeSeries_User> (); " is 131.
Long Statement,JMMServer.Repositories,AnimeSeries_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeSeries_UserRepository.cs,GetBySeriesID,The length of the statement  "		var sers = session.CreateCriteria (typeof(AnimeSeries_User)).Add (Restrictions.Eq ("AnimeSeriesID"' seriesid)).List<AnimeSeries_User> (); " is 137.
Long Statement,JMMServer.Repositories,AnimeSeries_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AnimeSeries_UserRepository.cs,GetMostRecentlyWatched,The length of the statement  "	var series = session.CreateCriteria (typeof(AnimeSeries_User)).Add (Restrictions.Eq ("JMMUserID"' userID)).Add (Restrictions.Gt ("UnwatchedEpisodeCount"' 0)).AddOrder (Order.Desc ("WatchedDate")).List<AnimeSeries_User> (); " is 222.
Long Statement,JMMServer.Repositories,CommandRequestRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CommandRequestRepository.cs,GetByCommandID,The length of the statement  "	CommandRequest cr = session.CreateCriteria (typeof(CommandRequest)).Add (Restrictions.Eq ("CommandID"' cmdid)).UniqueResult<CommandRequest> (); " is 143.
Long Statement,JMMServer.Repositories,CommandRequestRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CommandRequestRepository.cs,GetNextDBCommandRequestGeneral,The length of the statement  "		IList<CommandRequest> crs = session.CreateCriteria (typeof(CommandRequest)).Add (!Restrictions.Eq ("CommandType"' (int)CommandRequestType.HashFile)).Add (!Restrictions.Eq ("CommandType"' (int)CommandRequestType.ImageDownload)).AddOrder (Order.Asc ("Priority")).AddOrder (Order.Asc ("DateTimeUpdated")).SetMaxResults (1).List<CommandRequest> (); " is 344.
Long Statement,JMMServer.Repositories,CommandRequestRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CommandRequestRepository.cs,GetAllCommandRequestGeneral,The length of the statement  "		var crs = session.CreateCriteria (typeof(CommandRequest)).Add (!Restrictions.Eq ("CommandType"' (int)CommandRequestType.HashFile)).Add (!Restrictions.Eq ("CommandType"' (int)CommandRequestType.ImageDownload)).List<CommandRequest> (); " is 233.
Long Statement,JMMServer.Repositories,CommandRequestRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CommandRequestRepository.cs,GetNextDBCommandRequestHasher,The length of the statement  "		IList<CommandRequest> crs = session.CreateCriteria (typeof(CommandRequest)).Add (Restrictions.Eq ("CommandType"' (int)CommandRequestType.HashFile)).AddOrder (Order.Asc ("Priority")).AddOrder (Order.Asc ("DateTimeUpdated")).SetMaxResults (1).List<CommandRequest> (); " is 265.
Long Statement,JMMServer.Repositories,CommandRequestRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CommandRequestRepository.cs,GetAllCommandRequestHasher,The length of the statement  "		var crs = session.CreateCriteria (typeof(CommandRequest)).Add (Restrictions.Eq ("CommandType"' (int)CommandRequestType.HashFile)).List<CommandRequest> (); " is 154.
Long Statement,JMMServer.Repositories,CommandRequestRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CommandRequestRepository.cs,GetNextDBCommandRequestImages,The length of the statement  "		IList<CommandRequest> crs = session.CreateCriteria (typeof(CommandRequest)).Add (Restrictions.Eq ("CommandType"' (int)CommandRequestType.ImageDownload)).AddOrder (Order.Asc ("Priority")).AddOrder (Order.Asc ("DateTimeUpdated")).SetMaxResults (1).List<CommandRequest> (); " is 270.
Long Statement,JMMServer.Repositories,CommandRequestRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CommandRequestRepository.cs,GetAllCommandRequestImages,The length of the statement  "		var crs = session.CreateCriteria (typeof(CommandRequest)).Add (Restrictions.Eq ("CommandType"' (int)CommandRequestType.ImageDownload)).List<CommandRequest> (); " is 159.
Long Statement,JMMServer.Repositories,CommandRequestRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CommandRequestRepository.cs,GetQueuedCommandCountGeneral,The length of the statement  "		var cnt = session.CreateCriteria (typeof(CommandRequest)).Add (!Restrictions.Eq ("CommandType"' (int)CommandRequestType.HashFile)).Add (!Restrictions.Eq ("CommandType"' (int)CommandRequestType.ImageDownload)).SetProjection (Projections.Count ("CommandRequestID")).UniqueResult (); " is 280.
Long Statement,JMMServer.Repositories,CommandRequestRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CommandRequestRepository.cs,GetQueuedCommandCountHasher,The length of the statement  "		var cnt = session.CreateCriteria (typeof(CommandRequest)).Add (Restrictions.Eq ("CommandType"' (int)CommandRequestType.HashFile)).SetProjection (Projections.Count ("CommandRequestID")).UniqueResult (); " is 201.
Long Statement,JMMServer.Repositories,CommandRequestRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CommandRequestRepository.cs,GetQueuedCommandCountImages,The length of the statement  "		var cnt = session.CreateCriteria (typeof(CommandRequest)).Add (Restrictions.Eq ("CommandType"' (int)CommandRequestType.ImageDownload)).SetProjection (Projections.Count ("CommandRequestID")).UniqueResult (); " is 206.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_OtherRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_OtherRepository.cs,GetByAnimeIDAndType,The length of the statement  "	CrossRef_AniDB_Other cr = session.CreateCriteria (typeof(CrossRef_AniDB_Other)).Add (Restrictions.Eq ("AnimeID"' animeID)).Add (Restrictions.Eq ("CrossRefType"' (int)xrefType)).UniqueResult<CrossRef_AniDB_Other> (); " is 215.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_OtherRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_OtherRepository.cs,GetByType,The length of the statement  "		var xrefs = session.CreateCriteria (typeof(CrossRef_AniDB_Other)).Add (Restrictions.Eq ("CrossRefType"' (int)xrefType)).List<CrossRef_AniDB_Other> (); " is 150.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_OtherRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_OtherRepository.cs,GetByAnimeID,The length of the statement  "		var xrefs = session.CreateCriteria (typeof(CrossRef_AniDB_Other)).Add (Restrictions.Eq ("AnimeID"' animeID)).List<CrossRef_AniDB_Other> (); " is 139.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_TraktRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TraktRepository.cs,GetByAnimeID,The length of the statement  "	CrossRef_AniDB_Trakt cr = session.CreateCriteria (typeof(CrossRef_AniDB_Trakt)).Add (Restrictions.Eq ("AnimeID"' id)).UniqueResult<CrossRef_AniDB_Trakt> (); " is 156.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_TraktRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TraktRepository.cs,GetByTraktID,The length of the statement  "		CrossRef_AniDB_Trakt cr = session.CreateCriteria (typeof(CrossRef_AniDB_Trakt)).Add (Restrictions.Eq ("TraktID"' id)).Add (Restrictions.Eq ("TraktSeasonNumber"' season)).UniqueResult<CrossRef_AniDB_Trakt> (); " is 208.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_TraktRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TraktRepository.cs,GetByTraktID,The length of the statement  "		var series = session.CreateCriteria (typeof(CrossRef_AniDB_Trakt)).Add (Restrictions.Eq ("TraktID"' id)).List<CrossRef_AniDB_Trakt> (); " is 135.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_TvDBRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TvDBRepository.cs,GetByAnimeID,The length of the statement  "	CrossRef_AniDB_TvDB cr = session.CreateCriteria (typeof(CrossRef_AniDB_TvDB)).Add (Restrictions.Eq ("AnimeID"' id)).UniqueResult<CrossRef_AniDB_TvDB> (); " is 153.
Long Statement,JMMServer.Repositories,CrossRef_AniDB_TvDBRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_AniDB_TvDBRepository.cs,GetByTvDBID,The length of the statement  "		CrossRef_AniDB_TvDB cr = session.CreateCriteria (typeof(CrossRef_AniDB_TvDB)).Add (Restrictions.Eq ("TvDBID"' id)).Add (Restrictions.Eq ("TvDBSeasonNumber"' season)).UniqueResult<CrossRef_AniDB_TvDB> (); " is 203.
Long Statement,JMMServer.Repositories,CrossRef_File_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_File_EpisodeRepository.cs,GetByHash,The length of the statement  "		var xrefs = session.CreateCriteria (typeof(CrossRef_File_Episode)).Add (Restrictions.Eq ("Hash"' hash)).AddOrder (Order.Asc ("EpisodeOrder")).List<CrossRef_File_Episode> (); " is 173.
Long Statement,JMMServer.Repositories,CrossRef_File_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_File_EpisodeRepository.cs,GetByAnimeID,The length of the statement  "	var xrefs = session.CreateCriteria (typeof(CrossRef_File_Episode)).Add (Restrictions.Eq ("AnimeID"' animeID)).List<CrossRef_File_Episode> (); " is 141.
Long Statement,JMMServer.Repositories,CrossRef_File_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_File_EpisodeRepository.cs,GetByFileNameAndSize,The length of the statement  "		var vidfiles = session.CreateCriteria (typeof(CrossRef_File_Episode)).Add (Restrictions.Eq ("FileName"' filename)).Add (Restrictions.Eq ("FileSize"' filesize)).List<CrossRef_File_Episode> (); " is 191.
Long Statement,JMMServer.Repositories,CrossRef_File_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_File_EpisodeRepository.cs,GetByHashAndEpisodeID,The length of the statement  "		CrossRef_File_Episode obj = session.CreateCriteria (typeof(CrossRef_File_Episode)).Add (Restrictions.Eq ("Hash"' hash)).Add (Restrictions.Eq ("EpisodeID"' episodeID)).UniqueResult<CrossRef_File_Episode> (); " is 206.
Long Statement,JMMServer.Repositories,CrossRef_File_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_File_EpisodeRepository.cs,GetByEpisodeID,The length of the statement  "		var xrefs = session.CreateCriteria (typeof(CrossRef_File_Episode)).Add (Restrictions.Eq ("EpisodeID"' episodeID)).List<CrossRef_File_Episode> (); " is 145.
Long Statement,JMMServer.Repositories,CrossRef_Languages_AniDB_FileRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_Languages_AniDB_FileRepository.cs,GetByFileID,The length of the statement  "		var files = session.CreateCriteria (typeof(CrossRef_Languages_AniDB_File)).Add (Restrictions.Eq ("FileID"' id)).List<CrossRef_Languages_AniDB_File> (); " is 151.
Long Statement,JMMServer.Repositories,CrossRef_Subtitles_AniDB_FileRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\CrossRef_Subtitles_AniDB_FileRepository.cs,GetByFileID,The length of the statement  "		var files = session.CreateCriteria (typeof(CrossRef_Subtitles_AniDB_File)).Add (Restrictions.Eq ("FileID"' id)).List<CrossRef_Subtitles_AniDB_File> (); " is 151.
Long Statement,JMMServer.Repositories,DuplicateFileRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\DuplicateFileRepository.cs,GetByFilePathsAndImportFolder,The length of the statement  "		var dfiles = session.CreateCriteria (typeof(DuplicateFile)).Add (Restrictions.Eq ("FilePathFile1"' filePath1)).Add (Restrictions.Eq ("FilePathFile2"' filePath2)).Add (Restrictions.Eq ("ImportFolderIDFile1"' folderID1)).Add (Restrictions.Eq ("ImportFolderIDFile2"' folderID2)).List<DuplicateFile> (); " is 299.
Long Statement,JMMServer.Repositories,DuplicateFileRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\DuplicateFileRepository.cs,GetByImportFolder1,The length of the statement  "		var dfiles = session.CreateCriteria (typeof(DuplicateFile)).Add (Restrictions.Eq ("ImportFolderIDFile1"' folderID)).List<DuplicateFile> (); " is 139.
Long Statement,JMMServer.Repositories,DuplicateFileRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\DuplicateFileRepository.cs,GetByImportFolder2,The length of the statement  "		var dfiles = session.CreateCriteria (typeof(DuplicateFile)).Add (Restrictions.Eq ("ImportFolderIDFile2"' folderID)).List<DuplicateFile> (); " is 139.
Long Statement,JMMServer.Repositories,FileNameHashRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\FileNameHashRepository.cs,GetByFileNameAndSize,The length of the statement  "		var fnhashes = session.CreateCriteria (typeof(FileNameHash)).Add (Restrictions.Eq ("FileName"' filename)).Add (Restrictions.Eq ("FileSize"' filesize)).List<FileNameHash> (); " is 173.
Long Statement,JMMServer.Repositories,FileNameHashRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\FileNameHashRepository.cs,GetByNameSizeAndHash,The length of the statement  "		FileNameHash fnhash = session.CreateCriteria (typeof(FileNameHash)).Add (Restrictions.Eq ("Hash"' hash)).Add (Restrictions.Eq ("FileName"' filename)).Add (Restrictions.Eq ("FileSize"' filesize)).UniqueResult<FileNameHash> (); " is 225.
Long Statement,JMMServer.Repositories,GroupFilterConditionRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\GroupFilterConditionRepository.cs,Save,The length of the statement  "	logger.Trace ("Updating group filter stats by groupfilter condition from GroupFilterConditionRepository.Save: {0}"' obj.GroupFilterID); " is 135.
Long Statement,JMMServer.Repositories,GroupFilterConditionRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\GroupFilterConditionRepository.cs,GetByGroupFilterID,The length of the statement  "	var gfcs = session.CreateCriteria (typeof(GroupFilterCondition)).Add (Restrictions.Eq ("GroupFilterID"' gfid)).List<GroupFilterCondition> (); " is 141.
Long Statement,JMMServer.Repositories,GroupFilterConditionRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\GroupFilterConditionRepository.cs,GetByConditionType,The length of the statement  "		var gfcs = session.CreateCriteria (typeof(GroupFilterCondition)).Add (Restrictions.Eq ("ConditionType"' (int)ctype)).List<GroupFilterCondition> (); " is 147.
Long Statement,JMMServer.Repositories,GroupFilterConditionRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\GroupFilterConditionRepository.cs,Delete,The length of the statement  "		logger.Trace ("Updating group filter stats by groupfilter condition from GroupFilterConditionRepository.Delete: {0}"' cr.GroupFilterID); " is 136.
Long Statement,JMMServer.Repositories,IgnoreAnimeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\IgnoreAnimeRepository.cs,GetByAnimeUserType,The length of the statement  "		IgnoreAnime obj = session.CreateCriteria (typeof(IgnoreAnime)).Add (Restrictions.Eq ("AnimeID"' animeID)).Add (Restrictions.Eq ("JMMUserID"' userID)).Add (Restrictions.Eq ("IgnoreType"' ignoreType)).UniqueResult<IgnoreAnime> (); " is 228.
Long Statement,JMMServer.Repositories,IgnoreAnimeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\IgnoreAnimeRepository.cs,GetByUserAndType,The length of the statement  "		var objs = session.CreateCriteria (typeof(IgnoreAnime)).Add (Restrictions.Eq ("JMMUserID"' userID)).Add (Restrictions.Eq ("IgnoreType"' ignoreType)).List<IgnoreAnime> (); " is 170.
Long Statement,JMMServer.Repositories,IgnoreAnimeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\IgnoreAnimeRepository.cs,GetByUser,The length of the statement  "		var objs = session.CreateCriteria (typeof(IgnoreAnime)).Add (Restrictions.Eq ("JMMUserID"' userID)).List<IgnoreAnime> (); " is 121.
Long Statement,JMMServer.Repositories,ImportFolderRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\ImportFolderRepository.cs,GetByImportLocation,The length of the statement  "		ImportFolder cr = session.CreateCriteria (typeof(ImportFolder)).Add (Restrictions.Eq ("ImportFolderLocation"' importloc)).UniqueResult<ImportFolder> (); " is 152.
Long Statement,JMMServer.Repositories,JMMUserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\JMMUserRepository.cs,AuthenticateUser,The length of the statement  "		JMMUser cr = session.CreateCriteria (typeof(JMMUser)).Add (Restrictions.Eq ("Username"' userName)).Add (Restrictions.Eq ("Password"' hashedPassword)).UniqueResult<JMMUser> (); " is 175.
Long Statement,JMMServer.Repositories,LanguageRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\LanguageRepository.cs,GetByLanguageName,The length of the statement  "		Language cr = session.CreateCriteria (typeof(Language)).Add (Restrictions.Eq ("LanguageName"' lanname)).UniqueResult<Language> (); " is 130.
Long Statement,JMMServer.Repositories,MovieDB_FanartRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\MovieDB_FanartRepository.cs,GetByOnlineID,The length of the statement  "	MovieDB_Fanart cr = session.CreateCriteria (typeof(MovieDB_Fanart)).Add (Restrictions.Eq ("ImageID"' id)).Add (Restrictions.Eq ("ImageSize"' imageSize)).UniqueResult<MovieDB_Fanart> (); " is 185.
Long Statement,JMMServer.Repositories,MovieDB_FanartRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\MovieDB_FanartRepository.cs,GetByMovieID,The length of the statement  "	var objs = session.CreateCriteria (typeof(MovieDB_Fanart)).Add (Restrictions.Eq ("MovieId"' id)).List<MovieDB_Fanart> (); " is 121.
Long Statement,JMMServer.Repositories,MovieDB_FanartRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\MovieDB_FanartRepository.cs,GetAllOriginal,The length of the statement  "		var objs = session.CreateCriteria (typeof(MovieDB_Fanart)).Add (Restrictions.Eq ("ImageSize"' "original")).List<MovieDB_Fanart> (); " is 131.
Long Statement,JMMServer.Repositories,MovieDB_MovieRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\MovieDB_MovieRepository.cs,GetByOnlineID,The length of the statement  "	MovieDB_Movie cr = session.CreateCriteria (typeof(MovieDB_Movie)).Add (Restrictions.Eq ("MovieId"' id)).UniqueResult<MovieDB_Movie> (); " is 135.
Long Statement,JMMServer.Repositories,MovieDB_PosterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\MovieDB_PosterRepository.cs,GetByOnlineID,The length of the statement  "	MovieDB_Poster cr = session.CreateCriteria (typeof(MovieDB_Poster)).Add (Restrictions.Eq ("ImageID"' id)).Add (Restrictions.Eq ("ImageSize"' imageSize)).UniqueResult<MovieDB_Poster> (); " is 185.
Long Statement,JMMServer.Repositories,MovieDB_PosterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\MovieDB_PosterRepository.cs,GetByMovieID,The length of the statement  "	var objs = session.CreateCriteria (typeof(MovieDB_Poster)).Add (Restrictions.Eq ("MovieId"' id)).List<MovieDB_Poster> (); " is 121.
Long Statement,JMMServer.Repositories,MovieDB_PosterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\MovieDB_PosterRepository.cs,GetAllOriginal,The length of the statement  "		var objs = session.CreateCriteria (typeof(MovieDB_Poster)).Add (Restrictions.Eq ("ImageSize"' "original")).List<MovieDB_Poster> (); " is 131.
Long Statement,JMMServer.Repositories,ScheduledUpdateRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\ScheduledUpdateRepository.cs,GetByUpdateType,The length of the statement  "		ScheduledUpdate cr = session.CreateCriteria (typeof(ScheduledUpdate)).Add (Restrictions.Eq ("UpdateType"' uptype)).UniqueResult<ScheduledUpdate> (); " is 148.
Long Statement,JMMServer.Repositories,Trakt_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_EpisodeRepository.cs,GetByShowID,The length of the statement  "		var objs = session.CreateCriteria (typeof(Trakt_Episode)).Add (Restrictions.Eq ("Trakt_ShowID"' showID)).List<Trakt_Episode> (); " is 128.
Long Statement,JMMServer.Repositories,Trakt_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_EpisodeRepository.cs,GetByShowIDAndSeason,The length of the statement  "		var objs = session.CreateCriteria (typeof(Trakt_Episode)).Add (Restrictions.Eq ("Trakt_ShowID"' showID)).Add (Restrictions.Eq ("Season"' seasonNumber)).List<Trakt_Episode> (); " is 175.
Long Statement,JMMServer.Repositories,Trakt_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_EpisodeRepository.cs,GetByShowIDSeasonAndEpisode,The length of the statement  "		Trakt_Episode obj = session.CreateCriteria (typeof(Trakt_Episode)).Add (Restrictions.Eq ("Trakt_ShowID"' showID)).Add (Restrictions.Eq ("Season"' seasonNumber)).Add (Restrictions.Eq ("EpisodeNumber"' epnumber)).UniqueResult<Trakt_Episode> (); " is 242.
Long Statement,JMMServer.Repositories,Trakt_FriendRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_FriendRepository.cs,GetByUsername,The length of the statement  "	Trakt_Friend obj = session.CreateCriteria (typeof(Trakt_Friend)).Add (Restrictions.Eq ("Username"' username)).UniqueResult<Trakt_Friend> (); " is 140.
Long Statement,JMMServer.Repositories,Trakt_ImageFanartRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_ImageFanartRepository.cs,GetByShowID,The length of the statement  "		var objs = session.CreateCriteria (typeof(Trakt_ImageFanart)).Add (Restrictions.Eq ("Trakt_ShowID"' id)).List<Trakt_ImageFanart> (); " is 132.
Long Statement,JMMServer.Repositories,Trakt_ImageFanartRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_ImageFanartRepository.cs,GetByShowIDAndSeason,The length of the statement  "		Trakt_ImageFanart obj = session.CreateCriteria (typeof(Trakt_ImageFanart)).Add (Restrictions.Eq ("Trakt_ShowID"' showID)).Add (Restrictions.Eq ("Season"' seasonNumber)).UniqueResult<Trakt_ImageFanart> (); " is 204.
Long Statement,JMMServer.Repositories,Trakt_ImagePosterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_ImagePosterRepository.cs,GetByShowID,The length of the statement  "		var objs = session.CreateCriteria (typeof(Trakt_ImagePoster)).Add (Restrictions.Eq ("Trakt_ShowID"' id)).List<Trakt_ImagePoster> (); " is 132.
Long Statement,JMMServer.Repositories,Trakt_ImagePosterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_ImagePosterRepository.cs,GetByShowIDAndSeason,The length of the statement  "		Trakt_ImagePoster obj = session.CreateCriteria (typeof(Trakt_ImagePoster)).Add (Restrictions.Eq ("Trakt_ShowID"' showID)).Add (Restrictions.Eq ("Season"' seasonNumber)).UniqueResult<Trakt_ImagePoster> (); " is 204.
Long Statement,JMMServer.Repositories,Trakt_SeasonRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_SeasonRepository.cs,GetByShowID,The length of the statement  "		var objs = session.CreateCriteria (typeof(Trakt_Season)).Add (Restrictions.Eq ("Trakt_ShowID"' id)).List<Trakt_Season> (); " is 122.
Long Statement,JMMServer.Repositories,Trakt_SeasonRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_SeasonRepository.cs,GetByShowIDAndSeason,The length of the statement  "	Trakt_Season obj = session.CreateCriteria (typeof(Trakt_Season)).Add (Restrictions.Eq ("Trakt_ShowID"' id)).Add (Restrictions.Eq ("Season"' season)).UniqueResult<Trakt_Season> (); " is 179.
Long Statement,JMMServer.Repositories,Trakt_ShowRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_ShowRepository.cs,GetByShowID,The length of the statement  "		Trakt_Show cr = session.CreateCriteria (typeof(Trakt_Show)).Add (Restrictions.Eq ("Trakt_ShowID"' id)).UniqueResult<Trakt_Show> (); " is 131.
Long Statement,JMMServer.Repositories,Trakt_ShowRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\Trakt_ShowRepository.cs,GetByTraktID,The length of the statement  "	Trakt_Show cr = session.CreateCriteria (typeof(Trakt_Show)).Add (Restrictions.Eq ("TraktID"' id)).UniqueResult<Trakt_Show> (); " is 126.
Long Statement,JMMServer.Repositories,TvDB_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_EpisodeRepository.cs,GetByTvDBID,The length of the statement  "		TvDB_Episode cr = session.CreateCriteria (typeof(TvDB_Episode)).Add (Restrictions.Eq ("Id"' id)).UniqueResult<TvDB_Episode> (); " is 127.
Long Statement,JMMServer.Repositories,TvDB_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_EpisodeRepository.cs,GetBySeriesID,The length of the statement  "	var objs = session.CreateCriteria (typeof(TvDB_Episode)).Add (Restrictions.Eq ("SeriesID"' seriesID)).List<TvDB_Episode> (); " is 124.
Long Statement,JMMServer.Repositories,TvDB_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_EpisodeRepository.cs,GetSeasonNumbersForSeries,The length of the statement  "		var objs = session.CreateCriteria (typeof(TvDB_Episode)).Add (Restrictions.Eq ("SeriesID"' seriesID)).AddOrder (Order.Asc ("SeasonNumber")).List<TvDB_Episode> (); " is 162.
Long Statement,JMMServer.Repositories,TvDB_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_EpisodeRepository.cs,GetBySeriesIDAndSeasonNumber,The length of the statement  "		var objs = session.CreateCriteria (typeof(TvDB_Episode)).Add (Restrictions.Eq ("SeriesID"' seriesID)).Add (Restrictions.Eq ("SeasonNumber"' seasonNumber)).List<TvDB_Episode> (); " is 177.
Long Statement,JMMServer.Repositories,TvDB_EpisodeRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_EpisodeRepository.cs,GetBySeriesIDAndSeasonNumberSorted,The length of the statement  "		var objs = session.CreateCriteria (typeof(TvDB_Episode)).Add (Restrictions.Eq ("SeriesID"' seriesID)).Add (Restrictions.Eq ("SeasonNumber"' seasonNumber)).AddOrder (Order.Asc ("EpisodeNumber")).List<TvDB_Episode> (); " is 216.
Long Statement,JMMServer.Repositories,TvDB_ImageFanartRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_ImageFanartRepository.cs,GetByTvDBID,The length of the statement  "		TvDB_ImageFanart cr = session.CreateCriteria (typeof(TvDB_ImageFanart)).Add (Restrictions.Eq ("Id"' id)).UniqueResult<TvDB_ImageFanart> (); " is 139.
Long Statement,JMMServer.Repositories,TvDB_ImageFanartRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_ImageFanartRepository.cs,GetBySeriesID,The length of the statement  "	var objs = session.CreateCriteria (typeof(TvDB_ImageFanart)).Add (Restrictions.Eq ("SeriesID"' seriesID)).List<TvDB_ImageFanart> (); " is 132.
Long Statement,JMMServer.Repositories,TvDB_ImagePosterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_ImagePosterRepository.cs,GetByTvDBID,The length of the statement  "		TvDB_ImagePoster cr = session.CreateCriteria (typeof(TvDB_ImagePoster)).Add (Restrictions.Eq ("Id"' id)).UniqueResult<TvDB_ImagePoster> (); " is 139.
Long Statement,JMMServer.Repositories,TvDB_ImagePosterRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_ImagePosterRepository.cs,GetBySeriesID,The length of the statement  "	var objs = session.CreateCriteria (typeof(TvDB_ImagePoster)).Add (Restrictions.Eq ("SeriesID"' seriesID)).List<TvDB_ImagePoster> (); " is 132.
Long Statement,JMMServer.Repositories,TvDB_ImageWideBannerRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_ImageWideBannerRepository.cs,GetByTvDBID,The length of the statement  "		TvDB_ImageWideBanner cr = session.CreateCriteria (typeof(TvDB_ImageWideBanner)).Add (Restrictions.Eq ("Id"' id)).UniqueResult<TvDB_ImageWideBanner> (); " is 151.
Long Statement,JMMServer.Repositories,TvDB_ImageWideBannerRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_ImageWideBannerRepository.cs,GetBySeriesID,The length of the statement  "		var objs = session.CreateCriteria (typeof(TvDB_ImageWideBanner)).Add (Restrictions.Eq ("SeriesID"' seriesID)).List<TvDB_ImageWideBanner> (); " is 140.
Long Statement,JMMServer.Repositories,TvDB_SeriesRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\TvDB_SeriesRepository.cs,GetByTvDBID,The length of the statement  "	TvDB_Series cr = session.CreateCriteria (typeof(TvDB_Series)).Add (Restrictions.Eq ("SeriesID"' id)).UniqueResult<TvDB_Series> (); " is 130.
Long Statement,JMMServer.Repositories,VersionsRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VersionsRepository.cs,GetByVersionType,The length of the statement  "		Versions cr = session.CreateCriteria (typeof(Versions)).Add (Restrictions.Eq ("VersionType"' vertype)).UniqueResult<Versions> (); " is 129.
Long Statement,JMMServer.Repositories,VideoInfoRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoInfoRepository.cs,GetByHash,The length of the statement  "		VideoInfo obj = session.CreateCriteria (typeof(VideoInfo)).Add (Restrictions.Eq ("Hash"' hash)).UniqueResult<VideoInfo> (); " is 123.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetByHash,The length of the statement  "		VideoLocal obj = session.CreateCriteria (typeof(VideoLocal)).Add (Restrictions.Eq ("Hash"' hash)).UniqueResult<VideoLocal> (); " is 126.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetByHashAndSize,The length of the statement  "		VideoLocal obj = session.CreateCriteria (typeof(VideoLocal)).Add (Restrictions.Eq ("Hash"' hash)).Add (Restrictions.Eq ("FileSize"' fsize)).UniqueResult<VideoLocal> (); " is 168.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetByName,The length of the statement  "		var eps = session.CreateCriteria (typeof(VideoLocal)).Add (Restrictions.Like ("FilePath"' fileName' MatchMode.Anywhere)).List<VideoLocal> (); " is 141.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetMostRecentlyAdded,The length of the statement  "	var eps = session.CreateCriteria (typeof(VideoLocal)).AddOrder (Order.Desc ("DateTimeCreated")).SetMaxResults (maxResults + 15).List<VideoLocal> (); " is 148.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetByFilePathAndShareID,The length of the statement  "		var vidfiles = session.CreateCriteria (typeof(VideoLocal)).Add (Restrictions.Eq ("FilePath"' filePath)).Add (Restrictions.Eq ("ImportFolderID"' nshareID)).List<VideoLocal> (); " is 175.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetByAniDBEpisodeID,The length of the statement  "	var vidfiles = session.CreateQuery ("Select vl FROM VideoLocal as vl' CrossRef_File_Episode as xref WHERE vl.Hash = xref.Hash AND xref.EpisodeID= :episodeid").SetParameter ("episodeid"' episodeID).List<VideoLocal> (); " is 217.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetMostRecentlyAddedForAnime,The length of the statement  "	var vidfiles = session.CreateQuery ("Select vl FROM VideoLocal as vl' CrossRef_File_Episode as xref WHERE vl.Hash = xref.Hash AND xref.AnimeID= :animeid ORDER BY vl.DateTimeCreated Desc").SetParameter ("animeid"' animeID).SetMaxResults (maxResults).List<VideoLocal> (); " is 269.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetByAniDBResolution,The length of the statement  "		var vidfiles = session.CreateQuery ("Select vl FROM VideoLocal as vl' AniDB_File as xref WHERE vl.Hash = xref.Hash AND vl.FileSize = xref.FileSize AND xref.File_VideoResolution= :fileres").SetParameter ("fileres"' res).List<VideoLocal> (); " is 239.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetByInternalVersion,The length of the statement  "		var vidfiles = session.CreateQuery ("Select vl FROM VideoLocal as vl' AniDB_File as xref WHERE vl.Hash = xref.Hash AND vl.FileSize = xref.FileSize AND xref.InternalVersion= :iver").SetParameter ("iver"' iver).List<VideoLocal> (); " is 229.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetByAniDBAnimeID,The length of the statement  "	var vidfiles = session.CreateQuery ("Select vl FROM VideoLocal as vl' CrossRef_File_Episode as xref WHERE vl.Hash = xref.Hash AND xref.AnimeID= :animeID").SetParameter ("animeID"' animeID).List<VideoLocal> (); " is 209.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetVideosWithoutImportFolder,The length of the statement  "		var vidfiles = session.CreateQuery ("FROM VideoLocal vl WHERE vl.ImportFolderID NOT IN (select ImportFolderID from ImportFolder fldr)").List<VideoLocal> (); " is 156.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetVideosWithoutVideoInfo,The length of the statement  "		var vidfiles = session.CreateQuery ("FROM VideoLocal vl WHERE vl.Hash NOT IN (Select Hash FROM VideoInfo vi)").List<VideoLocal> (); " is 131.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetVideosWithoutEpisode,The length of the statement  "		var vidfiles = session.CreateQuery ("FROM VideoLocal vl WHERE vl.Hash NOT IN (Select Hash FROM CrossRef_File_Episode xref) AND vl.IsIgnored = 0").List<VideoLocal> (); " is 166.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetManuallyLinkedVideos,The length of the statement  "		var vidfiles = session.CreateQuery ("FROM VideoLocal vl WHERE vl.Hash IN (Select Hash FROM CrossRef_File_Episode xref WHERE xref.CrossRefSource <> 1)").List<VideoLocal> (); " is 172.
Long Statement,JMMServer.Repositories,VideoLocalRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocalRepository.cs,GetByImportFolder,The length of the statement  "		var vidfiles = session.CreateCriteria (typeof(VideoLocal)).Add (Restrictions.Eq ("ImportFolderID"' importFolderID)).List<VideoLocal> (); " is 136.
Long Statement,JMMServer.Repositories,VideoLocal_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocal_UserRepository.cs,GetByVideoLocalID,The length of the statement  "		var eps = session.CreateCriteria (typeof(VideoLocal_User)).Add (Restrictions.Eq ("VideoLocalID"' vidid)).List<VideoLocal_User> (); " is 130.
Long Statement,JMMServer.Repositories,VideoLocal_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocal_UserRepository.cs,GetByUserID,The length of the statement  "		var vids = session.CreateCriteria (typeof(VideoLocal_User)).Add (Restrictions.Eq ("JMMUserID"' userid)).List<VideoLocal_User> (); " is 129.
Long Statement,JMMServer.Repositories,VideoLocal_UserRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\VideoLocal_UserRepository.cs,GetByUserIDAndVideoLocalID,The length of the statement  "		VideoLocal_User obj = session.CreateCriteria (typeof(VideoLocal_User)).Add (Restrictions.Eq ("JMMUserID"' userid)).Add (Restrictions.Eq ("VideoLocalID"' vidid)).UniqueResult<VideoLocal_User> (); " is 194.
Long Statement,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,SortInPlace,The length of the statement  "		throw new Exception ("Error trying to sort list of " + typeof(T).Name + " using " + (sortBy.NameIsPropertyName ? "property " : "field ") + sortBy.sPropertyOrFieldName' ex); " is 172.
Long Statement,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The length of the statement  "				throw new Exception ("Property name " + sPropertyName + " not found while trying to compare objects of type " + typeof(T).Name); " is 128.
Long Statement,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The length of the statement  "				throw new Exception ("Field name " + sFieldName + " not found while trying to compare objects of type " + typeof(T).Name); " is 122.
Long Statement,JMMServer.Providers,JSONHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\JSONHelper.cs,Serialize,The length of the statement  "	System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer (obj.GetType ()); " is 156.
Long Statement,JMMServer.Providers,JSONHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\JSONHelper.cs,Deserialize,The length of the statement  "	System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer (obj.GetType ()); " is 156.
Long Statement,JMMServer.Providers.MovieDB,MovieDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MovieDB\MovieDBHelper.cs,SaveMovieToDatabase,The length of the statement  "					CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (poster.MovieDB_PosterID' JMMImageType.MovieDB_Poster' false); " is 130.
Long Statement,JMMServer.Providers.MovieDB,MovieDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MovieDB\MovieDBHelper.cs,SaveMovieToDatabase,The length of the statement  "					CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (fanart.MovieDB_FanartID' JMMImageType.MovieDB_FanArt' false); " is 130.
Long Statement,JMMServer.Providers.MovieDB,MovieDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MovieDB\MovieDBHelper.cs,LinkAniDBMovieDB,The length of the statement  "	CommandRequest_WebCacheSendXRefAniDBOther req = new CommandRequest_WebCacheSendXRefAniDBOther (xref.CrossRef_AniDB_OtherID); " is 124.
Long Statement,JMMServer.Providers.MovieDB,MovieDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MovieDB\MovieDBHelper.cs,RemoveLinkAniDBMovieDB,The length of the statement  "	CommandRequest_WebCacheDeleteXRefAniDBOther req = new CommandRequest_WebCacheDeleteXRefAniDBOther (animeID' CrossRefType.MovieDB); " is 130.
Long Statement,JMMServer.UI,InitialSetupForm,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\InitialSetupForm.xaml.cs,workerTestLogin_DoWork,The length of the statement  "		JMMService.AnidbProcessor.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password' ServerSettings.AniDB_ServerAddress' ServerSettings.AniDB_ServerPort' ServerSettings.AniDB_ClientPort); " is 196.
Long Statement,JMMServer.WebCache,XMLService,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\WebCache\XMLService.cs,Get_AniDB_File,The length of the statement  "		string uri = string.Format ("http://{0}/GetAniDB_File.aspx?hash={1}&fsize={2}"' ServerSettings.WebCache_Address' hash' filesize); " is 129.
Long Statement,JMMServer.WebCache,XMLService,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\WebCache\XMLService.cs,Get_FileHash,The length of the statement  "		string uri = string.Format ("http://{0}/GetFileNameHash.aspx?uname={1}&fname={2}&fsize={3}"' ServerSettings.WebCache_Address' username' fileName' filesize); " is 156.
Long Statement,JMMServer.WebCache,XMLService,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\WebCache\XMLService.cs,Get_CrossRef_File_Episode,The length of the statement  "		string uri = string.Format ("http://{0}/GetCrossRef_File_Episode.aspx?uname={1}&hash={2}"' ServerSettings.WebCache_Address' username' vid.Hash); " is 144.
Long Statement,JMMServer.WebCache,XMLService,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\WebCache\XMLService.cs,Get_CrossRef_File_Episode,The length of the statement  "		string sPercentages = TryGetProperty (docFile' "CrossRef_File_EpisodeResultCollection"' "EpisodePercentages").ToUpper (); " is 121.
Long Statement,JMMServer.WebCache,XMLService,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\WebCache\XMLService.cs,Get_CrossRef_AniDB_Other,The length of the statement  "		string uri = string.Format ("http://{0}/GetCrossRef_AniDB_Other.aspx?uname={1}&AnimeID={2}&CrossRefType={3}"' ServerSettings.WebCache_Address' username' animeID' (int)xrefType); " is 177.
Long Statement,JMMServer.WebCache,XMLService,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\WebCache\XMLService.cs,Get_CrossRef_AniDB_Trakt,The length of the statement  "		string uri = string.Format ("http://{0}/GetCrossRef_AniDB_Trakt.aspx?uname={1}&AnimeID={2}"' ServerSettings.WebCache_Address' username' animeID); " is 145.
Long Statement,JMMServer.WebCache,XMLService,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\WebCache\XMLService.cs,Get_CrossRef_AniDB_MAL,The length of the statement  "		string uri = string.Format ("http://{0}/GetCrossRef_AniDB_MAL.aspx?uname={1}&AnimeID={2}"' ServerSettings.WebCache_Address' username' animeID); " is 143.
Long Statement,JMMServer.WebCache,XMLService,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\WebCache\XMLService.cs,Get_AniDBUpdates,The length of the statement  "		string uri = string.Format ("http://{0}/GetUpdates.aspx?updatetime={1}"' ServerSettings.WebCache_Address' utcUpdateTime); " is 121.
Complex Conditional,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,logoutTimer_Elapsed,The conditional expression  "tsAniDBUDP.TotalSeconds >= 20 && tsPing.TotalSeconds >= 20 && !IsBanned && !ExtendPauseSecs.HasValue"  is complex.
Complex Conditional,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,ValidAniDBCredentials,The conditional expression  "string.IsNullOrEmpty (this.userName) || string.IsNullOrEmpty (this.password) || string.IsNullOrEmpty (this.serverName) || string.IsNullOrEmpty (this.serverPort) || string.IsNullOrEmpty (this.clientPort)"  is complex.
Complex Conditional,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetFilesByGroupAndResolution,The conditional expression  "relGroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && videoSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && resolution.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && thisBitDepth == videoBitDepth"  is complex.
Complex Conditional,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetFilesByGroupAndResolution,The conditional expression  "relGroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && videoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && resolution.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && thisBitDepth == videoBitDepth"  is complex.
Complex Conditional,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The conditional expression  "contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth"  is complex.
Complex Conditional,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The conditional expression  "contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth"  is complex.
Complex Conditional,JMMServer,ImportFolderForm,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\ImportFolderForm.xaml.cs,btnSave_Click,The conditional expression  "chkDropDestination.IsChecked.HasValue && chkDropSource.IsChecked.HasValue && chkDropDestination.IsChecked.Value && chkDropSource.IsChecked.Value"  is complex.
Complex Conditional,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,VideoResolutionWithFivePercent,The conditional expression  "testWidth >= widthLower && testWidth <= widthUpper && testHeight >= heightLower && testHeight <= heightUpper"  is complex.
Complex Conditional,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnSaveDatabaseSettings_Click,The conditional expression  "string.IsNullOrEmpty (txtMSSQL_DatabaseName.Text) || string.IsNullOrEmpty (txtMSSQL_Password.Password) || string.IsNullOrEmpty (cboMSSQLServerList.Text) || string.IsNullOrEmpty (txtMSSQL_Username.Text)"  is complex.
Complex Conditional,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnSaveDatabaseSettings_Click,The conditional expression  "string.IsNullOrEmpty (txtMySQL_DatabaseName.Text) || string.IsNullOrEmpty (txtMySQL_Password.Password) || string.IsNullOrEmpty (txtMySQL_ServerAddress.Text) || string.IsNullOrEmpty (txtMySQL_Username.Text)"  is complex.
Complex Conditional,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The conditional expression  "(commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))"  is complex.
Complex Conditional,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The conditional expression  "ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604"  is complex.
Complex Conditional,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetRelatedAnimeRecursive,The conditional expression  "(relationtype == "same setting") || (relationtype == "alternative setting") || (relationtype == "character") || (relationtype == "other")"  is complex.
Complex Conditional,JMMServer.Entities,AnimeGroup,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeGroup.cs,GetRelatedGroupsFromAnimeID,The conditional expression  "(relationtype == "same setting") || (relationtype == "alternative setting") || (relationtype == "character") || (relationtype == "other")"  is complex.
Complex Conditional,JMMServer.Entities,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AnimeSeries.cs,GetSeriesName,The conditional expression  "tvdbs != null && tvdbs.Count > 0 && !string.IsNullOrEmpty (tvdbs [0].SeriesName) && !tvdbs [0].SeriesName.ToUpper ().Contains ("**DUPLICATE")"  is complex.
Complex Conditional,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The conditional expression  "(watched && ServerSettings.AniDB_MyList_SetWatched) || (!watched && ServerSettings.AniDB_MyList_SetUnwatched)"  is complex.
Complex Conditional,JMMServer.Providers.TvDB,TvDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TvDB\TvDBHelper.cs,ParseBanners,The conditional expression  "bannerType2 == "SEASONWIDE" || bannerType2 == "GRAPHICAL" || bannerType2 == "TEXT" || bannerType2 == "BLANK""  is complex.
Empty Catch Block,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,logoutTimer_Elapsed,The method has an empty catch block.
Empty Catch Block,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,DeleteVideoLocalAndFile,The method has an empty catch block.
Empty Catch Block,JMMServer,ServerSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\ServerSettings.cs,DebugSettingsToLog,The method has an empty catch block.
Empty Catch Block,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,GenericExceptionHandler,The method has an empty catch block.
Empty Catch Block,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ExecuteCommandSync,The method has an empty catch block.
Empty Catch Block,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,MainWindow,The method has an empty catch block.
Empty Catch Block,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnUploadAzureCache_Click,The method has an empty catch block.
Empty Catch Block,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,GenerateAzureList,The method has an empty catch block.
Empty Catch Block,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,SendToAzure,The method has an empty catch block.
Empty Catch Block,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessCategories,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessTags,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessCharacters,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessTitles,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessRelations,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessSimilarAnime,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessRecommendations,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessEpisodes,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessVotes,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessVotes,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessVotes,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,TryGetProperty,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,TryGetProperty,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,TryGetPropertyWithAttribute,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,TryGetAttribute,The method has an empty catch block.
Empty Catch Block,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,TryGetAttribute,The method has an empty catch block.
Empty Catch Block,JMMServer.Commands,CommandProcessorGeneral,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorGeneral.cs,workerCommands_DoWork,The method has an empty catch block.
Empty Catch Block,JMMServer.Commands,CommandProcessorHasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorHasher.cs,workerCommands_DoWork,The method has an empty catch block.
Empty Catch Block,JMMServer.Commands,CommandProcessorImages,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorImages.cs,workerCommands_DoWork,The method has an empty catch block.
Empty Catch Block,JMMServer.Commands,CommandRequestImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequestImplementation.cs,TryGetProperty,The method has an empty catch block.
Empty Catch Block,JMMServer.Commands,CommandRequest_DownloadImage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_DownloadImage.cs,ProcessCommand,The method has an empty catch block.
Empty Catch Block,JMMServer.Commands,CommandRequest_MovieDBSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_MovieDBSearchAnime.cs,ProcessCommand,The method has an empty catch block.
Empty Catch Block,JMMServer.Commands,CommandRequest_TvDBSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\TvDB\CommandRequest_TvDBSearchAnime.cs,ProcessCommand,The method has an empty catch block.
Empty Catch Block,JMMServer.Commands.MAL,CommandRequest_MALSearchAnime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALSearchAnime.cs,ProcessCommand,The method has an empty catch block.
Empty Catch Block,JMMServer.Databases,SQLite,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\SQLite.cs,UpdateSchema_022,The method has an empty catch block.
Empty Catch Block,JMMServer.Entities,TvDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\TvDB_Episode.cs,TryGetProperty,The method has an empty catch block.
Empty Catch Block,JMMServer.Entities,TvDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\TvDB_Episode.cs,TryGetProperty,The method has an empty catch block.
Empty Catch Block,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,Process,The method has an empty catch block.
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,Init,The following statement contains a magic number: logoutTimer.Interval = 5000;  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,logoutTimer_Elapsed,The following statement contains a magic number: lock (lockAniDBConnections) {  	TimeSpan tsAniDBNonPing = DateTime.Now - JMMService.LastAniDBMessageNonPing;  	TimeSpan tsPing = DateTime.Now - JMMService.LastAniDBPing;  	TimeSpan tsAniDBUDP = DateTime.Now - JMMService.LastAniDBUDPMessage;  	// if we haven't sent a command for 20 seconds' send a ping just to keep the connection alive  	if (tsAniDBUDP.TotalSeconds >= 20 && tsPing.TotalSeconds >= 20 && !IsBanned && !ExtendPauseSecs.HasValue) {  		AniDBCommand_Ping ping = new AniDBCommand_Ping ();  		ping.Init ();  		ping.Process (ref soUdp' ref remoteIpEndPoint' curSessionID' new UnicodeEncoding (true' false));  	}  	string msg = string.Format ("Last message sent {0} seconds ago"' tsAniDBUDP.TotalSeconds);  	if (tsAniDBNonPing.TotalSeconds > 600)// after 10 minutes  	 {  		ForceLogout ();  	}  }  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,logoutTimer_Elapsed,The following statement contains a magic number: lock (lockAniDBConnections) {  	TimeSpan tsAniDBNonPing = DateTime.Now - JMMService.LastAniDBMessageNonPing;  	TimeSpan tsPing = DateTime.Now - JMMService.LastAniDBPing;  	TimeSpan tsAniDBUDP = DateTime.Now - JMMService.LastAniDBUDPMessage;  	// if we haven't sent a command for 20 seconds' send a ping just to keep the connection alive  	if (tsAniDBUDP.TotalSeconds >= 20 && tsPing.TotalSeconds >= 20 && !IsBanned && !ExtendPauseSecs.HasValue) {  		AniDBCommand_Ping ping = new AniDBCommand_Ping ();  		ping.Init ();  		ping.Process (ref soUdp' ref remoteIpEndPoint' curSessionID' new UnicodeEncoding (true' false));  	}  	string msg = string.Format ("Last message sent {0} seconds ago"' tsAniDBUDP.TotalSeconds);  	if (tsAniDBNonPing.TotalSeconds > 600)// after 10 minutes  	 {  		ForceLogout ();  	}  }  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,logoutTimer_Elapsed,The following statement contains a magic number: lock (lockAniDBConnections) {  	TimeSpan tsAniDBNonPing = DateTime.Now - JMMService.LastAniDBMessageNonPing;  	TimeSpan tsPing = DateTime.Now - JMMService.LastAniDBPing;  	TimeSpan tsAniDBUDP = DateTime.Now - JMMService.LastAniDBUDPMessage;  	// if we haven't sent a command for 20 seconds' send a ping just to keep the connection alive  	if (tsAniDBUDP.TotalSeconds >= 20 && tsPing.TotalSeconds >= 20 && !IsBanned && !ExtendPauseSecs.HasValue) {  		AniDBCommand_Ping ping = new AniDBCommand_Ping ();  		ping.Init ();  		ping.Process (ref soUdp' ref remoteIpEndPoint' curSessionID' new UnicodeEncoding (true' false));  	}  	string msg = string.Format ("Last message sent {0} seconds ago"' tsAniDBUDP.TotalSeconds);  	if (tsAniDBNonPing.TotalSeconds > 600)// after 10 minutes  	 {  		ForceLogout ();  	}  }  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,logoutTimer_Elapsed,The following statement contains a magic number: if (tsAniDBUDP.TotalSeconds >= 20 && tsPing.TotalSeconds >= 20 && !IsBanned && !ExtendPauseSecs.HasValue) {  	AniDBCommand_Ping ping = new AniDBCommand_Ping ();  	ping.Init ();  	ping.Process (ref soUdp' ref remoteIpEndPoint' curSessionID' new UnicodeEncoding (true' false));  }  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,logoutTimer_Elapsed,The following statement contains a magic number: if (tsAniDBUDP.TotalSeconds >= 20 && tsPing.TotalSeconds >= 20 && !IsBanned && !ExtendPauseSecs.HasValue) {  	AniDBCommand_Ping ping = new AniDBCommand_Ping ();  	ping.Init ();  	ping.Process (ref soUdp' ref remoteIpEndPoint' curSessionID' new UnicodeEncoding (true' false));  }  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,logoutTimer_Elapsed,The following statement contains a magic number: if (tsAniDBNonPing.TotalSeconds > 600)// after 10 minutes   {  	ForceLogout ();  }  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,Pause,The following statement contains a magic number: if (ExtendPauseSecs.HasValue)  	pauseDuration = ExtendPauseSecs.Value * 1000;  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,Pause,The following statement contains a magic number: pauseDuration = ExtendPauseSecs.Value * 1000;  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,Pause,The following statement contains a magic number: while (DateTime.Now < JMMService.LastAniDBMessage.AddMilliseconds (pauseDuration)) {  	// pretend to do something....  	Thread.Sleep (200);  }  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,Pause,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,Login,The following statement contains a magic number: Thread.Sleep (2200);  
Magic Number,JMMServer,AniDBHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDBHelper.cs,BindToLocalPort,The following statement contains a magic number: soUdp.ReceiveTimeout = 30000;  
Magic Number,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The following statement contains a magic number: if (ep.EpisodeTypeEnum == enEpisodeType.Episode) {  	if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  		// find the xref that is right  		// relies on the xref's being sorted by season number and then episode number (desc)  		List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  		sortCriteria.Add (new SortPropOrFieldAndDirection ("AniDBStartEpisodeNumber"' true' SortType.eInteger));  		List<CrossRef_AniDB_TvDBV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBV2> (tvSummary.CrossRefTvDBV2' sortCriteria);  		bool foundStartingPoint = false;  		CrossRef_AniDB_TvDBV2 xrefBase = null;  		foreach (CrossRef_AniDB_TvDBV2 xrefTV in tvDBCrossRef) {  			if (xrefTV.AniDBStartEpisodeType != (int)enEpisodeType.Episode)  				continue;  			if (ep.EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  				foundStartingPoint = true;  				xrefBase = xrefTV;  				break;  			}  		}  		// we have found the starting epiosde numbder from AniDB  		// now let's check that the TvDB Season and Episode Number exist  		if (foundStartingPoint) {  			Dictionary<int' int> dictTvDBSeasons = null;  			Dictionary<int' TvDB_Episode> dictTvDBEpisodes = null;  			foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  				if (det.TvDBID == xrefBase.TvDBID) {  					dictTvDBSeasons = det.DictTvDBSeasons;  					dictTvDBEpisodes = det.DictTvDBEpisodes;  					break;  				}  			}  			if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  				int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (ep.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  				if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  					TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  					if (string.IsNullOrEmpty (tvep.Overview))  						contract.EpisodeOverview = "Episode Overview Not Available";  					else  						contract.EpisodeOverview = tvep.Overview;  					if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  						contract.ImageType = 0;  						contract.ImageID = 0;  					}  					else {  						contract.ImageType = (int)JMMImageType.TvDB_Episode;  						contract.ImageID = tvep.TvDB_EpisodeID;  					}  					if (ServerSettings.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  						contract.EpisodeName = tvep.EpisodeName;  				}  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The following statement contains a magic number: if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  	// find the xref that is right  	// relies on the xref's being sorted by season number and then episode number (desc)  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("AniDBStartEpisodeNumber"' true' SortType.eInteger));  	List<CrossRef_AniDB_TvDBV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBV2> (tvSummary.CrossRefTvDBV2' sortCriteria);  	bool foundStartingPoint = false;  	CrossRef_AniDB_TvDBV2 xrefBase = null;  	foreach (CrossRef_AniDB_TvDBV2 xrefTV in tvDBCrossRef) {  		if (xrefTV.AniDBStartEpisodeType != (int)enEpisodeType.Episode)  			continue;  		if (ep.EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  			foundStartingPoint = true;  			xrefBase = xrefTV;  			break;  		}  	}  	// we have found the starting epiosde numbder from AniDB  	// now let's check that the TvDB Season and Episode Number exist  	if (foundStartingPoint) {  		Dictionary<int' int> dictTvDBSeasons = null;  		Dictionary<int' TvDB_Episode> dictTvDBEpisodes = null;  		foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  			if (det.TvDBID == xrefBase.TvDBID) {  				dictTvDBSeasons = det.DictTvDBSeasons;  				dictTvDBEpisodes = det.DictTvDBEpisodes;  				break;  			}  		}  		if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  			int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (ep.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  			if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  				TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  				if (string.IsNullOrEmpty (tvep.Overview))  					contract.EpisodeOverview = "Episode Overview Not Available";  				else  					contract.EpisodeOverview = tvep.Overview;  				if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  					contract.ImageType = 0;  					contract.ImageID = 0;  				}  				else {  					contract.ImageType = (int)JMMImageType.TvDB_Episode;  					contract.ImageID = tvep.TvDB_EpisodeID;  				}  				if (ServerSettings.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  					contract.EpisodeName = tvep.EpisodeName;  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The following statement contains a magic number: if (foundStartingPoint) {  	Dictionary<int' int> dictTvDBSeasons = null;  	Dictionary<int' TvDB_Episode> dictTvDBEpisodes = null;  	foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  		if (det.TvDBID == xrefBase.TvDBID) {  			dictTvDBSeasons = det.DictTvDBSeasons;  			dictTvDBEpisodes = det.DictTvDBEpisodes;  			break;  		}  	}  	if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  		int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (ep.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  		if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  			TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  			if (string.IsNullOrEmpty (tvep.Overview))  				contract.EpisodeOverview = "Episode Overview Not Available";  			else  				contract.EpisodeOverview = tvep.Overview;  			if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  				contract.ImageType = 0;  				contract.ImageID = 0;  			}  			else {  				contract.ImageType = (int)JMMImageType.TvDB_Episode;  				contract.ImageID = tvep.TvDB_EpisodeID;  			}  			if (ServerSettings.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  				contract.EpisodeName = tvep.EpisodeName;  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The following statement contains a magic number: if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  	int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (ep.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  	if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  		TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  		if (string.IsNullOrEmpty (tvep.Overview))  			contract.EpisodeOverview = "Episode Overview Not Available";  		else  			contract.EpisodeOverview = tvep.Overview;  		if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  			contract.ImageType = 0;  			contract.ImageID = 0;  		}  		else {  			contract.ImageType = (int)JMMImageType.TvDB_Episode;  			contract.ImageID = tvep.TvDB_EpisodeID;  		}  		if (ServerSettings.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  			contract.EpisodeName = tvep.EpisodeName;  	}  }  
Magic Number,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The following statement contains a magic number: if (ep.EpisodeTypeEnum == enEpisodeType.Special) {  	// find the xref that is right  	// relies on the xref's being sorted by season number and then episode number (desc)  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("AniDBStartEpisodeNumber"' true' SortType.eInteger));  	List<CrossRef_AniDB_TvDBV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBV2> (tvSummary.CrossRefTvDBV2' sortCriteria);  	bool foundStartingPoint = false;  	CrossRef_AniDB_TvDBV2 xrefBase = null;  	foreach (CrossRef_AniDB_TvDBV2 xrefTV in tvDBCrossRef) {  		if (xrefTV.AniDBStartEpisodeType != (int)enEpisodeType.Special)  			continue;  		if (ep.EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  			foundStartingPoint = true;  			xrefBase = xrefTV;  			break;  		}  	}  	if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  		// we have found the starting epiosde numbder from AniDB  		// now let's check that the TvDB Season and Episode Number exist  		if (foundStartingPoint) {  			Dictionary<int' int> dictTvDBSeasons = null;  			Dictionary<int' TvDB_Episode> dictTvDBEpisodes = null;  			foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  				if (det.TvDBID == xrefBase.TvDBID) {  					dictTvDBSeasons = det.DictTvDBSeasons;  					dictTvDBEpisodes = det.DictTvDBEpisodes;  					break;  				}  			}  			if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  				int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (ep.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  				if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  					TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  					contract.EpisodeOverview = tvep.Overview;  					if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  						contract.ImageType = 0;  						contract.ImageID = 0;  					}  					else {  						contract.ImageType = (int)JMMImageType.TvDB_Episode;  						contract.ImageID = tvep.TvDB_EpisodeID;  					}  					if (ServerSettings.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  						contract.EpisodeName = tvep.EpisodeName;  				}  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The following statement contains a magic number: if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  	// we have found the starting epiosde numbder from AniDB  	// now let's check that the TvDB Season and Episode Number exist  	if (foundStartingPoint) {  		Dictionary<int' int> dictTvDBSeasons = null;  		Dictionary<int' TvDB_Episode> dictTvDBEpisodes = null;  		foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  			if (det.TvDBID == xrefBase.TvDBID) {  				dictTvDBSeasons = det.DictTvDBSeasons;  				dictTvDBEpisodes = det.DictTvDBEpisodes;  				break;  			}  		}  		if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  			int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (ep.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  			if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  				TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  				contract.EpisodeOverview = tvep.Overview;  				if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  					contract.ImageType = 0;  					contract.ImageID = 0;  				}  				else {  					contract.ImageType = (int)JMMImageType.TvDB_Episode;  					contract.ImageID = tvep.TvDB_EpisodeID;  				}  				if (ServerSettings.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  					contract.EpisodeName = tvep.EpisodeName;  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The following statement contains a magic number: if (foundStartingPoint) {  	Dictionary<int' int> dictTvDBSeasons = null;  	Dictionary<int' TvDB_Episode> dictTvDBEpisodes = null;  	foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  		if (det.TvDBID == xrefBase.TvDBID) {  			dictTvDBSeasons = det.DictTvDBSeasons;  			dictTvDBEpisodes = det.DictTvDBEpisodes;  			break;  		}  	}  	if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  		int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (ep.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  		if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  			TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  			contract.EpisodeOverview = tvep.Overview;  			if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  				contract.ImageType = 0;  				contract.ImageID = 0;  			}  			else {  				contract.ImageType = (int)JMMImageType.TvDB_Episode;  				contract.ImageID = tvep.TvDB_EpisodeID;  			}  			if (ServerSettings.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  				contract.EpisodeName = tvep.EpisodeName;  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,SetTvDBInfo,The following statement contains a magic number: if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  	int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (ep.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  	if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  		TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  		contract.EpisodeOverview = tvep.Overview;  		if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  			contract.ImageType = 0;  			contract.ImageID = 0;  		}  		else {  			contract.ImageType = (int)JMMImageType.TvDB_Episode;  			contract.ImageID = tvep.TvDB_EpisodeID;  		}  		if (ServerSettings.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  			contract.EpisodeName = tvep.EpisodeName;  	}  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: try {  	using (var session = JMMService.SessionFactory.OpenSession ()) {  		DateTime start = DateTime.Now;  		GroupFilterRepository repGF = new GroupFilterRepository ();  		JMMUser user = GetUser (session' UserId);  		if (user == null)  			return new MemoryStream ();  		m.Title2 = "My Anime";  		m.Title1 = "Anime";  		m.NoCache = "1";  		m.AllowSync = "0";  		m.ViewMode = "65592";  		m.ViewGroup = "show";  		m.Identifier = "com.plexapp.plugins.myanime";  		m.MediaTagPrefix = "/system/bundle/media/flags/";  		m.MediaTagVersion = "1375292524";  		List<GroupFilter> allGfs = repGF.GetAll (session);  		Dictionary<int' HashSet<int>> gstats = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID];  		foreach (GroupFilter gg in allGfs.ToArray ()) {  			if ((!StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) || (!StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gg.GroupFilterID))) {  				allGfs.Remove (gg);  			}  		}  		AnimeGroupRepository repGroups = new AnimeGroupRepository ();  		allGfs.Insert (0' new GroupFilter () {  			GroupFilterName = "All"'  			GroupFilterID = -999  		});  		foreach (GroupFilter gg in allGfs) {  			Random rnd = new Random (123456789);  			Video pp = new Video ();  			pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID);  			pp.Title = gg.GroupFilterName;  			HashSet<int> groups;  			if (gg.GroupFilterID == -999)  				groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  			else {  				groups = gstats [gg.GroupFilterID];  			}  			if (groups.Count != 0) {  				bool repeat;  				int nn = 0;  				pp.LeafCount = groups.Count.ToString ();  				pp.ViewedLeafCount = "0";  				do {  					repeat = true;  					int grp = groups.ElementAt (rnd.Next (groups.Count));  					AnimeGroup ag = repGroups.GetByID (grp);  					List<AnimeSeries> sers = ag.GetSeries (session);  					if (sers.Count > 0) {  						AnimeSeries ser = sers [rnd.Next (sers.Count)];  						AniDB_Anime anim = ser.GetAnime (session);  						if (anim != null) {  							ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  							ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  							if (poster != null)  								pp.Thumb = GenPoster (poster);  							if (fanart != null)  								pp.Art = GenArt (fanart);  							if (poster != null)  								repeat = false;  						}  					}  					nn++;  					if ((repeat) && (nn == 15))  						repeat = false;  				}  				while (repeat);  				dirs.Add (pp);  			}  		}  		VideoLocalRepository repVids = new VideoLocalRepository ();  		List<VideoLocal> vids = repVids.GetVideosWithoutEpisode ();  		if (vids.Count > 0) {  			Video pp = new Video ();  			pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/0/" + (int)JMMType.GroupUnsort + "/0");  			pp.Title = "Unsort";  			pp.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_unsort.png");  			pp.LeafCount = vids.Count.ToString ();  			pp.ViewedLeafCount = "0";  			dirs.Add (pp);  		}  		dirs = dirs.OrderBy (a => a.Title).ToList ();  	}  	m.Directories = StoreLimits (m' dirs);  	/*                 m.ViewMode="65586";                 m.ViewGroup="video";                 m.ContentType="items";*/return GetStreamFromXmlObject (m);  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return new MemoryStream ();  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: try {  	using (var session = JMMService.SessionFactory.OpenSession ()) {  		DateTime start = DateTime.Now;  		GroupFilterRepository repGF = new GroupFilterRepository ();  		JMMUser user = GetUser (session' UserId);  		if (user == null)  			return new MemoryStream ();  		m.Title2 = "My Anime";  		m.Title1 = "Anime";  		m.NoCache = "1";  		m.AllowSync = "0";  		m.ViewMode = "65592";  		m.ViewGroup = "show";  		m.Identifier = "com.plexapp.plugins.myanime";  		m.MediaTagPrefix = "/system/bundle/media/flags/";  		m.MediaTagVersion = "1375292524";  		List<GroupFilter> allGfs = repGF.GetAll (session);  		Dictionary<int' HashSet<int>> gstats = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID];  		foreach (GroupFilter gg in allGfs.ToArray ()) {  			if ((!StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) || (!StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gg.GroupFilterID))) {  				allGfs.Remove (gg);  			}  		}  		AnimeGroupRepository repGroups = new AnimeGroupRepository ();  		allGfs.Insert (0' new GroupFilter () {  			GroupFilterName = "All"'  			GroupFilterID = -999  		});  		foreach (GroupFilter gg in allGfs) {  			Random rnd = new Random (123456789);  			Video pp = new Video ();  			pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID);  			pp.Title = gg.GroupFilterName;  			HashSet<int> groups;  			if (gg.GroupFilterID == -999)  				groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  			else {  				groups = gstats [gg.GroupFilterID];  			}  			if (groups.Count != 0) {  				bool repeat;  				int nn = 0;  				pp.LeafCount = groups.Count.ToString ();  				pp.ViewedLeafCount = "0";  				do {  					repeat = true;  					int grp = groups.ElementAt (rnd.Next (groups.Count));  					AnimeGroup ag = repGroups.GetByID (grp);  					List<AnimeSeries> sers = ag.GetSeries (session);  					if (sers.Count > 0) {  						AnimeSeries ser = sers [rnd.Next (sers.Count)];  						AniDB_Anime anim = ser.GetAnime (session);  						if (anim != null) {  							ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  							ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  							if (poster != null)  								pp.Thumb = GenPoster (poster);  							if (fanart != null)  								pp.Art = GenArt (fanart);  							if (poster != null)  								repeat = false;  						}  					}  					nn++;  					if ((repeat) && (nn == 15))  						repeat = false;  				}  				while (repeat);  				dirs.Add (pp);  			}  		}  		VideoLocalRepository repVids = new VideoLocalRepository ();  		List<VideoLocal> vids = repVids.GetVideosWithoutEpisode ();  		if (vids.Count > 0) {  			Video pp = new Video ();  			pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/0/" + (int)JMMType.GroupUnsort + "/0");  			pp.Title = "Unsort";  			pp.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_unsort.png");  			pp.LeafCount = vids.Count.ToString ();  			pp.ViewedLeafCount = "0";  			dirs.Add (pp);  		}  		dirs = dirs.OrderBy (a => a.Title).ToList ();  	}  	m.Directories = StoreLimits (m' dirs);  	/*                 m.ViewMode="65586";                 m.ViewGroup="video";                 m.ContentType="items";*/return GetStreamFromXmlObject (m);  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return new MemoryStream ();  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: try {  	using (var session = JMMService.SessionFactory.OpenSession ()) {  		DateTime start = DateTime.Now;  		GroupFilterRepository repGF = new GroupFilterRepository ();  		JMMUser user = GetUser (session' UserId);  		if (user == null)  			return new MemoryStream ();  		m.Title2 = "My Anime";  		m.Title1 = "Anime";  		m.NoCache = "1";  		m.AllowSync = "0";  		m.ViewMode = "65592";  		m.ViewGroup = "show";  		m.Identifier = "com.plexapp.plugins.myanime";  		m.MediaTagPrefix = "/system/bundle/media/flags/";  		m.MediaTagVersion = "1375292524";  		List<GroupFilter> allGfs = repGF.GetAll (session);  		Dictionary<int' HashSet<int>> gstats = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID];  		foreach (GroupFilter gg in allGfs.ToArray ()) {  			if ((!StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) || (!StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gg.GroupFilterID))) {  				allGfs.Remove (gg);  			}  		}  		AnimeGroupRepository repGroups = new AnimeGroupRepository ();  		allGfs.Insert (0' new GroupFilter () {  			GroupFilterName = "All"'  			GroupFilterID = -999  		});  		foreach (GroupFilter gg in allGfs) {  			Random rnd = new Random (123456789);  			Video pp = new Video ();  			pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID);  			pp.Title = gg.GroupFilterName;  			HashSet<int> groups;  			if (gg.GroupFilterID == -999)  				groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  			else {  				groups = gstats [gg.GroupFilterID];  			}  			if (groups.Count != 0) {  				bool repeat;  				int nn = 0;  				pp.LeafCount = groups.Count.ToString ();  				pp.ViewedLeafCount = "0";  				do {  					repeat = true;  					int grp = groups.ElementAt (rnd.Next (groups.Count));  					AnimeGroup ag = repGroups.GetByID (grp);  					List<AnimeSeries> sers = ag.GetSeries (session);  					if (sers.Count > 0) {  						AnimeSeries ser = sers [rnd.Next (sers.Count)];  						AniDB_Anime anim = ser.GetAnime (session);  						if (anim != null) {  							ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  							ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  							if (poster != null)  								pp.Thumb = GenPoster (poster);  							if (fanart != null)  								pp.Art = GenArt (fanart);  							if (poster != null)  								repeat = false;  						}  					}  					nn++;  					if ((repeat) && (nn == 15))  						repeat = false;  				}  				while (repeat);  				dirs.Add (pp);  			}  		}  		VideoLocalRepository repVids = new VideoLocalRepository ();  		List<VideoLocal> vids = repVids.GetVideosWithoutEpisode ();  		if (vids.Count > 0) {  			Video pp = new Video ();  			pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/0/" + (int)JMMType.GroupUnsort + "/0");  			pp.Title = "Unsort";  			pp.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_unsort.png");  			pp.LeafCount = vids.Count.ToString ();  			pp.ViewedLeafCount = "0";  			dirs.Add (pp);  		}  		dirs = dirs.OrderBy (a => a.Title).ToList ();  	}  	m.Directories = StoreLimits (m' dirs);  	/*                 m.ViewMode="65586";                 m.ViewGroup="video";                 m.ContentType="items";*/return GetStreamFromXmlObject (m);  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return new MemoryStream ();  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: try {  	using (var session = JMMService.SessionFactory.OpenSession ()) {  		DateTime start = DateTime.Now;  		GroupFilterRepository repGF = new GroupFilterRepository ();  		JMMUser user = GetUser (session' UserId);  		if (user == null)  			return new MemoryStream ();  		m.Title2 = "My Anime";  		m.Title1 = "Anime";  		m.NoCache = "1";  		m.AllowSync = "0";  		m.ViewMode = "65592";  		m.ViewGroup = "show";  		m.Identifier = "com.plexapp.plugins.myanime";  		m.MediaTagPrefix = "/system/bundle/media/flags/";  		m.MediaTagVersion = "1375292524";  		List<GroupFilter> allGfs = repGF.GetAll (session);  		Dictionary<int' HashSet<int>> gstats = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID];  		foreach (GroupFilter gg in allGfs.ToArray ()) {  			if ((!StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) || (!StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gg.GroupFilterID))) {  				allGfs.Remove (gg);  			}  		}  		AnimeGroupRepository repGroups = new AnimeGroupRepository ();  		allGfs.Insert (0' new GroupFilter () {  			GroupFilterName = "All"'  			GroupFilterID = -999  		});  		foreach (GroupFilter gg in allGfs) {  			Random rnd = new Random (123456789);  			Video pp = new Video ();  			pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID);  			pp.Title = gg.GroupFilterName;  			HashSet<int> groups;  			if (gg.GroupFilterID == -999)  				groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  			else {  				groups = gstats [gg.GroupFilterID];  			}  			if (groups.Count != 0) {  				bool repeat;  				int nn = 0;  				pp.LeafCount = groups.Count.ToString ();  				pp.ViewedLeafCount = "0";  				do {  					repeat = true;  					int grp = groups.ElementAt (rnd.Next (groups.Count));  					AnimeGroup ag = repGroups.GetByID (grp);  					List<AnimeSeries> sers = ag.GetSeries (session);  					if (sers.Count > 0) {  						AnimeSeries ser = sers [rnd.Next (sers.Count)];  						AniDB_Anime anim = ser.GetAnime (session);  						if (anim != null) {  							ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  							ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  							if (poster != null)  								pp.Thumb = GenPoster (poster);  							if (fanart != null)  								pp.Art = GenArt (fanart);  							if (poster != null)  								repeat = false;  						}  					}  					nn++;  					if ((repeat) && (nn == 15))  						repeat = false;  				}  				while (repeat);  				dirs.Add (pp);  			}  		}  		VideoLocalRepository repVids = new VideoLocalRepository ();  		List<VideoLocal> vids = repVids.GetVideosWithoutEpisode ();  		if (vids.Count > 0) {  			Video pp = new Video ();  			pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/0/" + (int)JMMType.GroupUnsort + "/0");  			pp.Title = "Unsort";  			pp.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_unsort.png");  			pp.LeafCount = vids.Count.ToString ();  			pp.ViewedLeafCount = "0";  			dirs.Add (pp);  		}  		dirs = dirs.OrderBy (a => a.Title).ToList ();  	}  	m.Directories = StoreLimits (m' dirs);  	/*                 m.ViewMode="65586";                 m.ViewGroup="video";                 m.ContentType="items";*/return GetStreamFromXmlObject (m);  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return new MemoryStream ();  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	DateTime start = DateTime.Now;  	GroupFilterRepository repGF = new GroupFilterRepository ();  	JMMUser user = GetUser (session' UserId);  	if (user == null)  		return new MemoryStream ();  	m.Title2 = "My Anime";  	m.Title1 = "Anime";  	m.NoCache = "1";  	m.AllowSync = "0";  	m.ViewMode = "65592";  	m.ViewGroup = "show";  	m.Identifier = "com.plexapp.plugins.myanime";  	m.MediaTagPrefix = "/system/bundle/media/flags/";  	m.MediaTagVersion = "1375292524";  	List<GroupFilter> allGfs = repGF.GetAll (session);  	Dictionary<int' HashSet<int>> gstats = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID];  	foreach (GroupFilter gg in allGfs.ToArray ()) {  		if ((!StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) || (!StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gg.GroupFilterID))) {  			allGfs.Remove (gg);  		}  	}  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	allGfs.Insert (0' new GroupFilter () {  		GroupFilterName = "All"'  		GroupFilterID = -999  	});  	foreach (GroupFilter gg in allGfs) {  		Random rnd = new Random (123456789);  		Video pp = new Video ();  		pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID);  		pp.Title = gg.GroupFilterName;  		HashSet<int> groups;  		if (gg.GroupFilterID == -999)  			groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  		else {  			groups = gstats [gg.GroupFilterID];  		}  		if (groups.Count != 0) {  			bool repeat;  			int nn = 0;  			pp.LeafCount = groups.Count.ToString ();  			pp.ViewedLeafCount = "0";  			do {  				repeat = true;  				int grp = groups.ElementAt (rnd.Next (groups.Count));  				AnimeGroup ag = repGroups.GetByID (grp);  				List<AnimeSeries> sers = ag.GetSeries (session);  				if (sers.Count > 0) {  					AnimeSeries ser = sers [rnd.Next (sers.Count)];  					AniDB_Anime anim = ser.GetAnime (session);  					if (anim != null) {  						ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  						ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  						if (poster != null)  							pp.Thumb = GenPoster (poster);  						if (fanart != null)  							pp.Art = GenArt (fanart);  						if (poster != null)  							repeat = false;  					}  				}  				nn++;  				if ((repeat) && (nn == 15))  					repeat = false;  			}  			while (repeat);  			dirs.Add (pp);  		}  	}  	VideoLocalRepository repVids = new VideoLocalRepository ();  	List<VideoLocal> vids = repVids.GetVideosWithoutEpisode ();  	if (vids.Count > 0) {  		Video pp = new Video ();  		pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/0/" + (int)JMMType.GroupUnsort + "/0");  		pp.Title = "Unsort";  		pp.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_unsort.png");  		pp.LeafCount = vids.Count.ToString ();  		pp.ViewedLeafCount = "0";  		dirs.Add (pp);  	}  	dirs = dirs.OrderBy (a => a.Title).ToList ();  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	DateTime start = DateTime.Now;  	GroupFilterRepository repGF = new GroupFilterRepository ();  	JMMUser user = GetUser (session' UserId);  	if (user == null)  		return new MemoryStream ();  	m.Title2 = "My Anime";  	m.Title1 = "Anime";  	m.NoCache = "1";  	m.AllowSync = "0";  	m.ViewMode = "65592";  	m.ViewGroup = "show";  	m.Identifier = "com.plexapp.plugins.myanime";  	m.MediaTagPrefix = "/system/bundle/media/flags/";  	m.MediaTagVersion = "1375292524";  	List<GroupFilter> allGfs = repGF.GetAll (session);  	Dictionary<int' HashSet<int>> gstats = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID];  	foreach (GroupFilter gg in allGfs.ToArray ()) {  		if ((!StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) || (!StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gg.GroupFilterID))) {  			allGfs.Remove (gg);  		}  	}  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	allGfs.Insert (0' new GroupFilter () {  		GroupFilterName = "All"'  		GroupFilterID = -999  	});  	foreach (GroupFilter gg in allGfs) {  		Random rnd = new Random (123456789);  		Video pp = new Video ();  		pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID);  		pp.Title = gg.GroupFilterName;  		HashSet<int> groups;  		if (gg.GroupFilterID == -999)  			groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  		else {  			groups = gstats [gg.GroupFilterID];  		}  		if (groups.Count != 0) {  			bool repeat;  			int nn = 0;  			pp.LeafCount = groups.Count.ToString ();  			pp.ViewedLeafCount = "0";  			do {  				repeat = true;  				int grp = groups.ElementAt (rnd.Next (groups.Count));  				AnimeGroup ag = repGroups.GetByID (grp);  				List<AnimeSeries> sers = ag.GetSeries (session);  				if (sers.Count > 0) {  					AnimeSeries ser = sers [rnd.Next (sers.Count)];  					AniDB_Anime anim = ser.GetAnime (session);  					if (anim != null) {  						ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  						ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  						if (poster != null)  							pp.Thumb = GenPoster (poster);  						if (fanart != null)  							pp.Art = GenArt (fanart);  						if (poster != null)  							repeat = false;  					}  				}  				nn++;  				if ((repeat) && (nn == 15))  					repeat = false;  			}  			while (repeat);  			dirs.Add (pp);  		}  	}  	VideoLocalRepository repVids = new VideoLocalRepository ();  	List<VideoLocal> vids = repVids.GetVideosWithoutEpisode ();  	if (vids.Count > 0) {  		Video pp = new Video ();  		pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/0/" + (int)JMMType.GroupUnsort + "/0");  		pp.Title = "Unsort";  		pp.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_unsort.png");  		pp.LeafCount = vids.Count.ToString ();  		pp.ViewedLeafCount = "0";  		dirs.Add (pp);  	}  	dirs = dirs.OrderBy (a => a.Title).ToList ();  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	DateTime start = DateTime.Now;  	GroupFilterRepository repGF = new GroupFilterRepository ();  	JMMUser user = GetUser (session' UserId);  	if (user == null)  		return new MemoryStream ();  	m.Title2 = "My Anime";  	m.Title1 = "Anime";  	m.NoCache = "1";  	m.AllowSync = "0";  	m.ViewMode = "65592";  	m.ViewGroup = "show";  	m.Identifier = "com.plexapp.plugins.myanime";  	m.MediaTagPrefix = "/system/bundle/media/flags/";  	m.MediaTagVersion = "1375292524";  	List<GroupFilter> allGfs = repGF.GetAll (session);  	Dictionary<int' HashSet<int>> gstats = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID];  	foreach (GroupFilter gg in allGfs.ToArray ()) {  		if ((!StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) || (!StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gg.GroupFilterID))) {  			allGfs.Remove (gg);  		}  	}  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	allGfs.Insert (0' new GroupFilter () {  		GroupFilterName = "All"'  		GroupFilterID = -999  	});  	foreach (GroupFilter gg in allGfs) {  		Random rnd = new Random (123456789);  		Video pp = new Video ();  		pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID);  		pp.Title = gg.GroupFilterName;  		HashSet<int> groups;  		if (gg.GroupFilterID == -999)  			groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  		else {  			groups = gstats [gg.GroupFilterID];  		}  		if (groups.Count != 0) {  			bool repeat;  			int nn = 0;  			pp.LeafCount = groups.Count.ToString ();  			pp.ViewedLeafCount = "0";  			do {  				repeat = true;  				int grp = groups.ElementAt (rnd.Next (groups.Count));  				AnimeGroup ag = repGroups.GetByID (grp);  				List<AnimeSeries> sers = ag.GetSeries (session);  				if (sers.Count > 0) {  					AnimeSeries ser = sers [rnd.Next (sers.Count)];  					AniDB_Anime anim = ser.GetAnime (session);  					if (anim != null) {  						ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  						ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  						if (poster != null)  							pp.Thumb = GenPoster (poster);  						if (fanart != null)  							pp.Art = GenArt (fanart);  						if (poster != null)  							repeat = false;  					}  				}  				nn++;  				if ((repeat) && (nn == 15))  					repeat = false;  			}  			while (repeat);  			dirs.Add (pp);  		}  	}  	VideoLocalRepository repVids = new VideoLocalRepository ();  	List<VideoLocal> vids = repVids.GetVideosWithoutEpisode ();  	if (vids.Count > 0) {  		Video pp = new Video ();  		pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/0/" + (int)JMMType.GroupUnsort + "/0");  		pp.Title = "Unsort";  		pp.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_unsort.png");  		pp.LeafCount = vids.Count.ToString ();  		pp.ViewedLeafCount = "0";  		dirs.Add (pp);  	}  	dirs = dirs.OrderBy (a => a.Title).ToList ();  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	DateTime start = DateTime.Now;  	GroupFilterRepository repGF = new GroupFilterRepository ();  	JMMUser user = GetUser (session' UserId);  	if (user == null)  		return new MemoryStream ();  	m.Title2 = "My Anime";  	m.Title1 = "Anime";  	m.NoCache = "1";  	m.AllowSync = "0";  	m.ViewMode = "65592";  	m.ViewGroup = "show";  	m.Identifier = "com.plexapp.plugins.myanime";  	m.MediaTagPrefix = "/system/bundle/media/flags/";  	m.MediaTagVersion = "1375292524";  	List<GroupFilter> allGfs = repGF.GetAll (session);  	Dictionary<int' HashSet<int>> gstats = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID];  	foreach (GroupFilter gg in allGfs.ToArray ()) {  		if ((!StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) || (!StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gg.GroupFilterID))) {  			allGfs.Remove (gg);  		}  	}  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	allGfs.Insert (0' new GroupFilter () {  		GroupFilterName = "All"'  		GroupFilterID = -999  	});  	foreach (GroupFilter gg in allGfs) {  		Random rnd = new Random (123456789);  		Video pp = new Video ();  		pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID);  		pp.Title = gg.GroupFilterName;  		HashSet<int> groups;  		if (gg.GroupFilterID == -999)  			groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  		else {  			groups = gstats [gg.GroupFilterID];  		}  		if (groups.Count != 0) {  			bool repeat;  			int nn = 0;  			pp.LeafCount = groups.Count.ToString ();  			pp.ViewedLeafCount = "0";  			do {  				repeat = true;  				int grp = groups.ElementAt (rnd.Next (groups.Count));  				AnimeGroup ag = repGroups.GetByID (grp);  				List<AnimeSeries> sers = ag.GetSeries (session);  				if (sers.Count > 0) {  					AnimeSeries ser = sers [rnd.Next (sers.Count)];  					AniDB_Anime anim = ser.GetAnime (session);  					if (anim != null) {  						ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  						ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  						if (poster != null)  							pp.Thumb = GenPoster (poster);  						if (fanart != null)  							pp.Art = GenArt (fanart);  						if (poster != null)  							repeat = false;  					}  				}  				nn++;  				if ((repeat) && (nn == 15))  					repeat = false;  			}  			while (repeat);  			dirs.Add (pp);  		}  	}  	VideoLocalRepository repVids = new VideoLocalRepository ();  	List<VideoLocal> vids = repVids.GetVideosWithoutEpisode ();  	if (vids.Count > 0) {  		Video pp = new Video ();  		pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/0/" + (int)JMMType.GroupUnsort + "/0");  		pp.Title = "Unsort";  		pp.Thumb = ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetSupportImage/plex_unsort.png");  		pp.LeafCount = vids.Count.ToString ();  		pp.ViewedLeafCount = "0";  		dirs.Add (pp);  	}  	dirs = dirs.OrderBy (a => a.Title).ToList ();  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: allGfs.Insert (0' new GroupFilter () {  	GroupFilterName = "All"'  	GroupFilterID = -999  });  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: foreach (GroupFilter gg in allGfs) {  	Random rnd = new Random (123456789);  	Video pp = new Video ();  	pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID);  	pp.Title = gg.GroupFilterName;  	HashSet<int> groups;  	if (gg.GroupFilterID == -999)  		groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  	else {  		groups = gstats [gg.GroupFilterID];  	}  	if (groups.Count != 0) {  		bool repeat;  		int nn = 0;  		pp.LeafCount = groups.Count.ToString ();  		pp.ViewedLeafCount = "0";  		do {  			repeat = true;  			int grp = groups.ElementAt (rnd.Next (groups.Count));  			AnimeGroup ag = repGroups.GetByID (grp);  			List<AnimeSeries> sers = ag.GetSeries (session);  			if (sers.Count > 0) {  				AnimeSeries ser = sers [rnd.Next (sers.Count)];  				AniDB_Anime anim = ser.GetAnime (session);  				if (anim != null) {  					ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  					ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  					if (poster != null)  						pp.Thumb = GenPoster (poster);  					if (fanart != null)  						pp.Art = GenArt (fanart);  					if (poster != null)  						repeat = false;  				}  			}  			nn++;  			if ((repeat) && (nn == 15))  				repeat = false;  		}  		while (repeat);  		dirs.Add (pp);  	}  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: foreach (GroupFilter gg in allGfs) {  	Random rnd = new Random (123456789);  	Video pp = new Video ();  	pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID);  	pp.Title = gg.GroupFilterName;  	HashSet<int> groups;  	if (gg.GroupFilterID == -999)  		groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  	else {  		groups = gstats [gg.GroupFilterID];  	}  	if (groups.Count != 0) {  		bool repeat;  		int nn = 0;  		pp.LeafCount = groups.Count.ToString ();  		pp.ViewedLeafCount = "0";  		do {  			repeat = true;  			int grp = groups.ElementAt (rnd.Next (groups.Count));  			AnimeGroup ag = repGroups.GetByID (grp);  			List<AnimeSeries> sers = ag.GetSeries (session);  			if (sers.Count > 0) {  				AnimeSeries ser = sers [rnd.Next (sers.Count)];  				AniDB_Anime anim = ser.GetAnime (session);  				if (anim != null) {  					ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  					ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  					if (poster != null)  						pp.Thumb = GenPoster (poster);  					if (fanart != null)  						pp.Art = GenArt (fanart);  					if (poster != null)  						repeat = false;  				}  			}  			nn++;  			if ((repeat) && (nn == 15))  				repeat = false;  		}  		while (repeat);  		dirs.Add (pp);  	}  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: foreach (GroupFilter gg in allGfs) {  	Random rnd = new Random (123456789);  	Video pp = new Video ();  	pp.Key = "/video/jmm/proxy?url=" + ServerUrl (int.Parse (ServerSettings.JMMServerPort)' MainWindow.PathAddressPlex + "/GetMetadata/" + user.JMMUserID + "/" + (int)JMMType.GroupFilter + "/" + gg.GroupFilterID);  	pp.Title = gg.GroupFilterName;  	HashSet<int> groups;  	if (gg.GroupFilterID == -999)  		groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  	else {  		groups = gstats [gg.GroupFilterID];  	}  	if (groups.Count != 0) {  		bool repeat;  		int nn = 0;  		pp.LeafCount = groups.Count.ToString ();  		pp.ViewedLeafCount = "0";  		do {  			repeat = true;  			int grp = groups.ElementAt (rnd.Next (groups.Count));  			AnimeGroup ag = repGroups.GetByID (grp);  			List<AnimeSeries> sers = ag.GetSeries (session);  			if (sers.Count > 0) {  				AnimeSeries ser = sers [rnd.Next (sers.Count)];  				AniDB_Anime anim = ser.GetAnime (session);  				if (anim != null) {  					ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  					ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  					if (poster != null)  						pp.Thumb = GenPoster (poster);  					if (fanart != null)  						pp.Art = GenArt (fanart);  					if (poster != null)  						repeat = false;  				}  			}  			nn++;  			if ((repeat) && (nn == 15))  				repeat = false;  		}  		while (repeat);  		dirs.Add (pp);  	}  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: if (gg.GroupFilterID == -999)  	groups = new HashSet<int> (repGroups.GetAllTopLevelGroups (session).Select (a => a.AnimeGroupID));  else {  	groups = gstats [gg.GroupFilterID];  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: if (groups.Count != 0) {  	bool repeat;  	int nn = 0;  	pp.LeafCount = groups.Count.ToString ();  	pp.ViewedLeafCount = "0";  	do {  		repeat = true;  		int grp = groups.ElementAt (rnd.Next (groups.Count));  		AnimeGroup ag = repGroups.GetByID (grp);  		List<AnimeSeries> sers = ag.GetSeries (session);  		if (sers.Count > 0) {  			AnimeSeries ser = sers [rnd.Next (sers.Count)];  			AniDB_Anime anim = ser.GetAnime (session);  			if (anim != null) {  				ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  				ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  				if (poster != null)  					pp.Thumb = GenPoster (poster);  				if (fanart != null)  					pp.Art = GenArt (fanart);  				if (poster != null)  					repeat = false;  			}  		}  		nn++;  		if ((repeat) && (nn == 15))  			repeat = false;  	}  	while (repeat);  	dirs.Add (pp);  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: do {  	repeat = true;  	int grp = groups.ElementAt (rnd.Next (groups.Count));  	AnimeGroup ag = repGroups.GetByID (grp);  	List<AnimeSeries> sers = ag.GetSeries (session);  	if (sers.Count > 0) {  		AnimeSeries ser = sers [rnd.Next (sers.Count)];  		AniDB_Anime anim = ser.GetAnime (session);  		if (anim != null) {  			ImageDetails poster = anim.GetDefaultPosterDetailsNoBlanks (session);  			ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  			if (poster != null)  				pp.Thumb = GenPoster (poster);  			if (fanart != null)  				pp.Art = GenArt (fanart);  			if (poster != null)  				repeat = false;  		}  	}  	nn++;  	if ((repeat) && (nn == 15))  		repeat = false;  }  while (repeat);  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetFilters,The following statement contains a magic number: if ((repeat) && (nn == 15))  	repeat = false;  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromVideoLocalEp,The following statement contains a magic number: l.AddedAt = ((Int32)(v.DateTimeCreated.Subtract (new DateTime (1970' 1' 1))).TotalSeconds).ToString (CultureInfo.InvariantCulture);  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,FromVideoLocalEp,The following statement contains a magic number: l.UpdatedAt = ((Int32)(v.DateTimeUpdated.Subtract (new DateTime (1970' 1' 1))).TotalSeconds).ToString (CultureInfo.InvariantCulture);  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,Search,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	query = System.Web.HttpUtility.UrlDecode (query);  	MediaContainer m = new MediaContainer ();  	m.NoCache = "1";  	m.AllowSync = "0";  	m.ViewMode = "65592";  	m.ViewGroup = "show";  	m.Identifier = "com.plexapp.plugins.myanime";  	m.MediaTagPrefix = "/system/bundle/media/flags/";  	m.MediaTagVersion = "1375292524";  	m.Title1 = "Search";  	m.Title2 = "Search Results for '" + query + "'...";  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	int lim;  	if (!int.TryParse (limit' out lim))  		lim = 20;  	JMMUser user = GetUser (session' UserId);  	if (user == null)  		return new MemoryStream ();  	List<Video> ls = new List<Video> ();  	int cnt = 0;  	List<AniDB_Anime> animes = repAnime.SearchByName (session' query);  	foreach (AniDB_Anime anidb_anime in animes) {  		if (!user.AllowedAnime (anidb_anime))  			continue;  		AnimeSeries ser = repSeries.GetByAnimeID (session' anidb_anime.AnimeID);  		if (ser != null) {  			Video v = FromSerie (ser.ToContract (ser.GetUserRecord (session' user.JMMUserID)' true)' user.JMMUserID);  			switch (anidb_anime.AnimeTypeEnum) {  			case enAnimeType.Movie:  				v.SourceTitle = "Anime Movies";  				v.Type = "movie";  				break;  			case enAnimeType.OVA:  				v.SourceTitle = "Anime Ovas";  				v.Type = "show";  				break;  			case enAnimeType.Other:  				v.SourceTitle = "Anime Others";  				v.Type = "show";  				break;  			case enAnimeType.TVSeries:  				v.SourceTitle = "Anime Series";  				v.Type = "show";  				break;  			case enAnimeType.TVSpecial:  				v.SourceTitle = "Anime Specials";  				v.Type = "show";  				break;  			case enAnimeType.Web:  				v.SourceTitle = "Anime Web Clips";  				v.Type = "show";  				break;  			}  			ls.Add (v);  			cnt++;  			if (cnt == lim)  				break;  		}  	}  	m.Directories = StoreLimits (m' ls.OrderBy (a => a.Title).ToList ());  	return GetStreamFromXmlObject (m);  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,Search,The following statement contains a magic number: if (!int.TryParse (limit' out lim))  	lim = 20;  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,Search,The following statement contains a magic number: lim = 20;  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetItemsFromGroup,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	if (groupID == -1)  		return new MemoryStream ();  	JMMUser user = GetUser (session' UserId);  	if (user == null)  		return new MemoryStream ();  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	AnimeGroup grp = repGroups.GetByID (groupID);  	Random rnd = new Random (123456789);  	if (grp != null) {  		Contract_AnimeGroup basegrp = grp.ToContract (grp.GetUserRecord (session' user.JMMUserID));  		m.Title2 = basegrp.GroupName;  		m.Title1 = basegrp.GroupName;  		List<AnimeSeries> sers2 = grp.GetSeries (session);  		if (sers2.Count > 0) {  			AnimeSeries ser = sers2 [rnd.Next (sers2.Count)];  			AniDB_Anime anim = ser.GetAnime (session);  			if (anim != null) {  				ImageDetails fanart = anim.GetDefaultFanartDetailsNoBlanks (session);  				if (fanart != null)  					m.Art = GenArt (fanart);  			}  		}  		foreach (AnimeGroup grpChild in grp.GetChildGroups ()) {  			Video v = StatsCache.Instance.StatPlexGroupsCache [user.JMMUserID] [grpChild.AnimeGroupID];  			if (v != null)  				retGroups.Add (CloneVideo (v));  			/*                                                   Contract_AnimeGroup cgrp = grpChild.ToContract(grpChild.GetUserRecord(session' user.JMMUserID));                         List<AnimeSeries> sers = grpChild.GetSeries();                         if (StatsCache.Instance.StatGroupSeriesCount[grpChild.AnimeGroupID] == 1)                         {                               if ((sers != null) && (sers.Count > 0))                             {                                 Video v = FromSerie(sers[0].ToContract(sers[0].GetUserRecord(session' user.JMMUserID)' true)' user.JMMUserID);                                 v.AirDate = sers[0].AirDate.HasValue ? sers[0].AirDate.Value : DateTime.MinValue;                                 v.Group = cgrp;                                 retGroups.Add(v);                             }                         }                         else                         {                             if ((sers != null) && (sers.Count > 0))                             {                                 Video v = FromGroup(cgrp' sers[0].ToContract(sers[0].GetUserRecord(session' user.JMMUserID)' true)' user.JMMUserID);                                 v.Group = cgrp;                                 v.AirDate = cgrp.Stat_AirDate_Min.HasValue ? cgrp.Stat_AirDate_Min.Value : DateTime.MinValue;                                 retGroups.Add(v);                             }                         }*/}  		foreach (AnimeSeries ser in grp.GetSeries ()) {  			Video v = FromSerie (ser.ToContract (ser.GetUserRecord (session' user.JMMUserID)' true)' user.JMMUserID);  			v.AirDate = ser.AirDate.HasValue ? ser.AirDate.Value : DateTime.MinValue;  			v.Group = basegrp;  			retGroups.Add (v);  		}  	}  	m.Directories = StoreLimits (m' retGroups.OrderBy (a => a.AirDate).ToList ()).ToList ();  	return GetStreamFromXmlObject (m);  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The following statement contains a magic number: try {  	int groupFilterID = -1;  	int.TryParse (GroupFilterId' out groupFilterID);  	using (var session = JMMService.SessionFactory.OpenSession ()) {  		if (groupFilterID == -1)  			return new MemoryStream ();  		DateTime start = DateTime.Now;  		GroupFilterRepository repGF = new GroupFilterRepository ();  		JMMUser user = GetUser (session' UserId);  		if (user == null)  			return new MemoryStream ();  		GroupFilter gf = null;  		if (groupFilterID == -999) {  			// all groups  			gf = new GroupFilter ();  			gf.GroupFilterName = "All";  		}  		else {  			gf = repGF.GetByID (session' groupFilterID);  			if (gf == null)  				return new MemoryStream ();  		}  		m.Title2 = m.Title1 = gf.GroupFilterName;  		//Contract_GroupFilterExtended contract = gf.ToContractExtended(user);  		AnimeGroupRepository repGroups = new AnimeGroupRepository ();  		List<AnimeGroup> allGrps = repGroups.GetAll (session);  		AnimeGroup_UserRepository repUserRecords = new AnimeGroup_UserRepository ();  		List<AnimeGroup_User> userRecords = repUserRecords.GetByUserID (session' user.JMMUserID);  		Dictionary<int' AnimeGroup_User> dictUserRecords = new Dictionary<int' AnimeGroup_User> ();  		foreach (AnimeGroup_User userRec in userRecords)  			dictUserRecords [userRec.AnimeGroupID] = userRec;  		TimeSpan ts = DateTime.Now - start;  		string msg = string.Format ("Got groups for filter DB: {0} - {1} in {2} ms"' gf.GroupFilterName' allGrps.Count' ts.TotalMilliseconds);  		logger.Info (msg);  		start = DateTime.Now;  		AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  		List<AnimeSeries> allSeries = repSeries.GetAll (session);  		if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gf.GroupFilterID))) {  			HashSet<int> groups = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID] [gf.GroupFilterID];  			foreach (AnimeGroup grp in allGrps) {  				if (groups.Contains (grp.AnimeGroupID)) {  					Video v = StatsCache.Instance.StatPlexGroupsCache [user.JMMUserID] [grp.AnimeGroupID];  					if (v != null)  						retGroups.Add (CloneVideo (v));  					/*                                 Contract_AnimeGroup cgrp = grp.ToContract(grp.GetUserRecord(session' user.JMMUserID));                                  if (StatsCache.Instance.StatGroupSeriesCount[grp.AnimeGroupID] == 1)                                 {                                     AnimeSeries ser = JMMServiceImplementation.GetSeriesForGroup(grp.AnimeGroupID' allSeries);                                     if (ser != null)                                     {                                         retGroups.Add(Joint.CreateFromSerie(ser.ToContract(ser.GetUserRecord(session' user.JMMUserID)'true)' cgrp' ser.AirDate' user.JMMUserID));                                     }                                  }                                 else                                 {                                     AnimeSeries ser = grp.DefaultAnimeSeriesID.HasValue ? allSeries.FirstOrDefault(a => a.AnimeSeriesID == grp.DefaultAnimeSeriesID.Value) : JMMServiceImplementation.GetSeriesForGroup(grp.AnimeGroupID' allSeries);                                     if (ser!=null)                                         retGroups.Add(Joint.CreateFromGroup(cgrp'ser.ToContract(ser.GetUserRecord(session' user.JMMUserID)'true)'user.JMMUserID));                                 }  */}  			}  		}  		ts = DateTime.Now - start;  		msg = string.Format ("Got groups for filter EVAL: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds);  		logger.Info (msg);  		if ((groupFilterID == -999) || (gf.SortCriteriaList.Count == 0)) {  			//                        m.Directories = StoreLimits(m'retGroups.OrderBy(a => a.Group.SortName).Select(a => a.ToVideo()).ToList());  			m.Directories = StoreLimits (m' retGroups.OrderBy (a => a.Group.SortName).ToList ()).ToList ();  			return GetStreamFromXmlObject (m);  		}  		List<Contract_AnimeGroup> grps = retGroups.Select (a => a.Group).ToList ();  		List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  		foreach (GroupFilterSortingCriteria g in gf.SortCriteriaList) {  			sortCriteria.Add (GroupFilterHelper.GetSortDescription (g.SortType' g.SortDirection));  		}  		grps = Sorting.MultiSort (grps' sortCriteria);  		/*                                          List<Joint> joints2 = new List<Joint>();                     foreach (Contract_AnimeGroup gr in grps)                     {                         foreach (Joint j in retGroups)                         {                             if (j.Group == gr)                             {                                 joints2.Add(j);                                 retGroups.Remove(j);                                 break;                             }                         }                     }                     */List<Video> joints2 = new List<Video> ();  		foreach (Contract_AnimeGroup gr in grps) {  			foreach (Video j in retGroups) {  				if (j.Group == gr) {  					joints2.Add (j);  					retGroups.Remove (j);  					break;  				}  			}  		}  		m.Directories = StoreLimits (m' joints2).ToList ();  		ts = DateTime.Now - start;  		msg = string.Format ("Got groups final: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds);  		logger.Info (msg);  		return GetStreamFromXmlObject (m);  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The following statement contains a magic number: try {  	int groupFilterID = -1;  	int.TryParse (GroupFilterId' out groupFilterID);  	using (var session = JMMService.SessionFactory.OpenSession ()) {  		if (groupFilterID == -1)  			return new MemoryStream ();  		DateTime start = DateTime.Now;  		GroupFilterRepository repGF = new GroupFilterRepository ();  		JMMUser user = GetUser (session' UserId);  		if (user == null)  			return new MemoryStream ();  		GroupFilter gf = null;  		if (groupFilterID == -999) {  			// all groups  			gf = new GroupFilter ();  			gf.GroupFilterName = "All";  		}  		else {  			gf = repGF.GetByID (session' groupFilterID);  			if (gf == null)  				return new MemoryStream ();  		}  		m.Title2 = m.Title1 = gf.GroupFilterName;  		//Contract_GroupFilterExtended contract = gf.ToContractExtended(user);  		AnimeGroupRepository repGroups = new AnimeGroupRepository ();  		List<AnimeGroup> allGrps = repGroups.GetAll (session);  		AnimeGroup_UserRepository repUserRecords = new AnimeGroup_UserRepository ();  		List<AnimeGroup_User> userRecords = repUserRecords.GetByUserID (session' user.JMMUserID);  		Dictionary<int' AnimeGroup_User> dictUserRecords = new Dictionary<int' AnimeGroup_User> ();  		foreach (AnimeGroup_User userRec in userRecords)  			dictUserRecords [userRec.AnimeGroupID] = userRec;  		TimeSpan ts = DateTime.Now - start;  		string msg = string.Format ("Got groups for filter DB: {0} - {1} in {2} ms"' gf.GroupFilterName' allGrps.Count' ts.TotalMilliseconds);  		logger.Info (msg);  		start = DateTime.Now;  		AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  		List<AnimeSeries> allSeries = repSeries.GetAll (session);  		if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gf.GroupFilterID))) {  			HashSet<int> groups = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID] [gf.GroupFilterID];  			foreach (AnimeGroup grp in allGrps) {  				if (groups.Contains (grp.AnimeGroupID)) {  					Video v = StatsCache.Instance.StatPlexGroupsCache [user.JMMUserID] [grp.AnimeGroupID];  					if (v != null)  						retGroups.Add (CloneVideo (v));  					/*                                 Contract_AnimeGroup cgrp = grp.ToContract(grp.GetUserRecord(session' user.JMMUserID));                                  if (StatsCache.Instance.StatGroupSeriesCount[grp.AnimeGroupID] == 1)                                 {                                     AnimeSeries ser = JMMServiceImplementation.GetSeriesForGroup(grp.AnimeGroupID' allSeries);                                     if (ser != null)                                     {                                         retGroups.Add(Joint.CreateFromSerie(ser.ToContract(ser.GetUserRecord(session' user.JMMUserID)'true)' cgrp' ser.AirDate' user.JMMUserID));                                     }                                  }                                 else                                 {                                     AnimeSeries ser = grp.DefaultAnimeSeriesID.HasValue ? allSeries.FirstOrDefault(a => a.AnimeSeriesID == grp.DefaultAnimeSeriesID.Value) : JMMServiceImplementation.GetSeriesForGroup(grp.AnimeGroupID' allSeries);                                     if (ser!=null)                                         retGroups.Add(Joint.CreateFromGroup(cgrp'ser.ToContract(ser.GetUserRecord(session' user.JMMUserID)'true)'user.JMMUserID));                                 }  */}  			}  		}  		ts = DateTime.Now - start;  		msg = string.Format ("Got groups for filter EVAL: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds);  		logger.Info (msg);  		if ((groupFilterID == -999) || (gf.SortCriteriaList.Count == 0)) {  			//                        m.Directories = StoreLimits(m'retGroups.OrderBy(a => a.Group.SortName).Select(a => a.ToVideo()).ToList());  			m.Directories = StoreLimits (m' retGroups.OrderBy (a => a.Group.SortName).ToList ()).ToList ();  			return GetStreamFromXmlObject (m);  		}  		List<Contract_AnimeGroup> grps = retGroups.Select (a => a.Group).ToList ();  		List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  		foreach (GroupFilterSortingCriteria g in gf.SortCriteriaList) {  			sortCriteria.Add (GroupFilterHelper.GetSortDescription (g.SortType' g.SortDirection));  		}  		grps = Sorting.MultiSort (grps' sortCriteria);  		/*                                          List<Joint> joints2 = new List<Joint>();                     foreach (Contract_AnimeGroup gr in grps)                     {                         foreach (Joint j in retGroups)                         {                             if (j.Group == gr)                             {                                 joints2.Add(j);                                 retGroups.Remove(j);                                 break;                             }                         }                     }                     */List<Video> joints2 = new List<Video> ();  		foreach (Contract_AnimeGroup gr in grps) {  			foreach (Video j in retGroups) {  				if (j.Group == gr) {  					joints2.Add (j);  					retGroups.Remove (j);  					break;  				}  			}  		}  		m.Directories = StoreLimits (m' joints2).ToList ();  		ts = DateTime.Now - start;  		msg = string.Format ("Got groups final: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds);  		logger.Info (msg);  		return GetStreamFromXmlObject (m);  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	if (groupFilterID == -1)  		return new MemoryStream ();  	DateTime start = DateTime.Now;  	GroupFilterRepository repGF = new GroupFilterRepository ();  	JMMUser user = GetUser (session' UserId);  	if (user == null)  		return new MemoryStream ();  	GroupFilter gf = null;  	if (groupFilterID == -999) {  		// all groups  		gf = new GroupFilter ();  		gf.GroupFilterName = "All";  	}  	else {  		gf = repGF.GetByID (session' groupFilterID);  		if (gf == null)  			return new MemoryStream ();  	}  	m.Title2 = m.Title1 = gf.GroupFilterName;  	//Contract_GroupFilterExtended contract = gf.ToContractExtended(user);  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	List<AnimeGroup> allGrps = repGroups.GetAll (session);  	AnimeGroup_UserRepository repUserRecords = new AnimeGroup_UserRepository ();  	List<AnimeGroup_User> userRecords = repUserRecords.GetByUserID (session' user.JMMUserID);  	Dictionary<int' AnimeGroup_User> dictUserRecords = new Dictionary<int' AnimeGroup_User> ();  	foreach (AnimeGroup_User userRec in userRecords)  		dictUserRecords [userRec.AnimeGroupID] = userRec;  	TimeSpan ts = DateTime.Now - start;  	string msg = string.Format ("Got groups for filter DB: {0} - {1} in {2} ms"' gf.GroupFilterName' allGrps.Count' ts.TotalMilliseconds);  	logger.Info (msg);  	start = DateTime.Now;  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	List<AnimeSeries> allSeries = repSeries.GetAll (session);  	if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gf.GroupFilterID))) {  		HashSet<int> groups = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID] [gf.GroupFilterID];  		foreach (AnimeGroup grp in allGrps) {  			if (groups.Contains (grp.AnimeGroupID)) {  				Video v = StatsCache.Instance.StatPlexGroupsCache [user.JMMUserID] [grp.AnimeGroupID];  				if (v != null)  					retGroups.Add (CloneVideo (v));  				/*                                 Contract_AnimeGroup cgrp = grp.ToContract(grp.GetUserRecord(session' user.JMMUserID));                                  if (StatsCache.Instance.StatGroupSeriesCount[grp.AnimeGroupID] == 1)                                 {                                     AnimeSeries ser = JMMServiceImplementation.GetSeriesForGroup(grp.AnimeGroupID' allSeries);                                     if (ser != null)                                     {                                         retGroups.Add(Joint.CreateFromSerie(ser.ToContract(ser.GetUserRecord(session' user.JMMUserID)'true)' cgrp' ser.AirDate' user.JMMUserID));                                     }                                  }                                 else                                 {                                     AnimeSeries ser = grp.DefaultAnimeSeriesID.HasValue ? allSeries.FirstOrDefault(a => a.AnimeSeriesID == grp.DefaultAnimeSeriesID.Value) : JMMServiceImplementation.GetSeriesForGroup(grp.AnimeGroupID' allSeries);                                     if (ser!=null)                                         retGroups.Add(Joint.CreateFromGroup(cgrp'ser.ToContract(ser.GetUserRecord(session' user.JMMUserID)'true)'user.JMMUserID));                                 }  */}  		}  	}  	ts = DateTime.Now - start;  	msg = string.Format ("Got groups for filter EVAL: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds);  	logger.Info (msg);  	if ((groupFilterID == -999) || (gf.SortCriteriaList.Count == 0)) {  		//                        m.Directories = StoreLimits(m'retGroups.OrderBy(a => a.Group.SortName).Select(a => a.ToVideo()).ToList());  		m.Directories = StoreLimits (m' retGroups.OrderBy (a => a.Group.SortName).ToList ()).ToList ();  		return GetStreamFromXmlObject (m);  	}  	List<Contract_AnimeGroup> grps = retGroups.Select (a => a.Group).ToList ();  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	foreach (GroupFilterSortingCriteria g in gf.SortCriteriaList) {  		sortCriteria.Add (GroupFilterHelper.GetSortDescription (g.SortType' g.SortDirection));  	}  	grps = Sorting.MultiSort (grps' sortCriteria);  	/*                                          List<Joint> joints2 = new List<Joint>();                     foreach (Contract_AnimeGroup gr in grps)                     {                         foreach (Joint j in retGroups)                         {                             if (j.Group == gr)                             {                                 joints2.Add(j);                                 retGroups.Remove(j);                                 break;                             }                         }                     }                     */List<Video> joints2 = new List<Video> ();  	foreach (Contract_AnimeGroup gr in grps) {  		foreach (Video j in retGroups) {  			if (j.Group == gr) {  				joints2.Add (j);  				retGroups.Remove (j);  				break;  			}  		}  	}  	m.Directories = StoreLimits (m' joints2).ToList ();  	ts = DateTime.Now - start;  	msg = string.Format ("Got groups final: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds);  	logger.Info (msg);  	return GetStreamFromXmlObject (m);  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	if (groupFilterID == -1)  		return new MemoryStream ();  	DateTime start = DateTime.Now;  	GroupFilterRepository repGF = new GroupFilterRepository ();  	JMMUser user = GetUser (session' UserId);  	if (user == null)  		return new MemoryStream ();  	GroupFilter gf = null;  	if (groupFilterID == -999) {  		// all groups  		gf = new GroupFilter ();  		gf.GroupFilterName = "All";  	}  	else {  		gf = repGF.GetByID (session' groupFilterID);  		if (gf == null)  			return new MemoryStream ();  	}  	m.Title2 = m.Title1 = gf.GroupFilterName;  	//Contract_GroupFilterExtended contract = gf.ToContractExtended(user);  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	List<AnimeGroup> allGrps = repGroups.GetAll (session);  	AnimeGroup_UserRepository repUserRecords = new AnimeGroup_UserRepository ();  	List<AnimeGroup_User> userRecords = repUserRecords.GetByUserID (session' user.JMMUserID);  	Dictionary<int' AnimeGroup_User> dictUserRecords = new Dictionary<int' AnimeGroup_User> ();  	foreach (AnimeGroup_User userRec in userRecords)  		dictUserRecords [userRec.AnimeGroupID] = userRec;  	TimeSpan ts = DateTime.Now - start;  	string msg = string.Format ("Got groups for filter DB: {0} - {1} in {2} ms"' gf.GroupFilterName' allGrps.Count' ts.TotalMilliseconds);  	logger.Info (msg);  	start = DateTime.Now;  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	List<AnimeSeries> allSeries = repSeries.GetAll (session);  	if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gf.GroupFilterID))) {  		HashSet<int> groups = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID] [gf.GroupFilterID];  		foreach (AnimeGroup grp in allGrps) {  			if (groups.Contains (grp.AnimeGroupID)) {  				Video v = StatsCache.Instance.StatPlexGroupsCache [user.JMMUserID] [grp.AnimeGroupID];  				if (v != null)  					retGroups.Add (CloneVideo (v));  				/*                                 Contract_AnimeGroup cgrp = grp.ToContract(grp.GetUserRecord(session' user.JMMUserID));                                  if (StatsCache.Instance.StatGroupSeriesCount[grp.AnimeGroupID] == 1)                                 {                                     AnimeSeries ser = JMMServiceImplementation.GetSeriesForGroup(grp.AnimeGroupID' allSeries);                                     if (ser != null)                                     {                                         retGroups.Add(Joint.CreateFromSerie(ser.ToContract(ser.GetUserRecord(session' user.JMMUserID)'true)' cgrp' ser.AirDate' user.JMMUserID));                                     }                                  }                                 else                                 {                                     AnimeSeries ser = grp.DefaultAnimeSeriesID.HasValue ? allSeries.FirstOrDefault(a => a.AnimeSeriesID == grp.DefaultAnimeSeriesID.Value) : JMMServiceImplementation.GetSeriesForGroup(grp.AnimeGroupID' allSeries);                                     if (ser!=null)                                         retGroups.Add(Joint.CreateFromGroup(cgrp'ser.ToContract(ser.GetUserRecord(session' user.JMMUserID)'true)'user.JMMUserID));                                 }  */}  		}  	}  	ts = DateTime.Now - start;  	msg = string.Format ("Got groups for filter EVAL: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds);  	logger.Info (msg);  	if ((groupFilterID == -999) || (gf.SortCriteriaList.Count == 0)) {  		//                        m.Directories = StoreLimits(m'retGroups.OrderBy(a => a.Group.SortName).Select(a => a.ToVideo()).ToList());  		m.Directories = StoreLimits (m' retGroups.OrderBy (a => a.Group.SortName).ToList ()).ToList ();  		return GetStreamFromXmlObject (m);  	}  	List<Contract_AnimeGroup> grps = retGroups.Select (a => a.Group).ToList ();  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	foreach (GroupFilterSortingCriteria g in gf.SortCriteriaList) {  		sortCriteria.Add (GroupFilterHelper.GetSortDescription (g.SortType' g.SortDirection));  	}  	grps = Sorting.MultiSort (grps' sortCriteria);  	/*                                          List<Joint> joints2 = new List<Joint>();                     foreach (Contract_AnimeGroup gr in grps)                     {                         foreach (Joint j in retGroups)                         {                             if (j.Group == gr)                             {                                 joints2.Add(j);                                 retGroups.Remove(j);                                 break;                             }                         }                     }                     */List<Video> joints2 = new List<Video> ();  	foreach (Contract_AnimeGroup gr in grps) {  		foreach (Video j in retGroups) {  			if (j.Group == gr) {  				joints2.Add (j);  				retGroups.Remove (j);  				break;  			}  		}  	}  	m.Directories = StoreLimits (m' joints2).ToList ();  	ts = DateTime.Now - start;  	msg = string.Format ("Got groups final: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds);  	logger.Info (msg);  	return GetStreamFromXmlObject (m);  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The following statement contains a magic number: if (groupFilterID == -999) {  	// all groups  	gf = new GroupFilter ();  	gf.GroupFilterName = "All";  }  else {  	gf = repGF.GetByID (session' groupFilterID);  	if (gf == null)  		return new MemoryStream ();  }  
Magic Number,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetGroupsFromFilter,The following statement contains a magic number: if ((groupFilterID == -999) || (gf.SortCriteriaList.Count == 0)) {  	//                        m.Directories = StoreLimits(m'retGroups.OrderBy(a => a.Group.SortName).Select(a => a.ToVideo()).ToList());  	m.Directories = StoreLimits (m' retGroups.OrderBy (a => a.Group.SortName).ToList ()).ToList ();  	return GetStreamFromXmlObject (m);  }  
Magic Number,JMMServer,JMMServiceImplementationREST,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationREST.cs,GetThumb,The following statement contains a magic number: if (m != null) {  	float newratio = 0F;  	if (float.TryParse (Ratio' out newratio)) {  		Image im = Image.FromStream (m);  		float calcwidth = im.Width;  		float calcheight = im.Height;  		float nheight = 0;  		do {  			nheight = calcwidth / newratio;  			if (nheight > ((float)im.Height + 0.5F)) {  				calcwidth = calcwidth * ((float)im.Height / nheight);  			}  			else {  				calcheight = nheight;  			}  		}  		while (nheight > ((float)im.Height + 0.5F));  		int newwidth = (int)Math.Round (calcwidth);  		int newheight = (int)Math.Round (calcheight);  		int x = 0;  		int y = 0;  		if (newwidth < im.Width)  			x = (im.Width - newwidth) / 2;  		if (newheight < im.Height)  			y = (im.Height - newheight) / 2;  		Image im2 = new Bitmap (newwidth' newheight' PixelFormat.Format24bppRgb);  		Graphics g = Graphics.FromImage (im2);  		g.DrawImage (im' new Rectangle (0' 0' im2.Width' im2.Height)' new Rectangle (x' y' im2.Width' im2.Height)' GraphicsUnit.Pixel);  		im2.Save (ms' ImageFormat.Jpeg);  		ms.Seek (0' SeekOrigin.Begin);  	}  }  
Magic Number,JMMServer,JMMServiceImplementationREST,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationREST.cs,GetThumb,The following statement contains a magic number: if (m != null) {  	float newratio = 0F;  	if (float.TryParse (Ratio' out newratio)) {  		Image im = Image.FromStream (m);  		float calcwidth = im.Width;  		float calcheight = im.Height;  		float nheight = 0;  		do {  			nheight = calcwidth / newratio;  			if (nheight > ((float)im.Height + 0.5F)) {  				calcwidth = calcwidth * ((float)im.Height / nheight);  			}  			else {  				calcheight = nheight;  			}  		}  		while (nheight > ((float)im.Height + 0.5F));  		int newwidth = (int)Math.Round (calcwidth);  		int newheight = (int)Math.Round (calcheight);  		int x = 0;  		int y = 0;  		if (newwidth < im.Width)  			x = (im.Width - newwidth) / 2;  		if (newheight < im.Height)  			y = (im.Height - newheight) / 2;  		Image im2 = new Bitmap (newwidth' newheight' PixelFormat.Format24bppRgb);  		Graphics g = Graphics.FromImage (im2);  		g.DrawImage (im' new Rectangle (0' 0' im2.Width' im2.Height)' new Rectangle (x' y' im2.Width' im2.Height)' GraphicsUnit.Pixel);  		im2.Save (ms' ImageFormat.Jpeg);  		ms.Seek (0' SeekOrigin.Begin);  	}  }  
Magic Number,JMMServer,JMMServiceImplementationREST,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationREST.cs,GetThumb,The following statement contains a magic number: if (float.TryParse (Ratio' out newratio)) {  	Image im = Image.FromStream (m);  	float calcwidth = im.Width;  	float calcheight = im.Height;  	float nheight = 0;  	do {  		nheight = calcwidth / newratio;  		if (nheight > ((float)im.Height + 0.5F)) {  			calcwidth = calcwidth * ((float)im.Height / nheight);  		}  		else {  			calcheight = nheight;  		}  	}  	while (nheight > ((float)im.Height + 0.5F));  	int newwidth = (int)Math.Round (calcwidth);  	int newheight = (int)Math.Round (calcheight);  	int x = 0;  	int y = 0;  	if (newwidth < im.Width)  		x = (im.Width - newwidth) / 2;  	if (newheight < im.Height)  		y = (im.Height - newheight) / 2;  	Image im2 = new Bitmap (newwidth' newheight' PixelFormat.Format24bppRgb);  	Graphics g = Graphics.FromImage (im2);  	g.DrawImage (im' new Rectangle (0' 0' im2.Width' im2.Height)' new Rectangle (x' y' im2.Width' im2.Height)' GraphicsUnit.Pixel);  	im2.Save (ms' ImageFormat.Jpeg);  	ms.Seek (0' SeekOrigin.Begin);  }  
Magic Number,JMMServer,JMMServiceImplementationREST,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationREST.cs,GetThumb,The following statement contains a magic number: if (float.TryParse (Ratio' out newratio)) {  	Image im = Image.FromStream (m);  	float calcwidth = im.Width;  	float calcheight = im.Height;  	float nheight = 0;  	do {  		nheight = calcwidth / newratio;  		if (nheight > ((float)im.Height + 0.5F)) {  			calcwidth = calcwidth * ((float)im.Height / nheight);  		}  		else {  			calcheight = nheight;  		}  	}  	while (nheight > ((float)im.Height + 0.5F));  	int newwidth = (int)Math.Round (calcwidth);  	int newheight = (int)Math.Round (calcheight);  	int x = 0;  	int y = 0;  	if (newwidth < im.Width)  		x = (im.Width - newwidth) / 2;  	if (newheight < im.Height)  		y = (im.Height - newheight) / 2;  	Image im2 = new Bitmap (newwidth' newheight' PixelFormat.Format24bppRgb);  	Graphics g = Graphics.FromImage (im2);  	g.DrawImage (im' new Rectangle (0' 0' im2.Width' im2.Height)' new Rectangle (x' y' im2.Width' im2.Height)' GraphicsUnit.Pixel);  	im2.Save (ms' ImageFormat.Jpeg);  	ms.Seek (0' SeekOrigin.Begin);  }  
Magic Number,JMMServer,JMMServiceImplementationREST,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationREST.cs,GetThumb,The following statement contains a magic number: if (newwidth < im.Width)  	x = (im.Width - newwidth) / 2;  
Magic Number,JMMServer,JMMServiceImplementationREST,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationREST.cs,GetThumb,The following statement contains a magic number: x = (im.Width - newwidth) / 2;  
Magic Number,JMMServer,JMMServiceImplementationREST,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationREST.cs,GetThumb,The following statement contains a magic number: if (newheight < im.Height)  	y = (im.Height - newheight) / 2;  
Magic Number,JMMServer,JMMServiceImplementationREST,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationREST.cs,GetThumb,The following statement contains a magic number: y = (im.Height - newheight) / 2;  
Magic Number,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The following statement contains a magic number: foreach (AniDB_Anime anime in repAnime.GetAll ()) {  	if (anime.AnimeID == 8580)  		Console.Write ("");  	if (string.IsNullOrEmpty (anime.PosterPath))  		continue;  	bool fileExists = File.Exists (anime.PosterPath);  	if (!fileExists) {  		CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (anime.AniDB_AnimeID' JMMImageType.AniDB_Cover' false);  		cmd.Save ();  	}  }  
Magic Number,JMMServer,Importer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Importer.cs,RunImport_GetImages,The following statement contains a magic number: if (anime.AnimeID == 8580)  	Console.Write ("");  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeGroupsForFilter,The following statement contains a magic number: try {  	using (var session = JMMService.SessionFactory.OpenSession ()) {  		DateTime start = DateTime.Now;  		GroupFilterRepository repGF = new GroupFilterRepository ();  		JMMUserRepository repUsers = new JMMUserRepository ();  		JMMUser user = repUsers.GetByID (session' userID);  		if (user == null)  			return retGroups;  		GroupFilter gf = null;  		if (groupFilterID == -999) {  			// all groups  			gf = new GroupFilter ();  			gf.GroupFilterName = "All";  		}  		else {  			gf = repGF.GetByID (session' groupFilterID);  			if (gf == null)  				return retGroups;  		}  		//Contract_GroupFilterExtended contract = gf.ToContractExtended(user);  		AnimeGroupRepository repGroups = new AnimeGroupRepository ();  		List<AnimeGroup> allGrps = repGroups.GetAll (session);  		AnimeGroup_UserRepository repUserRecords = new AnimeGroup_UserRepository ();  		List<AnimeGroup_User> userRecords = repUserRecords.GetByUserID (session' userID);  		Dictionary<int' AnimeGroup_User> dictUserRecords = new Dictionary<int' AnimeGroup_User> ();  		foreach (AnimeGroup_User userRec in userRecords)  			dictUserRecords [userRec.AnimeGroupID] = userRec;  		TimeSpan ts = DateTime.Now - start;  		string msg = string.Format ("Got groups for filter DB: {0} - {1} in {2} ms"' gf.GroupFilterName' allGrps.Count' ts.TotalMilliseconds);  		logger.Info (msg);  		start = DateTime.Now;  		AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  		List<AnimeSeries> allSeries = new List<AnimeSeries> ();  		if (getSingleSeriesGroups)  			allSeries = repSeries.GetAll (session);  		if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gf.GroupFilterID))) {  			HashSet<int> groups = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID] [gf.GroupFilterID];  			foreach (AnimeGroup grp in allGrps) {  				AnimeGroup_User userRec = null;  				if (dictUserRecords.ContainsKey (grp.AnimeGroupID))  					userRec = dictUserRecords [grp.AnimeGroupID];  				if (groups.Contains (grp.AnimeGroupID)) {  					Contract_AnimeGroup contractGrp = grp.ToContract (userRec);  					if (getSingleSeriesGroups) {  						if (contractGrp.Stat_SeriesCount == 1) {  							AnimeSeries ser = GetSeriesForGroup (grp.AnimeGroupID' allSeries);  							if (ser != null)  								contractGrp.SeriesForNameOverride = ser.ToContract (ser.GetUserRecord (session' userID));  						}  					}  					retGroups.Add (contractGrp);  				}  			}  		}  		ts = DateTime.Now - start;  		msg = string.Format ("Got groups for filter EVAL: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds);  		logger.Info (msg);  		return retGroups;  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeGroupsForFilter,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	DateTime start = DateTime.Now;  	GroupFilterRepository repGF = new GroupFilterRepository ();  	JMMUserRepository repUsers = new JMMUserRepository ();  	JMMUser user = repUsers.GetByID (session' userID);  	if (user == null)  		return retGroups;  	GroupFilter gf = null;  	if (groupFilterID == -999) {  		// all groups  		gf = new GroupFilter ();  		gf.GroupFilterName = "All";  	}  	else {  		gf = repGF.GetByID (session' groupFilterID);  		if (gf == null)  			return retGroups;  	}  	//Contract_GroupFilterExtended contract = gf.ToContractExtended(user);  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	List<AnimeGroup> allGrps = repGroups.GetAll (session);  	AnimeGroup_UserRepository repUserRecords = new AnimeGroup_UserRepository ();  	List<AnimeGroup_User> userRecords = repUserRecords.GetByUserID (session' userID);  	Dictionary<int' AnimeGroup_User> dictUserRecords = new Dictionary<int' AnimeGroup_User> ();  	foreach (AnimeGroup_User userRec in userRecords)  		dictUserRecords [userRec.AnimeGroupID] = userRec;  	TimeSpan ts = DateTime.Now - start;  	string msg = string.Format ("Got groups for filter DB: {0} - {1} in {2} ms"' gf.GroupFilterName' allGrps.Count' ts.TotalMilliseconds);  	logger.Info (msg);  	start = DateTime.Now;  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	List<AnimeSeries> allSeries = new List<AnimeSeries> ();  	if (getSingleSeriesGroups)  		allSeries = repSeries.GetAll (session);  	if ((StatsCache.Instance.StatUserGroupFilter.ContainsKey (user.JMMUserID)) && (StatsCache.Instance.StatUserGroupFilter [user.JMMUserID].ContainsKey (gf.GroupFilterID))) {  		HashSet<int> groups = StatsCache.Instance.StatUserGroupFilter [user.JMMUserID] [gf.GroupFilterID];  		foreach (AnimeGroup grp in allGrps) {  			AnimeGroup_User userRec = null;  			if (dictUserRecords.ContainsKey (grp.AnimeGroupID))  				userRec = dictUserRecords [grp.AnimeGroupID];  			if (groups.Contains (grp.AnimeGroupID)) {  				Contract_AnimeGroup contractGrp = grp.ToContract (userRec);  				if (getSingleSeriesGroups) {  					if (contractGrp.Stat_SeriesCount == 1) {  						AnimeSeries ser = GetSeriesForGroup (grp.AnimeGroupID' allSeries);  						if (ser != null)  							contractGrp.SeriesForNameOverride = ser.ToContract (ser.GetUserRecord (session' userID));  					}  				}  				retGroups.Add (contractGrp);  			}  		}  	}  	ts = DateTime.Now - start;  	msg = string.Format ("Got groups for filter EVAL: {0} - {1} in {2} ms"' gf.GroupFilterName' retGroups.Count' ts.TotalMilliseconds);  	logger.Info (msg);  	return retGroups;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeGroupsForFilter,The following statement contains a magic number: if (groupFilterID == -999) {  	// all groups  	gf = new GroupFilter ();  	gf.GroupFilterName = "All";  }  else {  	gf = repGF.GetByID (session' groupFilterID);  	if (gf == null)  		return retGroups;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,The following statement contains a magic number: try {  	CrossRef_File_EpisodeRepository repXRefs = new CrossRef_File_EpisodeRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	VideoLocalRepository repVids = new VideoLocalRepository ();  	AniDB_EpisodeRepository repAniEps = new AniDB_EpisodeRepository ();  	AnimeEpisodeRepository repEps = new AnimeEpisodeRepository ();  	AnimeSeries ser = repSeries.GetByID (animeSeriesID);  	if (ser == null)  		return "Could not find anime series record";  	int epNumber = startingEpisodeNumber;  	int count = 1;  	foreach (int videoLocalID in videoLocalIDs) {  		VideoLocal vid = repVids.GetByID (videoLocalID);  		if (vid == null)  			return "Could not find video local record";  		List<AniDB_Episode> anieps = repAniEps.GetByAnimeIDAndEpisodeNumber (ser.AniDB_ID' epNumber);  		if (anieps.Count == 0)  			return "Could not find the AniDB episode record";  		AniDB_Episode aniep = anieps [0];  		List<AnimeEpisode> eps = repEps.GetByAniEpisodeIDAndSeriesID (aniep.EpisodeID' ser.AnimeSeriesID);  		if (eps.Count == 0)  			return "Could not find episode record";  		AnimeEpisode ep = eps [0];  		CrossRef_File_Episode xref = new CrossRef_File_Episode ();  		xref.PopulateManually (vid' ep);  		// TODO do this properly  		if (singleEpisode) {  			xref.EpisodeOrder = count;  			if (videoLocalIDs.Count > 5)  				xref.Percentage = 100;  			else  				xref.Percentage = GetEpisodePercentages (videoLocalIDs.Count) [count - 1];  		}  		repXRefs.Save (xref);  		vid.RenameIfRequired ();  		vid.MoveFileIfRequired ();  		CommandRequest_WebCacheSendXRefFileEpisode cr = new CommandRequest_WebCacheSendXRefFileEpisode (xref.CrossRef_File_EpisodeID);  		cr.Save ();  		count++;  		if (!singleEpisode)  			epNumber++;  	}  	ser.UpdateStats (true' true' true);  	// update epidsode added stats  	ser.EpisodeAddedDate = DateTime.Now;  	repSeries.Save (ser);  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	foreach (AnimeGroup grp in ser.AllGroupsAbove) {  		grp.EpisodeAddedDate = DateTime.Now;  		repGroups.Save (grp);  	}  	// lets also try adding to the users trakt collecion by sync'ing the series  	if (ser != null) {  		CommandRequest_TraktSyncCollectionSeries cmdTrakt = new CommandRequest_TraktSyncCollectionSeries (ser.AnimeSeriesID' ser.GetAnime ().MainTitle);  		cmdTrakt.Save ();  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,The following statement contains a magic number: try {  	CrossRef_File_EpisodeRepository repXRefs = new CrossRef_File_EpisodeRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	VideoLocalRepository repVids = new VideoLocalRepository ();  	AniDB_EpisodeRepository repAniEps = new AniDB_EpisodeRepository ();  	AnimeEpisodeRepository repEps = new AnimeEpisodeRepository ();  	AnimeSeries ser = repSeries.GetByID (animeSeriesID);  	if (ser == null)  		return "Could not find anime series record";  	int epNumber = startingEpisodeNumber;  	int count = 1;  	foreach (int videoLocalID in videoLocalIDs) {  		VideoLocal vid = repVids.GetByID (videoLocalID);  		if (vid == null)  			return "Could not find video local record";  		List<AniDB_Episode> anieps = repAniEps.GetByAnimeIDAndEpisodeNumber (ser.AniDB_ID' epNumber);  		if (anieps.Count == 0)  			return "Could not find the AniDB episode record";  		AniDB_Episode aniep = anieps [0];  		List<AnimeEpisode> eps = repEps.GetByAniEpisodeIDAndSeriesID (aniep.EpisodeID' ser.AnimeSeriesID);  		if (eps.Count == 0)  			return "Could not find episode record";  		AnimeEpisode ep = eps [0];  		CrossRef_File_Episode xref = new CrossRef_File_Episode ();  		xref.PopulateManually (vid' ep);  		// TODO do this properly  		if (singleEpisode) {  			xref.EpisodeOrder = count;  			if (videoLocalIDs.Count > 5)  				xref.Percentage = 100;  			else  				xref.Percentage = GetEpisodePercentages (videoLocalIDs.Count) [count - 1];  		}  		repXRefs.Save (xref);  		vid.RenameIfRequired ();  		vid.MoveFileIfRequired ();  		CommandRequest_WebCacheSendXRefFileEpisode cr = new CommandRequest_WebCacheSendXRefFileEpisode (xref.CrossRef_File_EpisodeID);  		cr.Save ();  		count++;  		if (!singleEpisode)  			epNumber++;  	}  	ser.UpdateStats (true' true' true);  	// update epidsode added stats  	ser.EpisodeAddedDate = DateTime.Now;  	repSeries.Save (ser);  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	foreach (AnimeGroup grp in ser.AllGroupsAbove) {  		grp.EpisodeAddedDate = DateTime.Now;  		repGroups.Save (grp);  	}  	// lets also try adding to the users trakt collecion by sync'ing the series  	if (ser != null) {  		CommandRequest_TraktSyncCollectionSeries cmdTrakt = new CommandRequest_TraktSyncCollectionSeries (ser.AnimeSeriesID' ser.GetAnime ().MainTitle);  		cmdTrakt.Save ();  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,The following statement contains a magic number: foreach (int videoLocalID in videoLocalIDs) {  	VideoLocal vid = repVids.GetByID (videoLocalID);  	if (vid == null)  		return "Could not find video local record";  	List<AniDB_Episode> anieps = repAniEps.GetByAnimeIDAndEpisodeNumber (ser.AniDB_ID' epNumber);  	if (anieps.Count == 0)  		return "Could not find the AniDB episode record";  	AniDB_Episode aniep = anieps [0];  	List<AnimeEpisode> eps = repEps.GetByAniEpisodeIDAndSeriesID (aniep.EpisodeID' ser.AnimeSeriesID);  	if (eps.Count == 0)  		return "Could not find episode record";  	AnimeEpisode ep = eps [0];  	CrossRef_File_Episode xref = new CrossRef_File_Episode ();  	xref.PopulateManually (vid' ep);  	// TODO do this properly  	if (singleEpisode) {  		xref.EpisodeOrder = count;  		if (videoLocalIDs.Count > 5)  			xref.Percentage = 100;  		else  			xref.Percentage = GetEpisodePercentages (videoLocalIDs.Count) [count - 1];  	}  	repXRefs.Save (xref);  	vid.RenameIfRequired ();  	vid.MoveFileIfRequired ();  	CommandRequest_WebCacheSendXRefFileEpisode cr = new CommandRequest_WebCacheSendXRefFileEpisode (xref.CrossRef_File_EpisodeID);  	cr.Save ();  	count++;  	if (!singleEpisode)  		epNumber++;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,The following statement contains a magic number: foreach (int videoLocalID in videoLocalIDs) {  	VideoLocal vid = repVids.GetByID (videoLocalID);  	if (vid == null)  		return "Could not find video local record";  	List<AniDB_Episode> anieps = repAniEps.GetByAnimeIDAndEpisodeNumber (ser.AniDB_ID' epNumber);  	if (anieps.Count == 0)  		return "Could not find the AniDB episode record";  	AniDB_Episode aniep = anieps [0];  	List<AnimeEpisode> eps = repEps.GetByAniEpisodeIDAndSeriesID (aniep.EpisodeID' ser.AnimeSeriesID);  	if (eps.Count == 0)  		return "Could not find episode record";  	AnimeEpisode ep = eps [0];  	CrossRef_File_Episode xref = new CrossRef_File_Episode ();  	xref.PopulateManually (vid' ep);  	// TODO do this properly  	if (singleEpisode) {  		xref.EpisodeOrder = count;  		if (videoLocalIDs.Count > 5)  			xref.Percentage = 100;  		else  			xref.Percentage = GetEpisodePercentages (videoLocalIDs.Count) [count - 1];  	}  	repXRefs.Save (xref);  	vid.RenameIfRequired ();  	vid.MoveFileIfRequired ();  	CommandRequest_WebCacheSendXRefFileEpisode cr = new CommandRequest_WebCacheSendXRefFileEpisode (xref.CrossRef_File_EpisodeID);  	cr.Save ();  	count++;  	if (!singleEpisode)  		epNumber++;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,The following statement contains a magic number: if (singleEpisode) {  	xref.EpisodeOrder = count;  	if (videoLocalIDs.Count > 5)  		xref.Percentage = 100;  	else  		xref.Percentage = GetEpisodePercentages (videoLocalIDs.Count) [count - 1];  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,The following statement contains a magic number: if (singleEpisode) {  	xref.EpisodeOrder = count;  	if (videoLocalIDs.Count > 5)  		xref.Percentage = 100;  	else  		xref.Percentage = GetEpisodePercentages (videoLocalIDs.Count) [count - 1];  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,The following statement contains a magic number: if (videoLocalIDs.Count > 5)  	xref.Percentage = 100;  else  	xref.Percentage = GetEpisodePercentages (videoLocalIDs.Count) [count - 1];  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,The following statement contains a magic number: if (videoLocalIDs.Count > 5)  	xref.Percentage = 100;  else  	xref.Percentage = GetEpisodePercentages (videoLocalIDs.Count) [count - 1];  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,AssociateMultipleFiles,The following statement contains a magic number: xref.Percentage = 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 1)  	return new int[] {  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 2)  	return new int[] {  		50'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 2)  	return new int[] {  		50'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 2)  	return new int[] {  		50'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	50'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	50'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 3)  	return new int[] {  		33'  		66'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 3)  	return new int[] {  		33'  		66'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 3)  	return new int[] {  		33'  		66'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 3)  	return new int[] {  		33'  		66'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	33'  	66'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	33'  	66'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	33'  	66'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 4)  	return new int[] {  		25'  		50'  		75'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 4)  	return new int[] {  		25'  		50'  		75'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 4)  	return new int[] {  		25'  		50'  		75'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 4)  	return new int[] {  		25'  		50'  		75'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 4)  	return new int[] {  		25'  		50'  		75'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	25'  	50'  	75'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	25'  	50'  	75'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	25'  	50'  	75'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	25'  	50'  	75'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 5)  	return new int[] {  		20'  		40'  		60'  		80'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 5)  	return new int[] {  		20'  		40'  		60'  		80'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 5)  	return new int[] {  		20'  		40'  		60'  		80'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 5)  	return new int[] {  		20'  		40'  		60'  		80'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 5)  	return new int[] {  		20'  		40'  		60'  		80'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: if (numEpisodes == 5)  	return new int[] {  		20'  		40'  		60'  		80'  		100  	};  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	20'  	40'  	60'  	80'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	20'  	40'  	60'  	80'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	20'  	40'  	60'  	80'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	20'  	40'  	60'  	80'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	20'  	40'  	60'  	80'  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetEpisodePercentages,The following statement contains a magic number: return new int[] {  	100  };  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveServerSettings,The following statement contains a magic number: try {  	// validate the settings  	bool anidbSettingsChanged = false;  	if (contractIn.AniDB_ClientPort != ServerSettings.AniDB_ClientPort) {  		anidbSettingsChanged = true;  		int cport = 0;  		int.TryParse (contractIn.AniDB_ClientPort' out cport);  		if (cport <= 0) {  			contract.ErrorMessage = "AniDB Client Port must be numeric and greater than 0" + Environment.NewLine;  		}  	}  	if (contractIn.AniDB_ServerPort != ServerSettings.AniDB_ServerPort) {  		anidbSettingsChanged = true;  		int sport = 0;  		int.TryParse (contractIn.AniDB_ServerPort' out sport);  		if (sport <= 0) {  			contract.ErrorMessage = "AniDB Server Port must be numeric and greater than 0" + Environment.NewLine;  		}  	}  	if (contractIn.AniDB_Username != ServerSettings.AniDB_Username) {  		anidbSettingsChanged = true;  		if (string.IsNullOrEmpty (contractIn.AniDB_Username)) {  			contract.ErrorMessage = "AniDB User Name must have a value" + Environment.NewLine;  		}  	}  	if (contractIn.AniDB_Password != ServerSettings.AniDB_Password) {  		anidbSettingsChanged = true;  		if (string.IsNullOrEmpty (contractIn.AniDB_Password)) {  			contract.ErrorMessage = "AniDB Password must have a value" + Environment.NewLine;  		}  	}  	if (contractIn.AniDB_ServerAddress != ServerSettings.AniDB_ServerAddress) {  		anidbSettingsChanged = true;  		if (string.IsNullOrEmpty (contractIn.AniDB_ServerAddress)) {  			contract.ErrorMessage = "AniDB Server Address must have a value" + Environment.NewLine;  		}  	}  	if (contract.ErrorMessage.Length > 0)  		return contract;  	ServerSettings.AniDB_ClientPort = contractIn.AniDB_ClientPort;  	ServerSettings.AniDB_Password = contractIn.AniDB_Password;  	ServerSettings.AniDB_ServerAddress = contractIn.AniDB_ServerAddress;  	ServerSettings.AniDB_ServerPort = contractIn.AniDB_ServerPort;  	ServerSettings.AniDB_Username = contractIn.AniDB_Username;  	ServerSettings.AniDB_AVDumpClientPort = contractIn.AniDB_AVDumpClientPort;  	ServerSettings.AniDB_AVDumpKey = contractIn.AniDB_AVDumpKey;  	ServerSettings.AniDB_DownloadRelatedAnime = contractIn.AniDB_DownloadRelatedAnime;  	ServerSettings.AniDB_DownloadReleaseGroups = contractIn.AniDB_DownloadReleaseGroups;  	ServerSettings.AniDB_DownloadReviews = contractIn.AniDB_DownloadReviews;  	ServerSettings.AniDB_DownloadSimilarAnime = contractIn.AniDB_DownloadSimilarAnime;  	ServerSettings.AniDB_MyList_AddFiles = contractIn.AniDB_MyList_AddFiles;  	ServerSettings.AniDB_MyList_ReadUnwatched = contractIn.AniDB_MyList_ReadUnwatched;  	ServerSettings.AniDB_MyList_ReadWatched = contractIn.AniDB_MyList_ReadWatched;  	ServerSettings.AniDB_MyList_SetUnwatched = contractIn.AniDB_MyList_SetUnwatched;  	ServerSettings.AniDB_MyList_SetWatched = contractIn.AniDB_MyList_SetWatched;  	ServerSettings.AniDB_MyList_StorageState = (AniDBFileStatus)contractIn.AniDB_MyList_StorageState;  	ServerSettings.AniDB_MyList_DeleteType = (AniDBFileDeleteType)contractIn.AniDB_MyList_DeleteType;  	ServerSettings.AniDB_MyList_UpdateFrequency = (ScheduledUpdateFrequency)contractIn.AniDB_MyList_UpdateFrequency;  	ServerSettings.AniDB_Calendar_UpdateFrequency = (ScheduledUpdateFrequency)contractIn.AniDB_Calendar_UpdateFrequency;  	ServerSettings.AniDB_Anime_UpdateFrequency = (ScheduledUpdateFrequency)contractIn.AniDB_Anime_UpdateFrequency;  	ServerSettings.AniDB_MyListStats_UpdateFrequency = (ScheduledUpdateFrequency)contractIn.AniDB_MyListStats_UpdateFrequency;  	ServerSettings.AniDB_File_UpdateFrequency = (ScheduledUpdateFrequency)contractIn.AniDB_File_UpdateFrequency;  	ServerSettings.AniDB_DownloadCharacters = contractIn.AniDB_DownloadCharacters;  	ServerSettings.AniDB_DownloadCreators = contractIn.AniDB_DownloadCreators;  	// Web Cache  	ServerSettings.WebCache_Address = contractIn.WebCache_Address;  	ServerSettings.WebCache_Anonymous = contractIn.WebCache_Anonymous;  	ServerSettings.WebCache_FileHashes_Get = contractIn.WebCache_FileHashes_Get;  	ServerSettings.WebCache_FileHashes_Send = contractIn.WebCache_FileHashes_Send;  	ServerSettings.WebCache_XRefFileEpisode_Get = contractIn.WebCache_XRefFileEpisode_Get;  	ServerSettings.WebCache_XRefFileEpisode_Send = contractIn.WebCache_XRefFileEpisode_Send;  	ServerSettings.WebCache_TvDB_Get = contractIn.WebCache_TvDB_Get;  	ServerSettings.WebCache_TvDB_Send = contractIn.WebCache_TvDB_Send;  	ServerSettings.WebCache_MAL_Get = contractIn.WebCache_MAL_Get;  	ServerSettings.WebCache_MAL_Send = contractIn.WebCache_MAL_Send;  	ServerSettings.WebCache_AniDB_File_Get = contractIn.WebCache_AniDB_File_Get;  	ServerSettings.WebCache_AniDB_File_Send = contractIn.WebCache_AniDB_File_Send;  	// TvDB  	ServerSettings.TvDB_AutoFanart = contractIn.TvDB_AutoFanart;  	ServerSettings.TvDB_AutoFanartAmount = contractIn.TvDB_AutoFanartAmount;  	ServerSettings.TvDB_AutoPosters = contractIn.TvDB_AutoPosters;  	ServerSettings.TvDB_AutoPostersAmount = contractIn.TvDB_AutoPostersAmount;  	ServerSettings.TvDB_AutoWideBanners = contractIn.TvDB_AutoWideBanners;  	ServerSettings.TvDB_AutoWideBannersAmount = contractIn.TvDB_AutoWideBannersAmount;  	ServerSettings.TvDB_UpdateFrequency = (ScheduledUpdateFrequency)contractIn.TvDB_UpdateFrequency;  	ServerSettings.TvDB_Language = contractIn.TvDB_Language;  	// MovieDB  	ServerSettings.MovieDB_AutoFanart = contractIn.MovieDB_AutoFanart;  	ServerSettings.MovieDB_AutoFanartAmount = contractIn.MovieDB_AutoFanartAmount;  	ServerSettings.MovieDB_AutoPosters = contractIn.MovieDB_AutoPosters;  	ServerSettings.MovieDB_AutoPostersAmount = contractIn.MovieDB_AutoPostersAmount;  	// Import settings  	ServerSettings.VideoExtensions = contractIn.VideoExtensions;  	ServerSettings.Import_UseExistingFileWatchedStatus = contractIn.Import_UseExistingFileWatchedStatus;  	ServerSettings.AutoGroupSeries = contractIn.AutoGroupSeries;  	ServerSettings.RunImportOnStart = contractIn.RunImportOnStart;  	ServerSettings.ScanDropFoldersOnStart = contractIn.ScanDropFoldersOnStart;  	ServerSettings.Hash_CRC32 = contractIn.Hash_CRC32;  	ServerSettings.Hash_MD5 = contractIn.Hash_MD5;  	ServerSettings.Hash_SHA1 = contractIn.Hash_SHA1;  	// Language  	ServerSettings.LanguagePreference = contractIn.LanguagePreference;  	ServerSettings.LanguageUseSynonyms = contractIn.LanguageUseSynonyms;  	ServerSettings.EpisodeTitleSource = (DataSourceType)contractIn.EpisodeTitleSource;  	ServerSettings.SeriesDescriptionSource = (DataSourceType)contractIn.SeriesDescriptionSource;  	ServerSettings.SeriesNameSource = (DataSourceType)contractIn.SeriesNameSource;  	// Trakt  	ServerSettings.Trakt_Username = contractIn.Trakt_Username;  	ServerSettings.Trakt_Password = contractIn.Trakt_Password;  	ServerSettings.Trakt_UpdateFrequency = (ScheduledUpdateFrequency)contractIn.Trakt_UpdateFrequency;  	ServerSettings.Trakt_SyncFrequency = (ScheduledUpdateFrequency)contractIn.Trakt_SyncFrequency;  	ServerSettings.Trakt_DownloadEpisodes = contractIn.Trakt_DownloadEpisodes;  	ServerSettings.Trakt_DownloadFanart = contractIn.Trakt_DownloadFanart;  	ServerSettings.Trakt_DownloadPosters = contractIn.Trakt_DownloadPosters;  	// MAL  	ServerSettings.MAL_Username = contractIn.MAL_Username;  	ServerSettings.MAL_Password = contractIn.MAL_Password;  	ServerSettings.MAL_UpdateFrequency = (ScheduledUpdateFrequency)contractIn.MAL_UpdateFrequency;  	ServerSettings.MAL_NeverDecreaseWatchedNums = contractIn.MAL_NeverDecreaseWatchedNums;  	if (anidbSettingsChanged) {  		JMMService.AnidbProcessor.ForceLogout ();  		JMMService.AnidbProcessor.CloseConnections ();  		Thread.Sleep (1000);  		JMMService.AnidbProcessor.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password' ServerSettings.AniDB_ServerAddress' ServerSettings.AniDB_ServerPort' ServerSettings.AniDB_ClientPort);  	}  }  catch (Exception ex) {  	contract.ErrorMessage = ex.Message;  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveServerSettings,The following statement contains a magic number: if (anidbSettingsChanged) {  	JMMService.AnidbProcessor.ForceLogout ();  	JMMService.AnidbProcessor.CloseConnections ();  	Thread.Sleep (1000);  	JMMService.AnidbProcessor.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password' ServerSettings.AniDB_ServerAddress' ServerSettings.AniDB_ServerPort' ServerSettings.AniDB_ClientPort);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SaveServerSettings,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearHasherQueue,The following statement contains a magic number: try {  	JMMService.CmdProcessorHasher.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorHasher.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestHasher ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorHasher.Init ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearHasherQueue,The following statement contains a magic number: try {  	JMMService.CmdProcessorHasher.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorHasher.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestHasher ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorHasher.Init ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearHasherQueue,The following statement contains a magic number: while (JMMService.CmdProcessorHasher.ProcessingCommands) {  	Thread.Sleep (200);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearHasherQueue,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearHasherQueue,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearImagesQueue,The following statement contains a magic number: try {  	JMMService.CmdProcessorImages.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorImages.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestImages ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorImages.Init ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearImagesQueue,The following statement contains a magic number: try {  	JMMService.CmdProcessorImages.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorImages.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestImages ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorImages.Init ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearImagesQueue,The following statement contains a magic number: while (JMMService.CmdProcessorImages.ProcessingCommands) {  	Thread.Sleep (200);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearImagesQueue,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearImagesQueue,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearGeneralQueue,The following statement contains a magic number: try {  	JMMService.CmdProcessorGeneral.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorGeneral.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestGeneral ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorGeneral.Init ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearGeneralQueue,The following statement contains a magic number: try {  	JMMService.CmdProcessorGeneral.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorGeneral.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestGeneral ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorGeneral.Init ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearGeneralQueue,The following statement contains a magic number: while (JMMService.CmdProcessorGeneral.ProcessingCommands) {  	Thread.Sleep (200);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearGeneralQueue,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,ClearGeneralQueue,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,TestAniDBConnection,The following statement contains a magic number: try {  	log += "Disposing..." + Environment.NewLine;  	JMMService.AnidbProcessor.ForceLogout ();  	JMMService.AnidbProcessor.CloseConnections ();  	Thread.Sleep (1000);  	log += "Init..." + Environment.NewLine;  	JMMService.AnidbProcessor.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password' ServerSettings.AniDB_ServerAddress' ServerSettings.AniDB_ServerPort' ServerSettings.AniDB_ClientPort);  	log += "Login..." + Environment.NewLine;  	if (JMMService.AnidbProcessor.Login ()) {  		log += "Login Success!" + Environment.NewLine;  		log += "Logout..." + Environment.NewLine;  		JMMService.AnidbProcessor.ForceLogout ();  		log += "Logged out" + Environment.NewLine;  	}  	else {  		log += "Login FAILED!" + Environment.NewLine;  	}  	return log;  }  catch (Exception ex) {  	log += ex.Message + Environment.NewLine;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,TestAniDBConnection,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,VoteAnime,The following statement contains a magic number: if (voteValue > 0)  	iVoteValue = (int)(voteValue * 100);  else  	iVoteValue = (int)voteValue;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,VoteAnime,The following statement contains a magic number: iVoteValue = (int)(voteValue * 100);  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,DeleteDuplicateFile,The following statement contains a magic number: try {  	DuplicateFileRepository repDupFiles = new DuplicateFileRepository ();  	DuplicateFile df = repDupFiles.GetByID (duplicateFileID);  	if (df == null)  		return "Database entry does not exist";  	if (fileNumber == 1 || fileNumber == 2) {  		string fileName = "";  		if (fileNumber == 1)  			fileName = df.FullServerPath1;  		if (fileNumber == 2)  			fileName = df.FullServerPath2;  		if (!File.Exists (fileName))  			return "File could not be found";  		File.Delete (fileName);  	}  	repDupFiles.Delete (duplicateFileID);  	return "";  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return ex.Message;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,DeleteDuplicateFile,The following statement contains a magic number: try {  	DuplicateFileRepository repDupFiles = new DuplicateFileRepository ();  	DuplicateFile df = repDupFiles.GetByID (duplicateFileID);  	if (df == null)  		return "Database entry does not exist";  	if (fileNumber == 1 || fileNumber == 2) {  		string fileName = "";  		if (fileNumber == 1)  			fileName = df.FullServerPath1;  		if (fileNumber == 2)  			fileName = df.FullServerPath2;  		if (!File.Exists (fileName))  			return "File could not be found";  		File.Delete (fileName);  	}  	repDupFiles.Delete (duplicateFileID);  	return "";  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return ex.Message;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,DeleteDuplicateFile,The following statement contains a magic number: if (fileNumber == 1 || fileNumber == 2) {  	string fileName = "";  	if (fileNumber == 1)  		fileName = df.FullServerPath1;  	if (fileNumber == 2)  		fileName = df.FullServerPath2;  	if (!File.Exists (fileName))  		return "File could not be found";  	File.Delete (fileName);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,DeleteDuplicateFile,The following statement contains a magic number: if (fileNumber == 1 || fileNumber == 2) {  	string fileName = "";  	if (fileNumber == 1)  		fileName = df.FullServerPath1;  	if (fileNumber == 2)  		fileName = df.FullServerPath2;  	if (!File.Exists (fileName))  		return "File could not be found";  	File.Delete (fileName);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,DeleteDuplicateFile,The following statement contains a magic number: if (fileNumber == 2)  	fileName = df.FullServerPath2;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetFilesByGroupAndResolution,The following statement contains a magic number: try {  	AniDB_Anime anime = repAnime.GetByAnimeID (animeID);  	if (anime == null)  		return vids;  	foreach (VideoLocal vid in repVids.GetByAniDBAnimeID (animeID)) {  		int thisBitDepth = 8;  		VideoInfo vidInfo = vid.VideoInfo;  		if (vidInfo != null) {  			int bitDepth = 0;  			if (int.TryParse (vidInfo.VideoBitDepth' out bitDepth))  				thisBitDepth = bitDepth;  		}  		List<AnimeEpisode> eps = vid.GetAnimeEpisodes ();  		if (eps.Count == 0)  			continue;  		AnimeEpisode animeEp = eps [0];  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  			// get the anibd file info  			AniDB_File aniFile = vid.GetAniDBFile ();  			if (aniFile != null) {  				videoSource = SimplifyVideoSource (videoSource);  				string fileSource = SimplifyVideoSource (aniFile.File_Source);  				string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  				// match based on group / video sorce / video res  				if (relGroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && videoSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && resolution.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && thisBitDepth == videoBitDepth) {  					vids.Add (vid.ToContractDetailed (userID));  				}  			}  			else {  				string vidResInfo = Utils.GetStandardisedVideoResolution (vidInfo.VideoResolution);  				// match based on group / video sorce / video res  				if (relGroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && videoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && resolution.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && thisBitDepth == videoBitDepth) {  					vids.Add (vid.ToContractDetailed (userID));  				}  			}  		}  	}  	return vids;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return vids;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetFilesByGroupAndResolution,The following statement contains a magic number: foreach (VideoLocal vid in repVids.GetByAniDBAnimeID (animeID)) {  	int thisBitDepth = 8;  	VideoInfo vidInfo = vid.VideoInfo;  	if (vidInfo != null) {  		int bitDepth = 0;  		if (int.TryParse (vidInfo.VideoBitDepth' out bitDepth))  			thisBitDepth = bitDepth;  	}  	List<AnimeEpisode> eps = vid.GetAnimeEpisodes ();  	if (eps.Count == 0)  		continue;  	AnimeEpisode animeEp = eps [0];  	if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  		// get the anibd file info  		AniDB_File aniFile = vid.GetAniDBFile ();  		if (aniFile != null) {  			videoSource = SimplifyVideoSource (videoSource);  			string fileSource = SimplifyVideoSource (aniFile.File_Source);  			string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  			// match based on group / video sorce / video res  			if (relGroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && videoSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && resolution.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && thisBitDepth == videoBitDepth) {  				vids.Add (vid.ToContractDetailed (userID));  			}  		}  		else {  			string vidResInfo = Utils.GetStandardisedVideoResolution (vidInfo.VideoResolution);  			// match based on group / video sorce / video res  			if (relGroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && videoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && resolution.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && thisBitDepth == videoBitDepth) {  				vids.Add (vid.ToContractDetailed (userID));  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	TimeSpan ts = DateTime.Now - start;  	double totalTiming = 0;  	double timingAnime = 0;  	double timingVids = 0;  	double timingEps = 0;  	double timingAniEps = 0;  	double timingAniFile = 0;  	double timingVidInfo = 0;  	double timingContracts = 0;  	DateTime oStart = DateTime.Now;  	start = DateTime.Now;  	AniDB_Anime anime = repAnime.GetByAnimeID (animeID);  	ts = DateTime.Now - start;  	timingAnime += ts.TotalMilliseconds;  	if (anime == null)  		return vidQuals;  	start = DateTime.Now;  	List<VideoLocal> vids = repVids.GetByAniDBAnimeID (animeID);  	ts = DateTime.Now - start;  	timingVids += ts.TotalMilliseconds;  	foreach (VideoLocal vid in vids) {  		start = DateTime.Now;  		List<AnimeEpisode> eps = vid.GetAnimeEpisodes ();  		ts = DateTime.Now - start;  		timingEps += ts.TotalMilliseconds;  		if (eps.Count == 0)  			continue;  		foreach (AnimeEpisode animeEp in eps) {  			//AnimeEpisode animeEp = eps[0];  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  				start = DateTime.Now;  				AniDB_Episode anidbEp = animeEp.AniDB_Episode;  				ts = DateTime.Now - start;  				timingAniEps += ts.TotalMilliseconds;  				// get the anibd file info  				start = DateTime.Now;  				AniDB_File aniFile = vid.GetAniDBFile ();  				ts = DateTime.Now - start;  				timingAniFile += ts.TotalMilliseconds;  				if (aniFile != null) {  					start = DateTime.Now;  					VideoInfo vinfo = vid.VideoInfo;  					ts = DateTime.Now - start;  					timingVidInfo += ts.TotalMilliseconds;  					int bitDepth = 8;  					if (vinfo != null) {  						if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  							bitDepth = 8;  					}  					string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  					// match based on group / video sorce / video res  					bool foundSummaryRecord = false;  					foreach (Contract_GroupVideoQuality contract in vidQuals) {  						string contractSource = SimplifyVideoSource (contract.VideoSource);  						string fileSource = SimplifyVideoSource (aniFile.File_Source);  						string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  						if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  							foundSummaryRecord = true;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  						}  					}  					if (!foundSummaryRecord) {  						Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  						contract.FileCountNormal = 0;  						contract.FileCountSpecials = 0;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						contract.GroupName = aniFile.Anime_GroupName;  						contract.GroupNameShort = aniFile.Anime_GroupNameShort;  						contract.VideoBitDepth = bitDepth;  						contract.Resolution = vidResAniFile;  						contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  						contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  						contract.NormalEpisodeNumbers = new List<int> ();  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  						vidQuals.Add (contract);  					}  				}  				else {  					// look at the Video Info record  					VideoInfo vinfo = vid.VideoInfo;  					if (vinfo != null) {  						int bitDepth = 8;  						if (vinfo != null) {  							if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  								bitDepth = 8;  						}  						string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  						bool foundSummaryRecord = false;  						foreach (Contract_GroupVideoQuality contract in vidQuals) {  							string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  							if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  								foundSummaryRecord = true;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  									contract.FileCountNormal++;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  									contract.FileCountSpecials++;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  									if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  										contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  								}  							}  						}  						if (!foundSummaryRecord) {  							Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  							contract.FileCountNormal = 0;  							contract.FileCountSpecials = 0;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							contract.GroupName = Constants.NO_GROUP_INFO;  							contract.GroupNameShort = Constants.NO_GROUP_INFO;  							contract.Resolution = vidResInfo;  							contract.VideoSource = Constants.NO_SOURCE_INFO;  							contract.VideoBitDepth = bitDepth;  							contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  							contract.NormalEpisodeNumbers = new List<int> ();  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  							vidQuals.Add (contract);  						}  					}  				}  			}  		}  	}  	start = DateTime.Now;  	foreach (Contract_GroupVideoQuality contract in vidQuals) {  		contract.NormalComplete = contract.FileCountNormal >= anime.EpisodeCountNormal;  		contract.SpecialsComplete = (contract.FileCountSpecials >= anime.EpisodeCountSpecial) && (anime.EpisodeCountSpecial > 0);  		contract.NormalEpisodeNumberSummary = "";  		contract.NormalEpisodeNumbers.Sort ();  		int lastEpNum = 0;  		int baseEpNum = 0;  		foreach (int epNum in contract.NormalEpisodeNumbers) {  			if (baseEpNum == 0) {  				baseEpNum = epNum;  				lastEpNum = epNum;  			}  			if (epNum == lastEpNum)  				continue;  			int epNumDiff = epNum - lastEpNum;  			if (epNumDiff == 1) {  				lastEpNum = epNum;  				continue;  			}  			// this means we have missed an episode  			if (contract.NormalEpisodeNumberSummary.Length > 0)  				contract.NormalEpisodeNumberSummary += "' ";  			if (baseEpNum == lastEpNum)  				contract.NormalEpisodeNumberSummary += string.Format ("{0}"' baseEpNum);  			else  				contract.NormalEpisodeNumberSummary += string.Format ("{0}-{1}"' baseEpNum' lastEpNum);  			lastEpNum = epNum;  			baseEpNum = epNum;  		}  		if (contract.NormalEpisodeNumbers.Count > 0) {  			if (contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1] >= baseEpNum) {  				// this means we have missed an episode  				if (contract.NormalEpisodeNumberSummary.Length > 0)  					contract.NormalEpisodeNumberSummary += "' ";  				if (baseEpNum == contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1])  					contract.NormalEpisodeNumberSummary += string.Format ("{0}"' baseEpNum);  				else  					contract.NormalEpisodeNumberSummary += string.Format ("{0}-{1}"' baseEpNum' contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1]);  			}  		}  	}  	ts = DateTime.Now - start;  	timingContracts += ts.TotalMilliseconds;  	ts = DateTime.Now - oStart;  	totalTiming = ts.TotalMilliseconds;  	string msg2 = string.Format ("Timing for video quality {0} ({1}) : {2}/{3}/{4}/{5}/{6}/{7}/{8}  (AID: {9})"' anime.MainTitle' totalTiming' timingAnime' timingVids' timingEps' timingAniEps' timingAniFile' timingVidInfo' timingContracts' anime.AnimeID);  	logger.Debug (msg2);  	vidQuals.Sort ();  	return vidQuals;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return vidQuals;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	TimeSpan ts = DateTime.Now - start;  	double totalTiming = 0;  	double timingAnime = 0;  	double timingVids = 0;  	double timingEps = 0;  	double timingAniEps = 0;  	double timingAniFile = 0;  	double timingVidInfo = 0;  	double timingContracts = 0;  	DateTime oStart = DateTime.Now;  	start = DateTime.Now;  	AniDB_Anime anime = repAnime.GetByAnimeID (animeID);  	ts = DateTime.Now - start;  	timingAnime += ts.TotalMilliseconds;  	if (anime == null)  		return vidQuals;  	start = DateTime.Now;  	List<VideoLocal> vids = repVids.GetByAniDBAnimeID (animeID);  	ts = DateTime.Now - start;  	timingVids += ts.TotalMilliseconds;  	foreach (VideoLocal vid in vids) {  		start = DateTime.Now;  		List<AnimeEpisode> eps = vid.GetAnimeEpisodes ();  		ts = DateTime.Now - start;  		timingEps += ts.TotalMilliseconds;  		if (eps.Count == 0)  			continue;  		foreach (AnimeEpisode animeEp in eps) {  			//AnimeEpisode animeEp = eps[0];  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  				start = DateTime.Now;  				AniDB_Episode anidbEp = animeEp.AniDB_Episode;  				ts = DateTime.Now - start;  				timingAniEps += ts.TotalMilliseconds;  				// get the anibd file info  				start = DateTime.Now;  				AniDB_File aniFile = vid.GetAniDBFile ();  				ts = DateTime.Now - start;  				timingAniFile += ts.TotalMilliseconds;  				if (aniFile != null) {  					start = DateTime.Now;  					VideoInfo vinfo = vid.VideoInfo;  					ts = DateTime.Now - start;  					timingVidInfo += ts.TotalMilliseconds;  					int bitDepth = 8;  					if (vinfo != null) {  						if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  							bitDepth = 8;  					}  					string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  					// match based on group / video sorce / video res  					bool foundSummaryRecord = false;  					foreach (Contract_GroupVideoQuality contract in vidQuals) {  						string contractSource = SimplifyVideoSource (contract.VideoSource);  						string fileSource = SimplifyVideoSource (aniFile.File_Source);  						string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  						if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  							foundSummaryRecord = true;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  						}  					}  					if (!foundSummaryRecord) {  						Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  						contract.FileCountNormal = 0;  						contract.FileCountSpecials = 0;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						contract.GroupName = aniFile.Anime_GroupName;  						contract.GroupNameShort = aniFile.Anime_GroupNameShort;  						contract.VideoBitDepth = bitDepth;  						contract.Resolution = vidResAniFile;  						contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  						contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  						contract.NormalEpisodeNumbers = new List<int> ();  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  						vidQuals.Add (contract);  					}  				}  				else {  					// look at the Video Info record  					VideoInfo vinfo = vid.VideoInfo;  					if (vinfo != null) {  						int bitDepth = 8;  						if (vinfo != null) {  							if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  								bitDepth = 8;  						}  						string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  						bool foundSummaryRecord = false;  						foreach (Contract_GroupVideoQuality contract in vidQuals) {  							string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  							if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  								foundSummaryRecord = true;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  									contract.FileCountNormal++;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  									contract.FileCountSpecials++;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  									if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  										contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  								}  							}  						}  						if (!foundSummaryRecord) {  							Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  							contract.FileCountNormal = 0;  							contract.FileCountSpecials = 0;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							contract.GroupName = Constants.NO_GROUP_INFO;  							contract.GroupNameShort = Constants.NO_GROUP_INFO;  							contract.Resolution = vidResInfo;  							contract.VideoSource = Constants.NO_SOURCE_INFO;  							contract.VideoBitDepth = bitDepth;  							contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  							contract.NormalEpisodeNumbers = new List<int> ();  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  							vidQuals.Add (contract);  						}  					}  				}  			}  		}  	}  	start = DateTime.Now;  	foreach (Contract_GroupVideoQuality contract in vidQuals) {  		contract.NormalComplete = contract.FileCountNormal >= anime.EpisodeCountNormal;  		contract.SpecialsComplete = (contract.FileCountSpecials >= anime.EpisodeCountSpecial) && (anime.EpisodeCountSpecial > 0);  		contract.NormalEpisodeNumberSummary = "";  		contract.NormalEpisodeNumbers.Sort ();  		int lastEpNum = 0;  		int baseEpNum = 0;  		foreach (int epNum in contract.NormalEpisodeNumbers) {  			if (baseEpNum == 0) {  				baseEpNum = epNum;  				lastEpNum = epNum;  			}  			if (epNum == lastEpNum)  				continue;  			int epNumDiff = epNum - lastEpNum;  			if (epNumDiff == 1) {  				lastEpNum = epNum;  				continue;  			}  			// this means we have missed an episode  			if (contract.NormalEpisodeNumberSummary.Length > 0)  				contract.NormalEpisodeNumberSummary += "' ";  			if (baseEpNum == lastEpNum)  				contract.NormalEpisodeNumberSummary += string.Format ("{0}"' baseEpNum);  			else  				contract.NormalEpisodeNumberSummary += string.Format ("{0}-{1}"' baseEpNum' lastEpNum);  			lastEpNum = epNum;  			baseEpNum = epNum;  		}  		if (contract.NormalEpisodeNumbers.Count > 0) {  			if (contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1] >= baseEpNum) {  				// this means we have missed an episode  				if (contract.NormalEpisodeNumberSummary.Length > 0)  					contract.NormalEpisodeNumberSummary += "' ";  				if (baseEpNum == contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1])  					contract.NormalEpisodeNumberSummary += string.Format ("{0}"' baseEpNum);  				else  					contract.NormalEpisodeNumberSummary += string.Format ("{0}-{1}"' baseEpNum' contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1]);  			}  		}  	}  	ts = DateTime.Now - start;  	timingContracts += ts.TotalMilliseconds;  	ts = DateTime.Now - oStart;  	totalTiming = ts.TotalMilliseconds;  	string msg2 = string.Format ("Timing for video quality {0} ({1}) : {2}/{3}/{4}/{5}/{6}/{7}/{8}  (AID: {9})"' anime.MainTitle' totalTiming' timingAnime' timingVids' timingEps' timingAniEps' timingAniFile' timingVidInfo' timingContracts' anime.AnimeID);  	logger.Debug (msg2);  	vidQuals.Sort ();  	return vidQuals;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return vidQuals;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	TimeSpan ts = DateTime.Now - start;  	double totalTiming = 0;  	double timingAnime = 0;  	double timingVids = 0;  	double timingEps = 0;  	double timingAniEps = 0;  	double timingAniFile = 0;  	double timingVidInfo = 0;  	double timingContracts = 0;  	DateTime oStart = DateTime.Now;  	start = DateTime.Now;  	AniDB_Anime anime = repAnime.GetByAnimeID (animeID);  	ts = DateTime.Now - start;  	timingAnime += ts.TotalMilliseconds;  	if (anime == null)  		return vidQuals;  	start = DateTime.Now;  	List<VideoLocal> vids = repVids.GetByAniDBAnimeID (animeID);  	ts = DateTime.Now - start;  	timingVids += ts.TotalMilliseconds;  	foreach (VideoLocal vid in vids) {  		start = DateTime.Now;  		List<AnimeEpisode> eps = vid.GetAnimeEpisodes ();  		ts = DateTime.Now - start;  		timingEps += ts.TotalMilliseconds;  		if (eps.Count == 0)  			continue;  		foreach (AnimeEpisode animeEp in eps) {  			//AnimeEpisode animeEp = eps[0];  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  				start = DateTime.Now;  				AniDB_Episode anidbEp = animeEp.AniDB_Episode;  				ts = DateTime.Now - start;  				timingAniEps += ts.TotalMilliseconds;  				// get the anibd file info  				start = DateTime.Now;  				AniDB_File aniFile = vid.GetAniDBFile ();  				ts = DateTime.Now - start;  				timingAniFile += ts.TotalMilliseconds;  				if (aniFile != null) {  					start = DateTime.Now;  					VideoInfo vinfo = vid.VideoInfo;  					ts = DateTime.Now - start;  					timingVidInfo += ts.TotalMilliseconds;  					int bitDepth = 8;  					if (vinfo != null) {  						if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  							bitDepth = 8;  					}  					string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  					// match based on group / video sorce / video res  					bool foundSummaryRecord = false;  					foreach (Contract_GroupVideoQuality contract in vidQuals) {  						string contractSource = SimplifyVideoSource (contract.VideoSource);  						string fileSource = SimplifyVideoSource (aniFile.File_Source);  						string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  						if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  							foundSummaryRecord = true;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  						}  					}  					if (!foundSummaryRecord) {  						Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  						contract.FileCountNormal = 0;  						contract.FileCountSpecials = 0;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						contract.GroupName = aniFile.Anime_GroupName;  						contract.GroupNameShort = aniFile.Anime_GroupNameShort;  						contract.VideoBitDepth = bitDepth;  						contract.Resolution = vidResAniFile;  						contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  						contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  						contract.NormalEpisodeNumbers = new List<int> ();  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  						vidQuals.Add (contract);  					}  				}  				else {  					// look at the Video Info record  					VideoInfo vinfo = vid.VideoInfo;  					if (vinfo != null) {  						int bitDepth = 8;  						if (vinfo != null) {  							if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  								bitDepth = 8;  						}  						string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  						bool foundSummaryRecord = false;  						foreach (Contract_GroupVideoQuality contract in vidQuals) {  							string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  							if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  								foundSummaryRecord = true;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  									contract.FileCountNormal++;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  									contract.FileCountSpecials++;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  									if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  										contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  								}  							}  						}  						if (!foundSummaryRecord) {  							Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  							contract.FileCountNormal = 0;  							contract.FileCountSpecials = 0;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							contract.GroupName = Constants.NO_GROUP_INFO;  							contract.GroupNameShort = Constants.NO_GROUP_INFO;  							contract.Resolution = vidResInfo;  							contract.VideoSource = Constants.NO_SOURCE_INFO;  							contract.VideoBitDepth = bitDepth;  							contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  							contract.NormalEpisodeNumbers = new List<int> ();  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  							vidQuals.Add (contract);  						}  					}  				}  			}  		}  	}  	start = DateTime.Now;  	foreach (Contract_GroupVideoQuality contract in vidQuals) {  		contract.NormalComplete = contract.FileCountNormal >= anime.EpisodeCountNormal;  		contract.SpecialsComplete = (contract.FileCountSpecials >= anime.EpisodeCountSpecial) && (anime.EpisodeCountSpecial > 0);  		contract.NormalEpisodeNumberSummary = "";  		contract.NormalEpisodeNumbers.Sort ();  		int lastEpNum = 0;  		int baseEpNum = 0;  		foreach (int epNum in contract.NormalEpisodeNumbers) {  			if (baseEpNum == 0) {  				baseEpNum = epNum;  				lastEpNum = epNum;  			}  			if (epNum == lastEpNum)  				continue;  			int epNumDiff = epNum - lastEpNum;  			if (epNumDiff == 1) {  				lastEpNum = epNum;  				continue;  			}  			// this means we have missed an episode  			if (contract.NormalEpisodeNumberSummary.Length > 0)  				contract.NormalEpisodeNumberSummary += "' ";  			if (baseEpNum == lastEpNum)  				contract.NormalEpisodeNumberSummary += string.Format ("{0}"' baseEpNum);  			else  				contract.NormalEpisodeNumberSummary += string.Format ("{0}-{1}"' baseEpNum' lastEpNum);  			lastEpNum = epNum;  			baseEpNum = epNum;  		}  		if (contract.NormalEpisodeNumbers.Count > 0) {  			if (contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1] >= baseEpNum) {  				// this means we have missed an episode  				if (contract.NormalEpisodeNumberSummary.Length > 0)  					contract.NormalEpisodeNumberSummary += "' ";  				if (baseEpNum == contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1])  					contract.NormalEpisodeNumberSummary += string.Format ("{0}"' baseEpNum);  				else  					contract.NormalEpisodeNumberSummary += string.Format ("{0}-{1}"' baseEpNum' contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1]);  			}  		}  	}  	ts = DateTime.Now - start;  	timingContracts += ts.TotalMilliseconds;  	ts = DateTime.Now - oStart;  	totalTiming = ts.TotalMilliseconds;  	string msg2 = string.Format ("Timing for video quality {0} ({1}) : {2}/{3}/{4}/{5}/{6}/{7}/{8}  (AID: {9})"' anime.MainTitle' totalTiming' timingAnime' timingVids' timingEps' timingAniEps' timingAniFile' timingVidInfo' timingContracts' anime.AnimeID);  	logger.Debug (msg2);  	vidQuals.Sort ();  	return vidQuals;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return vidQuals;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	TimeSpan ts = DateTime.Now - start;  	double totalTiming = 0;  	double timingAnime = 0;  	double timingVids = 0;  	double timingEps = 0;  	double timingAniEps = 0;  	double timingAniFile = 0;  	double timingVidInfo = 0;  	double timingContracts = 0;  	DateTime oStart = DateTime.Now;  	start = DateTime.Now;  	AniDB_Anime anime = repAnime.GetByAnimeID (animeID);  	ts = DateTime.Now - start;  	timingAnime += ts.TotalMilliseconds;  	if (anime == null)  		return vidQuals;  	start = DateTime.Now;  	List<VideoLocal> vids = repVids.GetByAniDBAnimeID (animeID);  	ts = DateTime.Now - start;  	timingVids += ts.TotalMilliseconds;  	foreach (VideoLocal vid in vids) {  		start = DateTime.Now;  		List<AnimeEpisode> eps = vid.GetAnimeEpisodes ();  		ts = DateTime.Now - start;  		timingEps += ts.TotalMilliseconds;  		if (eps.Count == 0)  			continue;  		foreach (AnimeEpisode animeEp in eps) {  			//AnimeEpisode animeEp = eps[0];  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  				start = DateTime.Now;  				AniDB_Episode anidbEp = animeEp.AniDB_Episode;  				ts = DateTime.Now - start;  				timingAniEps += ts.TotalMilliseconds;  				// get the anibd file info  				start = DateTime.Now;  				AniDB_File aniFile = vid.GetAniDBFile ();  				ts = DateTime.Now - start;  				timingAniFile += ts.TotalMilliseconds;  				if (aniFile != null) {  					start = DateTime.Now;  					VideoInfo vinfo = vid.VideoInfo;  					ts = DateTime.Now - start;  					timingVidInfo += ts.TotalMilliseconds;  					int bitDepth = 8;  					if (vinfo != null) {  						if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  							bitDepth = 8;  					}  					string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  					// match based on group / video sorce / video res  					bool foundSummaryRecord = false;  					foreach (Contract_GroupVideoQuality contract in vidQuals) {  						string contractSource = SimplifyVideoSource (contract.VideoSource);  						string fileSource = SimplifyVideoSource (aniFile.File_Source);  						string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  						if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  							foundSummaryRecord = true;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  						}  					}  					if (!foundSummaryRecord) {  						Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  						contract.FileCountNormal = 0;  						contract.FileCountSpecials = 0;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						contract.GroupName = aniFile.Anime_GroupName;  						contract.GroupNameShort = aniFile.Anime_GroupNameShort;  						contract.VideoBitDepth = bitDepth;  						contract.Resolution = vidResAniFile;  						contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  						contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  						contract.NormalEpisodeNumbers = new List<int> ();  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  						vidQuals.Add (contract);  					}  				}  				else {  					// look at the Video Info record  					VideoInfo vinfo = vid.VideoInfo;  					if (vinfo != null) {  						int bitDepth = 8;  						if (vinfo != null) {  							if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  								bitDepth = 8;  						}  						string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  						bool foundSummaryRecord = false;  						foreach (Contract_GroupVideoQuality contract in vidQuals) {  							string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  							if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  								foundSummaryRecord = true;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  									contract.FileCountNormal++;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  									contract.FileCountSpecials++;  								if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  									if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  										contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  								}  							}  						}  						if (!foundSummaryRecord) {  							Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  							contract.FileCountNormal = 0;  							contract.FileCountSpecials = 0;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							contract.GroupName = Constants.NO_GROUP_INFO;  							contract.GroupNameShort = Constants.NO_GROUP_INFO;  							contract.Resolution = vidResInfo;  							contract.VideoSource = Constants.NO_SOURCE_INFO;  							contract.VideoBitDepth = bitDepth;  							contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  							contract.NormalEpisodeNumbers = new List<int> ();  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  							vidQuals.Add (contract);  						}  					}  				}  			}  		}  	}  	start = DateTime.Now;  	foreach (Contract_GroupVideoQuality contract in vidQuals) {  		contract.NormalComplete = contract.FileCountNormal >= anime.EpisodeCountNormal;  		contract.SpecialsComplete = (contract.FileCountSpecials >= anime.EpisodeCountSpecial) && (anime.EpisodeCountSpecial > 0);  		contract.NormalEpisodeNumberSummary = "";  		contract.NormalEpisodeNumbers.Sort ();  		int lastEpNum = 0;  		int baseEpNum = 0;  		foreach (int epNum in contract.NormalEpisodeNumbers) {  			if (baseEpNum == 0) {  				baseEpNum = epNum;  				lastEpNum = epNum;  			}  			if (epNum == lastEpNum)  				continue;  			int epNumDiff = epNum - lastEpNum;  			if (epNumDiff == 1) {  				lastEpNum = epNum;  				continue;  			}  			// this means we have missed an episode  			if (contract.NormalEpisodeNumberSummary.Length > 0)  				contract.NormalEpisodeNumberSummary += "' ";  			if (baseEpNum == lastEpNum)  				contract.NormalEpisodeNumberSummary += string.Format ("{0}"' baseEpNum);  			else  				contract.NormalEpisodeNumberSummary += string.Format ("{0}-{1}"' baseEpNum' lastEpNum);  			lastEpNum = epNum;  			baseEpNum = epNum;  		}  		if (contract.NormalEpisodeNumbers.Count > 0) {  			if (contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1] >= baseEpNum) {  				// this means we have missed an episode  				if (contract.NormalEpisodeNumberSummary.Length > 0)  					contract.NormalEpisodeNumberSummary += "' ";  				if (baseEpNum == contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1])  					contract.NormalEpisodeNumberSummary += string.Format ("{0}"' baseEpNum);  				else  					contract.NormalEpisodeNumberSummary += string.Format ("{0}-{1}"' baseEpNum' contract.NormalEpisodeNumbers [contract.NormalEpisodeNumbers.Count - 1]);  			}  		}  	}  	ts = DateTime.Now - start;  	timingContracts += ts.TotalMilliseconds;  	ts = DateTime.Now - oStart;  	totalTiming = ts.TotalMilliseconds;  	string msg2 = string.Format ("Timing for video quality {0} ({1}) : {2}/{3}/{4}/{5}/{6}/{7}/{8}  (AID: {9})"' anime.MainTitle' totalTiming' timingAnime' timingVids' timingEps' timingAniEps' timingAniFile' timingVidInfo' timingContracts' anime.AnimeID);  	logger.Debug (msg2);  	vidQuals.Sort ();  	return vidQuals;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return vidQuals;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: foreach (VideoLocal vid in vids) {  	start = DateTime.Now;  	List<AnimeEpisode> eps = vid.GetAnimeEpisodes ();  	ts = DateTime.Now - start;  	timingEps += ts.TotalMilliseconds;  	if (eps.Count == 0)  		continue;  	foreach (AnimeEpisode animeEp in eps) {  		//AnimeEpisode animeEp = eps[0];  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  			start = DateTime.Now;  			AniDB_Episode anidbEp = animeEp.AniDB_Episode;  			ts = DateTime.Now - start;  			timingAniEps += ts.TotalMilliseconds;  			// get the anibd file info  			start = DateTime.Now;  			AniDB_File aniFile = vid.GetAniDBFile ();  			ts = DateTime.Now - start;  			timingAniFile += ts.TotalMilliseconds;  			if (aniFile != null) {  				start = DateTime.Now;  				VideoInfo vinfo = vid.VideoInfo;  				ts = DateTime.Now - start;  				timingVidInfo += ts.TotalMilliseconds;  				int bitDepth = 8;  				if (vinfo != null) {  					if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  						bitDepth = 8;  				}  				string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  				// match based on group / video sorce / video res  				bool foundSummaryRecord = false;  				foreach (Contract_GroupVideoQuality contract in vidQuals) {  					string contractSource = SimplifyVideoSource (contract.VideoSource);  					string fileSource = SimplifyVideoSource (aniFile.File_Source);  					string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  					if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  						foundSummaryRecord = true;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  					}  				}  				if (!foundSummaryRecord) {  					Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  					contract.FileCountNormal = 0;  					contract.FileCountSpecials = 0;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					contract.GroupName = aniFile.Anime_GroupName;  					contract.GroupNameShort = aniFile.Anime_GroupNameShort;  					contract.VideoBitDepth = bitDepth;  					contract.Resolution = vidResAniFile;  					contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  					contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  					contract.NormalEpisodeNumbers = new List<int> ();  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  					vidQuals.Add (contract);  				}  			}  			else {  				// look at the Video Info record  				VideoInfo vinfo = vid.VideoInfo;  				if (vinfo != null) {  					int bitDepth = 8;  					if (vinfo != null) {  						if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  							bitDepth = 8;  					}  					string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  					bool foundSummaryRecord = false;  					foreach (Contract_GroupVideoQuality contract in vidQuals) {  						string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  						if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  							foundSummaryRecord = true;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  						}  					}  					if (!foundSummaryRecord) {  						Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  						contract.FileCountNormal = 0;  						contract.FileCountSpecials = 0;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						contract.GroupName = Constants.NO_GROUP_INFO;  						contract.GroupNameShort = Constants.NO_GROUP_INFO;  						contract.Resolution = vidResInfo;  						contract.VideoSource = Constants.NO_SOURCE_INFO;  						contract.VideoBitDepth = bitDepth;  						contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  						contract.NormalEpisodeNumbers = new List<int> ();  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  						vidQuals.Add (contract);  					}  				}  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: foreach (VideoLocal vid in vids) {  	start = DateTime.Now;  	List<AnimeEpisode> eps = vid.GetAnimeEpisodes ();  	ts = DateTime.Now - start;  	timingEps += ts.TotalMilliseconds;  	if (eps.Count == 0)  		continue;  	foreach (AnimeEpisode animeEp in eps) {  		//AnimeEpisode animeEp = eps[0];  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  			start = DateTime.Now;  			AniDB_Episode anidbEp = animeEp.AniDB_Episode;  			ts = DateTime.Now - start;  			timingAniEps += ts.TotalMilliseconds;  			// get the anibd file info  			start = DateTime.Now;  			AniDB_File aniFile = vid.GetAniDBFile ();  			ts = DateTime.Now - start;  			timingAniFile += ts.TotalMilliseconds;  			if (aniFile != null) {  				start = DateTime.Now;  				VideoInfo vinfo = vid.VideoInfo;  				ts = DateTime.Now - start;  				timingVidInfo += ts.TotalMilliseconds;  				int bitDepth = 8;  				if (vinfo != null) {  					if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  						bitDepth = 8;  				}  				string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  				// match based on group / video sorce / video res  				bool foundSummaryRecord = false;  				foreach (Contract_GroupVideoQuality contract in vidQuals) {  					string contractSource = SimplifyVideoSource (contract.VideoSource);  					string fileSource = SimplifyVideoSource (aniFile.File_Source);  					string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  					if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  						foundSummaryRecord = true;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  					}  				}  				if (!foundSummaryRecord) {  					Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  					contract.FileCountNormal = 0;  					contract.FileCountSpecials = 0;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					contract.GroupName = aniFile.Anime_GroupName;  					contract.GroupNameShort = aniFile.Anime_GroupNameShort;  					contract.VideoBitDepth = bitDepth;  					contract.Resolution = vidResAniFile;  					contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  					contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  					contract.NormalEpisodeNumbers = new List<int> ();  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  					vidQuals.Add (contract);  				}  			}  			else {  				// look at the Video Info record  				VideoInfo vinfo = vid.VideoInfo;  				if (vinfo != null) {  					int bitDepth = 8;  					if (vinfo != null) {  						if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  							bitDepth = 8;  					}  					string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  					bool foundSummaryRecord = false;  					foreach (Contract_GroupVideoQuality contract in vidQuals) {  						string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  						if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  							foundSummaryRecord = true;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  						}  					}  					if (!foundSummaryRecord) {  						Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  						contract.FileCountNormal = 0;  						contract.FileCountSpecials = 0;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						contract.GroupName = Constants.NO_GROUP_INFO;  						contract.GroupNameShort = Constants.NO_GROUP_INFO;  						contract.Resolution = vidResInfo;  						contract.VideoSource = Constants.NO_SOURCE_INFO;  						contract.VideoBitDepth = bitDepth;  						contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  						contract.NormalEpisodeNumbers = new List<int> ();  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  						vidQuals.Add (contract);  					}  				}  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: foreach (VideoLocal vid in vids) {  	start = DateTime.Now;  	List<AnimeEpisode> eps = vid.GetAnimeEpisodes ();  	ts = DateTime.Now - start;  	timingEps += ts.TotalMilliseconds;  	if (eps.Count == 0)  		continue;  	foreach (AnimeEpisode animeEp in eps) {  		//AnimeEpisode animeEp = eps[0];  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  			start = DateTime.Now;  			AniDB_Episode anidbEp = animeEp.AniDB_Episode;  			ts = DateTime.Now - start;  			timingAniEps += ts.TotalMilliseconds;  			// get the anibd file info  			start = DateTime.Now;  			AniDB_File aniFile = vid.GetAniDBFile ();  			ts = DateTime.Now - start;  			timingAniFile += ts.TotalMilliseconds;  			if (aniFile != null) {  				start = DateTime.Now;  				VideoInfo vinfo = vid.VideoInfo;  				ts = DateTime.Now - start;  				timingVidInfo += ts.TotalMilliseconds;  				int bitDepth = 8;  				if (vinfo != null) {  					if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  						bitDepth = 8;  				}  				string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  				// match based on group / video sorce / video res  				bool foundSummaryRecord = false;  				foreach (Contract_GroupVideoQuality contract in vidQuals) {  					string contractSource = SimplifyVideoSource (contract.VideoSource);  					string fileSource = SimplifyVideoSource (aniFile.File_Source);  					string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  					if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  						foundSummaryRecord = true;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  					}  				}  				if (!foundSummaryRecord) {  					Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  					contract.FileCountNormal = 0;  					contract.FileCountSpecials = 0;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					contract.GroupName = aniFile.Anime_GroupName;  					contract.GroupNameShort = aniFile.Anime_GroupNameShort;  					contract.VideoBitDepth = bitDepth;  					contract.Resolution = vidResAniFile;  					contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  					contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  					contract.NormalEpisodeNumbers = new List<int> ();  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  					vidQuals.Add (contract);  				}  			}  			else {  				// look at the Video Info record  				VideoInfo vinfo = vid.VideoInfo;  				if (vinfo != null) {  					int bitDepth = 8;  					if (vinfo != null) {  						if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  							bitDepth = 8;  					}  					string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  					bool foundSummaryRecord = false;  					foreach (Contract_GroupVideoQuality contract in vidQuals) {  						string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  						if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  							foundSummaryRecord = true;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  						}  					}  					if (!foundSummaryRecord) {  						Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  						contract.FileCountNormal = 0;  						contract.FileCountSpecials = 0;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						contract.GroupName = Constants.NO_GROUP_INFO;  						contract.GroupNameShort = Constants.NO_GROUP_INFO;  						contract.Resolution = vidResInfo;  						contract.VideoSource = Constants.NO_SOURCE_INFO;  						contract.VideoBitDepth = bitDepth;  						contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  						contract.NormalEpisodeNumbers = new List<int> ();  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  						vidQuals.Add (contract);  					}  				}  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: foreach (VideoLocal vid in vids) {  	start = DateTime.Now;  	List<AnimeEpisode> eps = vid.GetAnimeEpisodes ();  	ts = DateTime.Now - start;  	timingEps += ts.TotalMilliseconds;  	if (eps.Count == 0)  		continue;  	foreach (AnimeEpisode animeEp in eps) {  		//AnimeEpisode animeEp = eps[0];  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  			start = DateTime.Now;  			AniDB_Episode anidbEp = animeEp.AniDB_Episode;  			ts = DateTime.Now - start;  			timingAniEps += ts.TotalMilliseconds;  			// get the anibd file info  			start = DateTime.Now;  			AniDB_File aniFile = vid.GetAniDBFile ();  			ts = DateTime.Now - start;  			timingAniFile += ts.TotalMilliseconds;  			if (aniFile != null) {  				start = DateTime.Now;  				VideoInfo vinfo = vid.VideoInfo;  				ts = DateTime.Now - start;  				timingVidInfo += ts.TotalMilliseconds;  				int bitDepth = 8;  				if (vinfo != null) {  					if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  						bitDepth = 8;  				}  				string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  				// match based on group / video sorce / video res  				bool foundSummaryRecord = false;  				foreach (Contract_GroupVideoQuality contract in vidQuals) {  					string contractSource = SimplifyVideoSource (contract.VideoSource);  					string fileSource = SimplifyVideoSource (aniFile.File_Source);  					string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  					if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  						foundSummaryRecord = true;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  					}  				}  				if (!foundSummaryRecord) {  					Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  					contract.FileCountNormal = 0;  					contract.FileCountSpecials = 0;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					contract.GroupName = aniFile.Anime_GroupName;  					contract.GroupNameShort = aniFile.Anime_GroupNameShort;  					contract.VideoBitDepth = bitDepth;  					contract.Resolution = vidResAniFile;  					contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  					contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  					contract.NormalEpisodeNumbers = new List<int> ();  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  					vidQuals.Add (contract);  				}  			}  			else {  				// look at the Video Info record  				VideoInfo vinfo = vid.VideoInfo;  				if (vinfo != null) {  					int bitDepth = 8;  					if (vinfo != null) {  						if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  							bitDepth = 8;  					}  					string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  					bool foundSummaryRecord = false;  					foreach (Contract_GroupVideoQuality contract in vidQuals) {  						string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  						if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  							foundSummaryRecord = true;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  								contract.FileCountNormal++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  								contract.FileCountSpecials++;  							if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  								if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  									contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  							}  						}  					}  					if (!foundSummaryRecord) {  						Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  						contract.FileCountNormal = 0;  						contract.FileCountSpecials = 0;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						contract.GroupName = Constants.NO_GROUP_INFO;  						contract.GroupNameShort = Constants.NO_GROUP_INFO;  						contract.Resolution = vidResInfo;  						contract.VideoSource = Constants.NO_SOURCE_INFO;  						contract.VideoBitDepth = bitDepth;  						contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  						contract.NormalEpisodeNumbers = new List<int> ();  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  						vidQuals.Add (contract);  					}  				}  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: foreach (AnimeEpisode animeEp in eps) {  	//AnimeEpisode animeEp = eps[0];  	if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  		start = DateTime.Now;  		AniDB_Episode anidbEp = animeEp.AniDB_Episode;  		ts = DateTime.Now - start;  		timingAniEps += ts.TotalMilliseconds;  		// get the anibd file info  		start = DateTime.Now;  		AniDB_File aniFile = vid.GetAniDBFile ();  		ts = DateTime.Now - start;  		timingAniFile += ts.TotalMilliseconds;  		if (aniFile != null) {  			start = DateTime.Now;  			VideoInfo vinfo = vid.VideoInfo;  			ts = DateTime.Now - start;  			timingVidInfo += ts.TotalMilliseconds;  			int bitDepth = 8;  			if (vinfo != null) {  				if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  					bitDepth = 8;  			}  			string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  			// match based on group / video sorce / video res  			bool foundSummaryRecord = false;  			foreach (Contract_GroupVideoQuality contract in vidQuals) {  				string contractSource = SimplifyVideoSource (contract.VideoSource);  				string fileSource = SimplifyVideoSource (aniFile.File_Source);  				string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  				if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  					foundSummaryRecord = true;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  				}  			}  			if (!foundSummaryRecord) {  				Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  				contract.FileCountNormal = 0;  				contract.FileCountSpecials = 0;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				contract.GroupName = aniFile.Anime_GroupName;  				contract.GroupNameShort = aniFile.Anime_GroupNameShort;  				contract.VideoBitDepth = bitDepth;  				contract.Resolution = vidResAniFile;  				contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  				contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  				contract.NormalEpisodeNumbers = new List<int> ();  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  				vidQuals.Add (contract);  			}  		}  		else {  			// look at the Video Info record  			VideoInfo vinfo = vid.VideoInfo;  			if (vinfo != null) {  				int bitDepth = 8;  				if (vinfo != null) {  					if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  						bitDepth = 8;  				}  				string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  				bool foundSummaryRecord = false;  				foreach (Contract_GroupVideoQuality contract in vidQuals) {  					string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  					if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  						foundSummaryRecord = true;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  					}  				}  				if (!foundSummaryRecord) {  					Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  					contract.FileCountNormal = 0;  					contract.FileCountSpecials = 0;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					contract.GroupName = Constants.NO_GROUP_INFO;  					contract.GroupNameShort = Constants.NO_GROUP_INFO;  					contract.Resolution = vidResInfo;  					contract.VideoSource = Constants.NO_SOURCE_INFO;  					contract.VideoBitDepth = bitDepth;  					contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  					contract.NormalEpisodeNumbers = new List<int> ();  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  					vidQuals.Add (contract);  				}  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: foreach (AnimeEpisode animeEp in eps) {  	//AnimeEpisode animeEp = eps[0];  	if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  		start = DateTime.Now;  		AniDB_Episode anidbEp = animeEp.AniDB_Episode;  		ts = DateTime.Now - start;  		timingAniEps += ts.TotalMilliseconds;  		// get the anibd file info  		start = DateTime.Now;  		AniDB_File aniFile = vid.GetAniDBFile ();  		ts = DateTime.Now - start;  		timingAniFile += ts.TotalMilliseconds;  		if (aniFile != null) {  			start = DateTime.Now;  			VideoInfo vinfo = vid.VideoInfo;  			ts = DateTime.Now - start;  			timingVidInfo += ts.TotalMilliseconds;  			int bitDepth = 8;  			if (vinfo != null) {  				if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  					bitDepth = 8;  			}  			string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  			// match based on group / video sorce / video res  			bool foundSummaryRecord = false;  			foreach (Contract_GroupVideoQuality contract in vidQuals) {  				string contractSource = SimplifyVideoSource (contract.VideoSource);  				string fileSource = SimplifyVideoSource (aniFile.File_Source);  				string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  				if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  					foundSummaryRecord = true;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  				}  			}  			if (!foundSummaryRecord) {  				Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  				contract.FileCountNormal = 0;  				contract.FileCountSpecials = 0;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				contract.GroupName = aniFile.Anime_GroupName;  				contract.GroupNameShort = aniFile.Anime_GroupNameShort;  				contract.VideoBitDepth = bitDepth;  				contract.Resolution = vidResAniFile;  				contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  				contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  				contract.NormalEpisodeNumbers = new List<int> ();  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  				vidQuals.Add (contract);  			}  		}  		else {  			// look at the Video Info record  			VideoInfo vinfo = vid.VideoInfo;  			if (vinfo != null) {  				int bitDepth = 8;  				if (vinfo != null) {  					if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  						bitDepth = 8;  				}  				string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  				bool foundSummaryRecord = false;  				foreach (Contract_GroupVideoQuality contract in vidQuals) {  					string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  					if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  						foundSummaryRecord = true;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  					}  				}  				if (!foundSummaryRecord) {  					Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  					contract.FileCountNormal = 0;  					contract.FileCountSpecials = 0;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					contract.GroupName = Constants.NO_GROUP_INFO;  					contract.GroupNameShort = Constants.NO_GROUP_INFO;  					contract.Resolution = vidResInfo;  					contract.VideoSource = Constants.NO_SOURCE_INFO;  					contract.VideoBitDepth = bitDepth;  					contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  					contract.NormalEpisodeNumbers = new List<int> ();  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  					vidQuals.Add (contract);  				}  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: foreach (AnimeEpisode animeEp in eps) {  	//AnimeEpisode animeEp = eps[0];  	if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  		start = DateTime.Now;  		AniDB_Episode anidbEp = animeEp.AniDB_Episode;  		ts = DateTime.Now - start;  		timingAniEps += ts.TotalMilliseconds;  		// get the anibd file info  		start = DateTime.Now;  		AniDB_File aniFile = vid.GetAniDBFile ();  		ts = DateTime.Now - start;  		timingAniFile += ts.TotalMilliseconds;  		if (aniFile != null) {  			start = DateTime.Now;  			VideoInfo vinfo = vid.VideoInfo;  			ts = DateTime.Now - start;  			timingVidInfo += ts.TotalMilliseconds;  			int bitDepth = 8;  			if (vinfo != null) {  				if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  					bitDepth = 8;  			}  			string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  			// match based on group / video sorce / video res  			bool foundSummaryRecord = false;  			foreach (Contract_GroupVideoQuality contract in vidQuals) {  				string contractSource = SimplifyVideoSource (contract.VideoSource);  				string fileSource = SimplifyVideoSource (aniFile.File_Source);  				string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  				if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  					foundSummaryRecord = true;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  				}  			}  			if (!foundSummaryRecord) {  				Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  				contract.FileCountNormal = 0;  				contract.FileCountSpecials = 0;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				contract.GroupName = aniFile.Anime_GroupName;  				contract.GroupNameShort = aniFile.Anime_GroupNameShort;  				contract.VideoBitDepth = bitDepth;  				contract.Resolution = vidResAniFile;  				contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  				contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  				contract.NormalEpisodeNumbers = new List<int> ();  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  				vidQuals.Add (contract);  			}  		}  		else {  			// look at the Video Info record  			VideoInfo vinfo = vid.VideoInfo;  			if (vinfo != null) {  				int bitDepth = 8;  				if (vinfo != null) {  					if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  						bitDepth = 8;  				}  				string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  				bool foundSummaryRecord = false;  				foreach (Contract_GroupVideoQuality contract in vidQuals) {  					string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  					if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  						foundSummaryRecord = true;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  					}  				}  				if (!foundSummaryRecord) {  					Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  					contract.FileCountNormal = 0;  					contract.FileCountSpecials = 0;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					contract.GroupName = Constants.NO_GROUP_INFO;  					contract.GroupNameShort = Constants.NO_GROUP_INFO;  					contract.Resolution = vidResInfo;  					contract.VideoSource = Constants.NO_SOURCE_INFO;  					contract.VideoBitDepth = bitDepth;  					contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  					contract.NormalEpisodeNumbers = new List<int> ();  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  					vidQuals.Add (contract);  				}  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: foreach (AnimeEpisode animeEp in eps) {  	//AnimeEpisode animeEp = eps[0];  	if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  		start = DateTime.Now;  		AniDB_Episode anidbEp = animeEp.AniDB_Episode;  		ts = DateTime.Now - start;  		timingAniEps += ts.TotalMilliseconds;  		// get the anibd file info  		start = DateTime.Now;  		AniDB_File aniFile = vid.GetAniDBFile ();  		ts = DateTime.Now - start;  		timingAniFile += ts.TotalMilliseconds;  		if (aniFile != null) {  			start = DateTime.Now;  			VideoInfo vinfo = vid.VideoInfo;  			ts = DateTime.Now - start;  			timingVidInfo += ts.TotalMilliseconds;  			int bitDepth = 8;  			if (vinfo != null) {  				if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  					bitDepth = 8;  			}  			string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  			// match based on group / video sorce / video res  			bool foundSummaryRecord = false;  			foreach (Contract_GroupVideoQuality contract in vidQuals) {  				string contractSource = SimplifyVideoSource (contract.VideoSource);  				string fileSource = SimplifyVideoSource (aniFile.File_Source);  				string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  				if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  					foundSummaryRecord = true;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  				}  			}  			if (!foundSummaryRecord) {  				Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  				contract.FileCountNormal = 0;  				contract.FileCountSpecials = 0;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				contract.GroupName = aniFile.Anime_GroupName;  				contract.GroupNameShort = aniFile.Anime_GroupNameShort;  				contract.VideoBitDepth = bitDepth;  				contract.Resolution = vidResAniFile;  				contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  				contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  				contract.NormalEpisodeNumbers = new List<int> ();  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  				vidQuals.Add (contract);  			}  		}  		else {  			// look at the Video Info record  			VideoInfo vinfo = vid.VideoInfo;  			if (vinfo != null) {  				int bitDepth = 8;  				if (vinfo != null) {  					if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  						bitDepth = 8;  				}  				string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  				bool foundSummaryRecord = false;  				foreach (Contract_GroupVideoQuality contract in vidQuals) {  					string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  					if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  						foundSummaryRecord = true;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  							contract.FileCountNormal++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  							contract.FileCountSpecials++;  						if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  							if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  								contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  						}  					}  				}  				if (!foundSummaryRecord) {  					Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  					contract.FileCountNormal = 0;  					contract.FileCountSpecials = 0;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					contract.GroupName = Constants.NO_GROUP_INFO;  					contract.GroupNameShort = Constants.NO_GROUP_INFO;  					contract.Resolution = vidResInfo;  					contract.VideoSource = Constants.NO_SOURCE_INFO;  					contract.VideoBitDepth = bitDepth;  					contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  					contract.NormalEpisodeNumbers = new List<int> ();  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  					vidQuals.Add (contract);  				}  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  	start = DateTime.Now;  	AniDB_Episode anidbEp = animeEp.AniDB_Episode;  	ts = DateTime.Now - start;  	timingAniEps += ts.TotalMilliseconds;  	// get the anibd file info  	start = DateTime.Now;  	AniDB_File aniFile = vid.GetAniDBFile ();  	ts = DateTime.Now - start;  	timingAniFile += ts.TotalMilliseconds;  	if (aniFile != null) {  		start = DateTime.Now;  		VideoInfo vinfo = vid.VideoInfo;  		ts = DateTime.Now - start;  		timingVidInfo += ts.TotalMilliseconds;  		int bitDepth = 8;  		if (vinfo != null) {  			if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  				bitDepth = 8;  		}  		string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  		// match based on group / video sorce / video res  		bool foundSummaryRecord = false;  		foreach (Contract_GroupVideoQuality contract in vidQuals) {  			string contractSource = SimplifyVideoSource (contract.VideoSource);  			string fileSource = SimplifyVideoSource (aniFile.File_Source);  			string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  			if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  				foundSummaryRecord = true;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  			}  		}  		if (!foundSummaryRecord) {  			Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  			contract.FileCountNormal = 0;  			contract.FileCountSpecials = 0;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			contract.GroupName = aniFile.Anime_GroupName;  			contract.GroupNameShort = aniFile.Anime_GroupNameShort;  			contract.VideoBitDepth = bitDepth;  			contract.Resolution = vidResAniFile;  			contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  			contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  			contract.NormalEpisodeNumbers = new List<int> ();  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  			vidQuals.Add (contract);  		}  	}  	else {  		// look at the Video Info record  		VideoInfo vinfo = vid.VideoInfo;  		if (vinfo != null) {  			int bitDepth = 8;  			if (vinfo != null) {  				if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  					bitDepth = 8;  			}  			string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  			bool foundSummaryRecord = false;  			foreach (Contract_GroupVideoQuality contract in vidQuals) {  				string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  				if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  					foundSummaryRecord = true;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  				}  			}  			if (!foundSummaryRecord) {  				Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  				contract.FileCountNormal = 0;  				contract.FileCountSpecials = 0;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				contract.GroupName = Constants.NO_GROUP_INFO;  				contract.GroupNameShort = Constants.NO_GROUP_INFO;  				contract.Resolution = vidResInfo;  				contract.VideoSource = Constants.NO_SOURCE_INFO;  				contract.VideoBitDepth = bitDepth;  				contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  				contract.NormalEpisodeNumbers = new List<int> ();  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  				vidQuals.Add (contract);  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  	start = DateTime.Now;  	AniDB_Episode anidbEp = animeEp.AniDB_Episode;  	ts = DateTime.Now - start;  	timingAniEps += ts.TotalMilliseconds;  	// get the anibd file info  	start = DateTime.Now;  	AniDB_File aniFile = vid.GetAniDBFile ();  	ts = DateTime.Now - start;  	timingAniFile += ts.TotalMilliseconds;  	if (aniFile != null) {  		start = DateTime.Now;  		VideoInfo vinfo = vid.VideoInfo;  		ts = DateTime.Now - start;  		timingVidInfo += ts.TotalMilliseconds;  		int bitDepth = 8;  		if (vinfo != null) {  			if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  				bitDepth = 8;  		}  		string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  		// match based on group / video sorce / video res  		bool foundSummaryRecord = false;  		foreach (Contract_GroupVideoQuality contract in vidQuals) {  			string contractSource = SimplifyVideoSource (contract.VideoSource);  			string fileSource = SimplifyVideoSource (aniFile.File_Source);  			string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  			if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  				foundSummaryRecord = true;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  			}  		}  		if (!foundSummaryRecord) {  			Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  			contract.FileCountNormal = 0;  			contract.FileCountSpecials = 0;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			contract.GroupName = aniFile.Anime_GroupName;  			contract.GroupNameShort = aniFile.Anime_GroupNameShort;  			contract.VideoBitDepth = bitDepth;  			contract.Resolution = vidResAniFile;  			contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  			contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  			contract.NormalEpisodeNumbers = new List<int> ();  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  			vidQuals.Add (contract);  		}  	}  	else {  		// look at the Video Info record  		VideoInfo vinfo = vid.VideoInfo;  		if (vinfo != null) {  			int bitDepth = 8;  			if (vinfo != null) {  				if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  					bitDepth = 8;  			}  			string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  			bool foundSummaryRecord = false;  			foreach (Contract_GroupVideoQuality contract in vidQuals) {  				string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  				if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  					foundSummaryRecord = true;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  				}  			}  			if (!foundSummaryRecord) {  				Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  				contract.FileCountNormal = 0;  				contract.FileCountSpecials = 0;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				contract.GroupName = Constants.NO_GROUP_INFO;  				contract.GroupNameShort = Constants.NO_GROUP_INFO;  				contract.Resolution = vidResInfo;  				contract.VideoSource = Constants.NO_SOURCE_INFO;  				contract.VideoBitDepth = bitDepth;  				contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  				contract.NormalEpisodeNumbers = new List<int> ();  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  				vidQuals.Add (contract);  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  	start = DateTime.Now;  	AniDB_Episode anidbEp = animeEp.AniDB_Episode;  	ts = DateTime.Now - start;  	timingAniEps += ts.TotalMilliseconds;  	// get the anibd file info  	start = DateTime.Now;  	AniDB_File aniFile = vid.GetAniDBFile ();  	ts = DateTime.Now - start;  	timingAniFile += ts.TotalMilliseconds;  	if (aniFile != null) {  		start = DateTime.Now;  		VideoInfo vinfo = vid.VideoInfo;  		ts = DateTime.Now - start;  		timingVidInfo += ts.TotalMilliseconds;  		int bitDepth = 8;  		if (vinfo != null) {  			if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  				bitDepth = 8;  		}  		string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  		// match based on group / video sorce / video res  		bool foundSummaryRecord = false;  		foreach (Contract_GroupVideoQuality contract in vidQuals) {  			string contractSource = SimplifyVideoSource (contract.VideoSource);  			string fileSource = SimplifyVideoSource (aniFile.File_Source);  			string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  			if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  				foundSummaryRecord = true;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  			}  		}  		if (!foundSummaryRecord) {  			Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  			contract.FileCountNormal = 0;  			contract.FileCountSpecials = 0;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			contract.GroupName = aniFile.Anime_GroupName;  			contract.GroupNameShort = aniFile.Anime_GroupNameShort;  			contract.VideoBitDepth = bitDepth;  			contract.Resolution = vidResAniFile;  			contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  			contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  			contract.NormalEpisodeNumbers = new List<int> ();  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  			vidQuals.Add (contract);  		}  	}  	else {  		// look at the Video Info record  		VideoInfo vinfo = vid.VideoInfo;  		if (vinfo != null) {  			int bitDepth = 8;  			if (vinfo != null) {  				if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  					bitDepth = 8;  			}  			string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  			bool foundSummaryRecord = false;  			foreach (Contract_GroupVideoQuality contract in vidQuals) {  				string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  				if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  					foundSummaryRecord = true;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  				}  			}  			if (!foundSummaryRecord) {  				Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  				contract.FileCountNormal = 0;  				contract.FileCountSpecials = 0;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				contract.GroupName = Constants.NO_GROUP_INFO;  				contract.GroupNameShort = Constants.NO_GROUP_INFO;  				contract.Resolution = vidResInfo;  				contract.VideoSource = Constants.NO_SOURCE_INFO;  				contract.VideoBitDepth = bitDepth;  				contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  				contract.NormalEpisodeNumbers = new List<int> ();  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  				vidQuals.Add (contract);  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode || animeEp.EpisodeTypeEnum == enEpisodeType.Special) {  	start = DateTime.Now;  	AniDB_Episode anidbEp = animeEp.AniDB_Episode;  	ts = DateTime.Now - start;  	timingAniEps += ts.TotalMilliseconds;  	// get the anibd file info  	start = DateTime.Now;  	AniDB_File aniFile = vid.GetAniDBFile ();  	ts = DateTime.Now - start;  	timingAniFile += ts.TotalMilliseconds;  	if (aniFile != null) {  		start = DateTime.Now;  		VideoInfo vinfo = vid.VideoInfo;  		ts = DateTime.Now - start;  		timingVidInfo += ts.TotalMilliseconds;  		int bitDepth = 8;  		if (vinfo != null) {  			if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  				bitDepth = 8;  		}  		string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  		// match based on group / video sorce / video res  		bool foundSummaryRecord = false;  		foreach (Contract_GroupVideoQuality contract in vidQuals) {  			string contractSource = SimplifyVideoSource (contract.VideoSource);  			string fileSource = SimplifyVideoSource (aniFile.File_Source);  			string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  			if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  				foundSummaryRecord = true;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  			}  		}  		if (!foundSummaryRecord) {  			Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  			contract.FileCountNormal = 0;  			contract.FileCountSpecials = 0;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			contract.GroupName = aniFile.Anime_GroupName;  			contract.GroupNameShort = aniFile.Anime_GroupNameShort;  			contract.VideoBitDepth = bitDepth;  			contract.Resolution = vidResAniFile;  			contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  			contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  			contract.NormalEpisodeNumbers = new List<int> ();  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  			vidQuals.Add (contract);  		}  	}  	else {  		// look at the Video Info record  		VideoInfo vinfo = vid.VideoInfo;  		if (vinfo != null) {  			int bitDepth = 8;  			if (vinfo != null) {  				if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  					bitDepth = 8;  			}  			string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  			bool foundSummaryRecord = false;  			foreach (Contract_GroupVideoQuality contract in vidQuals) {  				string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  				if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  					foundSummaryRecord = true;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  						contract.FileCountNormal++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  						contract.FileCountSpecials++;  					if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  						if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  							contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  					}  				}  			}  			if (!foundSummaryRecord) {  				Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  				contract.FileCountNormal = 0;  				contract.FileCountSpecials = 0;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				contract.GroupName = Constants.NO_GROUP_INFO;  				contract.GroupNameShort = Constants.NO_GROUP_INFO;  				contract.Resolution = vidResInfo;  				contract.VideoSource = Constants.NO_SOURCE_INFO;  				contract.VideoBitDepth = bitDepth;  				contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  				contract.NormalEpisodeNumbers = new List<int> ();  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  				vidQuals.Add (contract);  			}  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (aniFile != null) {  	start = DateTime.Now;  	VideoInfo vinfo = vid.VideoInfo;  	ts = DateTime.Now - start;  	timingVidInfo += ts.TotalMilliseconds;  	int bitDepth = 8;  	if (vinfo != null) {  		if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  			bitDepth = 8;  	}  	string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  	// match based on group / video sorce / video res  	bool foundSummaryRecord = false;  	foreach (Contract_GroupVideoQuality contract in vidQuals) {  		string contractSource = SimplifyVideoSource (contract.VideoSource);  		string fileSource = SimplifyVideoSource (aniFile.File_Source);  		string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  		if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  			foundSummaryRecord = true;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  		}  	}  	if (!foundSummaryRecord) {  		Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  		contract.FileCountNormal = 0;  		contract.FileCountSpecials = 0;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  			contract.FileCountNormal++;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  			contract.FileCountSpecials++;  		contract.GroupName = aniFile.Anime_GroupName;  		contract.GroupNameShort = aniFile.Anime_GroupNameShort;  		contract.VideoBitDepth = bitDepth;  		contract.Resolution = vidResAniFile;  		contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  		contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  		contract.NormalEpisodeNumbers = new List<int> ();  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  			if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  				contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  		}  		vidQuals.Add (contract);  	}  }  else {  	// look at the Video Info record  	VideoInfo vinfo = vid.VideoInfo;  	if (vinfo != null) {  		int bitDepth = 8;  		if (vinfo != null) {  			if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  				bitDepth = 8;  		}  		string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  		bool foundSummaryRecord = false;  		foreach (Contract_GroupVideoQuality contract in vidQuals) {  			string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  			if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  				foundSummaryRecord = true;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  			}  		}  		if (!foundSummaryRecord) {  			Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  			contract.FileCountNormal = 0;  			contract.FileCountSpecials = 0;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			contract.GroupName = Constants.NO_GROUP_INFO;  			contract.GroupNameShort = Constants.NO_GROUP_INFO;  			contract.Resolution = vidResInfo;  			contract.VideoSource = Constants.NO_SOURCE_INFO;  			contract.VideoBitDepth = bitDepth;  			contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  			contract.NormalEpisodeNumbers = new List<int> ();  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  			vidQuals.Add (contract);  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (aniFile != null) {  	start = DateTime.Now;  	VideoInfo vinfo = vid.VideoInfo;  	ts = DateTime.Now - start;  	timingVidInfo += ts.TotalMilliseconds;  	int bitDepth = 8;  	if (vinfo != null) {  		if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  			bitDepth = 8;  	}  	string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  	// match based on group / video sorce / video res  	bool foundSummaryRecord = false;  	foreach (Contract_GroupVideoQuality contract in vidQuals) {  		string contractSource = SimplifyVideoSource (contract.VideoSource);  		string fileSource = SimplifyVideoSource (aniFile.File_Source);  		string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  		if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  			foundSummaryRecord = true;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  		}  	}  	if (!foundSummaryRecord) {  		Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  		contract.FileCountNormal = 0;  		contract.FileCountSpecials = 0;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  			contract.FileCountNormal++;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  			contract.FileCountSpecials++;  		contract.GroupName = aniFile.Anime_GroupName;  		contract.GroupNameShort = aniFile.Anime_GroupNameShort;  		contract.VideoBitDepth = bitDepth;  		contract.Resolution = vidResAniFile;  		contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  		contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  		contract.NormalEpisodeNumbers = new List<int> ();  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  			if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  				contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  		}  		vidQuals.Add (contract);  	}  }  else {  	// look at the Video Info record  	VideoInfo vinfo = vid.VideoInfo;  	if (vinfo != null) {  		int bitDepth = 8;  		if (vinfo != null) {  			if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  				bitDepth = 8;  		}  		string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  		bool foundSummaryRecord = false;  		foreach (Contract_GroupVideoQuality contract in vidQuals) {  			string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  			if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  				foundSummaryRecord = true;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  			}  		}  		if (!foundSummaryRecord) {  			Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  			contract.FileCountNormal = 0;  			contract.FileCountSpecials = 0;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			contract.GroupName = Constants.NO_GROUP_INFO;  			contract.GroupNameShort = Constants.NO_GROUP_INFO;  			contract.Resolution = vidResInfo;  			contract.VideoSource = Constants.NO_SOURCE_INFO;  			contract.VideoBitDepth = bitDepth;  			contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  			contract.NormalEpisodeNumbers = new List<int> ();  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  			vidQuals.Add (contract);  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (aniFile != null) {  	start = DateTime.Now;  	VideoInfo vinfo = vid.VideoInfo;  	ts = DateTime.Now - start;  	timingVidInfo += ts.TotalMilliseconds;  	int bitDepth = 8;  	if (vinfo != null) {  		if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  			bitDepth = 8;  	}  	string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  	// match based on group / video sorce / video res  	bool foundSummaryRecord = false;  	foreach (Contract_GroupVideoQuality contract in vidQuals) {  		string contractSource = SimplifyVideoSource (contract.VideoSource);  		string fileSource = SimplifyVideoSource (aniFile.File_Source);  		string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  		if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  			foundSummaryRecord = true;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  		}  	}  	if (!foundSummaryRecord) {  		Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  		contract.FileCountNormal = 0;  		contract.FileCountSpecials = 0;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  			contract.FileCountNormal++;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  			contract.FileCountSpecials++;  		contract.GroupName = aniFile.Anime_GroupName;  		contract.GroupNameShort = aniFile.Anime_GroupNameShort;  		contract.VideoBitDepth = bitDepth;  		contract.Resolution = vidResAniFile;  		contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  		contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  		contract.NormalEpisodeNumbers = new List<int> ();  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  			if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  				contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  		}  		vidQuals.Add (contract);  	}  }  else {  	// look at the Video Info record  	VideoInfo vinfo = vid.VideoInfo;  	if (vinfo != null) {  		int bitDepth = 8;  		if (vinfo != null) {  			if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  				bitDepth = 8;  		}  		string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  		bool foundSummaryRecord = false;  		foreach (Contract_GroupVideoQuality contract in vidQuals) {  			string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  			if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  				foundSummaryRecord = true;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  			}  		}  		if (!foundSummaryRecord) {  			Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  			contract.FileCountNormal = 0;  			contract.FileCountSpecials = 0;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			contract.GroupName = Constants.NO_GROUP_INFO;  			contract.GroupNameShort = Constants.NO_GROUP_INFO;  			contract.Resolution = vidResInfo;  			contract.VideoSource = Constants.NO_SOURCE_INFO;  			contract.VideoBitDepth = bitDepth;  			contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  			contract.NormalEpisodeNumbers = new List<int> ();  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  			vidQuals.Add (contract);  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (aniFile != null) {  	start = DateTime.Now;  	VideoInfo vinfo = vid.VideoInfo;  	ts = DateTime.Now - start;  	timingVidInfo += ts.TotalMilliseconds;  	int bitDepth = 8;  	if (vinfo != null) {  		if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  			bitDepth = 8;  	}  	string vidResAniFile = Utils.GetStandardisedVideoResolution (aniFile.File_VideoResolution);  	// match based on group / video sorce / video res  	bool foundSummaryRecord = false;  	foreach (Contract_GroupVideoQuality contract in vidQuals) {  		string contractSource = SimplifyVideoSource (contract.VideoSource);  		string fileSource = SimplifyVideoSource (aniFile.File_Source);  		string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  		if (contract.GroupName.Equals (aniFile.Anime_GroupName' StringComparison.InvariantCultureIgnoreCase) && contractSource.Equals (fileSource' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResAniFile' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  			foundSummaryRecord = true;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  		}  	}  	if (!foundSummaryRecord) {  		Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  		contract.FileCountNormal = 0;  		contract.FileCountSpecials = 0;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  			contract.FileCountNormal++;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  			contract.FileCountSpecials++;  		contract.GroupName = aniFile.Anime_GroupName;  		contract.GroupNameShort = aniFile.Anime_GroupNameShort;  		contract.VideoBitDepth = bitDepth;  		contract.Resolution = vidResAniFile;  		contract.VideoSource = SimplifyVideoSource (aniFile.File_Source);  		contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  		contract.NormalEpisodeNumbers = new List<int> ();  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  			if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  				contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  		}  		vidQuals.Add (contract);  	}  }  else {  	// look at the Video Info record  	VideoInfo vinfo = vid.VideoInfo;  	if (vinfo != null) {  		int bitDepth = 8;  		if (vinfo != null) {  			if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  				bitDepth = 8;  		}  		string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  		bool foundSummaryRecord = false;  		foreach (Contract_GroupVideoQuality contract in vidQuals) {  			string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  			if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  				foundSummaryRecord = true;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  					contract.FileCountNormal++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  					contract.FileCountSpecials++;  				if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  					if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  						contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  				}  			}  		}  		if (!foundSummaryRecord) {  			Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  			contract.FileCountNormal = 0;  			contract.FileCountSpecials = 0;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			contract.GroupName = Constants.NO_GROUP_INFO;  			contract.GroupNameShort = Constants.NO_GROUP_INFO;  			contract.Resolution = vidResInfo;  			contract.VideoSource = Constants.NO_SOURCE_INFO;  			contract.VideoBitDepth = bitDepth;  			contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  			contract.NormalEpisodeNumbers = new List<int> ();  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  			vidQuals.Add (contract);  		}  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (vinfo != null) {  	if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  		bitDepth = 8;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  	bitDepth = 8;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: bitDepth = 8;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (vinfo != null) {  	int bitDepth = 8;  	if (vinfo != null) {  		if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  			bitDepth = 8;  	}  	string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  	bool foundSummaryRecord = false;  	foreach (Contract_GroupVideoQuality contract in vidQuals) {  		string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  		if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  			foundSummaryRecord = true;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  		}  	}  	if (!foundSummaryRecord) {  		Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  		contract.FileCountNormal = 0;  		contract.FileCountSpecials = 0;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  			contract.FileCountNormal++;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  			contract.FileCountSpecials++;  		contract.GroupName = Constants.NO_GROUP_INFO;  		contract.GroupNameShort = Constants.NO_GROUP_INFO;  		contract.Resolution = vidResInfo;  		contract.VideoSource = Constants.NO_SOURCE_INFO;  		contract.VideoBitDepth = bitDepth;  		contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  		contract.NormalEpisodeNumbers = new List<int> ();  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  			if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  				contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  		}  		vidQuals.Add (contract);  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (vinfo != null) {  	int bitDepth = 8;  	if (vinfo != null) {  		if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  			bitDepth = 8;  	}  	string vidResInfo = Utils.GetStandardisedVideoResolution (vinfo.VideoResolution);  	bool foundSummaryRecord = false;  	foreach (Contract_GroupVideoQuality contract in vidQuals) {  		string vidResContract = Utils.GetStandardisedVideoResolution (contract.Resolution);  		if (contract.GroupName.Equals (Constants.NO_GROUP_INFO' StringComparison.InvariantCultureIgnoreCase) && contract.VideoSource.Equals (Constants.NO_SOURCE_INFO' StringComparison.InvariantCultureIgnoreCase) && vidResContract.Equals (vidResInfo' StringComparison.InvariantCultureIgnoreCase) && contract.VideoBitDepth == bitDepth) {  			foundSummaryRecord = true;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  				contract.FileCountNormal++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  				contract.FileCountSpecials++;  			if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  				if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  					contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  			}  		}  	}  	if (!foundSummaryRecord) {  		Contract_GroupVideoQuality contract = new Contract_GroupVideoQuality ();  		contract.FileCountNormal = 0;  		contract.FileCountSpecials = 0;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode)  			contract.FileCountNormal++;  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Special)  			contract.FileCountSpecials++;  		contract.GroupName = Constants.NO_GROUP_INFO;  		contract.GroupNameShort = Constants.NO_GROUP_INFO;  		contract.Resolution = vidResInfo;  		contract.VideoSource = Constants.NO_SOURCE_INFO;  		contract.VideoBitDepth = bitDepth;  		contract.Ranking = Utils.GetOverallVideoSourceRanking (contract.Resolution' contract.VideoSource' bitDepth);  		contract.NormalEpisodeNumbers = new List<int> ();  		if (animeEp.EpisodeTypeEnum == enEpisodeType.Episode) {  			if (!contract.NormalEpisodeNumbers.Contains (anidbEp.EpisodeNumber))  				contract.NormalEpisodeNumbers.Add (anidbEp.EpisodeNumber);  		}  		vidQuals.Add (contract);  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (vinfo != null) {  	if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  		bitDepth = 8;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: if (!int.TryParse (vinfo.VideoBitDepth' out bitDepth))  	bitDepth = 8;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: bitDepth = 8;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeForMonth,The following statement contains a magic number: try {  	JMMUser user = repUsers.GetByID (jmmuserID);  	if (user == null)  		return animeList;  	DateTime startDate = new DateTime (year' month' 1' 0' 0' 0);  	DateTime endDate = startDate.AddMonths (1);  	endDate = endDate.AddMinutes (-10);  	List<AniDB_Anime> animes = repAnime.GetForDate (startDate' endDate);  	foreach (AniDB_Anime anime in animes) {  		bool useAnime = true;  		string[] cats = user.HideCategories.ToLower ().Split (''');  		string[] animeCats = anime.AllCategories.ToLower ().Split ('|');  		foreach (string cat in cats) {  			if (!string.IsNullOrEmpty (cat) && animeCats.Contains (cat)) {  				useAnime = false;  				break;  			}  		}  		if (useAnime)  			animeList.Add (anime.ToContract ());  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetAnimeForMonth,The following statement contains a magic number: endDate = endDate.AddMinutes (-10);  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: try {  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AniDB_VoteRepository repVotes = new AniDB_VoteRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	JMMUserRepository repUsers = new JMMUserRepository ();  	JMMUser juser = repUsers.GetByID (userID);  	if (juser == null)  		return recs;  	// get all the anime the user has chosen to ignore  	int ignoreType = 1;  	switch (recommendationType) {  	case 1:  		ignoreType = 1;  		break;  	case 2:  		ignoreType = 2;  		break;  	}  	IgnoreAnimeRepository repIgnore = new IgnoreAnimeRepository ();  	List<IgnoreAnime> ignored = repIgnore.GetByUserAndType (userID' ignoreType);  	Dictionary<int' IgnoreAnime> dictIgnored = new Dictionary<int' Entities.IgnoreAnime> ();  	foreach (IgnoreAnime ign in ignored)  		dictIgnored [ign.AnimeID] = ign;  	// find all the series which the user has rated  	List<AniDB_Vote> allVotes = repVotes.GetAll ();  	if (allVotes.Count == 0)  		return recs;  	// sort by the highest rated  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("VoteValue"' true' SortType.eInteger));  	allVotes = Sorting.MultiSort<AniDB_Vote> (allVotes' sortCriteria);  	Dictionary<int' Contract_Recommendation> dictRecs = new Dictionary<int' Contract_Recommendation> ();  	List<AniDB_Vote> animeVotes = new List<AniDB_Vote> ();  	foreach (AniDB_Vote vote in allVotes) {  		if (vote.VoteType != (int)enAniDBVoteType.Anime && vote.VoteType != (int)enAniDBVoteType.AnimeTemp)  			continue;  		if (dictIgnored.ContainsKey (vote.EntityID))  			continue;  		// check if the user has this anime  		AniDB_Anime anime = repAnime.GetByAnimeID (vote.EntityID);  		if (anime == null)  			continue;  		// get similar anime  		List<AniDB_Anime_Similar> simAnime = anime.GetSimilarAnime ();  		// sort by the highest approval  		sortCriteria = new List<SortPropOrFieldAndDirection> ();  		sortCriteria.Add (new SortPropOrFieldAndDirection ("ApprovalPercentage"' true' SortType.eDoubleOrFloat));  		simAnime = Sorting.MultiSort<AniDB_Anime_Similar> (simAnime' sortCriteria);  		foreach (AniDB_Anime_Similar link in simAnime) {  			if (dictIgnored.ContainsKey (link.SimilarAnimeID))  				continue;  			AniDB_Anime animeLink = repAnime.GetByAnimeID (link.SimilarAnimeID);  			if (animeLink != null)  				if (!juser.AllowedAnime (animeLink))  					continue;  			// don't recommend to watch anime that the user doesn't have  			if (animeLink == null && recommendationType == 1)  				continue;  			// don't recommend to watch series that the user doesn't have  			AnimeSeries ser = repSeries.GetByAnimeID (link.SimilarAnimeID);  			if (ser == null && recommendationType == 1)  				continue;  			if (ser != null) {  				// don't recommend to watch series that the user has already started watching  				AnimeSeries_User userRecord = ser.GetUserRecord (userID);  				if (userRecord != null) {  					if (userRecord.WatchedEpisodeCount > 0 && recommendationType == 1)  						continue;  				}  				// don't recommend to download anime that the user has files for  				if (ser.LatestLocalEpisodeNumber > 0 && recommendationType == 2)  					continue;  			}  			Contract_Recommendation rec = new Contract_Recommendation ();  			rec.BasedOnAnimeID = anime.AnimeID;  			rec.RecommendedAnimeID = link.SimilarAnimeID;  			// if we don't have the anime locally. lets assume the anime has a high rating  			decimal animeRating = 850;  			if (animeLink != null)  				animeRating = animeLink.AniDBRating;  			rec.Score = CalculateRecommendationScore (vote.VoteValue' link.ApprovalPercentage' animeRating);  			rec.BasedOnVoteValue = vote.VoteValue;  			rec.RecommendedApproval = link.ApprovalPercentage;  			// check if we have added this recommendation before  			// this might happen where animes are recommended based on different votes  			// and could end up with different scores  			if (dictRecs.ContainsKey (rec.RecommendedAnimeID)) {  				if (rec.Score < dictRecs [rec.RecommendedAnimeID].Score)  					continue;  			}  			rec.Recommended_AniDB_Anime = null;  			if (animeLink != null)  				rec.Recommended_AniDB_Anime = animeLink.ToContract ();  			rec.BasedOn_AniDB_Anime = anime.ToContract ();  			rec.Recommended_AnimeSeries = null;  			if (ser != null)  				rec.Recommended_AnimeSeries = ser.ToContract (ser.GetUserRecord (userID));  			AnimeSeries serBasedOn = repSeries.GetByAnimeID (anime.AnimeID);  			if (serBasedOn == null)  				continue;  			rec.BasedOn_AnimeSeries = serBasedOn.ToContract (serBasedOn.GetUserRecord (userID));  			dictRecs [rec.RecommendedAnimeID] = rec;  		}  	}  	List<Contract_Recommendation> tempRecs = new List<Contract_Recommendation> ();  	foreach (Contract_Recommendation rec in dictRecs.Values)  		tempRecs.Add (rec);  	// sort by the highest score  	sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("Score"' true' SortType.eDoubleOrFloat));  	tempRecs = Sorting.MultiSort<Contract_Recommendation> (tempRecs' sortCriteria);  	int numRecs = 0;  	foreach (Contract_Recommendation rec in tempRecs) {  		if (numRecs == maxResults)  			break;  		recs.Add (rec);  		numRecs++;  	}  	if (recs.Count == 0)  		return recs;  	return recs;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return recs;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: try {  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AniDB_VoteRepository repVotes = new AniDB_VoteRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	JMMUserRepository repUsers = new JMMUserRepository ();  	JMMUser juser = repUsers.GetByID (userID);  	if (juser == null)  		return recs;  	// get all the anime the user has chosen to ignore  	int ignoreType = 1;  	switch (recommendationType) {  	case 1:  		ignoreType = 1;  		break;  	case 2:  		ignoreType = 2;  		break;  	}  	IgnoreAnimeRepository repIgnore = new IgnoreAnimeRepository ();  	List<IgnoreAnime> ignored = repIgnore.GetByUserAndType (userID' ignoreType);  	Dictionary<int' IgnoreAnime> dictIgnored = new Dictionary<int' Entities.IgnoreAnime> ();  	foreach (IgnoreAnime ign in ignored)  		dictIgnored [ign.AnimeID] = ign;  	// find all the series which the user has rated  	List<AniDB_Vote> allVotes = repVotes.GetAll ();  	if (allVotes.Count == 0)  		return recs;  	// sort by the highest rated  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("VoteValue"' true' SortType.eInteger));  	allVotes = Sorting.MultiSort<AniDB_Vote> (allVotes' sortCriteria);  	Dictionary<int' Contract_Recommendation> dictRecs = new Dictionary<int' Contract_Recommendation> ();  	List<AniDB_Vote> animeVotes = new List<AniDB_Vote> ();  	foreach (AniDB_Vote vote in allVotes) {  		if (vote.VoteType != (int)enAniDBVoteType.Anime && vote.VoteType != (int)enAniDBVoteType.AnimeTemp)  			continue;  		if (dictIgnored.ContainsKey (vote.EntityID))  			continue;  		// check if the user has this anime  		AniDB_Anime anime = repAnime.GetByAnimeID (vote.EntityID);  		if (anime == null)  			continue;  		// get similar anime  		List<AniDB_Anime_Similar> simAnime = anime.GetSimilarAnime ();  		// sort by the highest approval  		sortCriteria = new List<SortPropOrFieldAndDirection> ();  		sortCriteria.Add (new SortPropOrFieldAndDirection ("ApprovalPercentage"' true' SortType.eDoubleOrFloat));  		simAnime = Sorting.MultiSort<AniDB_Anime_Similar> (simAnime' sortCriteria);  		foreach (AniDB_Anime_Similar link in simAnime) {  			if (dictIgnored.ContainsKey (link.SimilarAnimeID))  				continue;  			AniDB_Anime animeLink = repAnime.GetByAnimeID (link.SimilarAnimeID);  			if (animeLink != null)  				if (!juser.AllowedAnime (animeLink))  					continue;  			// don't recommend to watch anime that the user doesn't have  			if (animeLink == null && recommendationType == 1)  				continue;  			// don't recommend to watch series that the user doesn't have  			AnimeSeries ser = repSeries.GetByAnimeID (link.SimilarAnimeID);  			if (ser == null && recommendationType == 1)  				continue;  			if (ser != null) {  				// don't recommend to watch series that the user has already started watching  				AnimeSeries_User userRecord = ser.GetUserRecord (userID);  				if (userRecord != null) {  					if (userRecord.WatchedEpisodeCount > 0 && recommendationType == 1)  						continue;  				}  				// don't recommend to download anime that the user has files for  				if (ser.LatestLocalEpisodeNumber > 0 && recommendationType == 2)  					continue;  			}  			Contract_Recommendation rec = new Contract_Recommendation ();  			rec.BasedOnAnimeID = anime.AnimeID;  			rec.RecommendedAnimeID = link.SimilarAnimeID;  			// if we don't have the anime locally. lets assume the anime has a high rating  			decimal animeRating = 850;  			if (animeLink != null)  				animeRating = animeLink.AniDBRating;  			rec.Score = CalculateRecommendationScore (vote.VoteValue' link.ApprovalPercentage' animeRating);  			rec.BasedOnVoteValue = vote.VoteValue;  			rec.RecommendedApproval = link.ApprovalPercentage;  			// check if we have added this recommendation before  			// this might happen where animes are recommended based on different votes  			// and could end up with different scores  			if (dictRecs.ContainsKey (rec.RecommendedAnimeID)) {  				if (rec.Score < dictRecs [rec.RecommendedAnimeID].Score)  					continue;  			}  			rec.Recommended_AniDB_Anime = null;  			if (animeLink != null)  				rec.Recommended_AniDB_Anime = animeLink.ToContract ();  			rec.BasedOn_AniDB_Anime = anime.ToContract ();  			rec.Recommended_AnimeSeries = null;  			if (ser != null)  				rec.Recommended_AnimeSeries = ser.ToContract (ser.GetUserRecord (userID));  			AnimeSeries serBasedOn = repSeries.GetByAnimeID (anime.AnimeID);  			if (serBasedOn == null)  				continue;  			rec.BasedOn_AnimeSeries = serBasedOn.ToContract (serBasedOn.GetUserRecord (userID));  			dictRecs [rec.RecommendedAnimeID] = rec;  		}  	}  	List<Contract_Recommendation> tempRecs = new List<Contract_Recommendation> ();  	foreach (Contract_Recommendation rec in dictRecs.Values)  		tempRecs.Add (rec);  	// sort by the highest score  	sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("Score"' true' SortType.eDoubleOrFloat));  	tempRecs = Sorting.MultiSort<Contract_Recommendation> (tempRecs' sortCriteria);  	int numRecs = 0;  	foreach (Contract_Recommendation rec in tempRecs) {  		if (numRecs == maxResults)  			break;  		recs.Add (rec);  		numRecs++;  	}  	if (recs.Count == 0)  		return recs;  	return recs;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return recs;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: try {  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AniDB_VoteRepository repVotes = new AniDB_VoteRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	JMMUserRepository repUsers = new JMMUserRepository ();  	JMMUser juser = repUsers.GetByID (userID);  	if (juser == null)  		return recs;  	// get all the anime the user has chosen to ignore  	int ignoreType = 1;  	switch (recommendationType) {  	case 1:  		ignoreType = 1;  		break;  	case 2:  		ignoreType = 2;  		break;  	}  	IgnoreAnimeRepository repIgnore = new IgnoreAnimeRepository ();  	List<IgnoreAnime> ignored = repIgnore.GetByUserAndType (userID' ignoreType);  	Dictionary<int' IgnoreAnime> dictIgnored = new Dictionary<int' Entities.IgnoreAnime> ();  	foreach (IgnoreAnime ign in ignored)  		dictIgnored [ign.AnimeID] = ign;  	// find all the series which the user has rated  	List<AniDB_Vote> allVotes = repVotes.GetAll ();  	if (allVotes.Count == 0)  		return recs;  	// sort by the highest rated  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("VoteValue"' true' SortType.eInteger));  	allVotes = Sorting.MultiSort<AniDB_Vote> (allVotes' sortCriteria);  	Dictionary<int' Contract_Recommendation> dictRecs = new Dictionary<int' Contract_Recommendation> ();  	List<AniDB_Vote> animeVotes = new List<AniDB_Vote> ();  	foreach (AniDB_Vote vote in allVotes) {  		if (vote.VoteType != (int)enAniDBVoteType.Anime && vote.VoteType != (int)enAniDBVoteType.AnimeTemp)  			continue;  		if (dictIgnored.ContainsKey (vote.EntityID))  			continue;  		// check if the user has this anime  		AniDB_Anime anime = repAnime.GetByAnimeID (vote.EntityID);  		if (anime == null)  			continue;  		// get similar anime  		List<AniDB_Anime_Similar> simAnime = anime.GetSimilarAnime ();  		// sort by the highest approval  		sortCriteria = new List<SortPropOrFieldAndDirection> ();  		sortCriteria.Add (new SortPropOrFieldAndDirection ("ApprovalPercentage"' true' SortType.eDoubleOrFloat));  		simAnime = Sorting.MultiSort<AniDB_Anime_Similar> (simAnime' sortCriteria);  		foreach (AniDB_Anime_Similar link in simAnime) {  			if (dictIgnored.ContainsKey (link.SimilarAnimeID))  				continue;  			AniDB_Anime animeLink = repAnime.GetByAnimeID (link.SimilarAnimeID);  			if (animeLink != null)  				if (!juser.AllowedAnime (animeLink))  					continue;  			// don't recommend to watch anime that the user doesn't have  			if (animeLink == null && recommendationType == 1)  				continue;  			// don't recommend to watch series that the user doesn't have  			AnimeSeries ser = repSeries.GetByAnimeID (link.SimilarAnimeID);  			if (ser == null && recommendationType == 1)  				continue;  			if (ser != null) {  				// don't recommend to watch series that the user has already started watching  				AnimeSeries_User userRecord = ser.GetUserRecord (userID);  				if (userRecord != null) {  					if (userRecord.WatchedEpisodeCount > 0 && recommendationType == 1)  						continue;  				}  				// don't recommend to download anime that the user has files for  				if (ser.LatestLocalEpisodeNumber > 0 && recommendationType == 2)  					continue;  			}  			Contract_Recommendation rec = new Contract_Recommendation ();  			rec.BasedOnAnimeID = anime.AnimeID;  			rec.RecommendedAnimeID = link.SimilarAnimeID;  			// if we don't have the anime locally. lets assume the anime has a high rating  			decimal animeRating = 850;  			if (animeLink != null)  				animeRating = animeLink.AniDBRating;  			rec.Score = CalculateRecommendationScore (vote.VoteValue' link.ApprovalPercentage' animeRating);  			rec.BasedOnVoteValue = vote.VoteValue;  			rec.RecommendedApproval = link.ApprovalPercentage;  			// check if we have added this recommendation before  			// this might happen where animes are recommended based on different votes  			// and could end up with different scores  			if (dictRecs.ContainsKey (rec.RecommendedAnimeID)) {  				if (rec.Score < dictRecs [rec.RecommendedAnimeID].Score)  					continue;  			}  			rec.Recommended_AniDB_Anime = null;  			if (animeLink != null)  				rec.Recommended_AniDB_Anime = animeLink.ToContract ();  			rec.BasedOn_AniDB_Anime = anime.ToContract ();  			rec.Recommended_AnimeSeries = null;  			if (ser != null)  				rec.Recommended_AnimeSeries = ser.ToContract (ser.GetUserRecord (userID));  			AnimeSeries serBasedOn = repSeries.GetByAnimeID (anime.AnimeID);  			if (serBasedOn == null)  				continue;  			rec.BasedOn_AnimeSeries = serBasedOn.ToContract (serBasedOn.GetUserRecord (userID));  			dictRecs [rec.RecommendedAnimeID] = rec;  		}  	}  	List<Contract_Recommendation> tempRecs = new List<Contract_Recommendation> ();  	foreach (Contract_Recommendation rec in dictRecs.Values)  		tempRecs.Add (rec);  	// sort by the highest score  	sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("Score"' true' SortType.eDoubleOrFloat));  	tempRecs = Sorting.MultiSort<Contract_Recommendation> (tempRecs' sortCriteria);  	int numRecs = 0;  	foreach (Contract_Recommendation rec in tempRecs) {  		if (numRecs == maxResults)  			break;  		recs.Add (rec);  		numRecs++;  	}  	if (recs.Count == 0)  		return recs;  	return recs;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return recs;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: try {  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AniDB_VoteRepository repVotes = new AniDB_VoteRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	JMMUserRepository repUsers = new JMMUserRepository ();  	JMMUser juser = repUsers.GetByID (userID);  	if (juser == null)  		return recs;  	// get all the anime the user has chosen to ignore  	int ignoreType = 1;  	switch (recommendationType) {  	case 1:  		ignoreType = 1;  		break;  	case 2:  		ignoreType = 2;  		break;  	}  	IgnoreAnimeRepository repIgnore = new IgnoreAnimeRepository ();  	List<IgnoreAnime> ignored = repIgnore.GetByUserAndType (userID' ignoreType);  	Dictionary<int' IgnoreAnime> dictIgnored = new Dictionary<int' Entities.IgnoreAnime> ();  	foreach (IgnoreAnime ign in ignored)  		dictIgnored [ign.AnimeID] = ign;  	// find all the series which the user has rated  	List<AniDB_Vote> allVotes = repVotes.GetAll ();  	if (allVotes.Count == 0)  		return recs;  	// sort by the highest rated  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("VoteValue"' true' SortType.eInteger));  	allVotes = Sorting.MultiSort<AniDB_Vote> (allVotes' sortCriteria);  	Dictionary<int' Contract_Recommendation> dictRecs = new Dictionary<int' Contract_Recommendation> ();  	List<AniDB_Vote> animeVotes = new List<AniDB_Vote> ();  	foreach (AniDB_Vote vote in allVotes) {  		if (vote.VoteType != (int)enAniDBVoteType.Anime && vote.VoteType != (int)enAniDBVoteType.AnimeTemp)  			continue;  		if (dictIgnored.ContainsKey (vote.EntityID))  			continue;  		// check if the user has this anime  		AniDB_Anime anime = repAnime.GetByAnimeID (vote.EntityID);  		if (anime == null)  			continue;  		// get similar anime  		List<AniDB_Anime_Similar> simAnime = anime.GetSimilarAnime ();  		// sort by the highest approval  		sortCriteria = new List<SortPropOrFieldAndDirection> ();  		sortCriteria.Add (new SortPropOrFieldAndDirection ("ApprovalPercentage"' true' SortType.eDoubleOrFloat));  		simAnime = Sorting.MultiSort<AniDB_Anime_Similar> (simAnime' sortCriteria);  		foreach (AniDB_Anime_Similar link in simAnime) {  			if (dictIgnored.ContainsKey (link.SimilarAnimeID))  				continue;  			AniDB_Anime animeLink = repAnime.GetByAnimeID (link.SimilarAnimeID);  			if (animeLink != null)  				if (!juser.AllowedAnime (animeLink))  					continue;  			// don't recommend to watch anime that the user doesn't have  			if (animeLink == null && recommendationType == 1)  				continue;  			// don't recommend to watch series that the user doesn't have  			AnimeSeries ser = repSeries.GetByAnimeID (link.SimilarAnimeID);  			if (ser == null && recommendationType == 1)  				continue;  			if (ser != null) {  				// don't recommend to watch series that the user has already started watching  				AnimeSeries_User userRecord = ser.GetUserRecord (userID);  				if (userRecord != null) {  					if (userRecord.WatchedEpisodeCount > 0 && recommendationType == 1)  						continue;  				}  				// don't recommend to download anime that the user has files for  				if (ser.LatestLocalEpisodeNumber > 0 && recommendationType == 2)  					continue;  			}  			Contract_Recommendation rec = new Contract_Recommendation ();  			rec.BasedOnAnimeID = anime.AnimeID;  			rec.RecommendedAnimeID = link.SimilarAnimeID;  			// if we don't have the anime locally. lets assume the anime has a high rating  			decimal animeRating = 850;  			if (animeLink != null)  				animeRating = animeLink.AniDBRating;  			rec.Score = CalculateRecommendationScore (vote.VoteValue' link.ApprovalPercentage' animeRating);  			rec.BasedOnVoteValue = vote.VoteValue;  			rec.RecommendedApproval = link.ApprovalPercentage;  			// check if we have added this recommendation before  			// this might happen where animes are recommended based on different votes  			// and could end up with different scores  			if (dictRecs.ContainsKey (rec.RecommendedAnimeID)) {  				if (rec.Score < dictRecs [rec.RecommendedAnimeID].Score)  					continue;  			}  			rec.Recommended_AniDB_Anime = null;  			if (animeLink != null)  				rec.Recommended_AniDB_Anime = animeLink.ToContract ();  			rec.BasedOn_AniDB_Anime = anime.ToContract ();  			rec.Recommended_AnimeSeries = null;  			if (ser != null)  				rec.Recommended_AnimeSeries = ser.ToContract (ser.GetUserRecord (userID));  			AnimeSeries serBasedOn = repSeries.GetByAnimeID (anime.AnimeID);  			if (serBasedOn == null)  				continue;  			rec.BasedOn_AnimeSeries = serBasedOn.ToContract (serBasedOn.GetUserRecord (userID));  			dictRecs [rec.RecommendedAnimeID] = rec;  		}  	}  	List<Contract_Recommendation> tempRecs = new List<Contract_Recommendation> ();  	foreach (Contract_Recommendation rec in dictRecs.Values)  		tempRecs.Add (rec);  	// sort by the highest score  	sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("Score"' true' SortType.eDoubleOrFloat));  	tempRecs = Sorting.MultiSort<Contract_Recommendation> (tempRecs' sortCriteria);  	int numRecs = 0;  	foreach (Contract_Recommendation rec in tempRecs) {  		if (numRecs == maxResults)  			break;  		recs.Add (rec);  		numRecs++;  	}  	if (recs.Count == 0)  		return recs;  	return recs;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return recs;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: switch (recommendationType) {  case 1:  	ignoreType = 1;  	break;  case 2:  	ignoreType = 2;  	break;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: switch (recommendationType) {  case 1:  	ignoreType = 1;  	break;  case 2:  	ignoreType = 2;  	break;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: ignoreType = 2;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: foreach (AniDB_Vote vote in allVotes) {  	if (vote.VoteType != (int)enAniDBVoteType.Anime && vote.VoteType != (int)enAniDBVoteType.AnimeTemp)  		continue;  	if (dictIgnored.ContainsKey (vote.EntityID))  		continue;  	// check if the user has this anime  	AniDB_Anime anime = repAnime.GetByAnimeID (vote.EntityID);  	if (anime == null)  		continue;  	// get similar anime  	List<AniDB_Anime_Similar> simAnime = anime.GetSimilarAnime ();  	// sort by the highest approval  	sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("ApprovalPercentage"' true' SortType.eDoubleOrFloat));  	simAnime = Sorting.MultiSort<AniDB_Anime_Similar> (simAnime' sortCriteria);  	foreach (AniDB_Anime_Similar link in simAnime) {  		if (dictIgnored.ContainsKey (link.SimilarAnimeID))  			continue;  		AniDB_Anime animeLink = repAnime.GetByAnimeID (link.SimilarAnimeID);  		if (animeLink != null)  			if (!juser.AllowedAnime (animeLink))  				continue;  		// don't recommend to watch anime that the user doesn't have  		if (animeLink == null && recommendationType == 1)  			continue;  		// don't recommend to watch series that the user doesn't have  		AnimeSeries ser = repSeries.GetByAnimeID (link.SimilarAnimeID);  		if (ser == null && recommendationType == 1)  			continue;  		if (ser != null) {  			// don't recommend to watch series that the user has already started watching  			AnimeSeries_User userRecord = ser.GetUserRecord (userID);  			if (userRecord != null) {  				if (userRecord.WatchedEpisodeCount > 0 && recommendationType == 1)  					continue;  			}  			// don't recommend to download anime that the user has files for  			if (ser.LatestLocalEpisodeNumber > 0 && recommendationType == 2)  				continue;  		}  		Contract_Recommendation rec = new Contract_Recommendation ();  		rec.BasedOnAnimeID = anime.AnimeID;  		rec.RecommendedAnimeID = link.SimilarAnimeID;  		// if we don't have the anime locally. lets assume the anime has a high rating  		decimal animeRating = 850;  		if (animeLink != null)  			animeRating = animeLink.AniDBRating;  		rec.Score = CalculateRecommendationScore (vote.VoteValue' link.ApprovalPercentage' animeRating);  		rec.BasedOnVoteValue = vote.VoteValue;  		rec.RecommendedApproval = link.ApprovalPercentage;  		// check if we have added this recommendation before  		// this might happen where animes are recommended based on different votes  		// and could end up with different scores  		if (dictRecs.ContainsKey (rec.RecommendedAnimeID)) {  			if (rec.Score < dictRecs [rec.RecommendedAnimeID].Score)  				continue;  		}  		rec.Recommended_AniDB_Anime = null;  		if (animeLink != null)  			rec.Recommended_AniDB_Anime = animeLink.ToContract ();  		rec.BasedOn_AniDB_Anime = anime.ToContract ();  		rec.Recommended_AnimeSeries = null;  		if (ser != null)  			rec.Recommended_AnimeSeries = ser.ToContract (ser.GetUserRecord (userID));  		AnimeSeries serBasedOn = repSeries.GetByAnimeID (anime.AnimeID);  		if (serBasedOn == null)  			continue;  		rec.BasedOn_AnimeSeries = serBasedOn.ToContract (serBasedOn.GetUserRecord (userID));  		dictRecs [rec.RecommendedAnimeID] = rec;  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: foreach (AniDB_Vote vote in allVotes) {  	if (vote.VoteType != (int)enAniDBVoteType.Anime && vote.VoteType != (int)enAniDBVoteType.AnimeTemp)  		continue;  	if (dictIgnored.ContainsKey (vote.EntityID))  		continue;  	// check if the user has this anime  	AniDB_Anime anime = repAnime.GetByAnimeID (vote.EntityID);  	if (anime == null)  		continue;  	// get similar anime  	List<AniDB_Anime_Similar> simAnime = anime.GetSimilarAnime ();  	// sort by the highest approval  	sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("ApprovalPercentage"' true' SortType.eDoubleOrFloat));  	simAnime = Sorting.MultiSort<AniDB_Anime_Similar> (simAnime' sortCriteria);  	foreach (AniDB_Anime_Similar link in simAnime) {  		if (dictIgnored.ContainsKey (link.SimilarAnimeID))  			continue;  		AniDB_Anime animeLink = repAnime.GetByAnimeID (link.SimilarAnimeID);  		if (animeLink != null)  			if (!juser.AllowedAnime (animeLink))  				continue;  		// don't recommend to watch anime that the user doesn't have  		if (animeLink == null && recommendationType == 1)  			continue;  		// don't recommend to watch series that the user doesn't have  		AnimeSeries ser = repSeries.GetByAnimeID (link.SimilarAnimeID);  		if (ser == null && recommendationType == 1)  			continue;  		if (ser != null) {  			// don't recommend to watch series that the user has already started watching  			AnimeSeries_User userRecord = ser.GetUserRecord (userID);  			if (userRecord != null) {  				if (userRecord.WatchedEpisodeCount > 0 && recommendationType == 1)  					continue;  			}  			// don't recommend to download anime that the user has files for  			if (ser.LatestLocalEpisodeNumber > 0 && recommendationType == 2)  				continue;  		}  		Contract_Recommendation rec = new Contract_Recommendation ();  		rec.BasedOnAnimeID = anime.AnimeID;  		rec.RecommendedAnimeID = link.SimilarAnimeID;  		// if we don't have the anime locally. lets assume the anime has a high rating  		decimal animeRating = 850;  		if (animeLink != null)  			animeRating = animeLink.AniDBRating;  		rec.Score = CalculateRecommendationScore (vote.VoteValue' link.ApprovalPercentage' animeRating);  		rec.BasedOnVoteValue = vote.VoteValue;  		rec.RecommendedApproval = link.ApprovalPercentage;  		// check if we have added this recommendation before  		// this might happen where animes are recommended based on different votes  		// and could end up with different scores  		if (dictRecs.ContainsKey (rec.RecommendedAnimeID)) {  			if (rec.Score < dictRecs [rec.RecommendedAnimeID].Score)  				continue;  		}  		rec.Recommended_AniDB_Anime = null;  		if (animeLink != null)  			rec.Recommended_AniDB_Anime = animeLink.ToContract ();  		rec.BasedOn_AniDB_Anime = anime.ToContract ();  		rec.Recommended_AnimeSeries = null;  		if (ser != null)  			rec.Recommended_AnimeSeries = ser.ToContract (ser.GetUserRecord (userID));  		AnimeSeries serBasedOn = repSeries.GetByAnimeID (anime.AnimeID);  		if (serBasedOn == null)  			continue;  		rec.BasedOn_AnimeSeries = serBasedOn.ToContract (serBasedOn.GetUserRecord (userID));  		dictRecs [rec.RecommendedAnimeID] = rec;  	}  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: foreach (AniDB_Anime_Similar link in simAnime) {  	if (dictIgnored.ContainsKey (link.SimilarAnimeID))  		continue;  	AniDB_Anime animeLink = repAnime.GetByAnimeID (link.SimilarAnimeID);  	if (animeLink != null)  		if (!juser.AllowedAnime (animeLink))  			continue;  	// don't recommend to watch anime that the user doesn't have  	if (animeLink == null && recommendationType == 1)  		continue;  	// don't recommend to watch series that the user doesn't have  	AnimeSeries ser = repSeries.GetByAnimeID (link.SimilarAnimeID);  	if (ser == null && recommendationType == 1)  		continue;  	if (ser != null) {  		// don't recommend to watch series that the user has already started watching  		AnimeSeries_User userRecord = ser.GetUserRecord (userID);  		if (userRecord != null) {  			if (userRecord.WatchedEpisodeCount > 0 && recommendationType == 1)  				continue;  		}  		// don't recommend to download anime that the user has files for  		if (ser.LatestLocalEpisodeNumber > 0 && recommendationType == 2)  			continue;  	}  	Contract_Recommendation rec = new Contract_Recommendation ();  	rec.BasedOnAnimeID = anime.AnimeID;  	rec.RecommendedAnimeID = link.SimilarAnimeID;  	// if we don't have the anime locally. lets assume the anime has a high rating  	decimal animeRating = 850;  	if (animeLink != null)  		animeRating = animeLink.AniDBRating;  	rec.Score = CalculateRecommendationScore (vote.VoteValue' link.ApprovalPercentage' animeRating);  	rec.BasedOnVoteValue = vote.VoteValue;  	rec.RecommendedApproval = link.ApprovalPercentage;  	// check if we have added this recommendation before  	// this might happen where animes are recommended based on different votes  	// and could end up with different scores  	if (dictRecs.ContainsKey (rec.RecommendedAnimeID)) {  		if (rec.Score < dictRecs [rec.RecommendedAnimeID].Score)  			continue;  	}  	rec.Recommended_AniDB_Anime = null;  	if (animeLink != null)  		rec.Recommended_AniDB_Anime = animeLink.ToContract ();  	rec.BasedOn_AniDB_Anime = anime.ToContract ();  	rec.Recommended_AnimeSeries = null;  	if (ser != null)  		rec.Recommended_AnimeSeries = ser.ToContract (ser.GetUserRecord (userID));  	AnimeSeries serBasedOn = repSeries.GetByAnimeID (anime.AnimeID);  	if (serBasedOn == null)  		continue;  	rec.BasedOn_AnimeSeries = serBasedOn.ToContract (serBasedOn.GetUserRecord (userID));  	dictRecs [rec.RecommendedAnimeID] = rec;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: foreach (AniDB_Anime_Similar link in simAnime) {  	if (dictIgnored.ContainsKey (link.SimilarAnimeID))  		continue;  	AniDB_Anime animeLink = repAnime.GetByAnimeID (link.SimilarAnimeID);  	if (animeLink != null)  		if (!juser.AllowedAnime (animeLink))  			continue;  	// don't recommend to watch anime that the user doesn't have  	if (animeLink == null && recommendationType == 1)  		continue;  	// don't recommend to watch series that the user doesn't have  	AnimeSeries ser = repSeries.GetByAnimeID (link.SimilarAnimeID);  	if (ser == null && recommendationType == 1)  		continue;  	if (ser != null) {  		// don't recommend to watch series that the user has already started watching  		AnimeSeries_User userRecord = ser.GetUserRecord (userID);  		if (userRecord != null) {  			if (userRecord.WatchedEpisodeCount > 0 && recommendationType == 1)  				continue;  		}  		// don't recommend to download anime that the user has files for  		if (ser.LatestLocalEpisodeNumber > 0 && recommendationType == 2)  			continue;  	}  	Contract_Recommendation rec = new Contract_Recommendation ();  	rec.BasedOnAnimeID = anime.AnimeID;  	rec.RecommendedAnimeID = link.SimilarAnimeID;  	// if we don't have the anime locally. lets assume the anime has a high rating  	decimal animeRating = 850;  	if (animeLink != null)  		animeRating = animeLink.AniDBRating;  	rec.Score = CalculateRecommendationScore (vote.VoteValue' link.ApprovalPercentage' animeRating);  	rec.BasedOnVoteValue = vote.VoteValue;  	rec.RecommendedApproval = link.ApprovalPercentage;  	// check if we have added this recommendation before  	// this might happen where animes are recommended based on different votes  	// and could end up with different scores  	if (dictRecs.ContainsKey (rec.RecommendedAnimeID)) {  		if (rec.Score < dictRecs [rec.RecommendedAnimeID].Score)  			continue;  	}  	rec.Recommended_AniDB_Anime = null;  	if (animeLink != null)  		rec.Recommended_AniDB_Anime = animeLink.ToContract ();  	rec.BasedOn_AniDB_Anime = anime.ToContract ();  	rec.Recommended_AnimeSeries = null;  	if (ser != null)  		rec.Recommended_AnimeSeries = ser.ToContract (ser.GetUserRecord (userID));  	AnimeSeries serBasedOn = repSeries.GetByAnimeID (anime.AnimeID);  	if (serBasedOn == null)  		continue;  	rec.BasedOn_AnimeSeries = serBasedOn.ToContract (serBasedOn.GetUserRecord (userID));  	dictRecs [rec.RecommendedAnimeID] = rec;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: if (ser != null) {  	// don't recommend to watch series that the user has already started watching  	AnimeSeries_User userRecord = ser.GetUserRecord (userID);  	if (userRecord != null) {  		if (userRecord.WatchedEpisodeCount > 0 && recommendationType == 1)  			continue;  	}  	// don't recommend to download anime that the user has files for  	if (ser.LatestLocalEpisodeNumber > 0 && recommendationType == 2)  		continue;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following statement contains a magic number: if (ser.LatestLocalEpisodeNumber > 0 && recommendationType == 2)  	continue;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (approvalPercentage > 90)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (approvalPercentage > 90)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (approvalPercentage > 80)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (approvalPercentage > 80)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (approvalPercentage > 70)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (approvalPercentage > 70)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (approvalPercentage > 60)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (approvalPercentage > 60)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (approvalPercentage > 50)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (approvalPercentage > 50)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (animeRating > 900)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (animeRating > 900)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (animeRating > 800)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (animeRating > 800)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (animeRating > 700)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (animeRating > 700)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (animeRating > 600)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (animeRating > 600)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (animeRating > 500)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: if (animeRating > 500)  	score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SearchForFiles,The following statement contains a magic number: try {  	List<Contract_VideoLocal> vids = new List<Contract_VideoLocal> ();  	FileSearchCriteria sType = (FileSearchCriteria)searchType;  	VideoLocalRepository repVids = new VideoLocalRepository ();  	switch (sType) {  	case FileSearchCriteria.Name:  		List<VideoLocal> results1 = repVids.GetByName (searchCriteria.Trim ());  		foreach (VideoLocal vid in results1)  			vids.Add (vid.ToContract (userID));  		break;  	case FileSearchCriteria.ED2KHash:  		VideoLocal vidByHash = repVids.GetByHash (searchCriteria.Trim ());  		if (vidByHash != null)  			vids.Add (vidByHash.ToContract (userID));  		break;  	case FileSearchCriteria.Size:  		break;  	case FileSearchCriteria.LastOneHundred:  		List<VideoLocal> results2 = repVids.GetMostRecentlyAdded (100);  		foreach (VideoLocal vid in results2)  			vids.Add (vid.ToContract (userID));  		break;  	}  	return vids;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SearchForFiles,The following statement contains a magic number: switch (sType) {  case FileSearchCriteria.Name:  	List<VideoLocal> results1 = repVids.GetByName (searchCriteria.Trim ());  	foreach (VideoLocal vid in results1)  		vids.Add (vid.ToContract (userID));  	break;  case FileSearchCriteria.ED2KHash:  	VideoLocal vidByHash = repVids.GetByHash (searchCriteria.Trim ());  	if (vidByHash != null)  		vids.Add (vidByHash.ToContract (userID));  	break;  case FileSearchCriteria.Size:  	break;  case FileSearchCriteria.LastOneHundred:  	List<VideoLocal> results2 = repVids.GetMostRecentlyAdded (100);  	foreach (VideoLocal vid in results2)  		vids.Add (vid.ToContract (userID));  	break;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RenameFilePreview,The following statement contains a magic number: try {  	VideoLocalRepository repVids = new VideoLocalRepository ();  	VideoLocal vid = repVids.GetByID (videoLocalID);  	if (vid == null) {  		ret.VideoLocal = null;  		ret.NewFileName = string.Format ("ERROR: Could not find file record");  		ret.Success = false;  	}  	else {  		if (videoLocalID == 726)  			Debug.Write ("test");  		ret.VideoLocal = null;  		ret.NewFileName = RenameFileHelper.GetNewFileName (vid' renameRules);  		if (string.IsNullOrEmpty (ret.NewFileName))  			ret.Success = false;  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	ret.VideoLocal = null;  	ret.NewFileName = string.Format ("ERROR: {0}"' ex.Message);  	ret.Success = false;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RenameFilePreview,The following statement contains a magic number: if (vid == null) {  	ret.VideoLocal = null;  	ret.NewFileName = string.Format ("ERROR: Could not find file record");  	ret.Success = false;  }  else {  	if (videoLocalID == 726)  		Debug.Write ("test");  	ret.VideoLocal = null;  	ret.NewFileName = RenameFileHelper.GetNewFileName (vid' renameRules);  	if (string.IsNullOrEmpty (ret.NewFileName))  		ret.Success = false;  }  
Magic Number,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RenameFilePreview,The following statement contains a magic number: if (videoLocalID == 726)  	Debug.Write ("test");  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,UpdateUsingGroup,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	AnimeGroup thisgrp = repGroups.GetByID (session' animeGroupID);  	if (thisgrp == null)  		return;  	AdhocRepository repAdHoc = new AdhocRepository ();  	// get a list of all the groups including this one and everthing above it the heirarchy  	List<AnimeGroup> allgroups = new List<AnimeGroup> ();  	allgroups.Add (thisgrp);  	int? groupID = thisgrp.AnimeGroupParentID;  	while (groupID.HasValue) {  		AnimeGroup grpTemp = repGroups.GetByID (session' groupID.Value);  		if (grpTemp != null) {  			allgroups.Add (grpTemp);  			groupID = grpTemp.AnimeGroupParentID;  		}  		else  			groupID = null;  	}  	TimeSpan ts = DateTime.Now - start;  	logger.Trace ("Updating cached stats for GROUP - STEP 1 ({0}) in {1} ms"' thisgrp.GroupName' ts.TotalMilliseconds);  	start = DateTime.Now;  	VideoLocalRepository repVids = new VideoLocalRepository ();  	CrossRef_File_EpisodeRepository repXrefs = new CrossRef_File_EpisodeRepository ();  	foreach (AnimeGroup grp in allgroups) {  		StatGroupCategories [grp.AnimeGroupID] = grp.CategoriesString;  		StatGroupTitles [grp.AnimeGroupID] = grp.TitlesString;  		StatGroupVideoQuality [grp.AnimeGroupID] = grp.VideoQualityString;  		ts = DateTime.Now - start;  		logger.Trace ("Updating cached stats for GROUP - STEP 2 ({0}) in {1} ms"' grp.GroupName' ts.TotalMilliseconds);  		start = DateTime.Now;  		DateTime? airDate_Min = null;  		DateTime? airDate_Max = null;  		DateTime? endDate = new DateTime (1980' 1' 1);  		DateTime? seriesCreatedDate = null;  		bool isComplete = false;  		bool hasFinishedAiring = false;  		bool isCurrentlyAiring = false;  		string videoQualityEpisodes = "";  		List<string> audioLanguages = new List<string> ();  		List<string> subtitleLanguages = new List<string> ();  		bool hasTvDB = true;  		bool hasMAL = true;  		bool hasMovieDB = true;  		bool hasMovieDBOrTvDB = true;  		int seriesCount = 0;  		int epCount = 0;  		foreach (AnimeSeries series in grp.GetAllSeries (session)) {  			seriesCount++;  			List<VideoLocal> vidsTemp = repVids.GetByAniDBAnimeID (session' series.AniDB_ID);  			List<CrossRef_File_Episode> crossRefs = repXrefs.GetByAnimeID (session' series.AniDB_ID);  			Dictionary<int' List<CrossRef_File_Episode>> dictCrossRefs = new Dictionary<int' List<CrossRef_File_Episode>> ();  			foreach (CrossRef_File_Episode xref in crossRefs) {  				if (!dictCrossRefs.ContainsKey (xref.EpisodeID))  					dictCrossRefs [xref.EpisodeID] = new List<CrossRef_File_Episode> ();  				dictCrossRefs [xref.EpisodeID].Add (xref);  			}  			Dictionary<string' VideoLocal> dictVids = new Dictionary<string' VideoLocal> ();  			foreach (VideoLocal vid in vidsTemp)  				dictVids [vid.Hash] = vid;  			// All Video Quality Episodes  			// Try to determine if this anime has all the episodes available at a certain video quality  			// e.g.  the series has all episodes in blu-ray  			// Also look at languages  			Dictionary<string' int> vidQualEpCounts = new Dictionary<string' int> ();  			// video quality' count of episodes  			foreach (AnimeEpisode ep in series.GetAnimeEpisodes (session)) {  				if (ep.EpisodeTypeEnum != AniDBAPI.enEpisodeType.Episode)  					continue;  				List<VideoLocal> epVids = new List<VideoLocal> ();  				if (dictCrossRefs.ContainsKey (ep.AniDB_EpisodeID)) {  					foreach (CrossRef_File_Episode xref in dictCrossRefs [ep.AniDB_EpisodeID]) {  						if (xref.EpisodeID == ep.AniDB_EpisodeID) {  							if (dictVids.ContainsKey (xref.Hash))  								epVids.Add (dictVids [xref.Hash]);  						}  					}  				}  				List<string> qualityAddedSoFar = new List<string> ();  				// handle mutliple files of the same quality for one episode  				foreach (VideoLocal vid in epVids) {  					AniDB_File anifile = vid.GetAniDBFile (session);  					if (anifile == null)  						continue;  					if (!qualityAddedSoFar.Contains (anifile.File_Source)) {  						if (!vidQualEpCounts.ContainsKey (anifile.File_Source))  							vidQualEpCounts [anifile.File_Source] = 1;  						else  							vidQualEpCounts [anifile.File_Source]++;  						qualityAddedSoFar.Add (anifile.File_Source);  					}  				}  			}  			ts = DateTime.Now - start;  			logger.Trace ("Updating cached stats for GROUP/Series - STEP 3 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds);  			start = DateTime.Now;  			AniDB_Anime anime = series.GetAnime (session);  			epCount = epCount + anime.EpisodeCountNormal;  			foreach (KeyValuePair<string' int> kvp in vidQualEpCounts) {  				int index = videoQualityEpisodes.IndexOf (kvp.Key' 0' StringComparison.InvariantCultureIgnoreCase);  				if (index > -1)  					continue;  				// don't add if we already have it  				if (anime.EpisodeCountNormal == kvp.Value) {  					if (videoQualityEpisodes.Length > 0)  						videoQualityEpisodes += "'";  					videoQualityEpisodes += kvp.Key;  				}  			}  			ts = DateTime.Now - start;  			logger.Trace ("Updating cached stats for GROUP/Series - STEP 4 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds);  			start = DateTime.Now;  			// audio languages  			Dictionary<int' LanguageStat> dicAudio = repAdHoc.GetAudioLanguageStatsByAnime (session' anime.AnimeID);  			foreach (KeyValuePair<int' LanguageStat> kvp in dicAudio) {  				foreach (string lanName in kvp.Value.LanguageNames) {  					if (!audioLanguages.Contains (lanName))  						audioLanguages.Add (lanName);  				}  			}  			ts = DateTime.Now - start;  			logger.Trace ("Updating cached stats for GROUP/Series - STEP 5 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds);  			start = DateTime.Now;  			// subtitle languages  			Dictionary<int' LanguageStat> dicSubtitle = repAdHoc.GetSubtitleLanguageStatsByAnime (session' anime.AnimeID);  			foreach (KeyValuePair<int' LanguageStat> kvp in dicSubtitle) {  				foreach (string lanName in kvp.Value.LanguageNames) {  					if (!subtitleLanguages.Contains (lanName))  						subtitleLanguages.Add (lanName);  				}  			}  			ts = DateTime.Now - start;  			logger.Trace ("Updating cached stats for GROUP/Series - STEP 6 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds);  			start = DateTime.Now;  			// Calculate Air Date   			DateTime? thisDate = series.AirDate;  			if (thisDate.HasValue) {  				if (airDate_Min.HasValue) {  					if (thisDate.Value < airDate_Min.Value)  						airDate_Min = thisDate;  				}  				else  					airDate_Min = thisDate;  				if (airDate_Max.HasValue) {  					if (thisDate.Value > airDate_Max.Value)  						airDate_Max = thisDate;  				}  				else  					airDate_Max = thisDate;  			}  			// calculate end date  			// if the end date is NULL it actually means it is ongoing' so this is the max possible value  			thisDate = series.EndDate;  			if (thisDate.HasValue && endDate.HasValue) {  				if (thisDate.Value > endDate.Value)  					endDate = thisDate;  			}  			else  				endDate = null;  			// Note - only one series has to be finished airing to qualify  			if (series.EndDate.HasValue && series.EndDate.Value < DateTime.Now)  				hasFinishedAiring = true;  			// Note - only one series has to be finished airing to qualify  			if (!series.EndDate.HasValue || series.EndDate.Value > DateTime.Now)  				isCurrentlyAiring = true;  			// We evaluate IsComplete as true if  			// 1. series has finished airing  			// 2. user has all episodes locally  			// Note - only one series has to be complete for the group to be considered complete  			if (series.EndDate.HasValue) {  				if (series.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  					isComplete = true;  				}  			}  			// Calculate Series Created Date   			thisDate = series.DateTimeCreated;  			if (thisDate.HasValue) {  				if (seriesCreatedDate.HasValue) {  					if (thisDate.Value < seriesCreatedDate.Value)  						seriesCreatedDate = thisDate;  				}  				else  					seriesCreatedDate = thisDate;  			}  			ts = DateTime.Now - start;  			logger.Trace ("Updating cached stats for GROUP/Series - STEP 7 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds);  			start = DateTime.Now;  			// for the group' if any of the series don't have a tvdb link  			// we will consider the group as not having a tvdb link  			List<CrossRef_AniDB_TvDBV2> tvXrefs = series.GetCrossRefTvDBV2 ();  			if (tvXrefs == null || tvXrefs.Count == 0)  				hasTvDB = false;  			if (series.CrossRefMovieDB == null)  				hasMovieDB = false;  			if (series.CrossRefMAL == null)  				hasMAL = false;  			if ((tvXrefs == null || tvXrefs.Count == 0) && series.CrossRefMovieDB == null)  				hasMovieDBOrTvDB = false;  		}  		StatGroupIsComplete [grp.AnimeGroupID] = isComplete;  		StatGroupIsFinishedAiring [grp.AnimeGroupID] = hasFinishedAiring;  		StatGroupIsCurrentlyAiring [grp.AnimeGroupID] = isCurrentlyAiring;  		StatGroupHasTvDB [grp.AnimeGroupID] = hasTvDB;  		StatGroupHasMAL [grp.AnimeGroupID] = hasMAL;  		StatGroupHasMovieDB [grp.AnimeGroupID] = hasMovieDB;  		StatGroupHasMovieDBOrTvDB [grp.AnimeGroupID] = hasMovieDBOrTvDB;  		StatGroupSeriesCount [grp.AnimeGroupID] = seriesCount;  		StatGroupEpisodeCount [grp.AnimeGroupID] = epCount;  		StatGroupVideoQualityEpisodes [grp.AnimeGroupID] = videoQualityEpisodes;  		StatGroupAirDate_Min [grp.AnimeGroupID] = airDate_Min;  		StatGroupAirDate_Max [grp.AnimeGroupID] = airDate_Max;  		StatGroupEndDate [grp.AnimeGroupID] = endDate;  		StatGroupSeriesCreatedDate [grp.AnimeGroupID] = seriesCreatedDate;  		StatGroupUserVoteOverall [grp.AnimeGroupID] = grp.UserVote;  		StatGroupUserVotePermanent [grp.AnimeGroupID] = grp.UserVotePermanent;  		StatGroupUserVoteTemporary [grp.AnimeGroupID] = grp.UserVoteTemporary;  		StatGroupAniDBRating [grp.AnimeGroupID] = grp.AniDBRating;  		ts = DateTime.Now - start;  		logger.Trace ("Updating cached stats for GROUP - STEP 8 ({0}) in {1} ms"' grp.GroupName' ts.TotalMilliseconds);  		start = DateTime.Now;  		string Stat_AudioLanguages = "";  		foreach (string audioLan in audioLanguages) {  			if (Stat_AudioLanguages.Length > 0)  				Stat_AudioLanguages += "'";  			Stat_AudioLanguages += audioLan;  		}  		this.StatGroupAudioLanguages [grp.AnimeGroupID] = Stat_AudioLanguages;  		string Stat_SubtitleLanguages = "";  		foreach (string subLan in subtitleLanguages) {  			if (Stat_SubtitleLanguages.Length > 0)  				Stat_SubtitleLanguages += "'";  			Stat_SubtitleLanguages += subLan;  		}  		this.StatGroupSubtitleLanguages [grp.AnimeGroupID] = Stat_SubtitleLanguages;  		ts = DateTime.Now - start;  		logger.Trace ("Updating cached stats for GROUP - STEP 9 ({0}) in {1} ms"' grp.GroupName' ts.TotalMilliseconds);  		start = DateTime.Now;  		UpdateGroupFilterUsingGroup (grp.AnimeGroupID);  		UpdatePlexAnimeGroup (session' grp' grp.GetAllSeries ());  		ts = DateTime.Now - start;  		logger.Trace ("Updating cached stats for GROUP - END ({0}) in {1} ms"' grp.GroupName' ts.TotalMilliseconds);  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,UpdateUsingGroup,The following statement contains a magic number: foreach (AnimeGroup grp in allgroups) {  	StatGroupCategories [grp.AnimeGroupID] = grp.CategoriesString;  	StatGroupTitles [grp.AnimeGroupID] = grp.TitlesString;  	StatGroupVideoQuality [grp.AnimeGroupID] = grp.VideoQualityString;  	ts = DateTime.Now - start;  	logger.Trace ("Updating cached stats for GROUP - STEP 2 ({0}) in {1} ms"' grp.GroupName' ts.TotalMilliseconds);  	start = DateTime.Now;  	DateTime? airDate_Min = null;  	DateTime? airDate_Max = null;  	DateTime? endDate = new DateTime (1980' 1' 1);  	DateTime? seriesCreatedDate = null;  	bool isComplete = false;  	bool hasFinishedAiring = false;  	bool isCurrentlyAiring = false;  	string videoQualityEpisodes = "";  	List<string> audioLanguages = new List<string> ();  	List<string> subtitleLanguages = new List<string> ();  	bool hasTvDB = true;  	bool hasMAL = true;  	bool hasMovieDB = true;  	bool hasMovieDBOrTvDB = true;  	int seriesCount = 0;  	int epCount = 0;  	foreach (AnimeSeries series in grp.GetAllSeries (session)) {  		seriesCount++;  		List<VideoLocal> vidsTemp = repVids.GetByAniDBAnimeID (session' series.AniDB_ID);  		List<CrossRef_File_Episode> crossRefs = repXrefs.GetByAnimeID (session' series.AniDB_ID);  		Dictionary<int' List<CrossRef_File_Episode>> dictCrossRefs = new Dictionary<int' List<CrossRef_File_Episode>> ();  		foreach (CrossRef_File_Episode xref in crossRefs) {  			if (!dictCrossRefs.ContainsKey (xref.EpisodeID))  				dictCrossRefs [xref.EpisodeID] = new List<CrossRef_File_Episode> ();  			dictCrossRefs [xref.EpisodeID].Add (xref);  		}  		Dictionary<string' VideoLocal> dictVids = new Dictionary<string' VideoLocal> ();  		foreach (VideoLocal vid in vidsTemp)  			dictVids [vid.Hash] = vid;  		// All Video Quality Episodes  		// Try to determine if this anime has all the episodes available at a certain video quality  		// e.g.  the series has all episodes in blu-ray  		// Also look at languages  		Dictionary<string' int> vidQualEpCounts = new Dictionary<string' int> ();  		// video quality' count of episodes  		foreach (AnimeEpisode ep in series.GetAnimeEpisodes (session)) {  			if (ep.EpisodeTypeEnum != AniDBAPI.enEpisodeType.Episode)  				continue;  			List<VideoLocal> epVids = new List<VideoLocal> ();  			if (dictCrossRefs.ContainsKey (ep.AniDB_EpisodeID)) {  				foreach (CrossRef_File_Episode xref in dictCrossRefs [ep.AniDB_EpisodeID]) {  					if (xref.EpisodeID == ep.AniDB_EpisodeID) {  						if (dictVids.ContainsKey (xref.Hash))  							epVids.Add (dictVids [xref.Hash]);  					}  				}  			}  			List<string> qualityAddedSoFar = new List<string> ();  			// handle mutliple files of the same quality for one episode  			foreach (VideoLocal vid in epVids) {  				AniDB_File anifile = vid.GetAniDBFile (session);  				if (anifile == null)  					continue;  				if (!qualityAddedSoFar.Contains (anifile.File_Source)) {  					if (!vidQualEpCounts.ContainsKey (anifile.File_Source))  						vidQualEpCounts [anifile.File_Source] = 1;  					else  						vidQualEpCounts [anifile.File_Source]++;  					qualityAddedSoFar.Add (anifile.File_Source);  				}  			}  		}  		ts = DateTime.Now - start;  		logger.Trace ("Updating cached stats for GROUP/Series - STEP 3 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds);  		start = DateTime.Now;  		AniDB_Anime anime = series.GetAnime (session);  		epCount = epCount + anime.EpisodeCountNormal;  		foreach (KeyValuePair<string' int> kvp in vidQualEpCounts) {  			int index = videoQualityEpisodes.IndexOf (kvp.Key' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1)  				continue;  			// don't add if we already have it  			if (anime.EpisodeCountNormal == kvp.Value) {  				if (videoQualityEpisodes.Length > 0)  					videoQualityEpisodes += "'";  				videoQualityEpisodes += kvp.Key;  			}  		}  		ts = DateTime.Now - start;  		logger.Trace ("Updating cached stats for GROUP/Series - STEP 4 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds);  		start = DateTime.Now;  		// audio languages  		Dictionary<int' LanguageStat> dicAudio = repAdHoc.GetAudioLanguageStatsByAnime (session' anime.AnimeID);  		foreach (KeyValuePair<int' LanguageStat> kvp in dicAudio) {  			foreach (string lanName in kvp.Value.LanguageNames) {  				if (!audioLanguages.Contains (lanName))  					audioLanguages.Add (lanName);  			}  		}  		ts = DateTime.Now - start;  		logger.Trace ("Updating cached stats for GROUP/Series - STEP 5 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds);  		start = DateTime.Now;  		// subtitle languages  		Dictionary<int' LanguageStat> dicSubtitle = repAdHoc.GetSubtitleLanguageStatsByAnime (session' anime.AnimeID);  		foreach (KeyValuePair<int' LanguageStat> kvp in dicSubtitle) {  			foreach (string lanName in kvp.Value.LanguageNames) {  				if (!subtitleLanguages.Contains (lanName))  					subtitleLanguages.Add (lanName);  			}  		}  		ts = DateTime.Now - start;  		logger.Trace ("Updating cached stats for GROUP/Series - STEP 6 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds);  		start = DateTime.Now;  		// Calculate Air Date   		DateTime? thisDate = series.AirDate;  		if (thisDate.HasValue) {  			if (airDate_Min.HasValue) {  				if (thisDate.Value < airDate_Min.Value)  					airDate_Min = thisDate;  			}  			else  				airDate_Min = thisDate;  			if (airDate_Max.HasValue) {  				if (thisDate.Value > airDate_Max.Value)  					airDate_Max = thisDate;  			}  			else  				airDate_Max = thisDate;  		}  		// calculate end date  		// if the end date is NULL it actually means it is ongoing' so this is the max possible value  		thisDate = series.EndDate;  		if (thisDate.HasValue && endDate.HasValue) {  			if (thisDate.Value > endDate.Value)  				endDate = thisDate;  		}  		else  			endDate = null;  		// Note - only one series has to be finished airing to qualify  		if (series.EndDate.HasValue && series.EndDate.Value < DateTime.Now)  			hasFinishedAiring = true;  		// Note - only one series has to be finished airing to qualify  		if (!series.EndDate.HasValue || series.EndDate.Value > DateTime.Now)  			isCurrentlyAiring = true;  		// We evaluate IsComplete as true if  		// 1. series has finished airing  		// 2. user has all episodes locally  		// Note - only one series has to be complete for the group to be considered complete  		if (series.EndDate.HasValue) {  			if (series.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  				isComplete = true;  			}  		}  		// Calculate Series Created Date   		thisDate = series.DateTimeCreated;  		if (thisDate.HasValue) {  			if (seriesCreatedDate.HasValue) {  				if (thisDate.Value < seriesCreatedDate.Value)  					seriesCreatedDate = thisDate;  			}  			else  				seriesCreatedDate = thisDate;  		}  		ts = DateTime.Now - start;  		logger.Trace ("Updating cached stats for GROUP/Series - STEP 7 ({0}/{1}) in {2} ms"' grp.GroupName' series.AnimeSeriesID' ts.TotalMilliseconds);  		start = DateTime.Now;  		// for the group' if any of the series don't have a tvdb link  		// we will consider the group as not having a tvdb link  		List<CrossRef_AniDB_TvDBV2> tvXrefs = series.GetCrossRefTvDBV2 ();  		if (tvXrefs == null || tvXrefs.Count == 0)  			hasTvDB = false;  		if (series.CrossRefMovieDB == null)  			hasMovieDB = false;  		if (series.CrossRefMAL == null)  			hasMAL = false;  		if ((tvXrefs == null || tvXrefs.Count == 0) && series.CrossRefMovieDB == null)  			hasMovieDBOrTvDB = false;  	}  	StatGroupIsComplete [grp.AnimeGroupID] = isComplete;  	StatGroupIsFinishedAiring [grp.AnimeGroupID] = hasFinishedAiring;  	StatGroupIsCurrentlyAiring [grp.AnimeGroupID] = isCurrentlyAiring;  	StatGroupHasTvDB [grp.AnimeGroupID] = hasTvDB;  	StatGroupHasMAL [grp.AnimeGroupID] = hasMAL;  	StatGroupHasMovieDB [grp.AnimeGroupID] = hasMovieDB;  	StatGroupHasMovieDBOrTvDB [grp.AnimeGroupID] = hasMovieDBOrTvDB;  	StatGroupSeriesCount [grp.AnimeGroupID] = seriesCount;  	StatGroupEpisodeCount [grp.AnimeGroupID] = epCount;  	StatGroupVideoQualityEpisodes [grp.AnimeGroupID] = videoQualityEpisodes;  	StatGroupAirDate_Min [grp.AnimeGroupID] = airDate_Min;  	StatGroupAirDate_Max [grp.AnimeGroupID] = airDate_Max;  	StatGroupEndDate [grp.AnimeGroupID] = endDate;  	StatGroupSeriesCreatedDate [grp.AnimeGroupID] = seriesCreatedDate;  	StatGroupUserVoteOverall [grp.AnimeGroupID] = grp.UserVote;  	StatGroupUserVotePermanent [grp.AnimeGroupID] = grp.UserVotePermanent;  	StatGroupUserVoteTemporary [grp.AnimeGroupID] = grp.UserVoteTemporary;  	StatGroupAniDBRating [grp.AnimeGroupID] = grp.AniDBRating;  	ts = DateTime.Now - start;  	logger.Trace ("Updating cached stats for GROUP - STEP 8 ({0}) in {1} ms"' grp.GroupName' ts.TotalMilliseconds);  	start = DateTime.Now;  	string Stat_AudioLanguages = "";  	foreach (string audioLan in audioLanguages) {  		if (Stat_AudioLanguages.Length > 0)  			Stat_AudioLanguages += "'";  		Stat_AudioLanguages += audioLan;  	}  	this.StatGroupAudioLanguages [grp.AnimeGroupID] = Stat_AudioLanguages;  	string Stat_SubtitleLanguages = "";  	foreach (string subLan in subtitleLanguages) {  		if (Stat_SubtitleLanguages.Length > 0)  			Stat_SubtitleLanguages += "'";  		Stat_SubtitleLanguages += subLan;  	}  	this.StatGroupSubtitleLanguages [grp.AnimeGroupID] = Stat_SubtitleLanguages;  	ts = DateTime.Now - start;  	logger.Trace ("Updating cached stats for GROUP - STEP 9 ({0}) in {1} ms"' grp.GroupName' ts.TotalMilliseconds);  	start = DateTime.Now;  	UpdateGroupFilterUsingGroup (grp.AnimeGroupID);  	UpdatePlexAnimeGroup (session' grp' grp.GetAllSeries ());  	ts = DateTime.Now - start;  	logger.Trace ("Updating cached stats for GROUP - END ({0}) in {1} ms"' grp.GroupName' ts.TotalMilliseconds);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	ClearAllData ();  	#region Get the data  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	AniDB_CategoryRepository repCats = new AniDB_CategoryRepository ();  	AniDB_Anime_CategoryRepository repAnimeCat = new AniDB_Anime_CategoryRepository ();  	AniDB_Anime_TitleRepository repTitles = new AniDB_Anime_TitleRepository ();  	List<AnimeGroup> allGrps = repGroups.GetAll ();  	Dictionary<int' AnimeGroup> allGroupsDict = new Dictionary<int' AnimeGroup> ();  	foreach (AnimeGroup agrp in allGrps)  		allGroupsDict [agrp.AnimeGroupID] = agrp;  	TimeSpan ts = DateTime.Now - start;  	logger.Info ("Get All GROUPS (Database) in {0} ms"' ts.TotalMilliseconds);  	// anime  	start = DateTime.Now;  	List<AniDB_Anime> allAnime = repAnime.GetAll ();  	Dictionary<int' AniDB_Anime> allAnimeDict = new Dictionary<int' AniDB_Anime> ();  	foreach (AniDB_Anime anime in allAnime)  		allAnimeDict [anime.AnimeID] = anime;  	ts = DateTime.Now - start;  	logger.Info ("Get All ANIME (Database) in {0} ms"' ts.TotalMilliseconds);  	// categories  	start = DateTime.Now;  	List<AniDB_Category> allCatgeories = repCats.GetAll ();  	Dictionary<int' AniDB_Category> allCatgeoriesDict = new Dictionary<int' AniDB_Category> ();  	foreach (AniDB_Category cat in allCatgeories)  		allCatgeoriesDict [cat.CategoryID] = cat;  	List<AniDB_Anime_Category> allAnimeCatgeories = repAnimeCat.GetAll ();  	Dictionary<int' List<int>> allAnimeCatgeoriesDict = new Dictionary<int' List<int>> ();  	// animeid / list of category id's  	foreach (AniDB_Anime_Category aniCat in allAnimeCatgeories) {  		if (!allAnimeCatgeoriesDict.ContainsKey (aniCat.AnimeID))  			allAnimeCatgeoriesDict [aniCat.AnimeID] = new List<int> ();  		allAnimeCatgeoriesDict [aniCat.AnimeID].Add (aniCat.CategoryID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All CATEGORIES (Database) in {0} ms"' ts.TotalMilliseconds);  	// titles  	start = DateTime.Now;  	List<AniDB_Anime_Title> allTitles = repTitles.GetAll ();  	Dictionary<int' List<AniDB_Anime_Title>> allTitlesDict = new Dictionary<int' List<AniDB_Anime_Title>> ();  	// animeid / list of titles  	foreach (AniDB_Anime_Title aniTitle in allTitles) {  		if (!allTitlesDict.ContainsKey (aniTitle.AnimeID))  			allTitlesDict [aniTitle.AnimeID] = new List<AniDB_Anime_Title> ();  		allTitlesDict [aniTitle.AnimeID].Add (aniTitle);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All TITLES (Database) in {0} ms"' ts.TotalMilliseconds);  	// user votes  	start = DateTime.Now;  	AniDB_VoteRepository repVotes = new AniDB_VoteRepository ();  	List<AniDB_Vote> allVotes = repVotes.GetAll ();  	ts = DateTime.Now - start;  	logger.Info ("Get All VOTES (Database) in {0} ms"' ts.TotalMilliseconds);  	// video quality  	start = DateTime.Now;  	AdhocRepository rep = new AdhocRepository ();  	Dictionary<int' string> allVidQuality = rep.GetAllVideoQualityByGroup ();  	ts = DateTime.Now - start;  	logger.Info ("Get VIDEO QUALITY STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	// video quality episode stats  	start = DateTime.Now;  	Dictionary<int' AnimeVideoQualityStat> dictStats = rep.GetEpisodeVideoQualityStatsByAnime ();  	ts = DateTime.Now - start;  	logger.Info ("Get VIDEO QUALITY EPISODE STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	// audio and subtitle language stats  	start = DateTime.Now;  	Dictionary<int' LanguageStat> dictAudioStats = rep.GetAudioLanguageStatsForAnime ();  	Dictionary<int' LanguageStat> dictSubtitleStats = rep.GetSubtitleLanguageStatsForAnime ();  	ts = DateTime.Now - start;  	logger.Info ("Get LANGUAGE STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	start = DateTime.Now;  	List<AnimeSeries> allSeries = repSeries.GetAll ();  	ts = DateTime.Now - start;  	logger.Info ("Get All Series (Database) in {0} ms"' ts.TotalMilliseconds);  	// TvDB  	start = DateTime.Now;  	CrossRef_AniDB_TvDBV2Repository repCrossRef = new CrossRef_AniDB_TvDBV2Repository ();  	List<CrossRef_AniDB_TvDBV2> allCrossRefs = repCrossRef.GetAll ();  	List<int> animeWithTvDBCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_TvDBV2 xref in allCrossRefs) {  		if (!animeWithTvDBCrossRef.Contains (xref.AnimeID))  			animeWithTvDBCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->TvDB Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	// MovieDB  	start = DateTime.Now;  	CrossRef_AniDB_OtherRepository repOtherCrossRef = new CrossRef_AniDB_OtherRepository ();  	List<CrossRef_AniDB_Other> allOtherCrossRefs = repOtherCrossRef.GetAll ();  	List<int> animeWithMovieCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_Other xref in allOtherCrossRefs) {  		if (!animeWithMovieCrossRef.Contains (xref.AnimeID) && xref.CrossRefType == (int)CrossRefType.MovieDB)  			animeWithMovieCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->MovieDB Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	// MAL  	start = DateTime.Now;  	CrossRef_AniDB_MALRepository repMALCrossRef = new CrossRef_AniDB_MALRepository ();  	List<CrossRef_AniDB_MAL> allMALCrossRefs = repMALCrossRef.GetAll ();  	List<int> animeWithMALCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_MAL xref in allMALCrossRefs) {  		if (!animeWithMALCrossRef.Contains (xref.AnimeID))  			animeWithMALCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->MAL Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	#endregion  	start = DateTime.Now;  	var session = JMMService.SessionFactory.OpenSession ();  	foreach (AnimeGroup ag in allGrps) {  		// get all the series for this group  		List<AnimeSeries> seriesForGroup = new List<AnimeSeries> ();  		GetAnimeSeriesRecursive (ag' ref seriesForGroup' allSeries' allGroupsDict);  		/* 					if (ag.AnimeGroupID == 915) 					{ 						Console.Write(""); 					}                      */DateTime? Stat_AirDate_Min = null;  		DateTime? Stat_AirDate_Max = null;  		DateTime? Stat_EndDate = new DateTime (1980' 1' 1);  		DateTime? Stat_SeriesCreatedDate = null;  		bool isComplete = false;  		bool hasFinishedAiring = false;  		bool isCurrentlyAiring = false;  		List<int> categoryIDList = new List<int> ();  		List<string> audioLanguageList = new List<string> ();  		List<string> subtitleLanguageList = new List<string> ();  		string Stat_AllTitles = "";  		string Stat_AllCategories = "";  		string Stat_AllVideoQualityEpisodes = "";  		decimal totalVotesPerm = 0' totalVotesTemp = 0' totalVotes = 0;  		int countVotesPerm = 0' countVotesTemp = 0' countVotes = 0;  		bool hasTvDB = true;  		bool hasMAL = true;  		bool hasMovieDB = true;  		bool hasMovieDBOrTvDB = true;  		int seriesCount = 0;  		int epCount = 0;  		foreach (AnimeSeries series in seriesForGroup) {  			seriesCount++;  			if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  				AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  				epCount = epCount + thisAnime.EpisodeCountNormal;  				// All Video Quality Episodes  				// Try to determine if this anime has all the episodes available at a certain video quality  				// e.g.  the series has all episodes in blu-ray  				if (dictStats.ContainsKey (series.AniDB_ID)) {  					if (series.AniDB_ID == 7656) {  						Debug.Print ("");  					}  					AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  					foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  						if (kvp.Value >= thisAnime.EpisodeCountNormal) {  							if (Stat_AllVideoQualityEpisodes.Length > 0)  								Stat_AllVideoQualityEpisodes += "'";  							Stat_AllVideoQualityEpisodes += kvp.Key;  						}  					}  				}  				// Calculate Air Date   				DateTime? thisDate = thisAnime.AirDate;  				if (thisDate.HasValue) {  					if (Stat_AirDate_Min.HasValue) {  						if (thisDate.Value < Stat_AirDate_Min.Value)  							Stat_AirDate_Min = thisDate;  					}  					else  						Stat_AirDate_Min = thisDate;  					if (Stat_AirDate_Max.HasValue) {  						if (thisDate.Value > Stat_AirDate_Max.Value)  							Stat_AirDate_Max = thisDate;  					}  					else  						Stat_AirDate_Max = thisDate;  				}  				// calculate end date  				// if the end date is NULL it actually means it is ongoing' so this is the max possible value  				thisDate = thisAnime.EndDate;  				if (thisDate.HasValue && Stat_EndDate.HasValue) {  					if (thisDate.Value > Stat_EndDate.Value)  						Stat_EndDate = thisDate;  				}  				else  					Stat_EndDate = null;  				// Calculate Series Created Date   				thisDate = series.DateTimeCreated;  				if (thisDate.HasValue) {  					if (Stat_SeriesCreatedDate.HasValue) {  						if (thisDate.Value < Stat_SeriesCreatedDate.Value)  							Stat_SeriesCreatedDate = thisDate;  					}  					else  						Stat_SeriesCreatedDate = thisDate;  				}  				/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  				if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  					hasFinishedAiring = true;  				// Note - only one series has to be currently airing to qualify  				if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  					isCurrentlyAiring = true;  				// We evaluate IsComplete as true if  				// 1. series has finished airing  				// 2. user has all episodes locally  				// Note - only one series has to be complete for the group to be considered complete  				if (thisAnime.EndDate.HasValue) {  					if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  						isComplete = true;  					}  				}  				// get categories  				if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  					foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  						if (!categoryIDList.Contains (catID))  							categoryIDList.Add (catID);  					}  				}  				// get audio languages  				if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  					foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  						if (!audioLanguageList.Contains (lanName))  							audioLanguageList.Add (lanName);  					}  				}  				// get subtitle languages  				if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  					foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  						if (!subtitleLanguageList.Contains (lanName))  							subtitleLanguageList.Add (lanName);  					}  				}  				// get titles  				if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  					foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  						if (Stat_AllTitles.Length > 0)  							Stat_AllTitles += "'";  						Stat_AllTitles += title.Title;  					}  				}  				// get votes  				foreach (AniDB_Vote vote in allVotes) {  					if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  						countVotes++;  						totalVotes += (decimal)vote.VoteValue;  						if (vote.VoteType == (int)AniDBVoteType.Anime) {  							countVotesPerm++;  							totalVotesPerm += (decimal)vote.VoteValue;  						}  						if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  							countVotesTemp++;  							totalVotesTemp += (decimal)vote.VoteValue;  						}  						break;  					}  				}  			}  			// for the group' if any of the series don't have a tvdb link  			// we will consider the group as not having a tvdb link  			if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID))  				hasTvDB = false;  			if (!animeWithMovieCrossRef.Contains (series.AniDB_ID))  				hasMovieDB = false;  			if (!animeWithMALCrossRef.Contains (series.AniDB_ID))  				hasMAL = false;  			if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID) && !animeWithMovieCrossRef.Contains (series.AniDB_ID))  				hasMovieDBOrTvDB = false;  		}  		if (allVidQuality.ContainsKey (ag.AnimeGroupID))  			StatGroupVideoQuality [ag.AnimeGroupID] = allVidQuality [ag.AnimeGroupID];  		else  			StatGroupVideoQuality [ag.AnimeGroupID] = "";  		StatGroupVideoQualityEpisodes [ag.AnimeGroupID] = Stat_AllVideoQualityEpisodes;  		StatGroupIsComplete [ag.AnimeGroupID] = isComplete;  		StatGroupIsFinishedAiring [ag.AnimeGroupID] = hasFinishedAiring;  		StatGroupIsCurrentlyAiring [ag.AnimeGroupID] = isCurrentlyAiring;  		StatGroupSeriesCount [ag.AnimeGroupID] = seriesCount;  		StatGroupEpisodeCount [ag.AnimeGroupID] = epCount;  		StatGroupTitles [ag.AnimeGroupID] = Stat_AllTitles;  		StatGroupAirDate_Max [ag.AnimeGroupID] = Stat_AirDate_Max;  		StatGroupAirDate_Min [ag.AnimeGroupID] = Stat_AirDate_Min;  		StatGroupEndDate [ag.AnimeGroupID] = Stat_EndDate;  		StatGroupSeriesCreatedDate [ag.AnimeGroupID] = Stat_SeriesCreatedDate;  		StatGroupHasTvDB [ag.AnimeGroupID] = hasTvDB;  		StatGroupHasMAL [ag.AnimeGroupID] = hasMAL;  		StatGroupHasMovieDB [ag.AnimeGroupID] = hasMovieDB;  		StatGroupHasMovieDBOrTvDB [ag.AnimeGroupID] = hasMovieDBOrTvDB;  		decimal? Stat_UserVoteOverall = null;  		if (countVotes > 0)  			Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  		StatGroupUserVoteOverall [ag.AnimeGroupID] = Stat_UserVoteOverall;  		decimal? Stat_UserVotePermanent = null;  		if (countVotesPerm > 0)  			Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  		StatGroupUserVotePermanent [ag.AnimeGroupID] = Stat_UserVotePermanent;  		decimal? Stat_UserVoteTemporary = null;  		if (countVotesTemp > 0)  			Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  		StatGroupUserVoteTemporary [ag.AnimeGroupID] = Stat_UserVoteTemporary;  		StatGroupAniDBRating [ag.AnimeGroupID] = ag.AniDBRating;  		Stat_AllCategories = "";  		foreach (int catID in categoryIDList) {  			if (!allCatgeoriesDict.ContainsKey (catID))  				continue;  			string catName = allCatgeoriesDict [catID].CategoryName;  			if (Stat_AllCategories.Length > 0)  				Stat_AllCategories += "|";  			Stat_AllCategories += catName;  		}  		this.StatGroupCategories [ag.AnimeGroupID] = Stat_AllCategories;  		string Stat_AudioLanguages = "";  		foreach (string audioLan in audioLanguageList) {  			if (Stat_AudioLanguages.Length > 0)  				Stat_AudioLanguages += "'";  			Stat_AudioLanguages += audioLan;  		}  		this.StatGroupAudioLanguages [ag.AnimeGroupID] = Stat_AudioLanguages;  		string Stat_SubtitleLanguages = "";  		foreach (string subLan in subtitleLanguageList) {  			if (Stat_SubtitleLanguages.Length > 0)  				Stat_SubtitleLanguages += "'";  			Stat_SubtitleLanguages += subLan;  		}  		this.StatGroupSubtitleLanguages [ag.AnimeGroupID] = Stat_SubtitleLanguages;  		UpdateGroupFilterUsingGroup (ag.AnimeGroupID);  		UpdatePlexAnimeGroup (session' ag' allSeries);  	}  	ts = DateTime.Now - start;  	logger.Info ("GetAllGroups (Contracts) in {0} ms"' ts.TotalMilliseconds);  	//UpdateAllAnimeContracts();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	ClearAllData ();  	#region Get the data  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	AniDB_CategoryRepository repCats = new AniDB_CategoryRepository ();  	AniDB_Anime_CategoryRepository repAnimeCat = new AniDB_Anime_CategoryRepository ();  	AniDB_Anime_TitleRepository repTitles = new AniDB_Anime_TitleRepository ();  	List<AnimeGroup> allGrps = repGroups.GetAll ();  	Dictionary<int' AnimeGroup> allGroupsDict = new Dictionary<int' AnimeGroup> ();  	foreach (AnimeGroup agrp in allGrps)  		allGroupsDict [agrp.AnimeGroupID] = agrp;  	TimeSpan ts = DateTime.Now - start;  	logger.Info ("Get All GROUPS (Database) in {0} ms"' ts.TotalMilliseconds);  	// anime  	start = DateTime.Now;  	List<AniDB_Anime> allAnime = repAnime.GetAll ();  	Dictionary<int' AniDB_Anime> allAnimeDict = new Dictionary<int' AniDB_Anime> ();  	foreach (AniDB_Anime anime in allAnime)  		allAnimeDict [anime.AnimeID] = anime;  	ts = DateTime.Now - start;  	logger.Info ("Get All ANIME (Database) in {0} ms"' ts.TotalMilliseconds);  	// categories  	start = DateTime.Now;  	List<AniDB_Category> allCatgeories = repCats.GetAll ();  	Dictionary<int' AniDB_Category> allCatgeoriesDict = new Dictionary<int' AniDB_Category> ();  	foreach (AniDB_Category cat in allCatgeories)  		allCatgeoriesDict [cat.CategoryID] = cat;  	List<AniDB_Anime_Category> allAnimeCatgeories = repAnimeCat.GetAll ();  	Dictionary<int' List<int>> allAnimeCatgeoriesDict = new Dictionary<int' List<int>> ();  	// animeid / list of category id's  	foreach (AniDB_Anime_Category aniCat in allAnimeCatgeories) {  		if (!allAnimeCatgeoriesDict.ContainsKey (aniCat.AnimeID))  			allAnimeCatgeoriesDict [aniCat.AnimeID] = new List<int> ();  		allAnimeCatgeoriesDict [aniCat.AnimeID].Add (aniCat.CategoryID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All CATEGORIES (Database) in {0} ms"' ts.TotalMilliseconds);  	// titles  	start = DateTime.Now;  	List<AniDB_Anime_Title> allTitles = repTitles.GetAll ();  	Dictionary<int' List<AniDB_Anime_Title>> allTitlesDict = new Dictionary<int' List<AniDB_Anime_Title>> ();  	// animeid / list of titles  	foreach (AniDB_Anime_Title aniTitle in allTitles) {  		if (!allTitlesDict.ContainsKey (aniTitle.AnimeID))  			allTitlesDict [aniTitle.AnimeID] = new List<AniDB_Anime_Title> ();  		allTitlesDict [aniTitle.AnimeID].Add (aniTitle);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All TITLES (Database) in {0} ms"' ts.TotalMilliseconds);  	// user votes  	start = DateTime.Now;  	AniDB_VoteRepository repVotes = new AniDB_VoteRepository ();  	List<AniDB_Vote> allVotes = repVotes.GetAll ();  	ts = DateTime.Now - start;  	logger.Info ("Get All VOTES (Database) in {0} ms"' ts.TotalMilliseconds);  	// video quality  	start = DateTime.Now;  	AdhocRepository rep = new AdhocRepository ();  	Dictionary<int' string> allVidQuality = rep.GetAllVideoQualityByGroup ();  	ts = DateTime.Now - start;  	logger.Info ("Get VIDEO QUALITY STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	// video quality episode stats  	start = DateTime.Now;  	Dictionary<int' AnimeVideoQualityStat> dictStats = rep.GetEpisodeVideoQualityStatsByAnime ();  	ts = DateTime.Now - start;  	logger.Info ("Get VIDEO QUALITY EPISODE STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	// audio and subtitle language stats  	start = DateTime.Now;  	Dictionary<int' LanguageStat> dictAudioStats = rep.GetAudioLanguageStatsForAnime ();  	Dictionary<int' LanguageStat> dictSubtitleStats = rep.GetSubtitleLanguageStatsForAnime ();  	ts = DateTime.Now - start;  	logger.Info ("Get LANGUAGE STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	start = DateTime.Now;  	List<AnimeSeries> allSeries = repSeries.GetAll ();  	ts = DateTime.Now - start;  	logger.Info ("Get All Series (Database) in {0} ms"' ts.TotalMilliseconds);  	// TvDB  	start = DateTime.Now;  	CrossRef_AniDB_TvDBV2Repository repCrossRef = new CrossRef_AniDB_TvDBV2Repository ();  	List<CrossRef_AniDB_TvDBV2> allCrossRefs = repCrossRef.GetAll ();  	List<int> animeWithTvDBCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_TvDBV2 xref in allCrossRefs) {  		if (!animeWithTvDBCrossRef.Contains (xref.AnimeID))  			animeWithTvDBCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->TvDB Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	// MovieDB  	start = DateTime.Now;  	CrossRef_AniDB_OtherRepository repOtherCrossRef = new CrossRef_AniDB_OtherRepository ();  	List<CrossRef_AniDB_Other> allOtherCrossRefs = repOtherCrossRef.GetAll ();  	List<int> animeWithMovieCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_Other xref in allOtherCrossRefs) {  		if (!animeWithMovieCrossRef.Contains (xref.AnimeID) && xref.CrossRefType == (int)CrossRefType.MovieDB)  			animeWithMovieCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->MovieDB Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	// MAL  	start = DateTime.Now;  	CrossRef_AniDB_MALRepository repMALCrossRef = new CrossRef_AniDB_MALRepository ();  	List<CrossRef_AniDB_MAL> allMALCrossRefs = repMALCrossRef.GetAll ();  	List<int> animeWithMALCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_MAL xref in allMALCrossRefs) {  		if (!animeWithMALCrossRef.Contains (xref.AnimeID))  			animeWithMALCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->MAL Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	#endregion  	start = DateTime.Now;  	var session = JMMService.SessionFactory.OpenSession ();  	foreach (AnimeGroup ag in allGrps) {  		// get all the series for this group  		List<AnimeSeries> seriesForGroup = new List<AnimeSeries> ();  		GetAnimeSeriesRecursive (ag' ref seriesForGroup' allSeries' allGroupsDict);  		/* 					if (ag.AnimeGroupID == 915) 					{ 						Console.Write(""); 					}                      */DateTime? Stat_AirDate_Min = null;  		DateTime? Stat_AirDate_Max = null;  		DateTime? Stat_EndDate = new DateTime (1980' 1' 1);  		DateTime? Stat_SeriesCreatedDate = null;  		bool isComplete = false;  		bool hasFinishedAiring = false;  		bool isCurrentlyAiring = false;  		List<int> categoryIDList = new List<int> ();  		List<string> audioLanguageList = new List<string> ();  		List<string> subtitleLanguageList = new List<string> ();  		string Stat_AllTitles = "";  		string Stat_AllCategories = "";  		string Stat_AllVideoQualityEpisodes = "";  		decimal totalVotesPerm = 0' totalVotesTemp = 0' totalVotes = 0;  		int countVotesPerm = 0' countVotesTemp = 0' countVotes = 0;  		bool hasTvDB = true;  		bool hasMAL = true;  		bool hasMovieDB = true;  		bool hasMovieDBOrTvDB = true;  		int seriesCount = 0;  		int epCount = 0;  		foreach (AnimeSeries series in seriesForGroup) {  			seriesCount++;  			if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  				AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  				epCount = epCount + thisAnime.EpisodeCountNormal;  				// All Video Quality Episodes  				// Try to determine if this anime has all the episodes available at a certain video quality  				// e.g.  the series has all episodes in blu-ray  				if (dictStats.ContainsKey (series.AniDB_ID)) {  					if (series.AniDB_ID == 7656) {  						Debug.Print ("");  					}  					AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  					foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  						if (kvp.Value >= thisAnime.EpisodeCountNormal) {  							if (Stat_AllVideoQualityEpisodes.Length > 0)  								Stat_AllVideoQualityEpisodes += "'";  							Stat_AllVideoQualityEpisodes += kvp.Key;  						}  					}  				}  				// Calculate Air Date   				DateTime? thisDate = thisAnime.AirDate;  				if (thisDate.HasValue) {  					if (Stat_AirDate_Min.HasValue) {  						if (thisDate.Value < Stat_AirDate_Min.Value)  							Stat_AirDate_Min = thisDate;  					}  					else  						Stat_AirDate_Min = thisDate;  					if (Stat_AirDate_Max.HasValue) {  						if (thisDate.Value > Stat_AirDate_Max.Value)  							Stat_AirDate_Max = thisDate;  					}  					else  						Stat_AirDate_Max = thisDate;  				}  				// calculate end date  				// if the end date is NULL it actually means it is ongoing' so this is the max possible value  				thisDate = thisAnime.EndDate;  				if (thisDate.HasValue && Stat_EndDate.HasValue) {  					if (thisDate.Value > Stat_EndDate.Value)  						Stat_EndDate = thisDate;  				}  				else  					Stat_EndDate = null;  				// Calculate Series Created Date   				thisDate = series.DateTimeCreated;  				if (thisDate.HasValue) {  					if (Stat_SeriesCreatedDate.HasValue) {  						if (thisDate.Value < Stat_SeriesCreatedDate.Value)  							Stat_SeriesCreatedDate = thisDate;  					}  					else  						Stat_SeriesCreatedDate = thisDate;  				}  				/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  				if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  					hasFinishedAiring = true;  				// Note - only one series has to be currently airing to qualify  				if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  					isCurrentlyAiring = true;  				// We evaluate IsComplete as true if  				// 1. series has finished airing  				// 2. user has all episodes locally  				// Note - only one series has to be complete for the group to be considered complete  				if (thisAnime.EndDate.HasValue) {  					if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  						isComplete = true;  					}  				}  				// get categories  				if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  					foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  						if (!categoryIDList.Contains (catID))  							categoryIDList.Add (catID);  					}  				}  				// get audio languages  				if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  					foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  						if (!audioLanguageList.Contains (lanName))  							audioLanguageList.Add (lanName);  					}  				}  				// get subtitle languages  				if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  					foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  						if (!subtitleLanguageList.Contains (lanName))  							subtitleLanguageList.Add (lanName);  					}  				}  				// get titles  				if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  					foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  						if (Stat_AllTitles.Length > 0)  							Stat_AllTitles += "'";  						Stat_AllTitles += title.Title;  					}  				}  				// get votes  				foreach (AniDB_Vote vote in allVotes) {  					if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  						countVotes++;  						totalVotes += (decimal)vote.VoteValue;  						if (vote.VoteType == (int)AniDBVoteType.Anime) {  							countVotesPerm++;  							totalVotesPerm += (decimal)vote.VoteValue;  						}  						if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  							countVotesTemp++;  							totalVotesTemp += (decimal)vote.VoteValue;  						}  						break;  					}  				}  			}  			// for the group' if any of the series don't have a tvdb link  			// we will consider the group as not having a tvdb link  			if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID))  				hasTvDB = false;  			if (!animeWithMovieCrossRef.Contains (series.AniDB_ID))  				hasMovieDB = false;  			if (!animeWithMALCrossRef.Contains (series.AniDB_ID))  				hasMAL = false;  			if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID) && !animeWithMovieCrossRef.Contains (series.AniDB_ID))  				hasMovieDBOrTvDB = false;  		}  		if (allVidQuality.ContainsKey (ag.AnimeGroupID))  			StatGroupVideoQuality [ag.AnimeGroupID] = allVidQuality [ag.AnimeGroupID];  		else  			StatGroupVideoQuality [ag.AnimeGroupID] = "";  		StatGroupVideoQualityEpisodes [ag.AnimeGroupID] = Stat_AllVideoQualityEpisodes;  		StatGroupIsComplete [ag.AnimeGroupID] = isComplete;  		StatGroupIsFinishedAiring [ag.AnimeGroupID] = hasFinishedAiring;  		StatGroupIsCurrentlyAiring [ag.AnimeGroupID] = isCurrentlyAiring;  		StatGroupSeriesCount [ag.AnimeGroupID] = seriesCount;  		StatGroupEpisodeCount [ag.AnimeGroupID] = epCount;  		StatGroupTitles [ag.AnimeGroupID] = Stat_AllTitles;  		StatGroupAirDate_Max [ag.AnimeGroupID] = Stat_AirDate_Max;  		StatGroupAirDate_Min [ag.AnimeGroupID] = Stat_AirDate_Min;  		StatGroupEndDate [ag.AnimeGroupID] = Stat_EndDate;  		StatGroupSeriesCreatedDate [ag.AnimeGroupID] = Stat_SeriesCreatedDate;  		StatGroupHasTvDB [ag.AnimeGroupID] = hasTvDB;  		StatGroupHasMAL [ag.AnimeGroupID] = hasMAL;  		StatGroupHasMovieDB [ag.AnimeGroupID] = hasMovieDB;  		StatGroupHasMovieDBOrTvDB [ag.AnimeGroupID] = hasMovieDBOrTvDB;  		decimal? Stat_UserVoteOverall = null;  		if (countVotes > 0)  			Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  		StatGroupUserVoteOverall [ag.AnimeGroupID] = Stat_UserVoteOverall;  		decimal? Stat_UserVotePermanent = null;  		if (countVotesPerm > 0)  			Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  		StatGroupUserVotePermanent [ag.AnimeGroupID] = Stat_UserVotePermanent;  		decimal? Stat_UserVoteTemporary = null;  		if (countVotesTemp > 0)  			Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  		StatGroupUserVoteTemporary [ag.AnimeGroupID] = Stat_UserVoteTemporary;  		StatGroupAniDBRating [ag.AnimeGroupID] = ag.AniDBRating;  		Stat_AllCategories = "";  		foreach (int catID in categoryIDList) {  			if (!allCatgeoriesDict.ContainsKey (catID))  				continue;  			string catName = allCatgeoriesDict [catID].CategoryName;  			if (Stat_AllCategories.Length > 0)  				Stat_AllCategories += "|";  			Stat_AllCategories += catName;  		}  		this.StatGroupCategories [ag.AnimeGroupID] = Stat_AllCategories;  		string Stat_AudioLanguages = "";  		foreach (string audioLan in audioLanguageList) {  			if (Stat_AudioLanguages.Length > 0)  				Stat_AudioLanguages += "'";  			Stat_AudioLanguages += audioLan;  		}  		this.StatGroupAudioLanguages [ag.AnimeGroupID] = Stat_AudioLanguages;  		string Stat_SubtitleLanguages = "";  		foreach (string subLan in subtitleLanguageList) {  			if (Stat_SubtitleLanguages.Length > 0)  				Stat_SubtitleLanguages += "'";  			Stat_SubtitleLanguages += subLan;  		}  		this.StatGroupSubtitleLanguages [ag.AnimeGroupID] = Stat_SubtitleLanguages;  		UpdateGroupFilterUsingGroup (ag.AnimeGroupID);  		UpdatePlexAnimeGroup (session' ag' allSeries);  	}  	ts = DateTime.Now - start;  	logger.Info ("GetAllGroups (Contracts) in {0} ms"' ts.TotalMilliseconds);  	//UpdateAllAnimeContracts();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	ClearAllData ();  	#region Get the data  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	AniDB_CategoryRepository repCats = new AniDB_CategoryRepository ();  	AniDB_Anime_CategoryRepository repAnimeCat = new AniDB_Anime_CategoryRepository ();  	AniDB_Anime_TitleRepository repTitles = new AniDB_Anime_TitleRepository ();  	List<AnimeGroup> allGrps = repGroups.GetAll ();  	Dictionary<int' AnimeGroup> allGroupsDict = new Dictionary<int' AnimeGroup> ();  	foreach (AnimeGroup agrp in allGrps)  		allGroupsDict [agrp.AnimeGroupID] = agrp;  	TimeSpan ts = DateTime.Now - start;  	logger.Info ("Get All GROUPS (Database) in {0} ms"' ts.TotalMilliseconds);  	// anime  	start = DateTime.Now;  	List<AniDB_Anime> allAnime = repAnime.GetAll ();  	Dictionary<int' AniDB_Anime> allAnimeDict = new Dictionary<int' AniDB_Anime> ();  	foreach (AniDB_Anime anime in allAnime)  		allAnimeDict [anime.AnimeID] = anime;  	ts = DateTime.Now - start;  	logger.Info ("Get All ANIME (Database) in {0} ms"' ts.TotalMilliseconds);  	// categories  	start = DateTime.Now;  	List<AniDB_Category> allCatgeories = repCats.GetAll ();  	Dictionary<int' AniDB_Category> allCatgeoriesDict = new Dictionary<int' AniDB_Category> ();  	foreach (AniDB_Category cat in allCatgeories)  		allCatgeoriesDict [cat.CategoryID] = cat;  	List<AniDB_Anime_Category> allAnimeCatgeories = repAnimeCat.GetAll ();  	Dictionary<int' List<int>> allAnimeCatgeoriesDict = new Dictionary<int' List<int>> ();  	// animeid / list of category id's  	foreach (AniDB_Anime_Category aniCat in allAnimeCatgeories) {  		if (!allAnimeCatgeoriesDict.ContainsKey (aniCat.AnimeID))  			allAnimeCatgeoriesDict [aniCat.AnimeID] = new List<int> ();  		allAnimeCatgeoriesDict [aniCat.AnimeID].Add (aniCat.CategoryID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All CATEGORIES (Database) in {0} ms"' ts.TotalMilliseconds);  	// titles  	start = DateTime.Now;  	List<AniDB_Anime_Title> allTitles = repTitles.GetAll ();  	Dictionary<int' List<AniDB_Anime_Title>> allTitlesDict = new Dictionary<int' List<AniDB_Anime_Title>> ();  	// animeid / list of titles  	foreach (AniDB_Anime_Title aniTitle in allTitles) {  		if (!allTitlesDict.ContainsKey (aniTitle.AnimeID))  			allTitlesDict [aniTitle.AnimeID] = new List<AniDB_Anime_Title> ();  		allTitlesDict [aniTitle.AnimeID].Add (aniTitle);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All TITLES (Database) in {0} ms"' ts.TotalMilliseconds);  	// user votes  	start = DateTime.Now;  	AniDB_VoteRepository repVotes = new AniDB_VoteRepository ();  	List<AniDB_Vote> allVotes = repVotes.GetAll ();  	ts = DateTime.Now - start;  	logger.Info ("Get All VOTES (Database) in {0} ms"' ts.TotalMilliseconds);  	// video quality  	start = DateTime.Now;  	AdhocRepository rep = new AdhocRepository ();  	Dictionary<int' string> allVidQuality = rep.GetAllVideoQualityByGroup ();  	ts = DateTime.Now - start;  	logger.Info ("Get VIDEO QUALITY STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	// video quality episode stats  	start = DateTime.Now;  	Dictionary<int' AnimeVideoQualityStat> dictStats = rep.GetEpisodeVideoQualityStatsByAnime ();  	ts = DateTime.Now - start;  	logger.Info ("Get VIDEO QUALITY EPISODE STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	// audio and subtitle language stats  	start = DateTime.Now;  	Dictionary<int' LanguageStat> dictAudioStats = rep.GetAudioLanguageStatsForAnime ();  	Dictionary<int' LanguageStat> dictSubtitleStats = rep.GetSubtitleLanguageStatsForAnime ();  	ts = DateTime.Now - start;  	logger.Info ("Get LANGUAGE STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	start = DateTime.Now;  	List<AnimeSeries> allSeries = repSeries.GetAll ();  	ts = DateTime.Now - start;  	logger.Info ("Get All Series (Database) in {0} ms"' ts.TotalMilliseconds);  	// TvDB  	start = DateTime.Now;  	CrossRef_AniDB_TvDBV2Repository repCrossRef = new CrossRef_AniDB_TvDBV2Repository ();  	List<CrossRef_AniDB_TvDBV2> allCrossRefs = repCrossRef.GetAll ();  	List<int> animeWithTvDBCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_TvDBV2 xref in allCrossRefs) {  		if (!animeWithTvDBCrossRef.Contains (xref.AnimeID))  			animeWithTvDBCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->TvDB Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	// MovieDB  	start = DateTime.Now;  	CrossRef_AniDB_OtherRepository repOtherCrossRef = new CrossRef_AniDB_OtherRepository ();  	List<CrossRef_AniDB_Other> allOtherCrossRefs = repOtherCrossRef.GetAll ();  	List<int> animeWithMovieCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_Other xref in allOtherCrossRefs) {  		if (!animeWithMovieCrossRef.Contains (xref.AnimeID) && xref.CrossRefType == (int)CrossRefType.MovieDB)  			animeWithMovieCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->MovieDB Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	// MAL  	start = DateTime.Now;  	CrossRef_AniDB_MALRepository repMALCrossRef = new CrossRef_AniDB_MALRepository ();  	List<CrossRef_AniDB_MAL> allMALCrossRefs = repMALCrossRef.GetAll ();  	List<int> animeWithMALCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_MAL xref in allMALCrossRefs) {  		if (!animeWithMALCrossRef.Contains (xref.AnimeID))  			animeWithMALCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->MAL Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	#endregion  	start = DateTime.Now;  	var session = JMMService.SessionFactory.OpenSession ();  	foreach (AnimeGroup ag in allGrps) {  		// get all the series for this group  		List<AnimeSeries> seriesForGroup = new List<AnimeSeries> ();  		GetAnimeSeriesRecursive (ag' ref seriesForGroup' allSeries' allGroupsDict);  		/* 					if (ag.AnimeGroupID == 915) 					{ 						Console.Write(""); 					}                      */DateTime? Stat_AirDate_Min = null;  		DateTime? Stat_AirDate_Max = null;  		DateTime? Stat_EndDate = new DateTime (1980' 1' 1);  		DateTime? Stat_SeriesCreatedDate = null;  		bool isComplete = false;  		bool hasFinishedAiring = false;  		bool isCurrentlyAiring = false;  		List<int> categoryIDList = new List<int> ();  		List<string> audioLanguageList = new List<string> ();  		List<string> subtitleLanguageList = new List<string> ();  		string Stat_AllTitles = "";  		string Stat_AllCategories = "";  		string Stat_AllVideoQualityEpisodes = "";  		decimal totalVotesPerm = 0' totalVotesTemp = 0' totalVotes = 0;  		int countVotesPerm = 0' countVotesTemp = 0' countVotes = 0;  		bool hasTvDB = true;  		bool hasMAL = true;  		bool hasMovieDB = true;  		bool hasMovieDBOrTvDB = true;  		int seriesCount = 0;  		int epCount = 0;  		foreach (AnimeSeries series in seriesForGroup) {  			seriesCount++;  			if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  				AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  				epCount = epCount + thisAnime.EpisodeCountNormal;  				// All Video Quality Episodes  				// Try to determine if this anime has all the episodes available at a certain video quality  				// e.g.  the series has all episodes in blu-ray  				if (dictStats.ContainsKey (series.AniDB_ID)) {  					if (series.AniDB_ID == 7656) {  						Debug.Print ("");  					}  					AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  					foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  						if (kvp.Value >= thisAnime.EpisodeCountNormal) {  							if (Stat_AllVideoQualityEpisodes.Length > 0)  								Stat_AllVideoQualityEpisodes += "'";  							Stat_AllVideoQualityEpisodes += kvp.Key;  						}  					}  				}  				// Calculate Air Date   				DateTime? thisDate = thisAnime.AirDate;  				if (thisDate.HasValue) {  					if (Stat_AirDate_Min.HasValue) {  						if (thisDate.Value < Stat_AirDate_Min.Value)  							Stat_AirDate_Min = thisDate;  					}  					else  						Stat_AirDate_Min = thisDate;  					if (Stat_AirDate_Max.HasValue) {  						if (thisDate.Value > Stat_AirDate_Max.Value)  							Stat_AirDate_Max = thisDate;  					}  					else  						Stat_AirDate_Max = thisDate;  				}  				// calculate end date  				// if the end date is NULL it actually means it is ongoing' so this is the max possible value  				thisDate = thisAnime.EndDate;  				if (thisDate.HasValue && Stat_EndDate.HasValue) {  					if (thisDate.Value > Stat_EndDate.Value)  						Stat_EndDate = thisDate;  				}  				else  					Stat_EndDate = null;  				// Calculate Series Created Date   				thisDate = series.DateTimeCreated;  				if (thisDate.HasValue) {  					if (Stat_SeriesCreatedDate.HasValue) {  						if (thisDate.Value < Stat_SeriesCreatedDate.Value)  							Stat_SeriesCreatedDate = thisDate;  					}  					else  						Stat_SeriesCreatedDate = thisDate;  				}  				/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  				if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  					hasFinishedAiring = true;  				// Note - only one series has to be currently airing to qualify  				if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  					isCurrentlyAiring = true;  				// We evaluate IsComplete as true if  				// 1. series has finished airing  				// 2. user has all episodes locally  				// Note - only one series has to be complete for the group to be considered complete  				if (thisAnime.EndDate.HasValue) {  					if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  						isComplete = true;  					}  				}  				// get categories  				if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  					foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  						if (!categoryIDList.Contains (catID))  							categoryIDList.Add (catID);  					}  				}  				// get audio languages  				if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  					foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  						if (!audioLanguageList.Contains (lanName))  							audioLanguageList.Add (lanName);  					}  				}  				// get subtitle languages  				if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  					foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  						if (!subtitleLanguageList.Contains (lanName))  							subtitleLanguageList.Add (lanName);  					}  				}  				// get titles  				if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  					foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  						if (Stat_AllTitles.Length > 0)  							Stat_AllTitles += "'";  						Stat_AllTitles += title.Title;  					}  				}  				// get votes  				foreach (AniDB_Vote vote in allVotes) {  					if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  						countVotes++;  						totalVotes += (decimal)vote.VoteValue;  						if (vote.VoteType == (int)AniDBVoteType.Anime) {  							countVotesPerm++;  							totalVotesPerm += (decimal)vote.VoteValue;  						}  						if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  							countVotesTemp++;  							totalVotesTemp += (decimal)vote.VoteValue;  						}  						break;  					}  				}  			}  			// for the group' if any of the series don't have a tvdb link  			// we will consider the group as not having a tvdb link  			if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID))  				hasTvDB = false;  			if (!animeWithMovieCrossRef.Contains (series.AniDB_ID))  				hasMovieDB = false;  			if (!animeWithMALCrossRef.Contains (series.AniDB_ID))  				hasMAL = false;  			if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID) && !animeWithMovieCrossRef.Contains (series.AniDB_ID))  				hasMovieDBOrTvDB = false;  		}  		if (allVidQuality.ContainsKey (ag.AnimeGroupID))  			StatGroupVideoQuality [ag.AnimeGroupID] = allVidQuality [ag.AnimeGroupID];  		else  			StatGroupVideoQuality [ag.AnimeGroupID] = "";  		StatGroupVideoQualityEpisodes [ag.AnimeGroupID] = Stat_AllVideoQualityEpisodes;  		StatGroupIsComplete [ag.AnimeGroupID] = isComplete;  		StatGroupIsFinishedAiring [ag.AnimeGroupID] = hasFinishedAiring;  		StatGroupIsCurrentlyAiring [ag.AnimeGroupID] = isCurrentlyAiring;  		StatGroupSeriesCount [ag.AnimeGroupID] = seriesCount;  		StatGroupEpisodeCount [ag.AnimeGroupID] = epCount;  		StatGroupTitles [ag.AnimeGroupID] = Stat_AllTitles;  		StatGroupAirDate_Max [ag.AnimeGroupID] = Stat_AirDate_Max;  		StatGroupAirDate_Min [ag.AnimeGroupID] = Stat_AirDate_Min;  		StatGroupEndDate [ag.AnimeGroupID] = Stat_EndDate;  		StatGroupSeriesCreatedDate [ag.AnimeGroupID] = Stat_SeriesCreatedDate;  		StatGroupHasTvDB [ag.AnimeGroupID] = hasTvDB;  		StatGroupHasMAL [ag.AnimeGroupID] = hasMAL;  		StatGroupHasMovieDB [ag.AnimeGroupID] = hasMovieDB;  		StatGroupHasMovieDBOrTvDB [ag.AnimeGroupID] = hasMovieDBOrTvDB;  		decimal? Stat_UserVoteOverall = null;  		if (countVotes > 0)  			Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  		StatGroupUserVoteOverall [ag.AnimeGroupID] = Stat_UserVoteOverall;  		decimal? Stat_UserVotePermanent = null;  		if (countVotesPerm > 0)  			Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  		StatGroupUserVotePermanent [ag.AnimeGroupID] = Stat_UserVotePermanent;  		decimal? Stat_UserVoteTemporary = null;  		if (countVotesTemp > 0)  			Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  		StatGroupUserVoteTemporary [ag.AnimeGroupID] = Stat_UserVoteTemporary;  		StatGroupAniDBRating [ag.AnimeGroupID] = ag.AniDBRating;  		Stat_AllCategories = "";  		foreach (int catID in categoryIDList) {  			if (!allCatgeoriesDict.ContainsKey (catID))  				continue;  			string catName = allCatgeoriesDict [catID].CategoryName;  			if (Stat_AllCategories.Length > 0)  				Stat_AllCategories += "|";  			Stat_AllCategories += catName;  		}  		this.StatGroupCategories [ag.AnimeGroupID] = Stat_AllCategories;  		string Stat_AudioLanguages = "";  		foreach (string audioLan in audioLanguageList) {  			if (Stat_AudioLanguages.Length > 0)  				Stat_AudioLanguages += "'";  			Stat_AudioLanguages += audioLan;  		}  		this.StatGroupAudioLanguages [ag.AnimeGroupID] = Stat_AudioLanguages;  		string Stat_SubtitleLanguages = "";  		foreach (string subLan in subtitleLanguageList) {  			if (Stat_SubtitleLanguages.Length > 0)  				Stat_SubtitleLanguages += "'";  			Stat_SubtitleLanguages += subLan;  		}  		this.StatGroupSubtitleLanguages [ag.AnimeGroupID] = Stat_SubtitleLanguages;  		UpdateGroupFilterUsingGroup (ag.AnimeGroupID);  		UpdatePlexAnimeGroup (session' ag' allSeries);  	}  	ts = DateTime.Now - start;  	logger.Info ("GetAllGroups (Contracts) in {0} ms"' ts.TotalMilliseconds);  	//UpdateAllAnimeContracts();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	ClearAllData ();  	#region Get the data  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	AniDB_CategoryRepository repCats = new AniDB_CategoryRepository ();  	AniDB_Anime_CategoryRepository repAnimeCat = new AniDB_Anime_CategoryRepository ();  	AniDB_Anime_TitleRepository repTitles = new AniDB_Anime_TitleRepository ();  	List<AnimeGroup> allGrps = repGroups.GetAll ();  	Dictionary<int' AnimeGroup> allGroupsDict = new Dictionary<int' AnimeGroup> ();  	foreach (AnimeGroup agrp in allGrps)  		allGroupsDict [agrp.AnimeGroupID] = agrp;  	TimeSpan ts = DateTime.Now - start;  	logger.Info ("Get All GROUPS (Database) in {0} ms"' ts.TotalMilliseconds);  	// anime  	start = DateTime.Now;  	List<AniDB_Anime> allAnime = repAnime.GetAll ();  	Dictionary<int' AniDB_Anime> allAnimeDict = new Dictionary<int' AniDB_Anime> ();  	foreach (AniDB_Anime anime in allAnime)  		allAnimeDict [anime.AnimeID] = anime;  	ts = DateTime.Now - start;  	logger.Info ("Get All ANIME (Database) in {0} ms"' ts.TotalMilliseconds);  	// categories  	start = DateTime.Now;  	List<AniDB_Category> allCatgeories = repCats.GetAll ();  	Dictionary<int' AniDB_Category> allCatgeoriesDict = new Dictionary<int' AniDB_Category> ();  	foreach (AniDB_Category cat in allCatgeories)  		allCatgeoriesDict [cat.CategoryID] = cat;  	List<AniDB_Anime_Category> allAnimeCatgeories = repAnimeCat.GetAll ();  	Dictionary<int' List<int>> allAnimeCatgeoriesDict = new Dictionary<int' List<int>> ();  	// animeid / list of category id's  	foreach (AniDB_Anime_Category aniCat in allAnimeCatgeories) {  		if (!allAnimeCatgeoriesDict.ContainsKey (aniCat.AnimeID))  			allAnimeCatgeoriesDict [aniCat.AnimeID] = new List<int> ();  		allAnimeCatgeoriesDict [aniCat.AnimeID].Add (aniCat.CategoryID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All CATEGORIES (Database) in {0} ms"' ts.TotalMilliseconds);  	// titles  	start = DateTime.Now;  	List<AniDB_Anime_Title> allTitles = repTitles.GetAll ();  	Dictionary<int' List<AniDB_Anime_Title>> allTitlesDict = new Dictionary<int' List<AniDB_Anime_Title>> ();  	// animeid / list of titles  	foreach (AniDB_Anime_Title aniTitle in allTitles) {  		if (!allTitlesDict.ContainsKey (aniTitle.AnimeID))  			allTitlesDict [aniTitle.AnimeID] = new List<AniDB_Anime_Title> ();  		allTitlesDict [aniTitle.AnimeID].Add (aniTitle);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All TITLES (Database) in {0} ms"' ts.TotalMilliseconds);  	// user votes  	start = DateTime.Now;  	AniDB_VoteRepository repVotes = new AniDB_VoteRepository ();  	List<AniDB_Vote> allVotes = repVotes.GetAll ();  	ts = DateTime.Now - start;  	logger.Info ("Get All VOTES (Database) in {0} ms"' ts.TotalMilliseconds);  	// video quality  	start = DateTime.Now;  	AdhocRepository rep = new AdhocRepository ();  	Dictionary<int' string> allVidQuality = rep.GetAllVideoQualityByGroup ();  	ts = DateTime.Now - start;  	logger.Info ("Get VIDEO QUALITY STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	// video quality episode stats  	start = DateTime.Now;  	Dictionary<int' AnimeVideoQualityStat> dictStats = rep.GetEpisodeVideoQualityStatsByAnime ();  	ts = DateTime.Now - start;  	logger.Info ("Get VIDEO QUALITY EPISODE STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	// audio and subtitle language stats  	start = DateTime.Now;  	Dictionary<int' LanguageStat> dictAudioStats = rep.GetAudioLanguageStatsForAnime ();  	Dictionary<int' LanguageStat> dictSubtitleStats = rep.GetSubtitleLanguageStatsForAnime ();  	ts = DateTime.Now - start;  	logger.Info ("Get LANGUAGE STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	start = DateTime.Now;  	List<AnimeSeries> allSeries = repSeries.GetAll ();  	ts = DateTime.Now - start;  	logger.Info ("Get All Series (Database) in {0} ms"' ts.TotalMilliseconds);  	// TvDB  	start = DateTime.Now;  	CrossRef_AniDB_TvDBV2Repository repCrossRef = new CrossRef_AniDB_TvDBV2Repository ();  	List<CrossRef_AniDB_TvDBV2> allCrossRefs = repCrossRef.GetAll ();  	List<int> animeWithTvDBCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_TvDBV2 xref in allCrossRefs) {  		if (!animeWithTvDBCrossRef.Contains (xref.AnimeID))  			animeWithTvDBCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->TvDB Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	// MovieDB  	start = DateTime.Now;  	CrossRef_AniDB_OtherRepository repOtherCrossRef = new CrossRef_AniDB_OtherRepository ();  	List<CrossRef_AniDB_Other> allOtherCrossRefs = repOtherCrossRef.GetAll ();  	List<int> animeWithMovieCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_Other xref in allOtherCrossRefs) {  		if (!animeWithMovieCrossRef.Contains (xref.AnimeID) && xref.CrossRefType == (int)CrossRefType.MovieDB)  			animeWithMovieCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->MovieDB Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	// MAL  	start = DateTime.Now;  	CrossRef_AniDB_MALRepository repMALCrossRef = new CrossRef_AniDB_MALRepository ();  	List<CrossRef_AniDB_MAL> allMALCrossRefs = repMALCrossRef.GetAll ();  	List<int> animeWithMALCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_MAL xref in allMALCrossRefs) {  		if (!animeWithMALCrossRef.Contains (xref.AnimeID))  			animeWithMALCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->MAL Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	#endregion  	start = DateTime.Now;  	var session = JMMService.SessionFactory.OpenSession ();  	foreach (AnimeGroup ag in allGrps) {  		// get all the series for this group  		List<AnimeSeries> seriesForGroup = new List<AnimeSeries> ();  		GetAnimeSeriesRecursive (ag' ref seriesForGroup' allSeries' allGroupsDict);  		/* 					if (ag.AnimeGroupID == 915) 					{ 						Console.Write(""); 					}                      */DateTime? Stat_AirDate_Min = null;  		DateTime? Stat_AirDate_Max = null;  		DateTime? Stat_EndDate = new DateTime (1980' 1' 1);  		DateTime? Stat_SeriesCreatedDate = null;  		bool isComplete = false;  		bool hasFinishedAiring = false;  		bool isCurrentlyAiring = false;  		List<int> categoryIDList = new List<int> ();  		List<string> audioLanguageList = new List<string> ();  		List<string> subtitleLanguageList = new List<string> ();  		string Stat_AllTitles = "";  		string Stat_AllCategories = "";  		string Stat_AllVideoQualityEpisodes = "";  		decimal totalVotesPerm = 0' totalVotesTemp = 0' totalVotes = 0;  		int countVotesPerm = 0' countVotesTemp = 0' countVotes = 0;  		bool hasTvDB = true;  		bool hasMAL = true;  		bool hasMovieDB = true;  		bool hasMovieDBOrTvDB = true;  		int seriesCount = 0;  		int epCount = 0;  		foreach (AnimeSeries series in seriesForGroup) {  			seriesCount++;  			if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  				AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  				epCount = epCount + thisAnime.EpisodeCountNormal;  				// All Video Quality Episodes  				// Try to determine if this anime has all the episodes available at a certain video quality  				// e.g.  the series has all episodes in blu-ray  				if (dictStats.ContainsKey (series.AniDB_ID)) {  					if (series.AniDB_ID == 7656) {  						Debug.Print ("");  					}  					AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  					foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  						if (kvp.Value >= thisAnime.EpisodeCountNormal) {  							if (Stat_AllVideoQualityEpisodes.Length > 0)  								Stat_AllVideoQualityEpisodes += "'";  							Stat_AllVideoQualityEpisodes += kvp.Key;  						}  					}  				}  				// Calculate Air Date   				DateTime? thisDate = thisAnime.AirDate;  				if (thisDate.HasValue) {  					if (Stat_AirDate_Min.HasValue) {  						if (thisDate.Value < Stat_AirDate_Min.Value)  							Stat_AirDate_Min = thisDate;  					}  					else  						Stat_AirDate_Min = thisDate;  					if (Stat_AirDate_Max.HasValue) {  						if (thisDate.Value > Stat_AirDate_Max.Value)  							Stat_AirDate_Max = thisDate;  					}  					else  						Stat_AirDate_Max = thisDate;  				}  				// calculate end date  				// if the end date is NULL it actually means it is ongoing' so this is the max possible value  				thisDate = thisAnime.EndDate;  				if (thisDate.HasValue && Stat_EndDate.HasValue) {  					if (thisDate.Value > Stat_EndDate.Value)  						Stat_EndDate = thisDate;  				}  				else  					Stat_EndDate = null;  				// Calculate Series Created Date   				thisDate = series.DateTimeCreated;  				if (thisDate.HasValue) {  					if (Stat_SeriesCreatedDate.HasValue) {  						if (thisDate.Value < Stat_SeriesCreatedDate.Value)  							Stat_SeriesCreatedDate = thisDate;  					}  					else  						Stat_SeriesCreatedDate = thisDate;  				}  				/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  				if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  					hasFinishedAiring = true;  				// Note - only one series has to be currently airing to qualify  				if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  					isCurrentlyAiring = true;  				// We evaluate IsComplete as true if  				// 1. series has finished airing  				// 2. user has all episodes locally  				// Note - only one series has to be complete for the group to be considered complete  				if (thisAnime.EndDate.HasValue) {  					if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  						isComplete = true;  					}  				}  				// get categories  				if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  					foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  						if (!categoryIDList.Contains (catID))  							categoryIDList.Add (catID);  					}  				}  				// get audio languages  				if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  					foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  						if (!audioLanguageList.Contains (lanName))  							audioLanguageList.Add (lanName);  					}  				}  				// get subtitle languages  				if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  					foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  						if (!subtitleLanguageList.Contains (lanName))  							subtitleLanguageList.Add (lanName);  					}  				}  				// get titles  				if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  					foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  						if (Stat_AllTitles.Length > 0)  							Stat_AllTitles += "'";  						Stat_AllTitles += title.Title;  					}  				}  				// get votes  				foreach (AniDB_Vote vote in allVotes) {  					if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  						countVotes++;  						totalVotes += (decimal)vote.VoteValue;  						if (vote.VoteType == (int)AniDBVoteType.Anime) {  							countVotesPerm++;  							totalVotesPerm += (decimal)vote.VoteValue;  						}  						if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  							countVotesTemp++;  							totalVotesTemp += (decimal)vote.VoteValue;  						}  						break;  					}  				}  			}  			// for the group' if any of the series don't have a tvdb link  			// we will consider the group as not having a tvdb link  			if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID))  				hasTvDB = false;  			if (!animeWithMovieCrossRef.Contains (series.AniDB_ID))  				hasMovieDB = false;  			if (!animeWithMALCrossRef.Contains (series.AniDB_ID))  				hasMAL = false;  			if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID) && !animeWithMovieCrossRef.Contains (series.AniDB_ID))  				hasMovieDBOrTvDB = false;  		}  		if (allVidQuality.ContainsKey (ag.AnimeGroupID))  			StatGroupVideoQuality [ag.AnimeGroupID] = allVidQuality [ag.AnimeGroupID];  		else  			StatGroupVideoQuality [ag.AnimeGroupID] = "";  		StatGroupVideoQualityEpisodes [ag.AnimeGroupID] = Stat_AllVideoQualityEpisodes;  		StatGroupIsComplete [ag.AnimeGroupID] = isComplete;  		StatGroupIsFinishedAiring [ag.AnimeGroupID] = hasFinishedAiring;  		StatGroupIsCurrentlyAiring [ag.AnimeGroupID] = isCurrentlyAiring;  		StatGroupSeriesCount [ag.AnimeGroupID] = seriesCount;  		StatGroupEpisodeCount [ag.AnimeGroupID] = epCount;  		StatGroupTitles [ag.AnimeGroupID] = Stat_AllTitles;  		StatGroupAirDate_Max [ag.AnimeGroupID] = Stat_AirDate_Max;  		StatGroupAirDate_Min [ag.AnimeGroupID] = Stat_AirDate_Min;  		StatGroupEndDate [ag.AnimeGroupID] = Stat_EndDate;  		StatGroupSeriesCreatedDate [ag.AnimeGroupID] = Stat_SeriesCreatedDate;  		StatGroupHasTvDB [ag.AnimeGroupID] = hasTvDB;  		StatGroupHasMAL [ag.AnimeGroupID] = hasMAL;  		StatGroupHasMovieDB [ag.AnimeGroupID] = hasMovieDB;  		StatGroupHasMovieDBOrTvDB [ag.AnimeGroupID] = hasMovieDBOrTvDB;  		decimal? Stat_UserVoteOverall = null;  		if (countVotes > 0)  			Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  		StatGroupUserVoteOverall [ag.AnimeGroupID] = Stat_UserVoteOverall;  		decimal? Stat_UserVotePermanent = null;  		if (countVotesPerm > 0)  			Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  		StatGroupUserVotePermanent [ag.AnimeGroupID] = Stat_UserVotePermanent;  		decimal? Stat_UserVoteTemporary = null;  		if (countVotesTemp > 0)  			Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  		StatGroupUserVoteTemporary [ag.AnimeGroupID] = Stat_UserVoteTemporary;  		StatGroupAniDBRating [ag.AnimeGroupID] = ag.AniDBRating;  		Stat_AllCategories = "";  		foreach (int catID in categoryIDList) {  			if (!allCatgeoriesDict.ContainsKey (catID))  				continue;  			string catName = allCatgeoriesDict [catID].CategoryName;  			if (Stat_AllCategories.Length > 0)  				Stat_AllCategories += "|";  			Stat_AllCategories += catName;  		}  		this.StatGroupCategories [ag.AnimeGroupID] = Stat_AllCategories;  		string Stat_AudioLanguages = "";  		foreach (string audioLan in audioLanguageList) {  			if (Stat_AudioLanguages.Length > 0)  				Stat_AudioLanguages += "'";  			Stat_AudioLanguages += audioLan;  		}  		this.StatGroupAudioLanguages [ag.AnimeGroupID] = Stat_AudioLanguages;  		string Stat_SubtitleLanguages = "";  		foreach (string subLan in subtitleLanguageList) {  			if (Stat_SubtitleLanguages.Length > 0)  				Stat_SubtitleLanguages += "'";  			Stat_SubtitleLanguages += subLan;  		}  		this.StatGroupSubtitleLanguages [ag.AnimeGroupID] = Stat_SubtitleLanguages;  		UpdateGroupFilterUsingGroup (ag.AnimeGroupID);  		UpdatePlexAnimeGroup (session' ag' allSeries);  	}  	ts = DateTime.Now - start;  	logger.Info ("GetAllGroups (Contracts) in {0} ms"' ts.TotalMilliseconds);  	//UpdateAllAnimeContracts();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	ClearAllData ();  	#region Get the data  	AnimeGroupRepository repGroups = new AnimeGroupRepository ();  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	AniDB_CategoryRepository repCats = new AniDB_CategoryRepository ();  	AniDB_Anime_CategoryRepository repAnimeCat = new AniDB_Anime_CategoryRepository ();  	AniDB_Anime_TitleRepository repTitles = new AniDB_Anime_TitleRepository ();  	List<AnimeGroup> allGrps = repGroups.GetAll ();  	Dictionary<int' AnimeGroup> allGroupsDict = new Dictionary<int' AnimeGroup> ();  	foreach (AnimeGroup agrp in allGrps)  		allGroupsDict [agrp.AnimeGroupID] = agrp;  	TimeSpan ts = DateTime.Now - start;  	logger.Info ("Get All GROUPS (Database) in {0} ms"' ts.TotalMilliseconds);  	// anime  	start = DateTime.Now;  	List<AniDB_Anime> allAnime = repAnime.GetAll ();  	Dictionary<int' AniDB_Anime> allAnimeDict = new Dictionary<int' AniDB_Anime> ();  	foreach (AniDB_Anime anime in allAnime)  		allAnimeDict [anime.AnimeID] = anime;  	ts = DateTime.Now - start;  	logger.Info ("Get All ANIME (Database) in {0} ms"' ts.TotalMilliseconds);  	// categories  	start = DateTime.Now;  	List<AniDB_Category> allCatgeories = repCats.GetAll ();  	Dictionary<int' AniDB_Category> allCatgeoriesDict = new Dictionary<int' AniDB_Category> ();  	foreach (AniDB_Category cat in allCatgeories)  		allCatgeoriesDict [cat.CategoryID] = cat;  	List<AniDB_Anime_Category> allAnimeCatgeories = repAnimeCat.GetAll ();  	Dictionary<int' List<int>> allAnimeCatgeoriesDict = new Dictionary<int' List<int>> ();  	// animeid / list of category id's  	foreach (AniDB_Anime_Category aniCat in allAnimeCatgeories) {  		if (!allAnimeCatgeoriesDict.ContainsKey (aniCat.AnimeID))  			allAnimeCatgeoriesDict [aniCat.AnimeID] = new List<int> ();  		allAnimeCatgeoriesDict [aniCat.AnimeID].Add (aniCat.CategoryID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All CATEGORIES (Database) in {0} ms"' ts.TotalMilliseconds);  	// titles  	start = DateTime.Now;  	List<AniDB_Anime_Title> allTitles = repTitles.GetAll ();  	Dictionary<int' List<AniDB_Anime_Title>> allTitlesDict = new Dictionary<int' List<AniDB_Anime_Title>> ();  	// animeid / list of titles  	foreach (AniDB_Anime_Title aniTitle in allTitles) {  		if (!allTitlesDict.ContainsKey (aniTitle.AnimeID))  			allTitlesDict [aniTitle.AnimeID] = new List<AniDB_Anime_Title> ();  		allTitlesDict [aniTitle.AnimeID].Add (aniTitle);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All TITLES (Database) in {0} ms"' ts.TotalMilliseconds);  	// user votes  	start = DateTime.Now;  	AniDB_VoteRepository repVotes = new AniDB_VoteRepository ();  	List<AniDB_Vote> allVotes = repVotes.GetAll ();  	ts = DateTime.Now - start;  	logger.Info ("Get All VOTES (Database) in {0} ms"' ts.TotalMilliseconds);  	// video quality  	start = DateTime.Now;  	AdhocRepository rep = new AdhocRepository ();  	Dictionary<int' string> allVidQuality = rep.GetAllVideoQualityByGroup ();  	ts = DateTime.Now - start;  	logger.Info ("Get VIDEO QUALITY STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	// video quality episode stats  	start = DateTime.Now;  	Dictionary<int' AnimeVideoQualityStat> dictStats = rep.GetEpisodeVideoQualityStatsByAnime ();  	ts = DateTime.Now - start;  	logger.Info ("Get VIDEO QUALITY EPISODE STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	// audio and subtitle language stats  	start = DateTime.Now;  	Dictionary<int' LanguageStat> dictAudioStats = rep.GetAudioLanguageStatsForAnime ();  	Dictionary<int' LanguageStat> dictSubtitleStats = rep.GetSubtitleLanguageStatsForAnime ();  	ts = DateTime.Now - start;  	logger.Info ("Get LANGUAGE STATS (Database) in {0} ms"' ts.TotalMilliseconds);  	start = DateTime.Now;  	List<AnimeSeries> allSeries = repSeries.GetAll ();  	ts = DateTime.Now - start;  	logger.Info ("Get All Series (Database) in {0} ms"' ts.TotalMilliseconds);  	// TvDB  	start = DateTime.Now;  	CrossRef_AniDB_TvDBV2Repository repCrossRef = new CrossRef_AniDB_TvDBV2Repository ();  	List<CrossRef_AniDB_TvDBV2> allCrossRefs = repCrossRef.GetAll ();  	List<int> animeWithTvDBCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_TvDBV2 xref in allCrossRefs) {  		if (!animeWithTvDBCrossRef.Contains (xref.AnimeID))  			animeWithTvDBCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->TvDB Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	// MovieDB  	start = DateTime.Now;  	CrossRef_AniDB_OtherRepository repOtherCrossRef = new CrossRef_AniDB_OtherRepository ();  	List<CrossRef_AniDB_Other> allOtherCrossRefs = repOtherCrossRef.GetAll ();  	List<int> animeWithMovieCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_Other xref in allOtherCrossRefs) {  		if (!animeWithMovieCrossRef.Contains (xref.AnimeID) && xref.CrossRefType == (int)CrossRefType.MovieDB)  			animeWithMovieCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->MovieDB Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	// MAL  	start = DateTime.Now;  	CrossRef_AniDB_MALRepository repMALCrossRef = new CrossRef_AniDB_MALRepository ();  	List<CrossRef_AniDB_MAL> allMALCrossRefs = repMALCrossRef.GetAll ();  	List<int> animeWithMALCrossRef = new List<int> ();  	foreach (CrossRef_AniDB_MAL xref in allMALCrossRefs) {  		if (!animeWithMALCrossRef.Contains (xref.AnimeID))  			animeWithMALCrossRef.Add (xref.AnimeID);  	}  	ts = DateTime.Now - start;  	logger.Info ("Get All AniDB->MAL Cross Refs (Database) in {0} ms"' ts.TotalMilliseconds);  	#endregion  	start = DateTime.Now;  	var session = JMMService.SessionFactory.OpenSession ();  	foreach (AnimeGroup ag in allGrps) {  		// get all the series for this group  		List<AnimeSeries> seriesForGroup = new List<AnimeSeries> ();  		GetAnimeSeriesRecursive (ag' ref seriesForGroup' allSeries' allGroupsDict);  		/* 					if (ag.AnimeGroupID == 915) 					{ 						Console.Write(""); 					}                      */DateTime? Stat_AirDate_Min = null;  		DateTime? Stat_AirDate_Max = null;  		DateTime? Stat_EndDate = new DateTime (1980' 1' 1);  		DateTime? Stat_SeriesCreatedDate = null;  		bool isComplete = false;  		bool hasFinishedAiring = false;  		bool isCurrentlyAiring = false;  		List<int> categoryIDList = new List<int> ();  		List<string> audioLanguageList = new List<string> ();  		List<string> subtitleLanguageList = new List<string> ();  		string Stat_AllTitles = "";  		string Stat_AllCategories = "";  		string Stat_AllVideoQualityEpisodes = "";  		decimal totalVotesPerm = 0' totalVotesTemp = 0' totalVotes = 0;  		int countVotesPerm = 0' countVotesTemp = 0' countVotes = 0;  		bool hasTvDB = true;  		bool hasMAL = true;  		bool hasMovieDB = true;  		bool hasMovieDBOrTvDB = true;  		int seriesCount = 0;  		int epCount = 0;  		foreach (AnimeSeries series in seriesForGroup) {  			seriesCount++;  			if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  				AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  				epCount = epCount + thisAnime.EpisodeCountNormal;  				// All Video Quality Episodes  				// Try to determine if this anime has all the episodes available at a certain video quality  				// e.g.  the series has all episodes in blu-ray  				if (dictStats.ContainsKey (series.AniDB_ID)) {  					if (series.AniDB_ID == 7656) {  						Debug.Print ("");  					}  					AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  					foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  						if (kvp.Value >= thisAnime.EpisodeCountNormal) {  							if (Stat_AllVideoQualityEpisodes.Length > 0)  								Stat_AllVideoQualityEpisodes += "'";  							Stat_AllVideoQualityEpisodes += kvp.Key;  						}  					}  				}  				// Calculate Air Date   				DateTime? thisDate = thisAnime.AirDate;  				if (thisDate.HasValue) {  					if (Stat_AirDate_Min.HasValue) {  						if (thisDate.Value < Stat_AirDate_Min.Value)  							Stat_AirDate_Min = thisDate;  					}  					else  						Stat_AirDate_Min = thisDate;  					if (Stat_AirDate_Max.HasValue) {  						if (thisDate.Value > Stat_AirDate_Max.Value)  							Stat_AirDate_Max = thisDate;  					}  					else  						Stat_AirDate_Max = thisDate;  				}  				// calculate end date  				// if the end date is NULL it actually means it is ongoing' so this is the max possible value  				thisDate = thisAnime.EndDate;  				if (thisDate.HasValue && Stat_EndDate.HasValue) {  					if (thisDate.Value > Stat_EndDate.Value)  						Stat_EndDate = thisDate;  				}  				else  					Stat_EndDate = null;  				// Calculate Series Created Date   				thisDate = series.DateTimeCreated;  				if (thisDate.HasValue) {  					if (Stat_SeriesCreatedDate.HasValue) {  						if (thisDate.Value < Stat_SeriesCreatedDate.Value)  							Stat_SeriesCreatedDate = thisDate;  					}  					else  						Stat_SeriesCreatedDate = thisDate;  				}  				/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  				if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  					hasFinishedAiring = true;  				// Note - only one series has to be currently airing to qualify  				if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  					isCurrentlyAiring = true;  				// We evaluate IsComplete as true if  				// 1. series has finished airing  				// 2. user has all episodes locally  				// Note - only one series has to be complete for the group to be considered complete  				if (thisAnime.EndDate.HasValue) {  					if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  						isComplete = true;  					}  				}  				// get categories  				if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  					foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  						if (!categoryIDList.Contains (catID))  							categoryIDList.Add (catID);  					}  				}  				// get audio languages  				if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  					foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  						if (!audioLanguageList.Contains (lanName))  							audioLanguageList.Add (lanName);  					}  				}  				// get subtitle languages  				if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  					foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  						if (!subtitleLanguageList.Contains (lanName))  							subtitleLanguageList.Add (lanName);  					}  				}  				// get titles  				if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  					foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  						if (Stat_AllTitles.Length > 0)  							Stat_AllTitles += "'";  						Stat_AllTitles += title.Title;  					}  				}  				// get votes  				foreach (AniDB_Vote vote in allVotes) {  					if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  						countVotes++;  						totalVotes += (decimal)vote.VoteValue;  						if (vote.VoteType == (int)AniDBVoteType.Anime) {  							countVotesPerm++;  							totalVotesPerm += (decimal)vote.VoteValue;  						}  						if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  							countVotesTemp++;  							totalVotesTemp += (decimal)vote.VoteValue;  						}  						break;  					}  				}  			}  			// for the group' if any of the series don't have a tvdb link  			// we will consider the group as not having a tvdb link  			if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID))  				hasTvDB = false;  			if (!animeWithMovieCrossRef.Contains (series.AniDB_ID))  				hasMovieDB = false;  			if (!animeWithMALCrossRef.Contains (series.AniDB_ID))  				hasMAL = false;  			if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID) && !animeWithMovieCrossRef.Contains (series.AniDB_ID))  				hasMovieDBOrTvDB = false;  		}  		if (allVidQuality.ContainsKey (ag.AnimeGroupID))  			StatGroupVideoQuality [ag.AnimeGroupID] = allVidQuality [ag.AnimeGroupID];  		else  			StatGroupVideoQuality [ag.AnimeGroupID] = "";  		StatGroupVideoQualityEpisodes [ag.AnimeGroupID] = Stat_AllVideoQualityEpisodes;  		StatGroupIsComplete [ag.AnimeGroupID] = isComplete;  		StatGroupIsFinishedAiring [ag.AnimeGroupID] = hasFinishedAiring;  		StatGroupIsCurrentlyAiring [ag.AnimeGroupID] = isCurrentlyAiring;  		StatGroupSeriesCount [ag.AnimeGroupID] = seriesCount;  		StatGroupEpisodeCount [ag.AnimeGroupID] = epCount;  		StatGroupTitles [ag.AnimeGroupID] = Stat_AllTitles;  		StatGroupAirDate_Max [ag.AnimeGroupID] = Stat_AirDate_Max;  		StatGroupAirDate_Min [ag.AnimeGroupID] = Stat_AirDate_Min;  		StatGroupEndDate [ag.AnimeGroupID] = Stat_EndDate;  		StatGroupSeriesCreatedDate [ag.AnimeGroupID] = Stat_SeriesCreatedDate;  		StatGroupHasTvDB [ag.AnimeGroupID] = hasTvDB;  		StatGroupHasMAL [ag.AnimeGroupID] = hasMAL;  		StatGroupHasMovieDB [ag.AnimeGroupID] = hasMovieDB;  		StatGroupHasMovieDBOrTvDB [ag.AnimeGroupID] = hasMovieDBOrTvDB;  		decimal? Stat_UserVoteOverall = null;  		if (countVotes > 0)  			Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  		StatGroupUserVoteOverall [ag.AnimeGroupID] = Stat_UserVoteOverall;  		decimal? Stat_UserVotePermanent = null;  		if (countVotesPerm > 0)  			Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  		StatGroupUserVotePermanent [ag.AnimeGroupID] = Stat_UserVotePermanent;  		decimal? Stat_UserVoteTemporary = null;  		if (countVotesTemp > 0)  			Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  		StatGroupUserVoteTemporary [ag.AnimeGroupID] = Stat_UserVoteTemporary;  		StatGroupAniDBRating [ag.AnimeGroupID] = ag.AniDBRating;  		Stat_AllCategories = "";  		foreach (int catID in categoryIDList) {  			if (!allCatgeoriesDict.ContainsKey (catID))  				continue;  			string catName = allCatgeoriesDict [catID].CategoryName;  			if (Stat_AllCategories.Length > 0)  				Stat_AllCategories += "|";  			Stat_AllCategories += catName;  		}  		this.StatGroupCategories [ag.AnimeGroupID] = Stat_AllCategories;  		string Stat_AudioLanguages = "";  		foreach (string audioLan in audioLanguageList) {  			if (Stat_AudioLanguages.Length > 0)  				Stat_AudioLanguages += "'";  			Stat_AudioLanguages += audioLan;  		}  		this.StatGroupAudioLanguages [ag.AnimeGroupID] = Stat_AudioLanguages;  		string Stat_SubtitleLanguages = "";  		foreach (string subLan in subtitleLanguageList) {  			if (Stat_SubtitleLanguages.Length > 0)  				Stat_SubtitleLanguages += "'";  			Stat_SubtitleLanguages += subLan;  		}  		this.StatGroupSubtitleLanguages [ag.AnimeGroupID] = Stat_SubtitleLanguages;  		UpdateGroupFilterUsingGroup (ag.AnimeGroupID);  		UpdatePlexAnimeGroup (session' ag' allSeries);  	}  	ts = DateTime.Now - start;  	logger.Info ("GetAllGroups (Contracts) in {0} ms"' ts.TotalMilliseconds);  	//UpdateAllAnimeContracts();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: foreach (AnimeGroup ag in allGrps) {  	// get all the series for this group  	List<AnimeSeries> seriesForGroup = new List<AnimeSeries> ();  	GetAnimeSeriesRecursive (ag' ref seriesForGroup' allSeries' allGroupsDict);  	/* 					if (ag.AnimeGroupID == 915) 					{ 						Console.Write(""); 					}                      */DateTime? Stat_AirDate_Min = null;  	DateTime? Stat_AirDate_Max = null;  	DateTime? Stat_EndDate = new DateTime (1980' 1' 1);  	DateTime? Stat_SeriesCreatedDate = null;  	bool isComplete = false;  	bool hasFinishedAiring = false;  	bool isCurrentlyAiring = false;  	List<int> categoryIDList = new List<int> ();  	List<string> audioLanguageList = new List<string> ();  	List<string> subtitleLanguageList = new List<string> ();  	string Stat_AllTitles = "";  	string Stat_AllCategories = "";  	string Stat_AllVideoQualityEpisodes = "";  	decimal totalVotesPerm = 0' totalVotesTemp = 0' totalVotes = 0;  	int countVotesPerm = 0' countVotesTemp = 0' countVotes = 0;  	bool hasTvDB = true;  	bool hasMAL = true;  	bool hasMovieDB = true;  	bool hasMovieDBOrTvDB = true;  	int seriesCount = 0;  	int epCount = 0;  	foreach (AnimeSeries series in seriesForGroup) {  		seriesCount++;  		if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  			AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  			epCount = epCount + thisAnime.EpisodeCountNormal;  			// All Video Quality Episodes  			// Try to determine if this anime has all the episodes available at a certain video quality  			// e.g.  the series has all episodes in blu-ray  			if (dictStats.ContainsKey (series.AniDB_ID)) {  				if (series.AniDB_ID == 7656) {  					Debug.Print ("");  				}  				AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  				foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  					if (kvp.Value >= thisAnime.EpisodeCountNormal) {  						if (Stat_AllVideoQualityEpisodes.Length > 0)  							Stat_AllVideoQualityEpisodes += "'";  						Stat_AllVideoQualityEpisodes += kvp.Key;  					}  				}  			}  			// Calculate Air Date   			DateTime? thisDate = thisAnime.AirDate;  			if (thisDate.HasValue) {  				if (Stat_AirDate_Min.HasValue) {  					if (thisDate.Value < Stat_AirDate_Min.Value)  						Stat_AirDate_Min = thisDate;  				}  				else  					Stat_AirDate_Min = thisDate;  				if (Stat_AirDate_Max.HasValue) {  					if (thisDate.Value > Stat_AirDate_Max.Value)  						Stat_AirDate_Max = thisDate;  				}  				else  					Stat_AirDate_Max = thisDate;  			}  			// calculate end date  			// if the end date is NULL it actually means it is ongoing' so this is the max possible value  			thisDate = thisAnime.EndDate;  			if (thisDate.HasValue && Stat_EndDate.HasValue) {  				if (thisDate.Value > Stat_EndDate.Value)  					Stat_EndDate = thisDate;  			}  			else  				Stat_EndDate = null;  			// Calculate Series Created Date   			thisDate = series.DateTimeCreated;  			if (thisDate.HasValue) {  				if (Stat_SeriesCreatedDate.HasValue) {  					if (thisDate.Value < Stat_SeriesCreatedDate.Value)  						Stat_SeriesCreatedDate = thisDate;  				}  				else  					Stat_SeriesCreatedDate = thisDate;  			}  			/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  			if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  				hasFinishedAiring = true;  			// Note - only one series has to be currently airing to qualify  			if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  				isCurrentlyAiring = true;  			// We evaluate IsComplete as true if  			// 1. series has finished airing  			// 2. user has all episodes locally  			// Note - only one series has to be complete for the group to be considered complete  			if (thisAnime.EndDate.HasValue) {  				if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  					isComplete = true;  				}  			}  			// get categories  			if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  				foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  					if (!categoryIDList.Contains (catID))  						categoryIDList.Add (catID);  				}  			}  			// get audio languages  			if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  				foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  					if (!audioLanguageList.Contains (lanName))  						audioLanguageList.Add (lanName);  				}  			}  			// get subtitle languages  			if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  				foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  					if (!subtitleLanguageList.Contains (lanName))  						subtitleLanguageList.Add (lanName);  				}  			}  			// get titles  			if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  				foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  					if (Stat_AllTitles.Length > 0)  						Stat_AllTitles += "'";  					Stat_AllTitles += title.Title;  				}  			}  			// get votes  			foreach (AniDB_Vote vote in allVotes) {  				if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  					countVotes++;  					totalVotes += (decimal)vote.VoteValue;  					if (vote.VoteType == (int)AniDBVoteType.Anime) {  						countVotesPerm++;  						totalVotesPerm += (decimal)vote.VoteValue;  					}  					if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  						countVotesTemp++;  						totalVotesTemp += (decimal)vote.VoteValue;  					}  					break;  				}  			}  		}  		// for the group' if any of the series don't have a tvdb link  		// we will consider the group as not having a tvdb link  		if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID))  			hasTvDB = false;  		if (!animeWithMovieCrossRef.Contains (series.AniDB_ID))  			hasMovieDB = false;  		if (!animeWithMALCrossRef.Contains (series.AniDB_ID))  			hasMAL = false;  		if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID) && !animeWithMovieCrossRef.Contains (series.AniDB_ID))  			hasMovieDBOrTvDB = false;  	}  	if (allVidQuality.ContainsKey (ag.AnimeGroupID))  		StatGroupVideoQuality [ag.AnimeGroupID] = allVidQuality [ag.AnimeGroupID];  	else  		StatGroupVideoQuality [ag.AnimeGroupID] = "";  	StatGroupVideoQualityEpisodes [ag.AnimeGroupID] = Stat_AllVideoQualityEpisodes;  	StatGroupIsComplete [ag.AnimeGroupID] = isComplete;  	StatGroupIsFinishedAiring [ag.AnimeGroupID] = hasFinishedAiring;  	StatGroupIsCurrentlyAiring [ag.AnimeGroupID] = isCurrentlyAiring;  	StatGroupSeriesCount [ag.AnimeGroupID] = seriesCount;  	StatGroupEpisodeCount [ag.AnimeGroupID] = epCount;  	StatGroupTitles [ag.AnimeGroupID] = Stat_AllTitles;  	StatGroupAirDate_Max [ag.AnimeGroupID] = Stat_AirDate_Max;  	StatGroupAirDate_Min [ag.AnimeGroupID] = Stat_AirDate_Min;  	StatGroupEndDate [ag.AnimeGroupID] = Stat_EndDate;  	StatGroupSeriesCreatedDate [ag.AnimeGroupID] = Stat_SeriesCreatedDate;  	StatGroupHasTvDB [ag.AnimeGroupID] = hasTvDB;  	StatGroupHasMAL [ag.AnimeGroupID] = hasMAL;  	StatGroupHasMovieDB [ag.AnimeGroupID] = hasMovieDB;  	StatGroupHasMovieDBOrTvDB [ag.AnimeGroupID] = hasMovieDBOrTvDB;  	decimal? Stat_UserVoteOverall = null;  	if (countVotes > 0)  		Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  	StatGroupUserVoteOverall [ag.AnimeGroupID] = Stat_UserVoteOverall;  	decimal? Stat_UserVotePermanent = null;  	if (countVotesPerm > 0)  		Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  	StatGroupUserVotePermanent [ag.AnimeGroupID] = Stat_UserVotePermanent;  	decimal? Stat_UserVoteTemporary = null;  	if (countVotesTemp > 0)  		Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  	StatGroupUserVoteTemporary [ag.AnimeGroupID] = Stat_UserVoteTemporary;  	StatGroupAniDBRating [ag.AnimeGroupID] = ag.AniDBRating;  	Stat_AllCategories = "";  	foreach (int catID in categoryIDList) {  		if (!allCatgeoriesDict.ContainsKey (catID))  			continue;  		string catName = allCatgeoriesDict [catID].CategoryName;  		if (Stat_AllCategories.Length > 0)  			Stat_AllCategories += "|";  		Stat_AllCategories += catName;  	}  	this.StatGroupCategories [ag.AnimeGroupID] = Stat_AllCategories;  	string Stat_AudioLanguages = "";  	foreach (string audioLan in audioLanguageList) {  		if (Stat_AudioLanguages.Length > 0)  			Stat_AudioLanguages += "'";  		Stat_AudioLanguages += audioLan;  	}  	this.StatGroupAudioLanguages [ag.AnimeGroupID] = Stat_AudioLanguages;  	string Stat_SubtitleLanguages = "";  	foreach (string subLan in subtitleLanguageList) {  		if (Stat_SubtitleLanguages.Length > 0)  			Stat_SubtitleLanguages += "'";  		Stat_SubtitleLanguages += subLan;  	}  	this.StatGroupSubtitleLanguages [ag.AnimeGroupID] = Stat_SubtitleLanguages;  	UpdateGroupFilterUsingGroup (ag.AnimeGroupID);  	UpdatePlexAnimeGroup (session' ag' allSeries);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: foreach (AnimeGroup ag in allGrps) {  	// get all the series for this group  	List<AnimeSeries> seriesForGroup = new List<AnimeSeries> ();  	GetAnimeSeriesRecursive (ag' ref seriesForGroup' allSeries' allGroupsDict);  	/* 					if (ag.AnimeGroupID == 915) 					{ 						Console.Write(""); 					}                      */DateTime? Stat_AirDate_Min = null;  	DateTime? Stat_AirDate_Max = null;  	DateTime? Stat_EndDate = new DateTime (1980' 1' 1);  	DateTime? Stat_SeriesCreatedDate = null;  	bool isComplete = false;  	bool hasFinishedAiring = false;  	bool isCurrentlyAiring = false;  	List<int> categoryIDList = new List<int> ();  	List<string> audioLanguageList = new List<string> ();  	List<string> subtitleLanguageList = new List<string> ();  	string Stat_AllTitles = "";  	string Stat_AllCategories = "";  	string Stat_AllVideoQualityEpisodes = "";  	decimal totalVotesPerm = 0' totalVotesTemp = 0' totalVotes = 0;  	int countVotesPerm = 0' countVotesTemp = 0' countVotes = 0;  	bool hasTvDB = true;  	bool hasMAL = true;  	bool hasMovieDB = true;  	bool hasMovieDBOrTvDB = true;  	int seriesCount = 0;  	int epCount = 0;  	foreach (AnimeSeries series in seriesForGroup) {  		seriesCount++;  		if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  			AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  			epCount = epCount + thisAnime.EpisodeCountNormal;  			// All Video Quality Episodes  			// Try to determine if this anime has all the episodes available at a certain video quality  			// e.g.  the series has all episodes in blu-ray  			if (dictStats.ContainsKey (series.AniDB_ID)) {  				if (series.AniDB_ID == 7656) {  					Debug.Print ("");  				}  				AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  				foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  					if (kvp.Value >= thisAnime.EpisodeCountNormal) {  						if (Stat_AllVideoQualityEpisodes.Length > 0)  							Stat_AllVideoQualityEpisodes += "'";  						Stat_AllVideoQualityEpisodes += kvp.Key;  					}  				}  			}  			// Calculate Air Date   			DateTime? thisDate = thisAnime.AirDate;  			if (thisDate.HasValue) {  				if (Stat_AirDate_Min.HasValue) {  					if (thisDate.Value < Stat_AirDate_Min.Value)  						Stat_AirDate_Min = thisDate;  				}  				else  					Stat_AirDate_Min = thisDate;  				if (Stat_AirDate_Max.HasValue) {  					if (thisDate.Value > Stat_AirDate_Max.Value)  						Stat_AirDate_Max = thisDate;  				}  				else  					Stat_AirDate_Max = thisDate;  			}  			// calculate end date  			// if the end date is NULL it actually means it is ongoing' so this is the max possible value  			thisDate = thisAnime.EndDate;  			if (thisDate.HasValue && Stat_EndDate.HasValue) {  				if (thisDate.Value > Stat_EndDate.Value)  					Stat_EndDate = thisDate;  			}  			else  				Stat_EndDate = null;  			// Calculate Series Created Date   			thisDate = series.DateTimeCreated;  			if (thisDate.HasValue) {  				if (Stat_SeriesCreatedDate.HasValue) {  					if (thisDate.Value < Stat_SeriesCreatedDate.Value)  						Stat_SeriesCreatedDate = thisDate;  				}  				else  					Stat_SeriesCreatedDate = thisDate;  			}  			/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  			if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  				hasFinishedAiring = true;  			// Note - only one series has to be currently airing to qualify  			if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  				isCurrentlyAiring = true;  			// We evaluate IsComplete as true if  			// 1. series has finished airing  			// 2. user has all episodes locally  			// Note - only one series has to be complete for the group to be considered complete  			if (thisAnime.EndDate.HasValue) {  				if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  					isComplete = true;  				}  			}  			// get categories  			if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  				foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  					if (!categoryIDList.Contains (catID))  						categoryIDList.Add (catID);  				}  			}  			// get audio languages  			if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  				foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  					if (!audioLanguageList.Contains (lanName))  						audioLanguageList.Add (lanName);  				}  			}  			// get subtitle languages  			if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  				foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  					if (!subtitleLanguageList.Contains (lanName))  						subtitleLanguageList.Add (lanName);  				}  			}  			// get titles  			if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  				foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  					if (Stat_AllTitles.Length > 0)  						Stat_AllTitles += "'";  					Stat_AllTitles += title.Title;  				}  			}  			// get votes  			foreach (AniDB_Vote vote in allVotes) {  				if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  					countVotes++;  					totalVotes += (decimal)vote.VoteValue;  					if (vote.VoteType == (int)AniDBVoteType.Anime) {  						countVotesPerm++;  						totalVotesPerm += (decimal)vote.VoteValue;  					}  					if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  						countVotesTemp++;  						totalVotesTemp += (decimal)vote.VoteValue;  					}  					break;  				}  			}  		}  		// for the group' if any of the series don't have a tvdb link  		// we will consider the group as not having a tvdb link  		if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID))  			hasTvDB = false;  		if (!animeWithMovieCrossRef.Contains (series.AniDB_ID))  			hasMovieDB = false;  		if (!animeWithMALCrossRef.Contains (series.AniDB_ID))  			hasMAL = false;  		if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID) && !animeWithMovieCrossRef.Contains (series.AniDB_ID))  			hasMovieDBOrTvDB = false;  	}  	if (allVidQuality.ContainsKey (ag.AnimeGroupID))  		StatGroupVideoQuality [ag.AnimeGroupID] = allVidQuality [ag.AnimeGroupID];  	else  		StatGroupVideoQuality [ag.AnimeGroupID] = "";  	StatGroupVideoQualityEpisodes [ag.AnimeGroupID] = Stat_AllVideoQualityEpisodes;  	StatGroupIsComplete [ag.AnimeGroupID] = isComplete;  	StatGroupIsFinishedAiring [ag.AnimeGroupID] = hasFinishedAiring;  	StatGroupIsCurrentlyAiring [ag.AnimeGroupID] = isCurrentlyAiring;  	StatGroupSeriesCount [ag.AnimeGroupID] = seriesCount;  	StatGroupEpisodeCount [ag.AnimeGroupID] = epCount;  	StatGroupTitles [ag.AnimeGroupID] = Stat_AllTitles;  	StatGroupAirDate_Max [ag.AnimeGroupID] = Stat_AirDate_Max;  	StatGroupAirDate_Min [ag.AnimeGroupID] = Stat_AirDate_Min;  	StatGroupEndDate [ag.AnimeGroupID] = Stat_EndDate;  	StatGroupSeriesCreatedDate [ag.AnimeGroupID] = Stat_SeriesCreatedDate;  	StatGroupHasTvDB [ag.AnimeGroupID] = hasTvDB;  	StatGroupHasMAL [ag.AnimeGroupID] = hasMAL;  	StatGroupHasMovieDB [ag.AnimeGroupID] = hasMovieDB;  	StatGroupHasMovieDBOrTvDB [ag.AnimeGroupID] = hasMovieDBOrTvDB;  	decimal? Stat_UserVoteOverall = null;  	if (countVotes > 0)  		Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  	StatGroupUserVoteOverall [ag.AnimeGroupID] = Stat_UserVoteOverall;  	decimal? Stat_UserVotePermanent = null;  	if (countVotesPerm > 0)  		Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  	StatGroupUserVotePermanent [ag.AnimeGroupID] = Stat_UserVotePermanent;  	decimal? Stat_UserVoteTemporary = null;  	if (countVotesTemp > 0)  		Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  	StatGroupUserVoteTemporary [ag.AnimeGroupID] = Stat_UserVoteTemporary;  	StatGroupAniDBRating [ag.AnimeGroupID] = ag.AniDBRating;  	Stat_AllCategories = "";  	foreach (int catID in categoryIDList) {  		if (!allCatgeoriesDict.ContainsKey (catID))  			continue;  		string catName = allCatgeoriesDict [catID].CategoryName;  		if (Stat_AllCategories.Length > 0)  			Stat_AllCategories += "|";  		Stat_AllCategories += catName;  	}  	this.StatGroupCategories [ag.AnimeGroupID] = Stat_AllCategories;  	string Stat_AudioLanguages = "";  	foreach (string audioLan in audioLanguageList) {  		if (Stat_AudioLanguages.Length > 0)  			Stat_AudioLanguages += "'";  		Stat_AudioLanguages += audioLan;  	}  	this.StatGroupAudioLanguages [ag.AnimeGroupID] = Stat_AudioLanguages;  	string Stat_SubtitleLanguages = "";  	foreach (string subLan in subtitleLanguageList) {  		if (Stat_SubtitleLanguages.Length > 0)  			Stat_SubtitleLanguages += "'";  		Stat_SubtitleLanguages += subLan;  	}  	this.StatGroupSubtitleLanguages [ag.AnimeGroupID] = Stat_SubtitleLanguages;  	UpdateGroupFilterUsingGroup (ag.AnimeGroupID);  	UpdatePlexAnimeGroup (session' ag' allSeries);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: foreach (AnimeGroup ag in allGrps) {  	// get all the series for this group  	List<AnimeSeries> seriesForGroup = new List<AnimeSeries> ();  	GetAnimeSeriesRecursive (ag' ref seriesForGroup' allSeries' allGroupsDict);  	/* 					if (ag.AnimeGroupID == 915) 					{ 						Console.Write(""); 					}                      */DateTime? Stat_AirDate_Min = null;  	DateTime? Stat_AirDate_Max = null;  	DateTime? Stat_EndDate = new DateTime (1980' 1' 1);  	DateTime? Stat_SeriesCreatedDate = null;  	bool isComplete = false;  	bool hasFinishedAiring = false;  	bool isCurrentlyAiring = false;  	List<int> categoryIDList = new List<int> ();  	List<string> audioLanguageList = new List<string> ();  	List<string> subtitleLanguageList = new List<string> ();  	string Stat_AllTitles = "";  	string Stat_AllCategories = "";  	string Stat_AllVideoQualityEpisodes = "";  	decimal totalVotesPerm = 0' totalVotesTemp = 0' totalVotes = 0;  	int countVotesPerm = 0' countVotesTemp = 0' countVotes = 0;  	bool hasTvDB = true;  	bool hasMAL = true;  	bool hasMovieDB = true;  	bool hasMovieDBOrTvDB = true;  	int seriesCount = 0;  	int epCount = 0;  	foreach (AnimeSeries series in seriesForGroup) {  		seriesCount++;  		if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  			AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  			epCount = epCount + thisAnime.EpisodeCountNormal;  			// All Video Quality Episodes  			// Try to determine if this anime has all the episodes available at a certain video quality  			// e.g.  the series has all episodes in blu-ray  			if (dictStats.ContainsKey (series.AniDB_ID)) {  				if (series.AniDB_ID == 7656) {  					Debug.Print ("");  				}  				AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  				foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  					if (kvp.Value >= thisAnime.EpisodeCountNormal) {  						if (Stat_AllVideoQualityEpisodes.Length > 0)  							Stat_AllVideoQualityEpisodes += "'";  						Stat_AllVideoQualityEpisodes += kvp.Key;  					}  				}  			}  			// Calculate Air Date   			DateTime? thisDate = thisAnime.AirDate;  			if (thisDate.HasValue) {  				if (Stat_AirDate_Min.HasValue) {  					if (thisDate.Value < Stat_AirDate_Min.Value)  						Stat_AirDate_Min = thisDate;  				}  				else  					Stat_AirDate_Min = thisDate;  				if (Stat_AirDate_Max.HasValue) {  					if (thisDate.Value > Stat_AirDate_Max.Value)  						Stat_AirDate_Max = thisDate;  				}  				else  					Stat_AirDate_Max = thisDate;  			}  			// calculate end date  			// if the end date is NULL it actually means it is ongoing' so this is the max possible value  			thisDate = thisAnime.EndDate;  			if (thisDate.HasValue && Stat_EndDate.HasValue) {  				if (thisDate.Value > Stat_EndDate.Value)  					Stat_EndDate = thisDate;  			}  			else  				Stat_EndDate = null;  			// Calculate Series Created Date   			thisDate = series.DateTimeCreated;  			if (thisDate.HasValue) {  				if (Stat_SeriesCreatedDate.HasValue) {  					if (thisDate.Value < Stat_SeriesCreatedDate.Value)  						Stat_SeriesCreatedDate = thisDate;  				}  				else  					Stat_SeriesCreatedDate = thisDate;  			}  			/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  			if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  				hasFinishedAiring = true;  			// Note - only one series has to be currently airing to qualify  			if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  				isCurrentlyAiring = true;  			// We evaluate IsComplete as true if  			// 1. series has finished airing  			// 2. user has all episodes locally  			// Note - only one series has to be complete for the group to be considered complete  			if (thisAnime.EndDate.HasValue) {  				if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  					isComplete = true;  				}  			}  			// get categories  			if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  				foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  					if (!categoryIDList.Contains (catID))  						categoryIDList.Add (catID);  				}  			}  			// get audio languages  			if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  				foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  					if (!audioLanguageList.Contains (lanName))  						audioLanguageList.Add (lanName);  				}  			}  			// get subtitle languages  			if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  				foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  					if (!subtitleLanguageList.Contains (lanName))  						subtitleLanguageList.Add (lanName);  				}  			}  			// get titles  			if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  				foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  					if (Stat_AllTitles.Length > 0)  						Stat_AllTitles += "'";  					Stat_AllTitles += title.Title;  				}  			}  			// get votes  			foreach (AniDB_Vote vote in allVotes) {  				if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  					countVotes++;  					totalVotes += (decimal)vote.VoteValue;  					if (vote.VoteType == (int)AniDBVoteType.Anime) {  						countVotesPerm++;  						totalVotesPerm += (decimal)vote.VoteValue;  					}  					if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  						countVotesTemp++;  						totalVotesTemp += (decimal)vote.VoteValue;  					}  					break;  				}  			}  		}  		// for the group' if any of the series don't have a tvdb link  		// we will consider the group as not having a tvdb link  		if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID))  			hasTvDB = false;  		if (!animeWithMovieCrossRef.Contains (series.AniDB_ID))  			hasMovieDB = false;  		if (!animeWithMALCrossRef.Contains (series.AniDB_ID))  			hasMAL = false;  		if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID) && !animeWithMovieCrossRef.Contains (series.AniDB_ID))  			hasMovieDBOrTvDB = false;  	}  	if (allVidQuality.ContainsKey (ag.AnimeGroupID))  		StatGroupVideoQuality [ag.AnimeGroupID] = allVidQuality [ag.AnimeGroupID];  	else  		StatGroupVideoQuality [ag.AnimeGroupID] = "";  	StatGroupVideoQualityEpisodes [ag.AnimeGroupID] = Stat_AllVideoQualityEpisodes;  	StatGroupIsComplete [ag.AnimeGroupID] = isComplete;  	StatGroupIsFinishedAiring [ag.AnimeGroupID] = hasFinishedAiring;  	StatGroupIsCurrentlyAiring [ag.AnimeGroupID] = isCurrentlyAiring;  	StatGroupSeriesCount [ag.AnimeGroupID] = seriesCount;  	StatGroupEpisodeCount [ag.AnimeGroupID] = epCount;  	StatGroupTitles [ag.AnimeGroupID] = Stat_AllTitles;  	StatGroupAirDate_Max [ag.AnimeGroupID] = Stat_AirDate_Max;  	StatGroupAirDate_Min [ag.AnimeGroupID] = Stat_AirDate_Min;  	StatGroupEndDate [ag.AnimeGroupID] = Stat_EndDate;  	StatGroupSeriesCreatedDate [ag.AnimeGroupID] = Stat_SeriesCreatedDate;  	StatGroupHasTvDB [ag.AnimeGroupID] = hasTvDB;  	StatGroupHasMAL [ag.AnimeGroupID] = hasMAL;  	StatGroupHasMovieDB [ag.AnimeGroupID] = hasMovieDB;  	StatGroupHasMovieDBOrTvDB [ag.AnimeGroupID] = hasMovieDBOrTvDB;  	decimal? Stat_UserVoteOverall = null;  	if (countVotes > 0)  		Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  	StatGroupUserVoteOverall [ag.AnimeGroupID] = Stat_UserVoteOverall;  	decimal? Stat_UserVotePermanent = null;  	if (countVotesPerm > 0)  		Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  	StatGroupUserVotePermanent [ag.AnimeGroupID] = Stat_UserVotePermanent;  	decimal? Stat_UserVoteTemporary = null;  	if (countVotesTemp > 0)  		Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  	StatGroupUserVoteTemporary [ag.AnimeGroupID] = Stat_UserVoteTemporary;  	StatGroupAniDBRating [ag.AnimeGroupID] = ag.AniDBRating;  	Stat_AllCategories = "";  	foreach (int catID in categoryIDList) {  		if (!allCatgeoriesDict.ContainsKey (catID))  			continue;  		string catName = allCatgeoriesDict [catID].CategoryName;  		if (Stat_AllCategories.Length > 0)  			Stat_AllCategories += "|";  		Stat_AllCategories += catName;  	}  	this.StatGroupCategories [ag.AnimeGroupID] = Stat_AllCategories;  	string Stat_AudioLanguages = "";  	foreach (string audioLan in audioLanguageList) {  		if (Stat_AudioLanguages.Length > 0)  			Stat_AudioLanguages += "'";  		Stat_AudioLanguages += audioLan;  	}  	this.StatGroupAudioLanguages [ag.AnimeGroupID] = Stat_AudioLanguages;  	string Stat_SubtitleLanguages = "";  	foreach (string subLan in subtitleLanguageList) {  		if (Stat_SubtitleLanguages.Length > 0)  			Stat_SubtitleLanguages += "'";  		Stat_SubtitleLanguages += subLan;  	}  	this.StatGroupSubtitleLanguages [ag.AnimeGroupID] = Stat_SubtitleLanguages;  	UpdateGroupFilterUsingGroup (ag.AnimeGroupID);  	UpdatePlexAnimeGroup (session' ag' allSeries);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: foreach (AnimeGroup ag in allGrps) {  	// get all the series for this group  	List<AnimeSeries> seriesForGroup = new List<AnimeSeries> ();  	GetAnimeSeriesRecursive (ag' ref seriesForGroup' allSeries' allGroupsDict);  	/* 					if (ag.AnimeGroupID == 915) 					{ 						Console.Write(""); 					}                      */DateTime? Stat_AirDate_Min = null;  	DateTime? Stat_AirDate_Max = null;  	DateTime? Stat_EndDate = new DateTime (1980' 1' 1);  	DateTime? Stat_SeriesCreatedDate = null;  	bool isComplete = false;  	bool hasFinishedAiring = false;  	bool isCurrentlyAiring = false;  	List<int> categoryIDList = new List<int> ();  	List<string> audioLanguageList = new List<string> ();  	List<string> subtitleLanguageList = new List<string> ();  	string Stat_AllTitles = "";  	string Stat_AllCategories = "";  	string Stat_AllVideoQualityEpisodes = "";  	decimal totalVotesPerm = 0' totalVotesTemp = 0' totalVotes = 0;  	int countVotesPerm = 0' countVotesTemp = 0' countVotes = 0;  	bool hasTvDB = true;  	bool hasMAL = true;  	bool hasMovieDB = true;  	bool hasMovieDBOrTvDB = true;  	int seriesCount = 0;  	int epCount = 0;  	foreach (AnimeSeries series in seriesForGroup) {  		seriesCount++;  		if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  			AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  			epCount = epCount + thisAnime.EpisodeCountNormal;  			// All Video Quality Episodes  			// Try to determine if this anime has all the episodes available at a certain video quality  			// e.g.  the series has all episodes in blu-ray  			if (dictStats.ContainsKey (series.AniDB_ID)) {  				if (series.AniDB_ID == 7656) {  					Debug.Print ("");  				}  				AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  				foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  					if (kvp.Value >= thisAnime.EpisodeCountNormal) {  						if (Stat_AllVideoQualityEpisodes.Length > 0)  							Stat_AllVideoQualityEpisodes += "'";  						Stat_AllVideoQualityEpisodes += kvp.Key;  					}  				}  			}  			// Calculate Air Date   			DateTime? thisDate = thisAnime.AirDate;  			if (thisDate.HasValue) {  				if (Stat_AirDate_Min.HasValue) {  					if (thisDate.Value < Stat_AirDate_Min.Value)  						Stat_AirDate_Min = thisDate;  				}  				else  					Stat_AirDate_Min = thisDate;  				if (Stat_AirDate_Max.HasValue) {  					if (thisDate.Value > Stat_AirDate_Max.Value)  						Stat_AirDate_Max = thisDate;  				}  				else  					Stat_AirDate_Max = thisDate;  			}  			// calculate end date  			// if the end date is NULL it actually means it is ongoing' so this is the max possible value  			thisDate = thisAnime.EndDate;  			if (thisDate.HasValue && Stat_EndDate.HasValue) {  				if (thisDate.Value > Stat_EndDate.Value)  					Stat_EndDate = thisDate;  			}  			else  				Stat_EndDate = null;  			// Calculate Series Created Date   			thisDate = series.DateTimeCreated;  			if (thisDate.HasValue) {  				if (Stat_SeriesCreatedDate.HasValue) {  					if (thisDate.Value < Stat_SeriesCreatedDate.Value)  						Stat_SeriesCreatedDate = thisDate;  				}  				else  					Stat_SeriesCreatedDate = thisDate;  			}  			/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  			if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  				hasFinishedAiring = true;  			// Note - only one series has to be currently airing to qualify  			if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  				isCurrentlyAiring = true;  			// We evaluate IsComplete as true if  			// 1. series has finished airing  			// 2. user has all episodes locally  			// Note - only one series has to be complete for the group to be considered complete  			if (thisAnime.EndDate.HasValue) {  				if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  					isComplete = true;  				}  			}  			// get categories  			if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  				foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  					if (!categoryIDList.Contains (catID))  						categoryIDList.Add (catID);  				}  			}  			// get audio languages  			if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  				foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  					if (!audioLanguageList.Contains (lanName))  						audioLanguageList.Add (lanName);  				}  			}  			// get subtitle languages  			if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  				foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  					if (!subtitleLanguageList.Contains (lanName))  						subtitleLanguageList.Add (lanName);  				}  			}  			// get titles  			if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  				foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  					if (Stat_AllTitles.Length > 0)  						Stat_AllTitles += "'";  					Stat_AllTitles += title.Title;  				}  			}  			// get votes  			foreach (AniDB_Vote vote in allVotes) {  				if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  					countVotes++;  					totalVotes += (decimal)vote.VoteValue;  					if (vote.VoteType == (int)AniDBVoteType.Anime) {  						countVotesPerm++;  						totalVotesPerm += (decimal)vote.VoteValue;  					}  					if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  						countVotesTemp++;  						totalVotesTemp += (decimal)vote.VoteValue;  					}  					break;  				}  			}  		}  		// for the group' if any of the series don't have a tvdb link  		// we will consider the group as not having a tvdb link  		if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID))  			hasTvDB = false;  		if (!animeWithMovieCrossRef.Contains (series.AniDB_ID))  			hasMovieDB = false;  		if (!animeWithMALCrossRef.Contains (series.AniDB_ID))  			hasMAL = false;  		if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID) && !animeWithMovieCrossRef.Contains (series.AniDB_ID))  			hasMovieDBOrTvDB = false;  	}  	if (allVidQuality.ContainsKey (ag.AnimeGroupID))  		StatGroupVideoQuality [ag.AnimeGroupID] = allVidQuality [ag.AnimeGroupID];  	else  		StatGroupVideoQuality [ag.AnimeGroupID] = "";  	StatGroupVideoQualityEpisodes [ag.AnimeGroupID] = Stat_AllVideoQualityEpisodes;  	StatGroupIsComplete [ag.AnimeGroupID] = isComplete;  	StatGroupIsFinishedAiring [ag.AnimeGroupID] = hasFinishedAiring;  	StatGroupIsCurrentlyAiring [ag.AnimeGroupID] = isCurrentlyAiring;  	StatGroupSeriesCount [ag.AnimeGroupID] = seriesCount;  	StatGroupEpisodeCount [ag.AnimeGroupID] = epCount;  	StatGroupTitles [ag.AnimeGroupID] = Stat_AllTitles;  	StatGroupAirDate_Max [ag.AnimeGroupID] = Stat_AirDate_Max;  	StatGroupAirDate_Min [ag.AnimeGroupID] = Stat_AirDate_Min;  	StatGroupEndDate [ag.AnimeGroupID] = Stat_EndDate;  	StatGroupSeriesCreatedDate [ag.AnimeGroupID] = Stat_SeriesCreatedDate;  	StatGroupHasTvDB [ag.AnimeGroupID] = hasTvDB;  	StatGroupHasMAL [ag.AnimeGroupID] = hasMAL;  	StatGroupHasMovieDB [ag.AnimeGroupID] = hasMovieDB;  	StatGroupHasMovieDBOrTvDB [ag.AnimeGroupID] = hasMovieDBOrTvDB;  	decimal? Stat_UserVoteOverall = null;  	if (countVotes > 0)  		Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  	StatGroupUserVoteOverall [ag.AnimeGroupID] = Stat_UserVoteOverall;  	decimal? Stat_UserVotePermanent = null;  	if (countVotesPerm > 0)  		Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  	StatGroupUserVotePermanent [ag.AnimeGroupID] = Stat_UserVotePermanent;  	decimal? Stat_UserVoteTemporary = null;  	if (countVotesTemp > 0)  		Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  	StatGroupUserVoteTemporary [ag.AnimeGroupID] = Stat_UserVoteTemporary;  	StatGroupAniDBRating [ag.AnimeGroupID] = ag.AniDBRating;  	Stat_AllCategories = "";  	foreach (int catID in categoryIDList) {  		if (!allCatgeoriesDict.ContainsKey (catID))  			continue;  		string catName = allCatgeoriesDict [catID].CategoryName;  		if (Stat_AllCategories.Length > 0)  			Stat_AllCategories += "|";  		Stat_AllCategories += catName;  	}  	this.StatGroupCategories [ag.AnimeGroupID] = Stat_AllCategories;  	string Stat_AudioLanguages = "";  	foreach (string audioLan in audioLanguageList) {  		if (Stat_AudioLanguages.Length > 0)  			Stat_AudioLanguages += "'";  		Stat_AudioLanguages += audioLan;  	}  	this.StatGroupAudioLanguages [ag.AnimeGroupID] = Stat_AudioLanguages;  	string Stat_SubtitleLanguages = "";  	foreach (string subLan in subtitleLanguageList) {  		if (Stat_SubtitleLanguages.Length > 0)  			Stat_SubtitleLanguages += "'";  		Stat_SubtitleLanguages += subLan;  	}  	this.StatGroupSubtitleLanguages [ag.AnimeGroupID] = Stat_SubtitleLanguages;  	UpdateGroupFilterUsingGroup (ag.AnimeGroupID);  	UpdatePlexAnimeGroup (session' ag' allSeries);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: foreach (AnimeGroup ag in allGrps) {  	// get all the series for this group  	List<AnimeSeries> seriesForGroup = new List<AnimeSeries> ();  	GetAnimeSeriesRecursive (ag' ref seriesForGroup' allSeries' allGroupsDict);  	/* 					if (ag.AnimeGroupID == 915) 					{ 						Console.Write(""); 					}                      */DateTime? Stat_AirDate_Min = null;  	DateTime? Stat_AirDate_Max = null;  	DateTime? Stat_EndDate = new DateTime (1980' 1' 1);  	DateTime? Stat_SeriesCreatedDate = null;  	bool isComplete = false;  	bool hasFinishedAiring = false;  	bool isCurrentlyAiring = false;  	List<int> categoryIDList = new List<int> ();  	List<string> audioLanguageList = new List<string> ();  	List<string> subtitleLanguageList = new List<string> ();  	string Stat_AllTitles = "";  	string Stat_AllCategories = "";  	string Stat_AllVideoQualityEpisodes = "";  	decimal totalVotesPerm = 0' totalVotesTemp = 0' totalVotes = 0;  	int countVotesPerm = 0' countVotesTemp = 0' countVotes = 0;  	bool hasTvDB = true;  	bool hasMAL = true;  	bool hasMovieDB = true;  	bool hasMovieDBOrTvDB = true;  	int seriesCount = 0;  	int epCount = 0;  	foreach (AnimeSeries series in seriesForGroup) {  		seriesCount++;  		if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  			AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  			epCount = epCount + thisAnime.EpisodeCountNormal;  			// All Video Quality Episodes  			// Try to determine if this anime has all the episodes available at a certain video quality  			// e.g.  the series has all episodes in blu-ray  			if (dictStats.ContainsKey (series.AniDB_ID)) {  				if (series.AniDB_ID == 7656) {  					Debug.Print ("");  				}  				AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  				foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  					if (kvp.Value >= thisAnime.EpisodeCountNormal) {  						if (Stat_AllVideoQualityEpisodes.Length > 0)  							Stat_AllVideoQualityEpisodes += "'";  						Stat_AllVideoQualityEpisodes += kvp.Key;  					}  				}  			}  			// Calculate Air Date   			DateTime? thisDate = thisAnime.AirDate;  			if (thisDate.HasValue) {  				if (Stat_AirDate_Min.HasValue) {  					if (thisDate.Value < Stat_AirDate_Min.Value)  						Stat_AirDate_Min = thisDate;  				}  				else  					Stat_AirDate_Min = thisDate;  				if (Stat_AirDate_Max.HasValue) {  					if (thisDate.Value > Stat_AirDate_Max.Value)  						Stat_AirDate_Max = thisDate;  				}  				else  					Stat_AirDate_Max = thisDate;  			}  			// calculate end date  			// if the end date is NULL it actually means it is ongoing' so this is the max possible value  			thisDate = thisAnime.EndDate;  			if (thisDate.HasValue && Stat_EndDate.HasValue) {  				if (thisDate.Value > Stat_EndDate.Value)  					Stat_EndDate = thisDate;  			}  			else  				Stat_EndDate = null;  			// Calculate Series Created Date   			thisDate = series.DateTimeCreated;  			if (thisDate.HasValue) {  				if (Stat_SeriesCreatedDate.HasValue) {  					if (thisDate.Value < Stat_SeriesCreatedDate.Value)  						Stat_SeriesCreatedDate = thisDate;  				}  				else  					Stat_SeriesCreatedDate = thisDate;  			}  			/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  			if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  				hasFinishedAiring = true;  			// Note - only one series has to be currently airing to qualify  			if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  				isCurrentlyAiring = true;  			// We evaluate IsComplete as true if  			// 1. series has finished airing  			// 2. user has all episodes locally  			// Note - only one series has to be complete for the group to be considered complete  			if (thisAnime.EndDate.HasValue) {  				if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  					isComplete = true;  				}  			}  			// get categories  			if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  				foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  					if (!categoryIDList.Contains (catID))  						categoryIDList.Add (catID);  				}  			}  			// get audio languages  			if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  				foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  					if (!audioLanguageList.Contains (lanName))  						audioLanguageList.Add (lanName);  				}  			}  			// get subtitle languages  			if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  				foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  					if (!subtitleLanguageList.Contains (lanName))  						subtitleLanguageList.Add (lanName);  				}  			}  			// get titles  			if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  				foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  					if (Stat_AllTitles.Length > 0)  						Stat_AllTitles += "'";  					Stat_AllTitles += title.Title;  				}  			}  			// get votes  			foreach (AniDB_Vote vote in allVotes) {  				if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  					countVotes++;  					totalVotes += (decimal)vote.VoteValue;  					if (vote.VoteType == (int)AniDBVoteType.Anime) {  						countVotesPerm++;  						totalVotesPerm += (decimal)vote.VoteValue;  					}  					if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  						countVotesTemp++;  						totalVotesTemp += (decimal)vote.VoteValue;  					}  					break;  				}  			}  		}  		// for the group' if any of the series don't have a tvdb link  		// we will consider the group as not having a tvdb link  		if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID))  			hasTvDB = false;  		if (!animeWithMovieCrossRef.Contains (series.AniDB_ID))  			hasMovieDB = false;  		if (!animeWithMALCrossRef.Contains (series.AniDB_ID))  			hasMAL = false;  		if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID) && !animeWithMovieCrossRef.Contains (series.AniDB_ID))  			hasMovieDBOrTvDB = false;  	}  	if (allVidQuality.ContainsKey (ag.AnimeGroupID))  		StatGroupVideoQuality [ag.AnimeGroupID] = allVidQuality [ag.AnimeGroupID];  	else  		StatGroupVideoQuality [ag.AnimeGroupID] = "";  	StatGroupVideoQualityEpisodes [ag.AnimeGroupID] = Stat_AllVideoQualityEpisodes;  	StatGroupIsComplete [ag.AnimeGroupID] = isComplete;  	StatGroupIsFinishedAiring [ag.AnimeGroupID] = hasFinishedAiring;  	StatGroupIsCurrentlyAiring [ag.AnimeGroupID] = isCurrentlyAiring;  	StatGroupSeriesCount [ag.AnimeGroupID] = seriesCount;  	StatGroupEpisodeCount [ag.AnimeGroupID] = epCount;  	StatGroupTitles [ag.AnimeGroupID] = Stat_AllTitles;  	StatGroupAirDate_Max [ag.AnimeGroupID] = Stat_AirDate_Max;  	StatGroupAirDate_Min [ag.AnimeGroupID] = Stat_AirDate_Min;  	StatGroupEndDate [ag.AnimeGroupID] = Stat_EndDate;  	StatGroupSeriesCreatedDate [ag.AnimeGroupID] = Stat_SeriesCreatedDate;  	StatGroupHasTvDB [ag.AnimeGroupID] = hasTvDB;  	StatGroupHasMAL [ag.AnimeGroupID] = hasMAL;  	StatGroupHasMovieDB [ag.AnimeGroupID] = hasMovieDB;  	StatGroupHasMovieDBOrTvDB [ag.AnimeGroupID] = hasMovieDBOrTvDB;  	decimal? Stat_UserVoteOverall = null;  	if (countVotes > 0)  		Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  	StatGroupUserVoteOverall [ag.AnimeGroupID] = Stat_UserVoteOverall;  	decimal? Stat_UserVotePermanent = null;  	if (countVotesPerm > 0)  		Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  	StatGroupUserVotePermanent [ag.AnimeGroupID] = Stat_UserVotePermanent;  	decimal? Stat_UserVoteTemporary = null;  	if (countVotesTemp > 0)  		Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  	StatGroupUserVoteTemporary [ag.AnimeGroupID] = Stat_UserVoteTemporary;  	StatGroupAniDBRating [ag.AnimeGroupID] = ag.AniDBRating;  	Stat_AllCategories = "";  	foreach (int catID in categoryIDList) {  		if (!allCatgeoriesDict.ContainsKey (catID))  			continue;  		string catName = allCatgeoriesDict [catID].CategoryName;  		if (Stat_AllCategories.Length > 0)  			Stat_AllCategories += "|";  		Stat_AllCategories += catName;  	}  	this.StatGroupCategories [ag.AnimeGroupID] = Stat_AllCategories;  	string Stat_AudioLanguages = "";  	foreach (string audioLan in audioLanguageList) {  		if (Stat_AudioLanguages.Length > 0)  			Stat_AudioLanguages += "'";  		Stat_AudioLanguages += audioLan;  	}  	this.StatGroupAudioLanguages [ag.AnimeGroupID] = Stat_AudioLanguages;  	string Stat_SubtitleLanguages = "";  	foreach (string subLan in subtitleLanguageList) {  		if (Stat_SubtitleLanguages.Length > 0)  			Stat_SubtitleLanguages += "'";  		Stat_SubtitleLanguages += subLan;  	}  	this.StatGroupSubtitleLanguages [ag.AnimeGroupID] = Stat_SubtitleLanguages;  	UpdateGroupFilterUsingGroup (ag.AnimeGroupID);  	UpdatePlexAnimeGroup (session' ag' allSeries);  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: foreach (AnimeSeries series in seriesForGroup) {  	seriesCount++;  	if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  		AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  		epCount = epCount + thisAnime.EpisodeCountNormal;  		// All Video Quality Episodes  		// Try to determine if this anime has all the episodes available at a certain video quality  		// e.g.  the series has all episodes in blu-ray  		if (dictStats.ContainsKey (series.AniDB_ID)) {  			if (series.AniDB_ID == 7656) {  				Debug.Print ("");  			}  			AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  			foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  				if (kvp.Value >= thisAnime.EpisodeCountNormal) {  					if (Stat_AllVideoQualityEpisodes.Length > 0)  						Stat_AllVideoQualityEpisodes += "'";  					Stat_AllVideoQualityEpisodes += kvp.Key;  				}  			}  		}  		// Calculate Air Date   		DateTime? thisDate = thisAnime.AirDate;  		if (thisDate.HasValue) {  			if (Stat_AirDate_Min.HasValue) {  				if (thisDate.Value < Stat_AirDate_Min.Value)  					Stat_AirDate_Min = thisDate;  			}  			else  				Stat_AirDate_Min = thisDate;  			if (Stat_AirDate_Max.HasValue) {  				if (thisDate.Value > Stat_AirDate_Max.Value)  					Stat_AirDate_Max = thisDate;  			}  			else  				Stat_AirDate_Max = thisDate;  		}  		// calculate end date  		// if the end date is NULL it actually means it is ongoing' so this is the max possible value  		thisDate = thisAnime.EndDate;  		if (thisDate.HasValue && Stat_EndDate.HasValue) {  			if (thisDate.Value > Stat_EndDate.Value)  				Stat_EndDate = thisDate;  		}  		else  			Stat_EndDate = null;  		// Calculate Series Created Date   		thisDate = series.DateTimeCreated;  		if (thisDate.HasValue) {  			if (Stat_SeriesCreatedDate.HasValue) {  				if (thisDate.Value < Stat_SeriesCreatedDate.Value)  					Stat_SeriesCreatedDate = thisDate;  			}  			else  				Stat_SeriesCreatedDate = thisDate;  		}  		/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  		if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  			hasFinishedAiring = true;  		// Note - only one series has to be currently airing to qualify  		if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  			isCurrentlyAiring = true;  		// We evaluate IsComplete as true if  		// 1. series has finished airing  		// 2. user has all episodes locally  		// Note - only one series has to be complete for the group to be considered complete  		if (thisAnime.EndDate.HasValue) {  			if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  				isComplete = true;  			}  		}  		// get categories  		if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  			foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  				if (!categoryIDList.Contains (catID))  					categoryIDList.Add (catID);  			}  		}  		// get audio languages  		if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  			foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  				if (!audioLanguageList.Contains (lanName))  					audioLanguageList.Add (lanName);  			}  		}  		// get subtitle languages  		if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  			foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  				if (!subtitleLanguageList.Contains (lanName))  					subtitleLanguageList.Add (lanName);  			}  		}  		// get titles  		if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  			foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  				if (Stat_AllTitles.Length > 0)  					Stat_AllTitles += "'";  				Stat_AllTitles += title.Title;  			}  		}  		// get votes  		foreach (AniDB_Vote vote in allVotes) {  			if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  				countVotes++;  				totalVotes += (decimal)vote.VoteValue;  				if (vote.VoteType == (int)AniDBVoteType.Anime) {  					countVotesPerm++;  					totalVotesPerm += (decimal)vote.VoteValue;  				}  				if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  					countVotesTemp++;  					totalVotesTemp += (decimal)vote.VoteValue;  				}  				break;  			}  		}  	}  	// for the group' if any of the series don't have a tvdb link  	// we will consider the group as not having a tvdb link  	if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID))  		hasTvDB = false;  	if (!animeWithMovieCrossRef.Contains (series.AniDB_ID))  		hasMovieDB = false;  	if (!animeWithMALCrossRef.Contains (series.AniDB_ID))  		hasMAL = false;  	if (!animeWithTvDBCrossRef.Contains (series.AniDB_ID) && !animeWithMovieCrossRef.Contains (series.AniDB_ID))  		hasMovieDBOrTvDB = false;  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: if (allAnimeDict.ContainsKey (series.AniDB_ID)) {  	AniDB_Anime thisAnime = allAnimeDict [series.AniDB_ID];  	epCount = epCount + thisAnime.EpisodeCountNormal;  	// All Video Quality Episodes  	// Try to determine if this anime has all the episodes available at a certain video quality  	// e.g.  the series has all episodes in blu-ray  	if (dictStats.ContainsKey (series.AniDB_ID)) {  		if (series.AniDB_ID == 7656) {  			Debug.Print ("");  		}  		AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  		foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  			if (kvp.Value >= thisAnime.EpisodeCountNormal) {  				if (Stat_AllVideoQualityEpisodes.Length > 0)  					Stat_AllVideoQualityEpisodes += "'";  				Stat_AllVideoQualityEpisodes += kvp.Key;  			}  		}  	}  	// Calculate Air Date   	DateTime? thisDate = thisAnime.AirDate;  	if (thisDate.HasValue) {  		if (Stat_AirDate_Min.HasValue) {  			if (thisDate.Value < Stat_AirDate_Min.Value)  				Stat_AirDate_Min = thisDate;  		}  		else  			Stat_AirDate_Min = thisDate;  		if (Stat_AirDate_Max.HasValue) {  			if (thisDate.Value > Stat_AirDate_Max.Value)  				Stat_AirDate_Max = thisDate;  		}  		else  			Stat_AirDate_Max = thisDate;  	}  	// calculate end date  	// if the end date is NULL it actually means it is ongoing' so this is the max possible value  	thisDate = thisAnime.EndDate;  	if (thisDate.HasValue && Stat_EndDate.HasValue) {  		if (thisDate.Value > Stat_EndDate.Value)  			Stat_EndDate = thisDate;  	}  	else  		Stat_EndDate = null;  	// Calculate Series Created Date   	thisDate = series.DateTimeCreated;  	if (thisDate.HasValue) {  		if (Stat_SeriesCreatedDate.HasValue) {  			if (thisDate.Value < Stat_SeriesCreatedDate.Value)  				Stat_SeriesCreatedDate = thisDate;  		}  		else  			Stat_SeriesCreatedDate = thisDate;  	}  	/* 							if (series.AniDB_ID == 2369) 								Debug.Write("Test");                             */// Note - only one series has to be finished airing to qualify  	if (thisAnime.EndDate.HasValue && thisAnime.EndDate.Value < DateTime.Now)  		hasFinishedAiring = true;  	// Note - only one series has to be currently airing to qualify  	if (!thisAnime.EndDate.HasValue || thisAnime.EndDate.Value > DateTime.Now)  		isCurrentlyAiring = true;  	// We evaluate IsComplete as true if  	// 1. series has finished airing  	// 2. user has all episodes locally  	// Note - only one series has to be complete for the group to be considered complete  	if (thisAnime.EndDate.HasValue) {  		if (thisAnime.EndDate.Value < DateTime.Now && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0) {  			isComplete = true;  		}  	}  	// get categories  	if (allAnimeCatgeoriesDict.ContainsKey (series.AniDB_ID)) {  		foreach (int catID in allAnimeCatgeoriesDict [series.AniDB_ID]) {  			if (!categoryIDList.Contains (catID))  				categoryIDList.Add (catID);  		}  	}  	// get audio languages  	if (dictAudioStats.ContainsKey (series.AniDB_ID)) {  		foreach (string lanName in dictAudioStats [series.AniDB_ID].LanguageNames) {  			if (!audioLanguageList.Contains (lanName))  				audioLanguageList.Add (lanName);  		}  	}  	// get subtitle languages  	if (dictSubtitleStats.ContainsKey (series.AniDB_ID)) {  		foreach (string lanName in dictSubtitleStats [series.AniDB_ID].LanguageNames) {  			if (!subtitleLanguageList.Contains (lanName))  				subtitleLanguageList.Add (lanName);  		}  	}  	// get titles  	if (allTitlesDict.ContainsKey (series.AniDB_ID)) {  		foreach (AniDB_Anime_Title title in allTitlesDict [series.AniDB_ID]) {  			if (Stat_AllTitles.Length > 0)  				Stat_AllTitles += "'";  			Stat_AllTitles += title.Title;  		}  	}  	// get votes  	foreach (AniDB_Vote vote in allVotes) {  		if (vote.EntityID == series.AniDB_ID && (vote.VoteType == (int)AniDBVoteType.Anime || vote.VoteType == (int)AniDBVoteType.AnimeTemp)) {  			countVotes++;  			totalVotes += (decimal)vote.VoteValue;  			if (vote.VoteType == (int)AniDBVoteType.Anime) {  				countVotesPerm++;  				totalVotesPerm += (decimal)vote.VoteValue;  			}  			if (vote.VoteType == (int)AniDBVoteType.AnimeTemp) {  				countVotesTemp++;  				totalVotesTemp += (decimal)vote.VoteValue;  			}  			break;  		}  	}  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: if (dictStats.ContainsKey (series.AniDB_ID)) {  	if (series.AniDB_ID == 7656) {  		Debug.Print ("");  	}  	AnimeVideoQualityStat stat = dictStats [series.AniDB_ID];  	foreach (KeyValuePair<string' int> kvp in stat.VideoQualityEpisodeCount) {  		if (kvp.Value >= thisAnime.EpisodeCountNormal) {  			if (Stat_AllVideoQualityEpisodes.Length > 0)  				Stat_AllVideoQualityEpisodes += "'";  			Stat_AllVideoQualityEpisodes += kvp.Key;  		}  	}  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: if (series.AniDB_ID == 7656) {  	Debug.Print ("");  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: if (countVotes > 0)  	Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: Stat_UserVoteOverall = totalVotes / (decimal)countVotes / (decimal)100;  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: if (countVotesPerm > 0)  	Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: Stat_UserVotePermanent = totalVotesPerm / (decimal)countVotesPerm / (decimal)100;  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: if (countVotesTemp > 0)  	Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,InitStats,The following statement contains a magic number: Stat_UserVoteTemporary = totalVotesTemp / (decimal)countVotesTemp / (decimal)100;  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,EvaluateGroupFilter,The following statement contains a magic number: foreach (GroupFilterCondition gfc in gf.FilterConditions) {  	switch (gfc.ConditionTypeEnum) {  	case GroupFilterConditionType.Favourite:  		if (userRec == null)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && userRec.IsFave == 0)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && userRec.IsFave == 1)  			return false;  		break;  	case GroupFilterConditionType.MissingEpisodes:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesAny == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesAny == true)  			return false;  		break;  	case GroupFilterConditionType.MissingEpisodesCollecting:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesGroups == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesGroups == true)  			return false;  		break;  	case GroupFilterConditionType.HasWatchedEpisodes:  		if (userRec == null)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && userRec.AnyFilesWatched == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && userRec.AnyFilesWatched == true)  			return false;  		break;  	case GroupFilterConditionType.HasUnwatchedEpisodes:  		if (userRec == null)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && userRec.HasUnwatchedFiles == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && userRec.HasUnwatchedFiles == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedTvDBInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasTvDBLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasTvDBLink == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedMALInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasMALLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasMALLink == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedMovieDBInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasMovieDBLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasMovieDBLink == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasMovieDBOrTvDBLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasMovieDBOrTvDBLink == true)  			return false;  		break;  	case GroupFilterConditionType.CompletedSeries:  		/*if (grp.IsComplete != grp.Stat_IsComplete) 						{ 							Debug.Print("IsComplete DIFF  {0}"' grp.GroupName); 						}*/if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_IsComplete == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_IsComplete == true)  			return false;  		break;  	case GroupFilterConditionType.FinishedAiring:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasFinishedAiring == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_IsCurrentlyAiring == false)  			return false;  		break;  	case GroupFilterConditionType.UserVoted:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_UserVotePermanent.HasValue == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_UserVotePermanent.HasValue == true)  			return false;  		break;  	case GroupFilterConditionType.UserVotedAny:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_UserVoteOverall.HasValue == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_UserVoteOverall.HasValue == true)  			return false;  		break;  	case GroupFilterConditionType.AirDate:  		DateTime filterDate;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDate = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDate = GetDateFromString (gfc.ConditionParameter);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (!contractGroup.Stat_AirDate_Min.HasValue || !contractGroup.Stat_AirDate_Max.HasValue)  				return false;  			if (contractGroup.Stat_AirDate_Max.Value < filterDate)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (!contractGroup.Stat_AirDate_Min.HasValue || !contractGroup.Stat_AirDate_Max.HasValue)  				return false;  			if (contractGroup.Stat_AirDate_Min.Value > filterDate)  				return false;  		}  		break;  	case GroupFilterConditionType.SeriesCreatedDate:  		DateTime filterDateSeries;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDateSeries = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDateSeries = GetDateFromString (gfc.ConditionParameter);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (!contractGroup.Stat_SeriesCreatedDate.HasValue)  				return false;  			if (contractGroup.Stat_SeriesCreatedDate.Value < filterDateSeries)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (!contractGroup.Stat_SeriesCreatedDate.HasValue)  				return false;  			if (contractGroup.Stat_SeriesCreatedDate.Value > filterDateSeries)  				return false;  		}  		break;  	case GroupFilterConditionType.EpisodeWatchedDate:  		DateTime filterDateEpsiodeWatched;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDateEpsiodeWatched = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDateEpsiodeWatched = GetDateFromString (gfc.ConditionParameter);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (userRec == null)  				return false;  			if (!userRec.WatchedDate.HasValue)  				return false;  			if (userRec.WatchedDate.Value < filterDateEpsiodeWatched)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (userRec == null)  				return false;  			if (!userRec.WatchedDate.HasValue)  				return false;  			if (userRec.WatchedDate.Value > filterDateEpsiodeWatched)  				return false;  		}  		break;  	case GroupFilterConditionType.EpisodeAddedDate:  		DateTime filterDateEpisodeAdded;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDateEpisodeAdded = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDateEpisodeAdded = GetDateFromString (gfc.ConditionParameter);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (!grp.EpisodeAddedDate.HasValue)  				return false;  			if (grp.EpisodeAddedDate.Value < filterDateEpisodeAdded)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (!grp.EpisodeAddedDate.HasValue)  				return false;  			if (grp.EpisodeAddedDate.Value > filterDateEpisodeAdded)  				return false;  		}  		break;  	case GroupFilterConditionType.EpisodeCount:  		int epCount = -1;  		int.TryParse (gfc.ConditionParameter' out epCount);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && contractGroup.Stat_EpisodeCount < epCount)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && contractGroup.Stat_EpisodeCount > epCount)  			return false;  		break;  	case GroupFilterConditionType.AniDBRating:  		decimal dRating = -1;  		decimal.TryParse (gfc.ConditionParameter' style' culture' out dRating);  		decimal thisRating = contractGroup.Stat_AniDBRating / (decimal)100;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && thisRating < dRating)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && thisRating > dRating)  			return false;  		break;  	case GroupFilterConditionType.UserRating:  		if (!contractGroup.Stat_UserVoteOverall.HasValue)  			return false;  		decimal dUserRating = -1;  		decimal.TryParse (gfc.ConditionParameter' style' culture' out dUserRating);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && contractGroup.Stat_UserVoteOverall.Value < dUserRating)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && contractGroup.Stat_UserVoteOverall.Value > dUserRating)  			return false;  		break;  	case GroupFilterConditionType.Category:  		string filterParm = gfc.ConditionParameter.Trim ();  		string[] cats = filterParm.Split (''');  		bool foundCat = false;  		int index = 0;  		foreach (string cat in cats) {  			if (cat.Trim ().Length == 0)  				continue;  			if (cat.Trim () == "'")  				continue;  			index = contractGroup.Stat_AllCategories.IndexOf (cat' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1) {  				foundCat = true;  				break;  			}  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundCat)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundCat)  				return false;  		break;  	case GroupFilterConditionType.AnimeType:  		filterParm = gfc.ConditionParameter.Trim ();  		List<string> grpTypeList = grp.AnimeTypesList;  		string[] atypes = filterParm.Split (''');  		bool foundAnimeType = false;  		index = 0;  		foreach (string atype in atypes) {  			if (atype.Trim ().Length == 0)  				continue;  			if (atype.Trim () == "'")  				continue;  			foreach (string thisAType in grpTypeList) {  				if (string.Equals (thisAType' atype' StringComparison.InvariantCultureIgnoreCase)) {  					foundAnimeType = true;  					break;  				}  			}  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundAnimeType)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundAnimeType)  				return false;  		break;  	case GroupFilterConditionType.VideoQuality:  		filterParm = gfc.ConditionParameter.Trim ();  		string[] vidQuals = filterParm.Split (''');  		bool foundVid = false;  		bool foundVidAllEps = false;  		index = 0;  		foreach (string vidq in vidQuals) {  			if (vidq.Trim ().Length == 0)  				continue;  			if (vidq.Trim () == "'")  				continue;  			index = contractGroup.Stat_AllVideoQuality.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1)  				foundVid = true;  			index = contractGroup.Stat_AllVideoQuality_Episodes.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1)  				foundVidAllEps = true;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundVid)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundVid)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.InAllEpisodes)  			if (!foundVidAllEps)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotInAllEpisodes)  			if (foundVidAllEps)  				return false;  		break;  	case GroupFilterConditionType.AudioLanguage:  	case GroupFilterConditionType.SubtitleLanguage:  		filterParm = gfc.ConditionParameter.Trim ();  		string[] languages = filterParm.Split (''');  		bool foundLan = false;  		index = 0;  		foreach (string lanName in languages) {  			if (lanName.Trim ().Length == 0)  				continue;  			if (lanName.Trim () == "'")  				continue;  			if (gfc.ConditionTypeEnum == GroupFilterConditionType.AudioLanguage)  				index = contractGroup.Stat_AudioLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  			if (gfc.ConditionTypeEnum == GroupFilterConditionType.SubtitleLanguage)  				index = contractGroup.Stat_SubtitleLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1)  				foundLan = true;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundLan)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundLan)  				return false;  		break;  	}  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,EvaluateGroupFilter,The following statement contains a magic number: switch (gfc.ConditionTypeEnum) {  case GroupFilterConditionType.Favourite:  	if (userRec == null)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && userRec.IsFave == 0)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && userRec.IsFave == 1)  		return false;  	break;  case GroupFilterConditionType.MissingEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesAny == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesAny == true)  		return false;  	break;  case GroupFilterConditionType.MissingEpisodesCollecting:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesGroups == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesGroups == true)  		return false;  	break;  case GroupFilterConditionType.HasWatchedEpisodes:  	if (userRec == null)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && userRec.AnyFilesWatched == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && userRec.AnyFilesWatched == true)  		return false;  	break;  case GroupFilterConditionType.HasUnwatchedEpisodes:  	if (userRec == null)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && userRec.HasUnwatchedFiles == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && userRec.HasUnwatchedFiles == true)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasTvDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasTvDBLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedMALInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasMALLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasMALLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedMovieDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasMovieDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasMovieDBLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasMovieDBOrTvDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasMovieDBOrTvDBLink == true)  		return false;  	break;  case GroupFilterConditionType.CompletedSeries:  	/*if (grp.IsComplete != grp.Stat_IsComplete) 						{ 							Debug.Print("IsComplete DIFF  {0}"' grp.GroupName); 						}*/if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_IsComplete == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_IsComplete == true)  		return false;  	break;  case GroupFilterConditionType.FinishedAiring:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasFinishedAiring == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_IsCurrentlyAiring == false)  		return false;  	break;  case GroupFilterConditionType.UserVoted:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_UserVotePermanent.HasValue == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_UserVotePermanent.HasValue == true)  		return false;  	break;  case GroupFilterConditionType.UserVotedAny:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_UserVoteOverall.HasValue == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_UserVoteOverall.HasValue == true)  		return false;  	break;  case GroupFilterConditionType.AirDate:  	DateTime filterDate;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDate = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDate = GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!contractGroup.Stat_AirDate_Min.HasValue || !contractGroup.Stat_AirDate_Max.HasValue)  			return false;  		if (contractGroup.Stat_AirDate_Max.Value < filterDate)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!contractGroup.Stat_AirDate_Min.HasValue || !contractGroup.Stat_AirDate_Max.HasValue)  			return false;  		if (contractGroup.Stat_AirDate_Min.Value > filterDate)  			return false;  	}  	break;  case GroupFilterConditionType.SeriesCreatedDate:  	DateTime filterDateSeries;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateSeries = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateSeries = GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!contractGroup.Stat_SeriesCreatedDate.HasValue)  			return false;  		if (contractGroup.Stat_SeriesCreatedDate.Value < filterDateSeries)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!contractGroup.Stat_SeriesCreatedDate.HasValue)  			return false;  		if (contractGroup.Stat_SeriesCreatedDate.Value > filterDateSeries)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeWatchedDate:  	DateTime filterDateEpsiodeWatched;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpsiodeWatched = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpsiodeWatched = GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (userRec == null)  			return false;  		if (!userRec.WatchedDate.HasValue)  			return false;  		if (userRec.WatchedDate.Value < filterDateEpsiodeWatched)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (userRec == null)  			return false;  		if (!userRec.WatchedDate.HasValue)  			return false;  		if (userRec.WatchedDate.Value > filterDateEpsiodeWatched)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeAddedDate:  	DateTime filterDateEpisodeAdded;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpisodeAdded = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpisodeAdded = GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.EpisodeAddedDate.HasValue)  			return false;  		if (grp.EpisodeAddedDate.Value < filterDateEpisodeAdded)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.EpisodeAddedDate.HasValue)  			return false;  		if (grp.EpisodeAddedDate.Value > filterDateEpisodeAdded)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeCount:  	int epCount = -1;  	int.TryParse (gfc.ConditionParameter' out epCount);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && contractGroup.Stat_EpisodeCount < epCount)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && contractGroup.Stat_EpisodeCount > epCount)  		return false;  	break;  case GroupFilterConditionType.AniDBRating:  	decimal dRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dRating);  	decimal thisRating = contractGroup.Stat_AniDBRating / (decimal)100;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && thisRating < dRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && thisRating > dRating)  		return false;  	break;  case GroupFilterConditionType.UserRating:  	if (!contractGroup.Stat_UserVoteOverall.HasValue)  		return false;  	decimal dUserRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dUserRating);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && contractGroup.Stat_UserVoteOverall.Value < dUserRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && contractGroup.Stat_UserVoteOverall.Value > dUserRating)  		return false;  	break;  case GroupFilterConditionType.Category:  	string filterParm = gfc.ConditionParameter.Trim ();  	string[] cats = filterParm.Split (''');  	bool foundCat = false;  	int index = 0;  	foreach (string cat in cats) {  		if (cat.Trim ().Length == 0)  			continue;  		if (cat.Trim () == "'")  			continue;  		index = contractGroup.Stat_AllCategories.IndexOf (cat' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1) {  			foundCat = true;  			break;  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundCat)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundCat)  			return false;  	break;  case GroupFilterConditionType.AnimeType:  	filterParm = gfc.ConditionParameter.Trim ();  	List<string> grpTypeList = grp.AnimeTypesList;  	string[] atypes = filterParm.Split (''');  	bool foundAnimeType = false;  	index = 0;  	foreach (string atype in atypes) {  		if (atype.Trim ().Length == 0)  			continue;  		if (atype.Trim () == "'")  			continue;  		foreach (string thisAType in grpTypeList) {  			if (string.Equals (thisAType' atype' StringComparison.InvariantCultureIgnoreCase)) {  				foundAnimeType = true;  				break;  			}  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundAnimeType)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundAnimeType)  			return false;  	break;  case GroupFilterConditionType.VideoQuality:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] vidQuals = filterParm.Split (''');  	bool foundVid = false;  	bool foundVidAllEps = false;  	index = 0;  	foreach (string vidq in vidQuals) {  		if (vidq.Trim ().Length == 0)  			continue;  		if (vidq.Trim () == "'")  			continue;  		index = contractGroup.Stat_AllVideoQuality.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVid = true;  		index = contractGroup.Stat_AllVideoQuality_Episodes.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVidAllEps = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.InAllEpisodes)  		if (!foundVidAllEps)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotInAllEpisodes)  		if (foundVidAllEps)  			return false;  	break;  case GroupFilterConditionType.AudioLanguage:  case GroupFilterConditionType.SubtitleLanguage:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] languages = filterParm.Split (''');  	bool foundLan = false;  	index = 0;  	foreach (string lanName in languages) {  		if (lanName.Trim ().Length == 0)  			continue;  		if (lanName.Trim () == "'")  			continue;  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.AudioLanguage)  			index = contractGroup.Stat_AudioLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.SubtitleLanguage)  			index = contractGroup.Stat_SubtitleLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundLan = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundLan)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundLan)  			return false;  	break;  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: if (blnForceFileDate) {  	dtBuild = AssemblyFileTime (objAssembly);  }  else {  	//dtBuild = ((DateTime)"01/01/2000").AddDays(objVersion.Build).AddSeconds(objVersion.Revision * 2);  	dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2));  	if (TimeZone.IsDaylightSavingTime (DateTime.Now' TimeZone.CurrentTimeZone.GetDaylightChanges (DateTime.Now.Year))) {  		dtBuild = dtBuild.AddHours (1);  	}  	if (dtBuild > DateTime.Now | objVersion.Build < 730 | objVersion.Revision == 0) {  		dtBuild = AssemblyFileTime (objAssembly);  	}  }  
Magic Number,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: if (blnForceFileDate) {  	dtBuild = AssemblyFileTime (objAssembly);  }  else {  	//dtBuild = ((DateTime)"01/01/2000").AddDays(objVersion.Build).AddSeconds(objVersion.Revision * 2);  	dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2));  	if (TimeZone.IsDaylightSavingTime (DateTime.Now' TimeZone.CurrentTimeZone.GetDaylightChanges (DateTime.Now.Year))) {  		dtBuild = dtBuild.AddHours (1);  	}  	if (dtBuild > DateTime.Now | objVersion.Build < 730 | objVersion.Revision == 0) {  		dtBuild = AssemblyFileTime (objAssembly);  	}  }  
Magic Number,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2));  
Magic Number,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: if (dtBuild > DateTime.Now | objVersion.Build < 730 | objVersion.Revision == 0) {  	dtBuild = AssemblyFileTime (objAssembly);  }  
Magic Number,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,TakeScreenshotPrivate,The following statement contains a magic number: switch (strFormatExtension) {  case "jpeg":  	BitmapToJPEG (objBitmap' strFilename' 80);  	break;  default:  	objBitmap.Save (strFilename' _ScreenshotImageFormat);  	break;  }  
Magic Number,JMMServer,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UnhandledExceptionManager.cs,TakeScreenshotPrivate,The following statement contains a magic number: BitmapToJPEG (objBitmap' strFilename' 80);  
Magic Number,JMMServer,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0');  
Magic Number,JMMServer,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0');  
Magic Number,JMMServer,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0');  
Magic Number,JMMServer,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMServer,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMServer,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMServer,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMServer,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (action.Trim ().ToLower ().Contains (Constants.FileRenameTag.EpisodeNumber.ToLower ())) {  	int zeroPadding = 2;  	string prefix = "";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Credits)  		prefix = "C";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Other)  		prefix = "O";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Parody)  		prefix = "P";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		prefix = "S";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Trailer)  		prefix = "T";  	int epCount = 1;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  		epCount = anime.EpisodeCountNormal;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		epCount = anime.EpisodeCountSpecial;  	if (epCount > 10 && epCount < 100)  		zeroPadding = 2;  	if (epCount > 99 && epCount < 1000)  		zeroPadding = 3;  	if (epCount > 999)  		zeroPadding = 4;  	string episodeNumber = "";  	// normal episode  	episodeNumber = prefix + episodes [0].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	if (episodes.Count > 1)  		episodeNumber += "-" + episodes [episodes.Count - 1].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	newFileName = newFileName.Replace (Constants.FileRenameTag.EpisodeNumber' episodeNumber);  }  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (action.Trim ().ToLower ().Contains (Constants.FileRenameTag.EpisodeNumber.ToLower ())) {  	int zeroPadding = 2;  	string prefix = "";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Credits)  		prefix = "C";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Other)  		prefix = "O";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Parody)  		prefix = "P";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		prefix = "S";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Trailer)  		prefix = "T";  	int epCount = 1;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  		epCount = anime.EpisodeCountNormal;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		epCount = anime.EpisodeCountSpecial;  	if (epCount > 10 && epCount < 100)  		zeroPadding = 2;  	if (epCount > 99 && epCount < 1000)  		zeroPadding = 3;  	if (epCount > 999)  		zeroPadding = 4;  	string episodeNumber = "";  	// normal episode  	episodeNumber = prefix + episodes [0].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	if (episodes.Count > 1)  		episodeNumber += "-" + episodes [episodes.Count - 1].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	newFileName = newFileName.Replace (Constants.FileRenameTag.EpisodeNumber' episodeNumber);  }  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (action.Trim ().ToLower ().Contains (Constants.FileRenameTag.EpisodeNumber.ToLower ())) {  	int zeroPadding = 2;  	string prefix = "";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Credits)  		prefix = "C";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Other)  		prefix = "O";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Parody)  		prefix = "P";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		prefix = "S";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Trailer)  		prefix = "T";  	int epCount = 1;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  		epCount = anime.EpisodeCountNormal;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		epCount = anime.EpisodeCountSpecial;  	if (epCount > 10 && epCount < 100)  		zeroPadding = 2;  	if (epCount > 99 && epCount < 1000)  		zeroPadding = 3;  	if (epCount > 999)  		zeroPadding = 4;  	string episodeNumber = "";  	// normal episode  	episodeNumber = prefix + episodes [0].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	if (episodes.Count > 1)  		episodeNumber += "-" + episodes [episodes.Count - 1].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	newFileName = newFileName.Replace (Constants.FileRenameTag.EpisodeNumber' episodeNumber);  }  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (action.Trim ().ToLower ().Contains (Constants.FileRenameTag.EpisodeNumber.ToLower ())) {  	int zeroPadding = 2;  	string prefix = "";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Credits)  		prefix = "C";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Other)  		prefix = "O";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Parody)  		prefix = "P";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		prefix = "S";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Trailer)  		prefix = "T";  	int epCount = 1;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  		epCount = anime.EpisodeCountNormal;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		epCount = anime.EpisodeCountSpecial;  	if (epCount > 10 && epCount < 100)  		zeroPadding = 2;  	if (epCount > 99 && epCount < 1000)  		zeroPadding = 3;  	if (epCount > 999)  		zeroPadding = 4;  	string episodeNumber = "";  	// normal episode  	episodeNumber = prefix + episodes [0].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	if (episodes.Count > 1)  		episodeNumber += "-" + episodes [episodes.Count - 1].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	newFileName = newFileName.Replace (Constants.FileRenameTag.EpisodeNumber' episodeNumber);  }  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (action.Trim ().ToLower ().Contains (Constants.FileRenameTag.EpisodeNumber.ToLower ())) {  	int zeroPadding = 2;  	string prefix = "";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Credits)  		prefix = "C";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Other)  		prefix = "O";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Parody)  		prefix = "P";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		prefix = "S";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Trailer)  		prefix = "T";  	int epCount = 1;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  		epCount = anime.EpisodeCountNormal;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		epCount = anime.EpisodeCountSpecial;  	if (epCount > 10 && epCount < 100)  		zeroPadding = 2;  	if (epCount > 99 && epCount < 1000)  		zeroPadding = 3;  	if (epCount > 999)  		zeroPadding = 4;  	string episodeNumber = "";  	// normal episode  	episodeNumber = prefix + episodes [0].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	if (episodes.Count > 1)  		episodeNumber += "-" + episodes [episodes.Count - 1].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	newFileName = newFileName.Replace (Constants.FileRenameTag.EpisodeNumber' episodeNumber);  }  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (action.Trim ().ToLower ().Contains (Constants.FileRenameTag.EpisodeNumber.ToLower ())) {  	int zeroPadding = 2;  	string prefix = "";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Credits)  		prefix = "C";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Other)  		prefix = "O";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Parody)  		prefix = "P";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		prefix = "S";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Trailer)  		prefix = "T";  	int epCount = 1;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  		epCount = anime.EpisodeCountNormal;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		epCount = anime.EpisodeCountSpecial;  	if (epCount > 10 && epCount < 100)  		zeroPadding = 2;  	if (epCount > 99 && epCount < 1000)  		zeroPadding = 3;  	if (epCount > 999)  		zeroPadding = 4;  	string episodeNumber = "";  	// normal episode  	episodeNumber = prefix + episodes [0].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	if (episodes.Count > 1)  		episodeNumber += "-" + episodes [episodes.Count - 1].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	newFileName = newFileName.Replace (Constants.FileRenameTag.EpisodeNumber' episodeNumber);  }  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (action.Trim ().ToLower ().Contains (Constants.FileRenameTag.EpisodeNumber.ToLower ())) {  	int zeroPadding = 2;  	string prefix = "";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Credits)  		prefix = "C";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Other)  		prefix = "O";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Parody)  		prefix = "P";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		prefix = "S";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Trailer)  		prefix = "T";  	int epCount = 1;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  		epCount = anime.EpisodeCountNormal;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		epCount = anime.EpisodeCountSpecial;  	if (epCount > 10 && epCount < 100)  		zeroPadding = 2;  	if (epCount > 99 && epCount < 1000)  		zeroPadding = 3;  	if (epCount > 999)  		zeroPadding = 4;  	string episodeNumber = "";  	// normal episode  	episodeNumber = prefix + episodes [0].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	if (episodes.Count > 1)  		episodeNumber += "-" + episodes [episodes.Count - 1].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	newFileName = newFileName.Replace (Constants.FileRenameTag.EpisodeNumber' episodeNumber);  }  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (action.Trim ().ToLower ().Contains (Constants.FileRenameTag.EpisodeNumber.ToLower ())) {  	int zeroPadding = 2;  	string prefix = "";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Credits)  		prefix = "C";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Other)  		prefix = "O";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Parody)  		prefix = "P";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		prefix = "S";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Trailer)  		prefix = "T";  	int epCount = 1;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  		epCount = anime.EpisodeCountNormal;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		epCount = anime.EpisodeCountSpecial;  	if (epCount > 10 && epCount < 100)  		zeroPadding = 2;  	if (epCount > 99 && epCount < 1000)  		zeroPadding = 3;  	if (epCount > 999)  		zeroPadding = 4;  	string episodeNumber = "";  	// normal episode  	episodeNumber = prefix + episodes [0].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	if (episodes.Count > 1)  		episodeNumber += "-" + episodes [episodes.Count - 1].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	newFileName = newFileName.Replace (Constants.FileRenameTag.EpisodeNumber' episodeNumber);  }  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (action.Trim ().ToLower ().Contains (Constants.FileRenameTag.EpisodeNumber.ToLower ())) {  	int zeroPadding = 2;  	string prefix = "";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Credits)  		prefix = "C";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Other)  		prefix = "O";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Parody)  		prefix = "P";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		prefix = "S";  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Trailer)  		prefix = "T";  	int epCount = 1;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  		epCount = anime.EpisodeCountNormal;  	if (episodes [0].EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  		epCount = anime.EpisodeCountSpecial;  	if (epCount > 10 && epCount < 100)  		zeroPadding = 2;  	if (epCount > 99 && epCount < 1000)  		zeroPadding = 3;  	if (epCount > 999)  		zeroPadding = 4;  	string episodeNumber = "";  	// normal episode  	episodeNumber = prefix + episodes [0].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	if (episodes.Count > 1)  		episodeNumber += "-" + episodes [episodes.Count - 1].EpisodeNumber.ToString ().PadLeft (zeroPadding' '0');  	newFileName = newFileName.Replace (Constants.FileRenameTag.EpisodeNumber' episodeNumber);  }  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (epCount > 10 && epCount < 100)  	zeroPadding = 2;  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (epCount > 10 && epCount < 100)  	zeroPadding = 2;  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (epCount > 10 && epCount < 100)  	zeroPadding = 2;  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: zeroPadding = 2;  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (epCount > 99 && epCount < 1000)  	zeroPadding = 3;  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (epCount > 99 && epCount < 1000)  	zeroPadding = 3;  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (epCount > 99 && epCount < 1000)  	zeroPadding = 3;  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: zeroPadding = 3;  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (epCount > 999)  	zeroPadding = 4;  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: if (epCount > 999)  	zeroPadding = 4;  
Magic Number,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,PerformActionOnFileNameADD,The following statement contains a magic number: zeroPadding = 4;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,DownloadWebPage,The following statement contains a magic number: try {  	//BaseConfig.MyAnimeLog.Write("DownloadWebPage called by: {0} - {1}"' GetParentMethodName()' url);  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 60000;  	// 60 seconds  	webReq.Proxy = null;  	webReq.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	webReq.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	String enco = WebResponse.CharacterSet;  	Encoding encoding = null;  	if (!String.IsNullOrEmpty (enco))  		encoding = Encoding.GetEncoding (WebResponse.CharacterSet);  	if (encoding == null)  		encoding = Encoding.Default;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string output = Reader.ReadToEnd ();  	//BaseConfig.MyAnimeLog.Write("DownloadWebPage: {0}"' output);  	WebResponse.Close ();  	responseStream.Close ();  	return output;  }  catch (Exception ex) {  	string msg = "---------- ERROR IN DOWNLOAD WEB PAGE ---------" + Environment.NewLine + url + Environment.NewLine + ex.ToString () + Environment.NewLine + "------------------------------------";  	//BaseConfig.MyAnimeLog.Write(msg);  	// if the error is a 404 error it may mean that there is a bad series association  	// so lets log it to the web cache so we can investigate  	if (ex.ToString ().Contains ("(404) Not Found")) {  	}  	return "";  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,DownloadWebPage,The following statement contains a magic number: webReq.Timeout = 60000;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,DownloadWebBinary,The following statement contains a magic number: try {  	HttpWebResponse response = null;  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	// Note: some network proxies require the useragent string to be set or they will deny the http request  	// this is true for instance for EVERY thailand internet connection (also needs to be set for banners/episodethumbs and any other http request we send)  	webReq.UserAgent = "Anime2MP";  	webReq.Timeout = 20000;  	// 20 seconds  	response = (HttpWebResponse)webReq.GetResponse ();  	if (response != null)  		// Get the stream associated with the response.  		return response.GetResponseStream ();  	else  		return null;  }  catch (Exception ex) {  	//BaseConfig.MyAnimeLog.Write(ex.ToString());  	return null;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,DownloadWebBinary,The following statement contains a magic number: webReq.Timeout = 20000;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsSeconds,The following statement contains a magic number: if (dateXML.Trim ().Length < 4)  	return 0;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsSeconds,The following statement contains a magic number: if (dateXML.Trim ().Length > 4)  	month = dateXML.Trim ().Substring (5' 2);  else {  	if (isStartDate)  		month = "1";  	else  		month = "12";  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsSeconds,The following statement contains a magic number: if (dateXML.Trim ().Length > 4)  	month = dateXML.Trim ().Substring (5' 2);  else {  	if (isStartDate)  		month = "1";  	else  		month = "12";  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsSeconds,The following statement contains a magic number: if (dateXML.Trim ().Length > 4)  	month = dateXML.Trim ().Substring (5' 2);  else {  	if (isStartDate)  		month = "1";  	else  		month = "12";  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsSeconds,The following statement contains a magic number: month = dateXML.Trim ().Substring (5' 2);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsSeconds,The following statement contains a magic number: month = dateXML.Trim ().Substring (5' 2);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsSeconds,The following statement contains a magic number: if (dateXML.Trim ().Length > 7)  	day = dateXML.Trim ().Substring (8' 2);  else {  	if (isStartDate)  		day = "1";  	else {  		// find the last day of the month  		int numberOfDays = DateTime.DaysInMonth (int.Parse (year)' int.Parse (month));  		day = numberOfDays.ToString ();  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsSeconds,The following statement contains a magic number: if (dateXML.Trim ().Length > 7)  	day = dateXML.Trim ().Substring (8' 2);  else {  	if (isStartDate)  		day = "1";  	else {  		// find the last day of the month  		int numberOfDays = DateTime.DaysInMonth (int.Parse (year)' int.Parse (month));  		day = numberOfDays.ToString ();  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsSeconds,The following statement contains a magic number: if (dateXML.Trim ().Length > 7)  	day = dateXML.Trim ().Substring (8' 2);  else {  	if (isStartDate)  		day = "1";  	else {  		// find the last day of the month  		int numberOfDays = DateTime.DaysInMonth (int.Parse (year)' int.Parse (month));  		day = numberOfDays.ToString ();  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsSeconds,The following statement contains a magic number: day = dateXML.Trim ().Substring (8' 2);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsSeconds,The following statement contains a magic number: day = dateXML.Trim ().Substring (8' 2);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsDate,The following statement contains a magic number: if (dateFlags == 2 || dateFlags == 10 || dateFlags == 1)  	month = 1;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetAniDBDateAsDate,The following statement contains a magic number: if (dateFlags == 2 || dateFlags == 10 || dateFlags == 1)  	month = 1;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: while ((vup.Contains ("[URL")) || (vup.Contains ("[/URL]"))) {  	int a = vup.IndexOf ("[URL");  	if (a >= 0) {  		int b = vup.IndexOf ("]"' a + 1);  		if (b >= 0) {  			val = val.Substring (0' a) + val.Substring (b + 1);  			vup = val.ToUpper ();  		}  	}  	a = vup.IndexOf ("[/URL]");  	if (a >= 0) {  		val = val.Substring (0' a) + val.Substring (a + 6);  		vup = val.ToUpper ();  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: if (a >= 0) {  	val = val.Substring (0' a) + val.Substring (a + 6);  	vup = val.ToUpper ();  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring (0' a) + val.Substring (a + 6);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: while (vup.Contains ("HTTP:")) {  	int a = vup.IndexOf ("HTTP:");  	if (a >= 0) {  		int b = vup.IndexOf (" "' a + 1);  		if (b >= 0) {  			if (vup [b + 1] == '[') {  				int c = vup.IndexOf ("]"' b + 1);  				val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  			}  			else {  				val = val.Substring (0' a) + val.Substring (b);  			}  			vup = val.ToUpper ();  		}  		else {  			break;  		}  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: while (vup.Contains ("HTTP:")) {  	int a = vup.IndexOf ("HTTP:");  	if (a >= 0) {  		int b = vup.IndexOf (" "' a + 1);  		if (b >= 0) {  			if (vup [b + 1] == '[') {  				int c = vup.IndexOf ("]"' b + 1);  				val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  			}  			else {  				val = val.Substring (0' a) + val.Substring (b);  			}  			vup = val.ToUpper ();  		}  		else {  			break;  		}  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: if (a >= 0) {  	int b = vup.IndexOf (" "' a + 1);  	if (b >= 0) {  		if (vup [b + 1] == '[') {  			int c = vup.IndexOf ("]"' b + 1);  			val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  		}  		else {  			val = val.Substring (0' a) + val.Substring (b);  		}  		vup = val.ToUpper ();  	}  	else {  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: if (a >= 0) {  	int b = vup.IndexOf (" "' a + 1);  	if (b >= 0) {  		if (vup [b + 1] == '[') {  			int c = vup.IndexOf ("]"' b + 1);  			val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  		}  		else {  			val = val.Substring (0' a) + val.Substring (b);  		}  		vup = val.ToUpper ();  	}  	else {  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: if (b >= 0) {  	if (vup [b + 1] == '[') {  		int c = vup.IndexOf ("]"' b + 1);  		val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  	}  	else {  		val = val.Substring (0' a) + val.Substring (b);  	}  	vup = val.ToUpper ();  }  else {  	break;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: if (b >= 0) {  	if (vup [b + 1] == '[') {  		int c = vup.IndexOf ("]"' b + 1);  		val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  	}  	else {  		val = val.Substring (0' a) + val.Substring (b);  	}  	vup = val.ToUpper ();  }  else {  	break;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: if (vup [b + 1] == '[') {  	int c = vup.IndexOf ("]"' b + 1);  	val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  }  else {  	val = val.Substring (0' a) + val.Substring (b);  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: if (vup [b + 1] == '[') {  	int c = vup.IndexOf ("]"' b + 1);  	val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  }  else {  	val = val.Substring (0' a) + val.Substring (b);  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: if (t.Hours > 0)  	return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  else  	return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: if (t.Hours > 0)  	return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  else  	return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: if (t.Hours > 0)  	return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  else  	return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,FormatAniDBRating,The following statement contains a magic number: rat /= 100;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,RemoveInvalidFolderNameCharacters,The following statement contains a magic number: ret = ret.Replace (((Char)34).ToString ()' "");  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetSortName,The following statement contains a magic number: if (newName.ToLower ().StartsWith ("the "))  	newName.Remove (0' 4);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetSortName,The following statement contains a magic number: newName.Remove (0' 4);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetSortName,The following statement contains a magic number: if (newName.ToLower ().StartsWith ("a "))  	newName.Remove (0' 2);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetSortName,The following statement contains a magic number: newName.Remove (0' 2);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Minor) {  case 0:  	operatingSystem = "95";  	break;  case 10:  	if (vs.Revision.ToString () == "2222A")  		operatingSystem = "98SE";  	else  		operatingSystem = "98";  	break;  case 90:  	operatingSystem = "Me";  	break;  default:  	break;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Minor) {  case 0:  	operatingSystem = "95";  	break;  case 10:  	if (vs.Revision.ToString () == "2222A")  		operatingSystem = "98SE";  	else  		operatingSystem = "98";  	break;  case 90:  	operatingSystem = "Me";  	break;  default:  	break;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,getOSArchitecture,The following statement contains a magic number: if (Is64BitOperatingSystem)  	return 64;  else  	return 32;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,getOSArchitecture,The following statement contains a magic number: if (Is64BitOperatingSystem)  	return 64;  else  	return 32;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,getOSArchitecture,The following statement contains a magic number: return 64;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,getOSArchitecture,The following statement contains a magic number: return 32;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,FormatByteSize,The following statement contains a magic number: StrFormatByteSize (fileSize' sbBuffer' 20);  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 640' 360))  	return "640x360";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 640' 360))  	return "640x360";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 720' 400))  	return "720x400";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 720' 400))  	return "720x400";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 720' 480))  	return "720x480";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 720' 480))  	return "720x480";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 848' 480))  	return "848x480";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 848' 480))  	return "848x480";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 1280' 720))  	return "1280x720";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 1280' 720))  	return "1280x720";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 1920' 1080))  	return "1920x1080";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 1920' 1080))  	return "1920x1080";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 640' 480))  	return "640x480";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 640' 480))  	return "640x480";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 1280' 960))  	return "1280x960";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 1280' 960))  	return "1280x960";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 1024' 576))  	return "1024x576";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetStandardisedVideoResolution,The following statement contains a magic number: if (VideoResolutionWithFivePercent (width' height' 1024' 576))  	return "1024x576";  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Contains ("BLU"))  	return 100;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: return 100;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Contains ("DVD"))  	return 75;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: return 75;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Contains ("HDTV"))  	return 50;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: return 50;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Contains ("DTV"))  	return 40;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: return 40;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Trim () == "TV")  	return 30;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: return 30;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Contains ("VHS"))  	return 20;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetVideoSourceRanking,The following statement contains a magic number: return 20;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 100;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 50;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 25;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 10;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 8;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 7;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 6;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 5;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 2;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetScheduledHours,The following statement contains a magic number: switch (freq) {  case ScheduledUpdateFrequency.Daily:  	return 24;  case ScheduledUpdateFrequency.HoursSix:  	return 6;  case ScheduledUpdateFrequency.HoursTwelve:  	return 12;  case ScheduledUpdateFrequency.Never:  	return int.MaxValue;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetScheduledHours,The following statement contains a magic number: switch (freq) {  case ScheduledUpdateFrequency.Daily:  	return 24;  case ScheduledUpdateFrequency.HoursSix:  	return 6;  case ScheduledUpdateFrequency.HoursTwelve:  	return 12;  case ScheduledUpdateFrequency.Never:  	return int.MaxValue;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetScheduledHours,The following statement contains a magic number: switch (freq) {  case ScheduledUpdateFrequency.Daily:  	return 24;  case ScheduledUpdateFrequency.HoursSix:  	return 6;  case ScheduledUpdateFrequency.HoursTwelve:  	return 12;  case ScheduledUpdateFrequency.Never:  	return int.MaxValue;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetScheduledHours,The following statement contains a magic number: return 24;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetScheduledHours,The following statement contains a magic number: return 6;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetScheduledHours,The following statement contains a magic number: return 12;  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,StartStreamingVideo,The following statement contains a magic number: try {  	// the ipAddress should be passed by the calling client  	// this is because the client needs to know how to address the stream  	// for example' in JMM Desktop it will know the JMM Server location by either machine name or IP Address  	// it should pass this address in  	// REQUIRES VLC 2.0.2 or better  	// VLC cannot handle FLAC audio - a buf was submitted for this  	errorMessage = "";  	streamingUri = string.Format ("http://{0}:{1}"' ipAddress' port);  	string encoderOptions = "vcodec=h264'vb=1768'venc=x264{profile=baseline'preset=faster'no-cabac'trellis=0'keyint=50}'deinterlace=-1'aenc=ffmpeg{aac-profile=low}'acodec=mp4a'ab=512'samplerate=48000'channels=2'audio-sync";  	string subtitleTranscoder = "soverlay";  	//string muxerOptions = ":standard{access=file'mux=ts'dst=#OUT#}";  	string muxerOptions = ":standard{access=file'mux=ts'dst=8088}";  	string sout = "#transcode{" + encoderOptions + "'" + subtitleTranscoder;  	//if (!Context.Profile.TranscoderParameters.ContainsKey("noResize") || Context.Profile.TranscoderParameters["noResize"] != "yes")  	//	sout += "'width=" + Context.OutputSize.Width + "'height=" + Context.OutputSize.Height;  	sout += "}" + muxerOptions;  	//string vlcStartTemplate = @" -v {0} --sout=#transcode%vcodec=WMV2'vb={1}'fps={2}'width={3}'acodec=wma2'ab={4}'channels=1'samplerate={5}'soverlay+:http%mux=asf'dst=:{6}/+ --no-sout-rtp-sap --no-sout-standard-sap --sout-all --ttl=1 --sout-keep --sout-transcode-high-priority --sub-language=en";  	string vlcStartTemplate = @" -v {0} --ffmpeg-hw --sout-ffmpeg-strict=-2 --sout={1}";  	string vlcStop = @"/F /IM vlc.exe";  	//string vlcStart = string.Format(vlcStartTemplate' fileName' vidBitRate' fps' resWidth' audioBitRate' audioSamplerate' port);  	string vlcStart = string.Format (vlcStartTemplate' fileName' sout);  	vlcStart = vlcStart.Replace ("%"' "{");  	vlcStart = vlcStart.Replace ("+"' "}");  	Process.Start ("taskkill"' vlcStop);  	Thread.Sleep (1000);  	Process.Start (ServerSettings.VLCLocation' vlcStart);  	return true;  }  catch (Exception ex) {  	errorMessage = ex.Message;  	logger.ErrorException (ex.ToString ()' ex);  	return false;  }  
Magic Number,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,StartStreamingVideo,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerFileEvents_DoWork,The following statement contains a magic number: foreach (FileSystemEventArgs evt in queueFileEvents) {  	try {  		// this is a message to stop processing  		if (evt == null)  			return;  		logger.Info ("New file created: {0}: {1}"' evt.FullPath' evt.ChangeType);  		if (evt.ChangeType == WatcherChangeTypes.Created) {  			if (Directory.Exists (evt.FullPath)) {  				// When the path that was created represents a directory we need to manually get the contained files to add.  				// The reason for this is that when a directory is moved into a source directory (from the same drive) we will only recieve  				// an event for the directory and not the contained files. However' if the folder is copied from a different drive then  				// a create event will fire for the directory and each file contained within it (As they are all treated as separate operations)  				string[] files = Directory.GetFiles (evt.FullPath' "*.*"' SearchOption.AllDirectories);  				foreach (string file in files) {  					if (FileHashHelper.IsVideo (file)) {  						logger.Info ("Found file {0} under folder {1}"' file' evt.FullPath);  						CommandRequest_HashFile cmd = new CommandRequest_HashFile (file' false);  						cmd.Save ();  					}  				}  			}  			else if (FileHashHelper.IsVideo (evt.FullPath)) {  				CommandRequest_HashFile cmd = new CommandRequest_HashFile (evt.FullPath' false);  				cmd.Save ();  			}  		}  		queueFileEvents.Remove (evt);  	}  	catch (Exception ex) {  		logger.ErrorException (ex.Message' ex);  		queueFileEvents.Remove (evt);  		Thread.Sleep (1000);  	}  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerFileEvents_DoWork,The following statement contains a magic number: try {  	// this is a message to stop processing  	if (evt == null)  		return;  	logger.Info ("New file created: {0}: {1}"' evt.FullPath' evt.ChangeType);  	if (evt.ChangeType == WatcherChangeTypes.Created) {  		if (Directory.Exists (evt.FullPath)) {  			// When the path that was created represents a directory we need to manually get the contained files to add.  			// The reason for this is that when a directory is moved into a source directory (from the same drive) we will only recieve  			// an event for the directory and not the contained files. However' if the folder is copied from a different drive then  			// a create event will fire for the directory and each file contained within it (As they are all treated as separate operations)  			string[] files = Directory.GetFiles (evt.FullPath' "*.*"' SearchOption.AllDirectories);  			foreach (string file in files) {  				if (FileHashHelper.IsVideo (file)) {  					logger.Info ("Found file {0} under folder {1}"' file' evt.FullPath);  					CommandRequest_HashFile cmd = new CommandRequest_HashFile (file' false);  					cmd.Save ();  				}  			}  		}  		else if (FileHashHelper.IsVideo (evt.FullPath)) {  			CommandRequest_HashFile cmd = new CommandRequest_HashFile (evt.FullPath' false);  			cmd.Save ();  		}  	}  	queueFileEvents.Remove (evt);  }  catch (Exception ex) {  	logger.ErrorException (ex.Message' ex);  	queueFileEvents.Remove (evt);  	Thread.Sleep (1000);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerFileEvents_DoWork,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnImagesClear_Click,The following statement contains a magic number: try {  	this.Cursor = Cursors.Wait;  	JMMService.CmdProcessorImages.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorImages.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestImages ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorImages.Init ();  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex.Message);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnImagesClear_Click,The following statement contains a magic number: try {  	this.Cursor = Cursors.Wait;  	JMMService.CmdProcessorImages.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorImages.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestImages ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorImages.Init ();  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex.Message);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnImagesClear_Click,The following statement contains a magic number: while (JMMService.CmdProcessorImages.ProcessingCommands) {  	Thread.Sleep (200);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnImagesClear_Click,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnImagesClear_Click,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnGeneralClear_Click,The following statement contains a magic number: try {  	this.Cursor = Cursors.Wait;  	JMMService.CmdProcessorGeneral.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorGeneral.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestGeneral ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorGeneral.Init ();  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex.Message);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnGeneralClear_Click,The following statement contains a magic number: try {  	this.Cursor = Cursors.Wait;  	JMMService.CmdProcessorGeneral.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorGeneral.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestGeneral ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorGeneral.Init ();  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex.Message);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnGeneralClear_Click,The following statement contains a magic number: while (JMMService.CmdProcessorGeneral.ProcessingCommands) {  	Thread.Sleep (200);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnGeneralClear_Click,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnGeneralClear_Click,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnHasherClear_Click,The following statement contains a magic number: try {  	this.Cursor = Cursors.Wait;  	JMMService.CmdProcessorHasher.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorHasher.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestHasher ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorHasher.Init ();  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex.Message);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnHasherClear_Click,The following statement contains a magic number: try {  	this.Cursor = Cursors.Wait;  	JMMService.CmdProcessorHasher.Stop ();  	// wait until the queue stops  	while (JMMService.CmdProcessorHasher.ProcessingCommands) {  		Thread.Sleep (200);  	}  	Thread.Sleep (200);  	CommandRequestRepository repCR = new CommandRequestRepository ();  	foreach (CommandRequest cr in repCR.GetAllCommandRequestHasher ())  		repCR.Delete (cr.CommandRequestID);  	JMMService.CmdProcessorHasher.Init ();  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex.Message);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnHasherClear_Click,The following statement contains a magic number: while (JMMService.CmdProcessorHasher.ProcessingCommands) {  	Thread.Sleep (200);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnHasherClear_Click,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnHasherClear_Click,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,cboDatabaseType_SelectionChanged,The following statement contains a magic number: switch (cboDatabaseType.SelectedIndex) {  case 0:  	ServerState.Instance.DatabaseIsSQLite = true;  	break;  case 1:  	bool anySettingsMSSQL = !string.IsNullOrEmpty (ServerSettings.DatabaseName) || !string.IsNullOrEmpty (ServerSettings.DatabasePassword) || !string.IsNullOrEmpty (ServerSettings.DatabaseServer) || !string.IsNullOrEmpty (ServerSettings.DatabaseUsername);  	if (anySettingsMSSQL) {  		txtMSSQL_DatabaseName.Text = ServerSettings.DatabaseName;  		txtMSSQL_Password.Password = ServerSettings.DatabasePassword;  		cboMSSQLServerList.Text = ServerSettings.DatabaseServer;  		txtMSSQL_Username.Text = ServerSettings.DatabaseUsername;  	}  	else {  		txtMSSQL_DatabaseName.Text = "JMMServer";  		txtMSSQL_Password.Password = "";  		cboMSSQLServerList.Text = "localhost";  		txtMSSQL_Username.Text = "sa";  	}  	ServerState.Instance.DatabaseIsSQLServer = true;  	break;  case 2:  	bool anySettingsMySQL = !string.IsNullOrEmpty (ServerSettings.MySQL_SchemaName) || !string.IsNullOrEmpty (ServerSettings.MySQL_Password) || !string.IsNullOrEmpty (ServerSettings.MySQL_Hostname) || !string.IsNullOrEmpty (ServerSettings.MySQL_Username);  	if (anySettingsMySQL) {  		txtMySQL_DatabaseName.Text = ServerSettings.MySQL_SchemaName;  		txtMySQL_Password.Password = ServerSettings.MySQL_Password;  		txtMySQL_ServerAddress.Text = ServerSettings.MySQL_Hostname;  		txtMySQL_Username.Text = ServerSettings.MySQL_Username;  	}  	else {  		txtMySQL_DatabaseName.Text = "JMMServer";  		txtMySQL_Password.Password = "";  		txtMySQL_ServerAddress.Text = "localhost";  		txtMySQL_Username.Text = "root";  	}  	ServerState.Instance.DatabaseIsMySQL = true;  	break;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,ShowDatabaseSetup,The following statement contains a magic number: if (ServerSettings.DatabaseType.Trim ().ToUpper () == "MYSQL")  	cboDatabaseType.SelectedIndex = 2;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,ShowDatabaseSetup,The following statement contains a magic number: cboDatabaseType.SelectedIndex = 2;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: try {  	ServerState.Instance.ServerOnline = false;  	ServerState.Instance.CurrentSetupStatus = "Cleaning up...";  	StopWatchingFiles ();  	AniDBDispose ();  	StopHost ();  	JMMService.CmdProcessorGeneral.Stop ();  	JMMService.CmdProcessorHasher.Stop ();  	JMMService.CmdProcessorImages.Stop ();  	// wait until the queue count is 0  	// ie the cancel has actuall worked  	while (true) {  		if (JMMService.CmdProcessorGeneral.QueueCount == 0 && JMMService.CmdProcessorHasher.QueueCount == 0 && JMMService.CmdProcessorImages.QueueCount == 0)  			break;  		Thread.Sleep (250);  	}  	if (autoUpdateTimer != null)  		autoUpdateTimer.Enabled = false;  	if (autoUpdateTimerShort != null)  		autoUpdateTimerShort.Enabled = false;  	JMMService.CloseSessionFactory ();  	ServerState.Instance.CurrentSetupStatus = "Initializing...";  	Thread.Sleep (1000);  	ServerState.Instance.CurrentSetupStatus = "Setting up database...";  	logger.Info ("Setting up database...");  	if (!DatabaseHelper.InitDB ()) {  		ServerState.Instance.DatabaseAvailable = false;  		if (string.IsNullOrEmpty (ServerSettings.DatabaseType))  			ServerState.Instance.CurrentSetupStatus = "Please select and configure your database.";  		else  			ServerState.Instance.CurrentSetupStatus = "Failed to start. Please review database settings.";  		e.Result = false;  		return;  	}  	else  		ServerState.Instance.DatabaseAvailable = true;  	logger.Info ("Initializing Session Factory...");  	//init session factory  	ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  	ISessionFactory temp = JMMService.SessionFactory;  	logger.Info ("Initializing Hosts...");  	ServerState.Instance.CurrentSetupStatus = "Initializing Hosts...";  	FileServer.FileServer.RegisterFirewallAndHttpUser (int.Parse (ServerSettings.JMMServerPort)' int.Parse (ServerSettings.JMMServerFilePort));  	SetupAniDBProcessor ();  	StartImageHost ();  	StartBinaryHost ();  	StartMetroHost ();  	StartImageHostMetro ();  	StartPlexHost ();  	StartFileHost ();  	StartRESTHost ();  	StartStreamingHost ();  	//  Load all stats  	ServerState.Instance.CurrentSetupStatus = "Initializing Stats...";  	StatsCache.Instance.InitStats ();  	ServerState.Instance.CurrentSetupStatus = "Initializing Queue Processors...";  	JMMService.CmdProcessorGeneral.Init ();  	JMMService.CmdProcessorHasher.Init ();  	JMMService.CmdProcessorImages.Init ();  	// timer for automatic updates  	autoUpdateTimer = new System.Timers.Timer ();  	autoUpdateTimer.AutoReset = true;  	autoUpdateTimer.Interval = 5 * 60 * 1000;  	// 5 minutes * 60 seconds  	autoUpdateTimer.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimer_Elapsed);  	autoUpdateTimer.Start ();  	// timer for automatic updates  	autoUpdateTimerShort = new System.Timers.Timer ();  	autoUpdateTimerShort.AutoReset = true;  	autoUpdateTimerShort.Interval = 15 * 1000;  	// 15 seconds  	autoUpdateTimerShort.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimerShort_Elapsed);  	autoUpdateTimerShort.Start ();  	ServerState.Instance.CurrentSetupStatus = "Initializing File Watchers...";  	StartWatchingFiles ();  	DownloadAllImages ();  	ImportFolderRepository repFolders = new ImportFolderRepository ();  	List<ImportFolder> folders = repFolders.GetAll ();  	if (ServerSettings.ScanDropFoldersOnStart)  		ScanDropFolders ();  	if (ServerSettings.RunImportOnStart && folders.Count > 0)  		RunImport ();  	ServerState.Instance.ServerOnline = true;  	e.Result = true;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	ServerState.Instance.CurrentSetupStatus = ex.Message;  	e.Result = false;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: try {  	ServerState.Instance.ServerOnline = false;  	ServerState.Instance.CurrentSetupStatus = "Cleaning up...";  	StopWatchingFiles ();  	AniDBDispose ();  	StopHost ();  	JMMService.CmdProcessorGeneral.Stop ();  	JMMService.CmdProcessorHasher.Stop ();  	JMMService.CmdProcessorImages.Stop ();  	// wait until the queue count is 0  	// ie the cancel has actuall worked  	while (true) {  		if (JMMService.CmdProcessorGeneral.QueueCount == 0 && JMMService.CmdProcessorHasher.QueueCount == 0 && JMMService.CmdProcessorImages.QueueCount == 0)  			break;  		Thread.Sleep (250);  	}  	if (autoUpdateTimer != null)  		autoUpdateTimer.Enabled = false;  	if (autoUpdateTimerShort != null)  		autoUpdateTimerShort.Enabled = false;  	JMMService.CloseSessionFactory ();  	ServerState.Instance.CurrentSetupStatus = "Initializing...";  	Thread.Sleep (1000);  	ServerState.Instance.CurrentSetupStatus = "Setting up database...";  	logger.Info ("Setting up database...");  	if (!DatabaseHelper.InitDB ()) {  		ServerState.Instance.DatabaseAvailable = false;  		if (string.IsNullOrEmpty (ServerSettings.DatabaseType))  			ServerState.Instance.CurrentSetupStatus = "Please select and configure your database.";  		else  			ServerState.Instance.CurrentSetupStatus = "Failed to start. Please review database settings.";  		e.Result = false;  		return;  	}  	else  		ServerState.Instance.DatabaseAvailable = true;  	logger.Info ("Initializing Session Factory...");  	//init session factory  	ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  	ISessionFactory temp = JMMService.SessionFactory;  	logger.Info ("Initializing Hosts...");  	ServerState.Instance.CurrentSetupStatus = "Initializing Hosts...";  	FileServer.FileServer.RegisterFirewallAndHttpUser (int.Parse (ServerSettings.JMMServerPort)' int.Parse (ServerSettings.JMMServerFilePort));  	SetupAniDBProcessor ();  	StartImageHost ();  	StartBinaryHost ();  	StartMetroHost ();  	StartImageHostMetro ();  	StartPlexHost ();  	StartFileHost ();  	StartRESTHost ();  	StartStreamingHost ();  	//  Load all stats  	ServerState.Instance.CurrentSetupStatus = "Initializing Stats...";  	StatsCache.Instance.InitStats ();  	ServerState.Instance.CurrentSetupStatus = "Initializing Queue Processors...";  	JMMService.CmdProcessorGeneral.Init ();  	JMMService.CmdProcessorHasher.Init ();  	JMMService.CmdProcessorImages.Init ();  	// timer for automatic updates  	autoUpdateTimer = new System.Timers.Timer ();  	autoUpdateTimer.AutoReset = true;  	autoUpdateTimer.Interval = 5 * 60 * 1000;  	// 5 minutes * 60 seconds  	autoUpdateTimer.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimer_Elapsed);  	autoUpdateTimer.Start ();  	// timer for automatic updates  	autoUpdateTimerShort = new System.Timers.Timer ();  	autoUpdateTimerShort.AutoReset = true;  	autoUpdateTimerShort.Interval = 15 * 1000;  	// 15 seconds  	autoUpdateTimerShort.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimerShort_Elapsed);  	autoUpdateTimerShort.Start ();  	ServerState.Instance.CurrentSetupStatus = "Initializing File Watchers...";  	StartWatchingFiles ();  	DownloadAllImages ();  	ImportFolderRepository repFolders = new ImportFolderRepository ();  	List<ImportFolder> folders = repFolders.GetAll ();  	if (ServerSettings.ScanDropFoldersOnStart)  		ScanDropFolders ();  	if (ServerSettings.RunImportOnStart && folders.Count > 0)  		RunImport ();  	ServerState.Instance.ServerOnline = true;  	e.Result = true;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	ServerState.Instance.CurrentSetupStatus = ex.Message;  	e.Result = false;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: try {  	ServerState.Instance.ServerOnline = false;  	ServerState.Instance.CurrentSetupStatus = "Cleaning up...";  	StopWatchingFiles ();  	AniDBDispose ();  	StopHost ();  	JMMService.CmdProcessorGeneral.Stop ();  	JMMService.CmdProcessorHasher.Stop ();  	JMMService.CmdProcessorImages.Stop ();  	// wait until the queue count is 0  	// ie the cancel has actuall worked  	while (true) {  		if (JMMService.CmdProcessorGeneral.QueueCount == 0 && JMMService.CmdProcessorHasher.QueueCount == 0 && JMMService.CmdProcessorImages.QueueCount == 0)  			break;  		Thread.Sleep (250);  	}  	if (autoUpdateTimer != null)  		autoUpdateTimer.Enabled = false;  	if (autoUpdateTimerShort != null)  		autoUpdateTimerShort.Enabled = false;  	JMMService.CloseSessionFactory ();  	ServerState.Instance.CurrentSetupStatus = "Initializing...";  	Thread.Sleep (1000);  	ServerState.Instance.CurrentSetupStatus = "Setting up database...";  	logger.Info ("Setting up database...");  	if (!DatabaseHelper.InitDB ()) {  		ServerState.Instance.DatabaseAvailable = false;  		if (string.IsNullOrEmpty (ServerSettings.DatabaseType))  			ServerState.Instance.CurrentSetupStatus = "Please select and configure your database.";  		else  			ServerState.Instance.CurrentSetupStatus = "Failed to start. Please review database settings.";  		e.Result = false;  		return;  	}  	else  		ServerState.Instance.DatabaseAvailable = true;  	logger.Info ("Initializing Session Factory...");  	//init session factory  	ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  	ISessionFactory temp = JMMService.SessionFactory;  	logger.Info ("Initializing Hosts...");  	ServerState.Instance.CurrentSetupStatus = "Initializing Hosts...";  	FileServer.FileServer.RegisterFirewallAndHttpUser (int.Parse (ServerSettings.JMMServerPort)' int.Parse (ServerSettings.JMMServerFilePort));  	SetupAniDBProcessor ();  	StartImageHost ();  	StartBinaryHost ();  	StartMetroHost ();  	StartImageHostMetro ();  	StartPlexHost ();  	StartFileHost ();  	StartRESTHost ();  	StartStreamingHost ();  	//  Load all stats  	ServerState.Instance.CurrentSetupStatus = "Initializing Stats...";  	StatsCache.Instance.InitStats ();  	ServerState.Instance.CurrentSetupStatus = "Initializing Queue Processors...";  	JMMService.CmdProcessorGeneral.Init ();  	JMMService.CmdProcessorHasher.Init ();  	JMMService.CmdProcessorImages.Init ();  	// timer for automatic updates  	autoUpdateTimer = new System.Timers.Timer ();  	autoUpdateTimer.AutoReset = true;  	autoUpdateTimer.Interval = 5 * 60 * 1000;  	// 5 minutes * 60 seconds  	autoUpdateTimer.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimer_Elapsed);  	autoUpdateTimer.Start ();  	// timer for automatic updates  	autoUpdateTimerShort = new System.Timers.Timer ();  	autoUpdateTimerShort.AutoReset = true;  	autoUpdateTimerShort.Interval = 15 * 1000;  	// 15 seconds  	autoUpdateTimerShort.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimerShort_Elapsed);  	autoUpdateTimerShort.Start ();  	ServerState.Instance.CurrentSetupStatus = "Initializing File Watchers...";  	StartWatchingFiles ();  	DownloadAllImages ();  	ImportFolderRepository repFolders = new ImportFolderRepository ();  	List<ImportFolder> folders = repFolders.GetAll ();  	if (ServerSettings.ScanDropFoldersOnStart)  		ScanDropFolders ();  	if (ServerSettings.RunImportOnStart && folders.Count > 0)  		RunImport ();  	ServerState.Instance.ServerOnline = true;  	e.Result = true;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	ServerState.Instance.CurrentSetupStatus = ex.Message;  	e.Result = false;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: try {  	ServerState.Instance.ServerOnline = false;  	ServerState.Instance.CurrentSetupStatus = "Cleaning up...";  	StopWatchingFiles ();  	AniDBDispose ();  	StopHost ();  	JMMService.CmdProcessorGeneral.Stop ();  	JMMService.CmdProcessorHasher.Stop ();  	JMMService.CmdProcessorImages.Stop ();  	// wait until the queue count is 0  	// ie the cancel has actuall worked  	while (true) {  		if (JMMService.CmdProcessorGeneral.QueueCount == 0 && JMMService.CmdProcessorHasher.QueueCount == 0 && JMMService.CmdProcessorImages.QueueCount == 0)  			break;  		Thread.Sleep (250);  	}  	if (autoUpdateTimer != null)  		autoUpdateTimer.Enabled = false;  	if (autoUpdateTimerShort != null)  		autoUpdateTimerShort.Enabled = false;  	JMMService.CloseSessionFactory ();  	ServerState.Instance.CurrentSetupStatus = "Initializing...";  	Thread.Sleep (1000);  	ServerState.Instance.CurrentSetupStatus = "Setting up database...";  	logger.Info ("Setting up database...");  	if (!DatabaseHelper.InitDB ()) {  		ServerState.Instance.DatabaseAvailable = false;  		if (string.IsNullOrEmpty (ServerSettings.DatabaseType))  			ServerState.Instance.CurrentSetupStatus = "Please select and configure your database.";  		else  			ServerState.Instance.CurrentSetupStatus = "Failed to start. Please review database settings.";  		e.Result = false;  		return;  	}  	else  		ServerState.Instance.DatabaseAvailable = true;  	logger.Info ("Initializing Session Factory...");  	//init session factory  	ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  	ISessionFactory temp = JMMService.SessionFactory;  	logger.Info ("Initializing Hosts...");  	ServerState.Instance.CurrentSetupStatus = "Initializing Hosts...";  	FileServer.FileServer.RegisterFirewallAndHttpUser (int.Parse (ServerSettings.JMMServerPort)' int.Parse (ServerSettings.JMMServerFilePort));  	SetupAniDBProcessor ();  	StartImageHost ();  	StartBinaryHost ();  	StartMetroHost ();  	StartImageHostMetro ();  	StartPlexHost ();  	StartFileHost ();  	StartRESTHost ();  	StartStreamingHost ();  	//  Load all stats  	ServerState.Instance.CurrentSetupStatus = "Initializing Stats...";  	StatsCache.Instance.InitStats ();  	ServerState.Instance.CurrentSetupStatus = "Initializing Queue Processors...";  	JMMService.CmdProcessorGeneral.Init ();  	JMMService.CmdProcessorHasher.Init ();  	JMMService.CmdProcessorImages.Init ();  	// timer for automatic updates  	autoUpdateTimer = new System.Timers.Timer ();  	autoUpdateTimer.AutoReset = true;  	autoUpdateTimer.Interval = 5 * 60 * 1000;  	// 5 minutes * 60 seconds  	autoUpdateTimer.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimer_Elapsed);  	autoUpdateTimer.Start ();  	// timer for automatic updates  	autoUpdateTimerShort = new System.Timers.Timer ();  	autoUpdateTimerShort.AutoReset = true;  	autoUpdateTimerShort.Interval = 15 * 1000;  	// 15 seconds  	autoUpdateTimerShort.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimerShort_Elapsed);  	autoUpdateTimerShort.Start ();  	ServerState.Instance.CurrentSetupStatus = "Initializing File Watchers...";  	StartWatchingFiles ();  	DownloadAllImages ();  	ImportFolderRepository repFolders = new ImportFolderRepository ();  	List<ImportFolder> folders = repFolders.GetAll ();  	if (ServerSettings.ScanDropFoldersOnStart)  		ScanDropFolders ();  	if (ServerSettings.RunImportOnStart && folders.Count > 0)  		RunImport ();  	ServerState.Instance.ServerOnline = true;  	e.Result = true;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	ServerState.Instance.CurrentSetupStatus = ex.Message;  	e.Result = false;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: try {  	ServerState.Instance.ServerOnline = false;  	ServerState.Instance.CurrentSetupStatus = "Cleaning up...";  	StopWatchingFiles ();  	AniDBDispose ();  	StopHost ();  	JMMService.CmdProcessorGeneral.Stop ();  	JMMService.CmdProcessorHasher.Stop ();  	JMMService.CmdProcessorImages.Stop ();  	// wait until the queue count is 0  	// ie the cancel has actuall worked  	while (true) {  		if (JMMService.CmdProcessorGeneral.QueueCount == 0 && JMMService.CmdProcessorHasher.QueueCount == 0 && JMMService.CmdProcessorImages.QueueCount == 0)  			break;  		Thread.Sleep (250);  	}  	if (autoUpdateTimer != null)  		autoUpdateTimer.Enabled = false;  	if (autoUpdateTimerShort != null)  		autoUpdateTimerShort.Enabled = false;  	JMMService.CloseSessionFactory ();  	ServerState.Instance.CurrentSetupStatus = "Initializing...";  	Thread.Sleep (1000);  	ServerState.Instance.CurrentSetupStatus = "Setting up database...";  	logger.Info ("Setting up database...");  	if (!DatabaseHelper.InitDB ()) {  		ServerState.Instance.DatabaseAvailable = false;  		if (string.IsNullOrEmpty (ServerSettings.DatabaseType))  			ServerState.Instance.CurrentSetupStatus = "Please select and configure your database.";  		else  			ServerState.Instance.CurrentSetupStatus = "Failed to start. Please review database settings.";  		e.Result = false;  		return;  	}  	else  		ServerState.Instance.DatabaseAvailable = true;  	logger.Info ("Initializing Session Factory...");  	//init session factory  	ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  	ISessionFactory temp = JMMService.SessionFactory;  	logger.Info ("Initializing Hosts...");  	ServerState.Instance.CurrentSetupStatus = "Initializing Hosts...";  	FileServer.FileServer.RegisterFirewallAndHttpUser (int.Parse (ServerSettings.JMMServerPort)' int.Parse (ServerSettings.JMMServerFilePort));  	SetupAniDBProcessor ();  	StartImageHost ();  	StartBinaryHost ();  	StartMetroHost ();  	StartImageHostMetro ();  	StartPlexHost ();  	StartFileHost ();  	StartRESTHost ();  	StartStreamingHost ();  	//  Load all stats  	ServerState.Instance.CurrentSetupStatus = "Initializing Stats...";  	StatsCache.Instance.InitStats ();  	ServerState.Instance.CurrentSetupStatus = "Initializing Queue Processors...";  	JMMService.CmdProcessorGeneral.Init ();  	JMMService.CmdProcessorHasher.Init ();  	JMMService.CmdProcessorImages.Init ();  	// timer for automatic updates  	autoUpdateTimer = new System.Timers.Timer ();  	autoUpdateTimer.AutoReset = true;  	autoUpdateTimer.Interval = 5 * 60 * 1000;  	// 5 minutes * 60 seconds  	autoUpdateTimer.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimer_Elapsed);  	autoUpdateTimer.Start ();  	// timer for automatic updates  	autoUpdateTimerShort = new System.Timers.Timer ();  	autoUpdateTimerShort.AutoReset = true;  	autoUpdateTimerShort.Interval = 15 * 1000;  	// 15 seconds  	autoUpdateTimerShort.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimerShort_Elapsed);  	autoUpdateTimerShort.Start ();  	ServerState.Instance.CurrentSetupStatus = "Initializing File Watchers...";  	StartWatchingFiles ();  	DownloadAllImages ();  	ImportFolderRepository repFolders = new ImportFolderRepository ();  	List<ImportFolder> folders = repFolders.GetAll ();  	if (ServerSettings.ScanDropFoldersOnStart)  		ScanDropFolders ();  	if (ServerSettings.RunImportOnStart && folders.Count > 0)  		RunImport ();  	ServerState.Instance.ServerOnline = true;  	e.Result = true;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	ServerState.Instance.CurrentSetupStatus = ex.Message;  	e.Result = false;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: try {  	ServerState.Instance.ServerOnline = false;  	ServerState.Instance.CurrentSetupStatus = "Cleaning up...";  	StopWatchingFiles ();  	AniDBDispose ();  	StopHost ();  	JMMService.CmdProcessorGeneral.Stop ();  	JMMService.CmdProcessorHasher.Stop ();  	JMMService.CmdProcessorImages.Stop ();  	// wait until the queue count is 0  	// ie the cancel has actuall worked  	while (true) {  		if (JMMService.CmdProcessorGeneral.QueueCount == 0 && JMMService.CmdProcessorHasher.QueueCount == 0 && JMMService.CmdProcessorImages.QueueCount == 0)  			break;  		Thread.Sleep (250);  	}  	if (autoUpdateTimer != null)  		autoUpdateTimer.Enabled = false;  	if (autoUpdateTimerShort != null)  		autoUpdateTimerShort.Enabled = false;  	JMMService.CloseSessionFactory ();  	ServerState.Instance.CurrentSetupStatus = "Initializing...";  	Thread.Sleep (1000);  	ServerState.Instance.CurrentSetupStatus = "Setting up database...";  	logger.Info ("Setting up database...");  	if (!DatabaseHelper.InitDB ()) {  		ServerState.Instance.DatabaseAvailable = false;  		if (string.IsNullOrEmpty (ServerSettings.DatabaseType))  			ServerState.Instance.CurrentSetupStatus = "Please select and configure your database.";  		else  			ServerState.Instance.CurrentSetupStatus = "Failed to start. Please review database settings.";  		e.Result = false;  		return;  	}  	else  		ServerState.Instance.DatabaseAvailable = true;  	logger.Info ("Initializing Session Factory...");  	//init session factory  	ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  	ISessionFactory temp = JMMService.SessionFactory;  	logger.Info ("Initializing Hosts...");  	ServerState.Instance.CurrentSetupStatus = "Initializing Hosts...";  	FileServer.FileServer.RegisterFirewallAndHttpUser (int.Parse (ServerSettings.JMMServerPort)' int.Parse (ServerSettings.JMMServerFilePort));  	SetupAniDBProcessor ();  	StartImageHost ();  	StartBinaryHost ();  	StartMetroHost ();  	StartImageHostMetro ();  	StartPlexHost ();  	StartFileHost ();  	StartRESTHost ();  	StartStreamingHost ();  	//  Load all stats  	ServerState.Instance.CurrentSetupStatus = "Initializing Stats...";  	StatsCache.Instance.InitStats ();  	ServerState.Instance.CurrentSetupStatus = "Initializing Queue Processors...";  	JMMService.CmdProcessorGeneral.Init ();  	JMMService.CmdProcessorHasher.Init ();  	JMMService.CmdProcessorImages.Init ();  	// timer for automatic updates  	autoUpdateTimer = new System.Timers.Timer ();  	autoUpdateTimer.AutoReset = true;  	autoUpdateTimer.Interval = 5 * 60 * 1000;  	// 5 minutes * 60 seconds  	autoUpdateTimer.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimer_Elapsed);  	autoUpdateTimer.Start ();  	// timer for automatic updates  	autoUpdateTimerShort = new System.Timers.Timer ();  	autoUpdateTimerShort.AutoReset = true;  	autoUpdateTimerShort.Interval = 15 * 1000;  	// 15 seconds  	autoUpdateTimerShort.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimerShort_Elapsed);  	autoUpdateTimerShort.Start ();  	ServerState.Instance.CurrentSetupStatus = "Initializing File Watchers...";  	StartWatchingFiles ();  	DownloadAllImages ();  	ImportFolderRepository repFolders = new ImportFolderRepository ();  	List<ImportFolder> folders = repFolders.GetAll ();  	if (ServerSettings.ScanDropFoldersOnStart)  		ScanDropFolders ();  	if (ServerSettings.RunImportOnStart && folders.Count > 0)  		RunImport ();  	ServerState.Instance.ServerOnline = true;  	e.Result = true;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	ServerState.Instance.CurrentSetupStatus = ex.Message;  	e.Result = false;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: try {  	ServerState.Instance.ServerOnline = false;  	ServerState.Instance.CurrentSetupStatus = "Cleaning up...";  	StopWatchingFiles ();  	AniDBDispose ();  	StopHost ();  	JMMService.CmdProcessorGeneral.Stop ();  	JMMService.CmdProcessorHasher.Stop ();  	JMMService.CmdProcessorImages.Stop ();  	// wait until the queue count is 0  	// ie the cancel has actuall worked  	while (true) {  		if (JMMService.CmdProcessorGeneral.QueueCount == 0 && JMMService.CmdProcessorHasher.QueueCount == 0 && JMMService.CmdProcessorImages.QueueCount == 0)  			break;  		Thread.Sleep (250);  	}  	if (autoUpdateTimer != null)  		autoUpdateTimer.Enabled = false;  	if (autoUpdateTimerShort != null)  		autoUpdateTimerShort.Enabled = false;  	JMMService.CloseSessionFactory ();  	ServerState.Instance.CurrentSetupStatus = "Initializing...";  	Thread.Sleep (1000);  	ServerState.Instance.CurrentSetupStatus = "Setting up database...";  	logger.Info ("Setting up database...");  	if (!DatabaseHelper.InitDB ()) {  		ServerState.Instance.DatabaseAvailable = false;  		if (string.IsNullOrEmpty (ServerSettings.DatabaseType))  			ServerState.Instance.CurrentSetupStatus = "Please select and configure your database.";  		else  			ServerState.Instance.CurrentSetupStatus = "Failed to start. Please review database settings.";  		e.Result = false;  		return;  	}  	else  		ServerState.Instance.DatabaseAvailable = true;  	logger.Info ("Initializing Session Factory...");  	//init session factory  	ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  	ISessionFactory temp = JMMService.SessionFactory;  	logger.Info ("Initializing Hosts...");  	ServerState.Instance.CurrentSetupStatus = "Initializing Hosts...";  	FileServer.FileServer.RegisterFirewallAndHttpUser (int.Parse (ServerSettings.JMMServerPort)' int.Parse (ServerSettings.JMMServerFilePort));  	SetupAniDBProcessor ();  	StartImageHost ();  	StartBinaryHost ();  	StartMetroHost ();  	StartImageHostMetro ();  	StartPlexHost ();  	StartFileHost ();  	StartRESTHost ();  	StartStreamingHost ();  	//  Load all stats  	ServerState.Instance.CurrentSetupStatus = "Initializing Stats...";  	StatsCache.Instance.InitStats ();  	ServerState.Instance.CurrentSetupStatus = "Initializing Queue Processors...";  	JMMService.CmdProcessorGeneral.Init ();  	JMMService.CmdProcessorHasher.Init ();  	JMMService.CmdProcessorImages.Init ();  	// timer for automatic updates  	autoUpdateTimer = new System.Timers.Timer ();  	autoUpdateTimer.AutoReset = true;  	autoUpdateTimer.Interval = 5 * 60 * 1000;  	// 5 minutes * 60 seconds  	autoUpdateTimer.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimer_Elapsed);  	autoUpdateTimer.Start ();  	// timer for automatic updates  	autoUpdateTimerShort = new System.Timers.Timer ();  	autoUpdateTimerShort.AutoReset = true;  	autoUpdateTimerShort.Interval = 15 * 1000;  	// 15 seconds  	autoUpdateTimerShort.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimerShort_Elapsed);  	autoUpdateTimerShort.Start ();  	ServerState.Instance.CurrentSetupStatus = "Initializing File Watchers...";  	StartWatchingFiles ();  	DownloadAllImages ();  	ImportFolderRepository repFolders = new ImportFolderRepository ();  	List<ImportFolder> folders = repFolders.GetAll ();  	if (ServerSettings.ScanDropFoldersOnStart)  		ScanDropFolders ();  	if (ServerSettings.RunImportOnStart && folders.Count > 0)  		RunImport ();  	ServerState.Instance.ServerOnline = true;  	e.Result = true;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	ServerState.Instance.CurrentSetupStatus = ex.Message;  	e.Result = false;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: while (true) {  	if (JMMService.CmdProcessorGeneral.QueueCount == 0 && JMMService.CmdProcessorHasher.QueueCount == 0 && JMMService.CmdProcessorImages.QueueCount == 0)  		break;  	Thread.Sleep (250);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: Thread.Sleep (250);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: autoUpdateTimer.Interval = 5 * 60 * 1000;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: autoUpdateTimer.Interval = 5 * 60 * 1000;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: autoUpdateTimer.Interval = 5 * 60 * 1000;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: autoUpdateTimerShort.Interval = 15 * 1000;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,workerSetupDB_DoWork,The following statement contains a magic number: autoUpdateTimerShort.Interval = 15 * 1000;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,btnApplyServerPort_Click,The following statement contains a magic number: if (port <= 0 || port > 65535) {  	MessageBox.Show ("Please enter a value between 1 and 65535"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	txtServerPort.Focus ();  	return;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,GenerateAzureList,The following statement contains a magic number: foreach (int animeID in shuffledList) {  	i++;  	if (!string.IsNullOrEmpty (aids))  		aids += "'";  	aids += animeID;  	if (i == 250) {  		logger.Info (aids);  		aids = "";  		i = 0;  	}  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,GenerateAzureList,The following statement contains a magic number: if (i == 250) {  	logger.Info (aids);  	aids = "";  	i = 0;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,MainWindow_Loaded,The following statement contains a magic number: tabControl1.SelectedIndex = 4;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,UpdateTraktFriendInfo,The following statement contains a magic number: if (!doneFirstTrakTinfo || forced)  	performUpdate = true;  else {  	TimeSpan ts = DateTime.Now - lastTraktInfoUpdate;  	if (ts.TotalMinutes > 20)  		performUpdate = true;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,UpdateTraktFriendInfo,The following statement contains a magic number: if (ts.TotalMinutes > 20)  	performUpdate = true;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: try {  	TimeSpan ts = DateTime.Now - lastVersionCheck;  	if (ts.TotalMinutes < 180)  		return;  	lastVersionCheck = DateTime.Now;  	ServerState.Instance.NewVersionAvailable = false;  	ServerState.Instance.NewVersionDownloadLink = "";  	ServerState.Instance.NewVersionNumber = "";  	// check for new version  	AppVersionsResult appv = XMLService.GetAppVersions ();  	if (appv != null) {  		string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  		string[] latestNumbers = appv.JMMServerVersion.Split ('.');  		string[] curNumbers = curVersion.Split ('.');  		string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  		string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  		decimal lmajor = decimal.Parse (latestMajor);  		decimal cmajor = decimal.Parse (curMajor);  		if (lmajor > cmajor) {  			ServerState.Instance.NewVersionAvailable = true;  			ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  			ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  		}  		else if (lmajor == cmajor) {  			if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  				ServerState.Instance.NewVersionAvailable = true;  				ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  				ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  			}  		}  	}  }  catch {  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: try {  	TimeSpan ts = DateTime.Now - lastVersionCheck;  	if (ts.TotalMinutes < 180)  		return;  	lastVersionCheck = DateTime.Now;  	ServerState.Instance.NewVersionAvailable = false;  	ServerState.Instance.NewVersionDownloadLink = "";  	ServerState.Instance.NewVersionNumber = "";  	// check for new version  	AppVersionsResult appv = XMLService.GetAppVersions ();  	if (appv != null) {  		string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  		string[] latestNumbers = appv.JMMServerVersion.Split ('.');  		string[] curNumbers = curVersion.Split ('.');  		string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  		string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  		decimal lmajor = decimal.Parse (latestMajor);  		decimal cmajor = decimal.Parse (curMajor);  		if (lmajor > cmajor) {  			ServerState.Instance.NewVersionAvailable = true;  			ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  			ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  		}  		else if (lmajor == cmajor) {  			if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  				ServerState.Instance.NewVersionAvailable = true;  				ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  				ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  			}  		}  	}  }  catch {  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: try {  	TimeSpan ts = DateTime.Now - lastVersionCheck;  	if (ts.TotalMinutes < 180)  		return;  	lastVersionCheck = DateTime.Now;  	ServerState.Instance.NewVersionAvailable = false;  	ServerState.Instance.NewVersionDownloadLink = "";  	ServerState.Instance.NewVersionNumber = "";  	// check for new version  	AppVersionsResult appv = XMLService.GetAppVersions ();  	if (appv != null) {  		string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  		string[] latestNumbers = appv.JMMServerVersion.Split ('.');  		string[] curNumbers = curVersion.Split ('.');  		string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  		string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  		decimal lmajor = decimal.Parse (latestMajor);  		decimal cmajor = decimal.Parse (curMajor);  		if (lmajor > cmajor) {  			ServerState.Instance.NewVersionAvailable = true;  			ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  			ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  		}  		else if (lmajor == cmajor) {  			if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  				ServerState.Instance.NewVersionAvailable = true;  				ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  				ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  			}  		}  	}  }  catch {  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: if (ts.TotalMinutes < 180)  	return;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: if (appv != null) {  	string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  	string[] latestNumbers = appv.JMMServerVersion.Split ('.');  	string[] curNumbers = curVersion.Split ('.');  	string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  	string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  	decimal lmajor = decimal.Parse (latestMajor);  	decimal cmajor = decimal.Parse (curMajor);  	if (lmajor > cmajor) {  		ServerState.Instance.NewVersionAvailable = true;  		ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  		ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  	}  	else if (lmajor == cmajor) {  		if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  			ServerState.Instance.NewVersionAvailable = true;  			ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  			ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  		}  	}  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: if (appv != null) {  	string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  	string[] latestNumbers = appv.JMMServerVersion.Split ('.');  	string[] curNumbers = curVersion.Split ('.');  	string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  	string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  	decimal lmajor = decimal.Parse (latestMajor);  	decimal cmajor = decimal.Parse (curMajor);  	if (lmajor > cmajor) {  		ServerState.Instance.NewVersionAvailable = true;  		ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  		ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  	}  	else if (lmajor == cmajor) {  		if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  			ServerState.Instance.NewVersionAvailable = true;  			ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  			ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  		}  	}  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: if (lmajor > cmajor) {  	ServerState.Instance.NewVersionAvailable = true;  	ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  	ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  }  else if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		ServerState.Instance.NewVersionAvailable = true;  		ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  		ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  	}  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: if (lmajor > cmajor) {  	ServerState.Instance.NewVersionAvailable = true;  	ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  	ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  }  else if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		ServerState.Instance.NewVersionAvailable = true;  		ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  		ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  	}  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		ServerState.Instance.NewVersionAvailable = true;  		ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  		ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  	}  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		ServerState.Instance.NewVersionAvailable = true;  		ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  		ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  	}  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  	ServerState.Instance.NewVersionAvailable = true;  	ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  	ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,CheckVersion,The following statement contains a magic number: if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  	ServerState.Instance.NewVersionAvailable = true;  	ServerState.Instance.NewVersionDownloadLink = appv.JMMServerDownload;  	ServerState.Instance.NewVersionNumber = appv.JMMServerVersion;  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,StartImageHost,The following statement contains a magic number: binding.MaxReceivedMessageSize = 2147483647;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,StartImageHostMetro,The following statement contains a magic number: binding.MaxReceivedMessageSize = 2147483647;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,StartMetroHost,The following statement contains a magic number: binding.MaxReceivedMessageSize = 2147483647;  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,AniDBDispose,The following statement contains a magic number: if (JMMService.AnidbProcessor != null) {  	JMMService.AnidbProcessor.ForceLogout ();  	JMMService.AnidbProcessor.Dispose ();  	Thread.Sleep (1000);  }  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,AniDBDispose,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,WebCacheTest,The following statement contains a magic number: hash = XMLService.Get_FileHash ("Full Metal Panic! The Second Raid - S2 [AonE-AnY] (XviD) (704x396).avi"' 181274624);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,WebCacheTest,The following statement contains a magic number: hash = XMLService.Get_FileHash ("Code_Geass_R2_Ep14_Geass_Hunt_[720p'BluRay'x264]_-_THORA.mkv"' 601722047);  
Magic Number,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,WebCacheTest,The following statement contains a magic number: hash = XMLService.Get_FileHash ("[Ayako]_Infinite_Stratos_-_IS_-_02_[H264][720p][05C376A9].mkv"' 368502091);  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,GetAnimeXMLFromAPI,The following statement contains a magic number: try {  	string uri = string.Format (AniDBHTTPHelper.AnimeURL' animeID);  	//APIUtils.WriteToLog("GetAnimeXMLFromAPI: " + uri);  	DateTime start = DateTime.Now;  	string msg = string.Format ("Getting Anime XML Data From ANIDB: {0}"' animeID);  	JMMService.LogToDatabase (Constants.DBLogType.APIAniDBHTTP' msg);  	rawXML = APIUtils.DownloadWebPage (uri);  	TimeSpan ts = DateTime.Now - start;  	string content = rawXML;  	if (content.Length > 100)  		content = content.Substring (0' 100);  	msg = string.Format ("Got Anime XML Data From ANIDB: {0} - {1} - {2}"' animeID' ts.TotalMilliseconds' content);  	JMMService.LogToDatabase (Constants.DBLogType.APIAniDBHTTP' msg);  	//APIUtils.WriteToLog("GetAnimeXMLFromAPI result: " + rawXML);  	if (rawXML.Trim ().Length == 0)  		return null;  	XmlDocument docAnime = new XmlDocument ();  	docAnime.LoadXml (rawXML);  	return docAnime;  }  catch (Exception ex) {  	logger.ErrorException ("Error in AniDBHTTPHelper.GetAnimeXMLFromAPI: {0}"' ex);  	return null;  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,GetAnimeXMLFromAPI,The following statement contains a magic number: try {  	string uri = string.Format (AniDBHTTPHelper.AnimeURL' animeID);  	//APIUtils.WriteToLog("GetAnimeXMLFromAPI: " + uri);  	DateTime start = DateTime.Now;  	string msg = string.Format ("Getting Anime XML Data From ANIDB: {0}"' animeID);  	JMMService.LogToDatabase (Constants.DBLogType.APIAniDBHTTP' msg);  	rawXML = APIUtils.DownloadWebPage (uri);  	TimeSpan ts = DateTime.Now - start;  	string content = rawXML;  	if (content.Length > 100)  		content = content.Substring (0' 100);  	msg = string.Format ("Got Anime XML Data From ANIDB: {0} - {1} - {2}"' animeID' ts.TotalMilliseconds' content);  	JMMService.LogToDatabase (Constants.DBLogType.APIAniDBHTTP' msg);  	//APIUtils.WriteToLog("GetAnimeXMLFromAPI result: " + rawXML);  	if (rawXML.Trim ().Length == 0)  		return null;  	XmlDocument docAnime = new XmlDocument ();  	docAnime.LoadXml (rawXML);  	return docAnime;  }  catch (Exception ex) {  	logger.ErrorException ("Error in AniDBHTTPHelper.GetAnimeXMLFromAPI: {0}"' ex);  	return null;  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,GetAnimeXMLFromAPI,The following statement contains a magic number: if (content.Length > 100)  	content = content.Substring (0' 100);  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,GetAnimeXMLFromAPI,The following statement contains a magic number: if (content.Length > 100)  	content = content.Substring (0' 100);  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,GetAnimeXMLFromAPI,The following statement contains a magic number: content = content.Substring (0' 100);  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: if (docAnime ["anime"] ["ratings"] != null) {  	XmlNodeList ratingItems = docAnime ["anime"] ["ratings"].ChildNodes;  	if (ratingItems != null) {  		foreach (XmlNode node in ratingItems) {  			try {  				if (node.Name.Trim ().ToLower () == "permanent") {  					int iCount = 0;  					int.TryParse (TryGetAttribute (node' "count")' out iCount);  					anime.VoteCount = iCount;  					decimal iRating = 0;  					decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  					anime.Rating = (int)(iRating * 100);  				}  				if (node.Name.Trim ().ToLower () == "temporary") {  					int iCount = 0;  					int.TryParse (TryGetAttribute (node' "count")' out iCount);  					anime.TempVoteCount = iCount;  					decimal iRating = 0;  					decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  					anime.TempRating = (int)(iRating * 100);  				}  				if (node.Name.Trim ().ToLower () == "review") {  					int iCount = 0;  					int.TryParse (TryGetAttribute (node' "count")' out iCount);  					anime.ReviewCount = iCount;  					decimal iRating = 0;  					decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  					anime.AvgReviewRating = (int)(iRating * 100);  				}  			}  			catch (Exception ex) {  				//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  			}  		}  	}  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: if (docAnime ["anime"] ["ratings"] != null) {  	XmlNodeList ratingItems = docAnime ["anime"] ["ratings"].ChildNodes;  	if (ratingItems != null) {  		foreach (XmlNode node in ratingItems) {  			try {  				if (node.Name.Trim ().ToLower () == "permanent") {  					int iCount = 0;  					int.TryParse (TryGetAttribute (node' "count")' out iCount);  					anime.VoteCount = iCount;  					decimal iRating = 0;  					decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  					anime.Rating = (int)(iRating * 100);  				}  				if (node.Name.Trim ().ToLower () == "temporary") {  					int iCount = 0;  					int.TryParse (TryGetAttribute (node' "count")' out iCount);  					anime.TempVoteCount = iCount;  					decimal iRating = 0;  					decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  					anime.TempRating = (int)(iRating * 100);  				}  				if (node.Name.Trim ().ToLower () == "review") {  					int iCount = 0;  					int.TryParse (TryGetAttribute (node' "count")' out iCount);  					anime.ReviewCount = iCount;  					decimal iRating = 0;  					decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  					anime.AvgReviewRating = (int)(iRating * 100);  				}  			}  			catch (Exception ex) {  				//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  			}  		}  	}  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: if (docAnime ["anime"] ["ratings"] != null) {  	XmlNodeList ratingItems = docAnime ["anime"] ["ratings"].ChildNodes;  	if (ratingItems != null) {  		foreach (XmlNode node in ratingItems) {  			try {  				if (node.Name.Trim ().ToLower () == "permanent") {  					int iCount = 0;  					int.TryParse (TryGetAttribute (node' "count")' out iCount);  					anime.VoteCount = iCount;  					decimal iRating = 0;  					decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  					anime.Rating = (int)(iRating * 100);  				}  				if (node.Name.Trim ().ToLower () == "temporary") {  					int iCount = 0;  					int.TryParse (TryGetAttribute (node' "count")' out iCount);  					anime.TempVoteCount = iCount;  					decimal iRating = 0;  					decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  					anime.TempRating = (int)(iRating * 100);  				}  				if (node.Name.Trim ().ToLower () == "review") {  					int iCount = 0;  					int.TryParse (TryGetAttribute (node' "count")' out iCount);  					anime.ReviewCount = iCount;  					decimal iRating = 0;  					decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  					anime.AvgReviewRating = (int)(iRating * 100);  				}  			}  			catch (Exception ex) {  				//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  			}  		}  	}  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: if (ratingItems != null) {  	foreach (XmlNode node in ratingItems) {  		try {  			if (node.Name.Trim ().ToLower () == "permanent") {  				int iCount = 0;  				int.TryParse (TryGetAttribute (node' "count")' out iCount);  				anime.VoteCount = iCount;  				decimal iRating = 0;  				decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  				anime.Rating = (int)(iRating * 100);  			}  			if (node.Name.Trim ().ToLower () == "temporary") {  				int iCount = 0;  				int.TryParse (TryGetAttribute (node' "count")' out iCount);  				anime.TempVoteCount = iCount;  				decimal iRating = 0;  				decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  				anime.TempRating = (int)(iRating * 100);  			}  			if (node.Name.Trim ().ToLower () == "review") {  				int iCount = 0;  				int.TryParse (TryGetAttribute (node' "count")' out iCount);  				anime.ReviewCount = iCount;  				decimal iRating = 0;  				decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  				anime.AvgReviewRating = (int)(iRating * 100);  			}  		}  		catch (Exception ex) {  			//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  		}  	}  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: if (ratingItems != null) {  	foreach (XmlNode node in ratingItems) {  		try {  			if (node.Name.Trim ().ToLower () == "permanent") {  				int iCount = 0;  				int.TryParse (TryGetAttribute (node' "count")' out iCount);  				anime.VoteCount = iCount;  				decimal iRating = 0;  				decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  				anime.Rating = (int)(iRating * 100);  			}  			if (node.Name.Trim ().ToLower () == "temporary") {  				int iCount = 0;  				int.TryParse (TryGetAttribute (node' "count")' out iCount);  				anime.TempVoteCount = iCount;  				decimal iRating = 0;  				decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  				anime.TempRating = (int)(iRating * 100);  			}  			if (node.Name.Trim ().ToLower () == "review") {  				int iCount = 0;  				int.TryParse (TryGetAttribute (node' "count")' out iCount);  				anime.ReviewCount = iCount;  				decimal iRating = 0;  				decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  				anime.AvgReviewRating = (int)(iRating * 100);  			}  		}  		catch (Exception ex) {  			//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  		}  	}  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: if (ratingItems != null) {  	foreach (XmlNode node in ratingItems) {  		try {  			if (node.Name.Trim ().ToLower () == "permanent") {  				int iCount = 0;  				int.TryParse (TryGetAttribute (node' "count")' out iCount);  				anime.VoteCount = iCount;  				decimal iRating = 0;  				decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  				anime.Rating = (int)(iRating * 100);  			}  			if (node.Name.Trim ().ToLower () == "temporary") {  				int iCount = 0;  				int.TryParse (TryGetAttribute (node' "count")' out iCount);  				anime.TempVoteCount = iCount;  				decimal iRating = 0;  				decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  				anime.TempRating = (int)(iRating * 100);  			}  			if (node.Name.Trim ().ToLower () == "review") {  				int iCount = 0;  				int.TryParse (TryGetAttribute (node' "count")' out iCount);  				anime.ReviewCount = iCount;  				decimal iRating = 0;  				decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  				anime.AvgReviewRating = (int)(iRating * 100);  			}  		}  		catch (Exception ex) {  			//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  		}  	}  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: foreach (XmlNode node in ratingItems) {  	try {  		if (node.Name.Trim ().ToLower () == "permanent") {  			int iCount = 0;  			int.TryParse (TryGetAttribute (node' "count")' out iCount);  			anime.VoteCount = iCount;  			decimal iRating = 0;  			decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  			anime.Rating = (int)(iRating * 100);  		}  		if (node.Name.Trim ().ToLower () == "temporary") {  			int iCount = 0;  			int.TryParse (TryGetAttribute (node' "count")' out iCount);  			anime.TempVoteCount = iCount;  			decimal iRating = 0;  			decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  			anime.TempRating = (int)(iRating * 100);  		}  		if (node.Name.Trim ().ToLower () == "review") {  			int iCount = 0;  			int.TryParse (TryGetAttribute (node' "count")' out iCount);  			anime.ReviewCount = iCount;  			decimal iRating = 0;  			decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  			anime.AvgReviewRating = (int)(iRating * 100);  		}  	}  	catch (Exception ex) {  		//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  	}  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: foreach (XmlNode node in ratingItems) {  	try {  		if (node.Name.Trim ().ToLower () == "permanent") {  			int iCount = 0;  			int.TryParse (TryGetAttribute (node' "count")' out iCount);  			anime.VoteCount = iCount;  			decimal iRating = 0;  			decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  			anime.Rating = (int)(iRating * 100);  		}  		if (node.Name.Trim ().ToLower () == "temporary") {  			int iCount = 0;  			int.TryParse (TryGetAttribute (node' "count")' out iCount);  			anime.TempVoteCount = iCount;  			decimal iRating = 0;  			decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  			anime.TempRating = (int)(iRating * 100);  		}  		if (node.Name.Trim ().ToLower () == "review") {  			int iCount = 0;  			int.TryParse (TryGetAttribute (node' "count")' out iCount);  			anime.ReviewCount = iCount;  			decimal iRating = 0;  			decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  			anime.AvgReviewRating = (int)(iRating * 100);  		}  	}  	catch (Exception ex) {  		//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  	}  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: foreach (XmlNode node in ratingItems) {  	try {  		if (node.Name.Trim ().ToLower () == "permanent") {  			int iCount = 0;  			int.TryParse (TryGetAttribute (node' "count")' out iCount);  			anime.VoteCount = iCount;  			decimal iRating = 0;  			decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  			anime.Rating = (int)(iRating * 100);  		}  		if (node.Name.Trim ().ToLower () == "temporary") {  			int iCount = 0;  			int.TryParse (TryGetAttribute (node' "count")' out iCount);  			anime.TempVoteCount = iCount;  			decimal iRating = 0;  			decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  			anime.TempRating = (int)(iRating * 100);  		}  		if (node.Name.Trim ().ToLower () == "review") {  			int iCount = 0;  			int.TryParse (TryGetAttribute (node' "count")' out iCount);  			anime.ReviewCount = iCount;  			decimal iRating = 0;  			decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  			anime.AvgReviewRating = (int)(iRating * 100);  		}  	}  	catch (Exception ex) {  		//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  	}  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: try {  	if (node.Name.Trim ().ToLower () == "permanent") {  		int iCount = 0;  		int.TryParse (TryGetAttribute (node' "count")' out iCount);  		anime.VoteCount = iCount;  		decimal iRating = 0;  		decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  		anime.Rating = (int)(iRating * 100);  	}  	if (node.Name.Trim ().ToLower () == "temporary") {  		int iCount = 0;  		int.TryParse (TryGetAttribute (node' "count")' out iCount);  		anime.TempVoteCount = iCount;  		decimal iRating = 0;  		decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  		anime.TempRating = (int)(iRating * 100);  	}  	if (node.Name.Trim ().ToLower () == "review") {  		int iCount = 0;  		int.TryParse (TryGetAttribute (node' "count")' out iCount);  		anime.ReviewCount = iCount;  		decimal iRating = 0;  		decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  		anime.AvgReviewRating = (int)(iRating * 100);  	}  }  catch (Exception ex) {  	//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: try {  	if (node.Name.Trim ().ToLower () == "permanent") {  		int iCount = 0;  		int.TryParse (TryGetAttribute (node' "count")' out iCount);  		anime.VoteCount = iCount;  		decimal iRating = 0;  		decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  		anime.Rating = (int)(iRating * 100);  	}  	if (node.Name.Trim ().ToLower () == "temporary") {  		int iCount = 0;  		int.TryParse (TryGetAttribute (node' "count")' out iCount);  		anime.TempVoteCount = iCount;  		decimal iRating = 0;  		decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  		anime.TempRating = (int)(iRating * 100);  	}  	if (node.Name.Trim ().ToLower () == "review") {  		int iCount = 0;  		int.TryParse (TryGetAttribute (node' "count")' out iCount);  		anime.ReviewCount = iCount;  		decimal iRating = 0;  		decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  		anime.AvgReviewRating = (int)(iRating * 100);  	}  }  catch (Exception ex) {  	//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: try {  	if (node.Name.Trim ().ToLower () == "permanent") {  		int iCount = 0;  		int.TryParse (TryGetAttribute (node' "count")' out iCount);  		anime.VoteCount = iCount;  		decimal iRating = 0;  		decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  		anime.Rating = (int)(iRating * 100);  	}  	if (node.Name.Trim ().ToLower () == "temporary") {  		int iCount = 0;  		int.TryParse (TryGetAttribute (node' "count")' out iCount);  		anime.TempVoteCount = iCount;  		decimal iRating = 0;  		decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  		anime.TempRating = (int)(iRating * 100);  	}  	if (node.Name.Trim ().ToLower () == "review") {  		int iCount = 0;  		int.TryParse (TryGetAttribute (node' "count")' out iCount);  		anime.ReviewCount = iCount;  		decimal iRating = 0;  		decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  		anime.AvgReviewRating = (int)(iRating * 100);  	}  }  catch (Exception ex) {  	//BaseConfig.MyAnimeLog.Write("Error in GetEpisodes: {0}"' ex);  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: if (node.Name.Trim ().ToLower () == "permanent") {  	int iCount = 0;  	int.TryParse (TryGetAttribute (node' "count")' out iCount);  	anime.VoteCount = iCount;  	decimal iRating = 0;  	decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  	anime.Rating = (int)(iRating * 100);  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: anime.Rating = (int)(iRating * 100);  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: if (node.Name.Trim ().ToLower () == "temporary") {  	int iCount = 0;  	int.TryParse (TryGetAttribute (node' "count")' out iCount);  	anime.TempVoteCount = iCount;  	decimal iRating = 0;  	decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  	anime.TempRating = (int)(iRating * 100);  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: anime.TempRating = (int)(iRating * 100);  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: if (node.Name.Trim ().ToLower () == "review") {  	int iCount = 0;  	int.TryParse (TryGetAttribute (node' "count")' out iCount);  	anime.ReviewCount = iCount;  	decimal iRating = 0;  	decimal.TryParse (node.InnerText.Trim ()' style' culture' out iRating);  	anime.AvgReviewRating = (int)(iRating * 100);  }  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: anime.AvgReviewRating = (int)(iRating * 100);  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: if (relType.Trim ().ToLower () == "prequel")  	return 2;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 2;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: if (relType.Trim ().ToLower () == "same setting")  	return 11;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 11;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: if (relType.Trim ().ToLower () == "alternative setting")  	return 21;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 21;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: if (relType.Trim ().ToLower () == "alternative version")  	return 32;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 32;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: if (relType.Trim ().ToLower () == "music video")  	return 41;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 41;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: if (relType.Trim ().ToLower () == "character")  	return 42;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 42;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: if (relType.Trim ().ToLower () == "side story")  	return 51;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 51;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: if (relType.Trim ().ToLower () == "parent story")  	return 52;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 52;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: if (relType.Trim ().ToLower () == "summary")  	return 61;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 61;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: if (relType.Trim ().ToLower () == "full story")  	return 62;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 62;  
Magic Number,AniDBAPI,AniDBHTTPHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 100;  
Magic Number,AniDBAPI,CalendarCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Calendar.cs,CalendarCollection,The following statement contains a magic number: if (sDetails.Length <= 2)  	return;  
Magic Number,AniDBAPI,CalendarCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Calendar.cs,CalendarCollection,The following statement contains a magic number: for (int i = 1; i < sDetails.Length - 1; i++)// first item will be the status command' and last will be empty   {  	//BaseConfig.MyAnimeLog.Write("s: {0}"' sDetails[i]);  	Calendar cal = new Calendar ();  	string[] flds = sDetails [i].Substring (0).Split ('|');  	cal.AnimeID = int.Parse (flds [0]);  	cal.ReleaseDateRaw = flds [1];  	cal.DateFlags = int.Parse (flds [2]);  	cal.ReleaseDate = Utils.GetAniDBDateAsDate (flds [1]' cal.DateFlags);  	calendars.Add (cal);  	//BaseConfig.MyAnimeLog.Write("grp: {0}"' grp);  }  
Magic Number,AniDBAPI,CalendarCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Calendar.cs,CalendarCollection,The following statement contains a magic number: cal.DateFlags = int.Parse (flds [2]);  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: if (sDetails.Length <= 2)  	return;  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: for (int i = 1; i < sDetails.Length - 1; i++)// first item will be the status command' and last will be empty   {  	//BaseConfig.MyAnimeLog.Write("s: {0}"' sDetails[i]);  	Raw_AniDB_GroupStatus grp = new Raw_AniDB_GroupStatus ();  	grp.AnimeID = animeID;  	try {  		// {int group id}|{str group name}|{int completion state}|{int last episode number}|{int rating}|{int votes}|{str episode range}\n  		string[] flds = sDetails [i].Substring (0).Split ('|');  		grp.GroupID = int.Parse (flds [0]);  		grp.GroupName = flds [1];  		grp.CompletionState = int.Parse (flds [2]);  		grp.LastEpisodeNumber = int.Parse (flds [3]);  		grp.Rating = int.Parse (flds [4]);  		grp.Votes = int.Parse (flds [5]);  		grp.EpisodeRange = flds [6];  		groups.Add (grp);  	}  	catch (Exception ex) {  		NLog.LogManager.GetCurrentClassLogger ().ErrorException (ex.ToString ()' ex);  	}  	//BaseConfig.MyAnimeLog.Write("grp: {0}"' grp);  }  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: for (int i = 1; i < sDetails.Length - 1; i++)// first item will be the status command' and last will be empty   {  	//BaseConfig.MyAnimeLog.Write("s: {0}"' sDetails[i]);  	Raw_AniDB_GroupStatus grp = new Raw_AniDB_GroupStatus ();  	grp.AnimeID = animeID;  	try {  		// {int group id}|{str group name}|{int completion state}|{int last episode number}|{int rating}|{int votes}|{str episode range}\n  		string[] flds = sDetails [i].Substring (0).Split ('|');  		grp.GroupID = int.Parse (flds [0]);  		grp.GroupName = flds [1];  		grp.CompletionState = int.Parse (flds [2]);  		grp.LastEpisodeNumber = int.Parse (flds [3]);  		grp.Rating = int.Parse (flds [4]);  		grp.Votes = int.Parse (flds [5]);  		grp.EpisodeRange = flds [6];  		groups.Add (grp);  	}  	catch (Exception ex) {  		NLog.LogManager.GetCurrentClassLogger ().ErrorException (ex.ToString ()' ex);  	}  	//BaseConfig.MyAnimeLog.Write("grp: {0}"' grp);  }  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: for (int i = 1; i < sDetails.Length - 1; i++)// first item will be the status command' and last will be empty   {  	//BaseConfig.MyAnimeLog.Write("s: {0}"' sDetails[i]);  	Raw_AniDB_GroupStatus grp = new Raw_AniDB_GroupStatus ();  	grp.AnimeID = animeID;  	try {  		// {int group id}|{str group name}|{int completion state}|{int last episode number}|{int rating}|{int votes}|{str episode range}\n  		string[] flds = sDetails [i].Substring (0).Split ('|');  		grp.GroupID = int.Parse (flds [0]);  		grp.GroupName = flds [1];  		grp.CompletionState = int.Parse (flds [2]);  		grp.LastEpisodeNumber = int.Parse (flds [3]);  		grp.Rating = int.Parse (flds [4]);  		grp.Votes = int.Parse (flds [5]);  		grp.EpisodeRange = flds [6];  		groups.Add (grp);  	}  	catch (Exception ex) {  		NLog.LogManager.GetCurrentClassLogger ().ErrorException (ex.ToString ()' ex);  	}  	//BaseConfig.MyAnimeLog.Write("grp: {0}"' grp);  }  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: for (int i = 1; i < sDetails.Length - 1; i++)// first item will be the status command' and last will be empty   {  	//BaseConfig.MyAnimeLog.Write("s: {0}"' sDetails[i]);  	Raw_AniDB_GroupStatus grp = new Raw_AniDB_GroupStatus ();  	grp.AnimeID = animeID;  	try {  		// {int group id}|{str group name}|{int completion state}|{int last episode number}|{int rating}|{int votes}|{str episode range}\n  		string[] flds = sDetails [i].Substring (0).Split ('|');  		grp.GroupID = int.Parse (flds [0]);  		grp.GroupName = flds [1];  		grp.CompletionState = int.Parse (flds [2]);  		grp.LastEpisodeNumber = int.Parse (flds [3]);  		grp.Rating = int.Parse (flds [4]);  		grp.Votes = int.Parse (flds [5]);  		grp.EpisodeRange = flds [6];  		groups.Add (grp);  	}  	catch (Exception ex) {  		NLog.LogManager.GetCurrentClassLogger ().ErrorException (ex.ToString ()' ex);  	}  	//BaseConfig.MyAnimeLog.Write("grp: {0}"' grp);  }  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: for (int i = 1; i < sDetails.Length - 1; i++)// first item will be the status command' and last will be empty   {  	//BaseConfig.MyAnimeLog.Write("s: {0}"' sDetails[i]);  	Raw_AniDB_GroupStatus grp = new Raw_AniDB_GroupStatus ();  	grp.AnimeID = animeID;  	try {  		// {int group id}|{str group name}|{int completion state}|{int last episode number}|{int rating}|{int votes}|{str episode range}\n  		string[] flds = sDetails [i].Substring (0).Split ('|');  		grp.GroupID = int.Parse (flds [0]);  		grp.GroupName = flds [1];  		grp.CompletionState = int.Parse (flds [2]);  		grp.LastEpisodeNumber = int.Parse (flds [3]);  		grp.Rating = int.Parse (flds [4]);  		grp.Votes = int.Parse (flds [5]);  		grp.EpisodeRange = flds [6];  		groups.Add (grp);  	}  	catch (Exception ex) {  		NLog.LogManager.GetCurrentClassLogger ().ErrorException (ex.ToString ()' ex);  	}  	//BaseConfig.MyAnimeLog.Write("grp: {0}"' grp);  }  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: try {  	// {int group id}|{str group name}|{int completion state}|{int last episode number}|{int rating}|{int votes}|{str episode range}\n  	string[] flds = sDetails [i].Substring (0).Split ('|');  	grp.GroupID = int.Parse (flds [0]);  	grp.GroupName = flds [1];  	grp.CompletionState = int.Parse (flds [2]);  	grp.LastEpisodeNumber = int.Parse (flds [3]);  	grp.Rating = int.Parse (flds [4]);  	grp.Votes = int.Parse (flds [5]);  	grp.EpisodeRange = flds [6];  	groups.Add (grp);  }  catch (Exception ex) {  	NLog.LogManager.GetCurrentClassLogger ().ErrorException (ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: try {  	// {int group id}|{str group name}|{int completion state}|{int last episode number}|{int rating}|{int votes}|{str episode range}\n  	string[] flds = sDetails [i].Substring (0).Split ('|');  	grp.GroupID = int.Parse (flds [0]);  	grp.GroupName = flds [1];  	grp.CompletionState = int.Parse (flds [2]);  	grp.LastEpisodeNumber = int.Parse (flds [3]);  	grp.Rating = int.Parse (flds [4]);  	grp.Votes = int.Parse (flds [5]);  	grp.EpisodeRange = flds [6];  	groups.Add (grp);  }  catch (Exception ex) {  	NLog.LogManager.GetCurrentClassLogger ().ErrorException (ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: try {  	// {int group id}|{str group name}|{int completion state}|{int last episode number}|{int rating}|{int votes}|{str episode range}\n  	string[] flds = sDetails [i].Substring (0).Split ('|');  	grp.GroupID = int.Parse (flds [0]);  	grp.GroupName = flds [1];  	grp.CompletionState = int.Parse (flds [2]);  	grp.LastEpisodeNumber = int.Parse (flds [3]);  	grp.Rating = int.Parse (flds [4]);  	grp.Votes = int.Parse (flds [5]);  	grp.EpisodeRange = flds [6];  	groups.Add (grp);  }  catch (Exception ex) {  	NLog.LogManager.GetCurrentClassLogger ().ErrorException (ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: try {  	// {int group id}|{str group name}|{int completion state}|{int last episode number}|{int rating}|{int votes}|{str episode range}\n  	string[] flds = sDetails [i].Substring (0).Split ('|');  	grp.GroupID = int.Parse (flds [0]);  	grp.GroupName = flds [1];  	grp.CompletionState = int.Parse (flds [2]);  	grp.LastEpisodeNumber = int.Parse (flds [3]);  	grp.Rating = int.Parse (flds [4]);  	grp.Votes = int.Parse (flds [5]);  	grp.EpisodeRange = flds [6];  	groups.Add (grp);  }  catch (Exception ex) {  	NLog.LogManager.GetCurrentClassLogger ().ErrorException (ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: try {  	// {int group id}|{str group name}|{int completion state}|{int last episode number}|{int rating}|{int votes}|{str episode range}\n  	string[] flds = sDetails [i].Substring (0).Split ('|');  	grp.GroupID = int.Parse (flds [0]);  	grp.GroupName = flds [1];  	grp.CompletionState = int.Parse (flds [2]);  	grp.LastEpisodeNumber = int.Parse (flds [3]);  	grp.Rating = int.Parse (flds [4]);  	grp.Votes = int.Parse (flds [5]);  	grp.EpisodeRange = flds [6];  	groups.Add (grp);  }  catch (Exception ex) {  	NLog.LogManager.GetCurrentClassLogger ().ErrorException (ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: grp.CompletionState = int.Parse (flds [2]);  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: grp.LastEpisodeNumber = int.Parse (flds [3]);  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: grp.Rating = int.Parse (flds [4]);  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: grp.Votes = int.Parse (flds [5]);  
Magic Number,AniDBAPI,GroupStatusCollection,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: grp.EpisodeRange = flds [6];  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AnimeTypeRAW = AniDBAPILib.ProcessAniDBString (sDetails [2]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: RelatedAnimeIdsRAW = AniDBAPILib.ProcessAniDBString (sDetails [3]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: RelatedAnimeTypesRAW = AniDBAPILib.ProcessAniDBString (sDetails [4]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: EpisodeCount = AniDBAPILib.ProcessAniDBInt (sDetails [13]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: EpisodeCountNormal = AniDBAPILib.ProcessAniDBInt (sDetails [14]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: EpisodeCountSpecial = AniDBAPILib.ProcessAniDBInt (sDetails [15]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: URL = AniDBAPILib.ProcessAniDBString (sDetails [18]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: Picname = AniDBAPILib.ProcessAniDBString (sDetails [19]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: Rating = AniDBAPILib.ProcessAniDBInt (sDetails [21]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: VoteCount = AniDBAPILib.ProcessAniDBInt (sDetails [22]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: TempRating = AniDBAPILib.ProcessAniDBInt (sDetails [23]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: TempVoteCount = AniDBAPILib.ProcessAniDBInt (sDetails [24]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AvgReviewRating = AniDBAPILib.ProcessAniDBInt (sDetails [25]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: ReviewCount = AniDBAPILib.ProcessAniDBInt (sDetails [26]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AwardList = AniDBAPILib.ProcessAniDBString (sDetails [27]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: Restricted = AniDBAPILib.ProcessAniDBInt (sDetails [28]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AnimePlanetID = AniDBAPILib.ProcessAniDBInt (sDetails [29]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: ANNID = AniDBAPILib.ProcessAniDBInt (sDetails [30]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AllCinemaID = AniDBAPILib.ProcessAniDBInt (sDetails [31]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AnimeNfoID = AniDBAPILib.ProcessAniDBString (sDetails [32]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: DateRecordUpdated = AniDBAPILib.ProcessAniDBString (sDetails [33]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: CharacterIDListRAW = AniDBAPILib.ProcessAniDBString (sDetails [34]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: ReviewIDListRAW = AniDBAPILib.ProcessAniDBString (sDetails [35]);  
Magic Number,AniDBAPI,Raw_AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: GenreRAW = sDetails [5];  
Magic Number,AniDBAPI,Raw_AniDB_AnimeDesc,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_AnimeDesc.cs,Raw_AniDB_AnimeDesc,The following statement contains a magic number: this.Description = AniDBAPILib.ProcessAniDBString (sDetails [2]);  
Magic Number,AniDBAPI,Raw_AniDB_Character,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Character.cs,Raw_AniDB_Character,The following statement contains a magic number: CharName = AniDBAPILib.ProcessAniDBString (sDetails [2].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Character,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Character.cs,Raw_AniDB_Character,The following statement contains a magic number: PicName = AniDBAPILib.ProcessAniDBString (sDetails [3].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Character,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Character.cs,Raw_AniDB_Character,The following statement contains a magic number: CreatorListRaw = AniDBAPILib.ProcessAniDBString (sDetails [4].Trim ().Replace ("'"' "|"));  
Magic Number,AniDBAPI,Raw_AniDB_Creator,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: CreatorName = AniDBAPILib.ProcessAniDBString (sDetails [2].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Creator,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: CreatorType = AniDBAPILib.ProcessAniDBInt (AniDBAPILib.ProcessAniDBString (sDetails [3].Trim ()));  
Magic Number,AniDBAPI,Raw_AniDB_Creator,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: PicName = AniDBAPILib.ProcessAniDBString (sDetails [4].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Creator,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: URLEnglish = AniDBAPILib.ProcessAniDBString (sDetails [5].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Creator,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: URLJapanese = AniDBAPILib.ProcessAniDBString (sDetails [6].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Creator,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: URLWikiEnglish = AniDBAPILib.ProcessAniDBString (sDetails [7].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Creator,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: URLWikiJapanese = AniDBAPILib.ProcessAniDBString (sDetails [8].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessEpisodeSource,The following statement contains a magic number: int.TryParse (sDetails [2].Trim ()' out lMinutes);  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessEpisodeSource,The following statement contains a magic number: Rating = AniDBAPILib.ProcessAniDBInt (sDetails [3].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessEpisodeSource,The following statement contains a magic number: Votes = AniDBAPILib.ProcessAniDBInt (sDetails [4].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessEpisodeSource,The following statement contains a magic number: EnglishName = AniDBAPILib.ProcessAniDBString (sDetails [6].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessEpisodeSource,The following statement contains a magic number: RomajiName = AniDBAPILib.ProcessAniDBString (sDetails [7].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessEpisodeSource,The following statement contains a magic number: KanjiName = AniDBAPILib.ProcessAniDBString (sDetails [8].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessEpisodeSource,The following statement contains a magic number: AirDate = AniDBAPILib.ProcessAniDBInt (sDetails [9].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessFileSource,The following statement contains a magic number: EpisodeID = int.Parse (sDetails [2].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessFileSource,The following statement contains a magic number: int.TryParse (sDetails [15].Trim ()' out lMinutes);  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessFileSource,The following statement contains a magic number: Rating = AniDBAPILib.ProcessAniDBInt (sDetails [22].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessFileSource,The following statement contains a magic number: Votes = AniDBAPILib.ProcessAniDBInt (sDetails [23].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessFileSource,The following statement contains a magic number: EnglishName = AniDBAPILib.ProcessAniDBString (sDetails [19].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessFileSource,The following statement contains a magic number: RomajiName = AniDBAPILib.ProcessAniDBString (sDetails [20].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessFileSource,The following statement contains a magic number: KanjiName = AniDBAPILib.ProcessAniDBString (sDetails [21].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessFileSource,The following statement contains a magic number: AirDate = AniDBAPILib.ProcessAniDBInt (sDetails [17].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: this.FileSize = long.Parse (sDetails [8].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: this.ED2KHash = AniDBAPILib.ProcessAniDBString (sDetails [9].Trim ()).ToUpper ();  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: this.MD5 = AniDBAPILib.ProcessAniDBString (sDetails [10].Trim ()).ToUpper ();  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: this.SHA1 = AniDBAPILib.ProcessAniDBString (sDetails [11].Trim ()).ToUpper ();  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: this.CRC = AniDBAPILib.ProcessAniDBString (sDetails [12].Trim ()).ToUpper ();  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: if (state == 0 || state == 1)  	FileVersion = 1;  else {  	AniDBFileState eState = (AniDBFileState)state;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV2))  		FileVersion = 2;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV3))  		FileVersion = 3;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV4))  		FileVersion = 4;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV5))  		FileVersion = 5;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_CEN))  		IsCensored = 1;  }  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: if (state == 0 || state == 1)  	FileVersion = 1;  else {  	AniDBFileState eState = (AniDBFileState)state;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV2))  		FileVersion = 2;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV3))  		FileVersion = 3;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV4))  		FileVersion = 4;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV5))  		FileVersion = 5;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_CEN))  		IsCensored = 1;  }  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: if (state == 0 || state == 1)  	FileVersion = 1;  else {  	AniDBFileState eState = (AniDBFileState)state;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV2))  		FileVersion = 2;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV3))  		FileVersion = 3;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV4))  		FileVersion = 4;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV5))  		FileVersion = 5;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_CEN))  		IsCensored = 1;  }  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: if (state == 0 || state == 1)  	FileVersion = 1;  else {  	AniDBFileState eState = (AniDBFileState)state;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV2))  		FileVersion = 2;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV3))  		FileVersion = 3;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV4))  		FileVersion = 4;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV5))  		FileVersion = 5;  	if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_CEN))  		IsCensored = 1;  }  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV2))  	FileVersion = 2;  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: FileVersion = 2;  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV3))  	FileVersion = 3;  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: FileVersion = 3;  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV4))  	FileVersion = 4;  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: FileVersion = 4;  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: if (BitMaskHelper.IsSet (eState' AniDBFileState.FILE_ISV5))  	FileVersion = 5;  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: FileVersion = 5;  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: if (int.TryParse (sDetails [6].Trim ()' out isdep))  	IsDeprecated = isdep == 0 ? 0 : 1;  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: EpisodesRAW = sDetails [2].Trim ();  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: if (sDetails [5].Trim ().Length > 0) {  	string[] Eps = sDetails [5].Trim ().Split ('\'');  	if (Eps.Length > 0) {  		foreach (string ep in Eps) {  			string[] ep2 = ep.Split (''');  			if (ep2.Length > 0) {  				EpisodesRAW += "'" + ep2 [0];  				if (!string.IsNullOrEmpty (OtherEpisodesRAW))  					OtherEpisodesRAW += "'";  				OtherEpisodesRAW += ep2 [0];  			}  			if (ep2.Length > 1)  				EpisodesPercentRAW += "'" + ep2 [1];  			else  				EpisodesPercentRAW += "'100";  		}  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: if (sDetails [5].Trim ().Length > 0) {  	string[] Eps = sDetails [5].Trim ().Split ('\'');  	if (Eps.Length > 0) {  		foreach (string ep in Eps) {  			string[] ep2 = ep.Split (''');  			if (ep2.Length > 0) {  				EpisodesRAW += "'" + ep2 [0];  				if (!string.IsNullOrEmpty (OtherEpisodesRAW))  					OtherEpisodesRAW += "'";  				OtherEpisodesRAW += ep2 [0];  			}  			if (ep2.Length > 1)  				EpisodesPercentRAW += "'" + ep2 [1];  			else  				EpisodesPercentRAW += "'100";  		}  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: GroupID = int.Parse (sDetails [3].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_Source = AniDBAPILib.ProcessAniDBString (sDetails [14].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_AudioCodec = AniDBAPILib.ProcessAniDBString (sDetails [15].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_VideoCodec = AniDBAPILib.ProcessAniDBString (sDetails [17].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_VideoResolution = AniDBAPILib.ProcessAniDBString (sDetails [19].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_FileExtension = AniDBAPILib.ProcessAniDBString (sDetails [20].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_LengthSeconds = AniDBAPILib.ProcessAniDBInt (sDetails [23].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_Description = AniDBAPILib.ProcessAniDBString (sDetails [24].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_ReleaseDate = AniDBAPILib.ProcessAniDBInt (sDetails [25].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: LanguagesRAW = AniDBAPILib.ProcessAniDBString (sDetails [21].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: SubtitlesRAW = AniDBAPILib.ProcessAniDBString (sDetails [22].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: FileName = AniDBAPILib.ProcessAniDBString (sDetails [26].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: Anime_GroupName = AniDBAPILib.ProcessAniDBString (sDetails [40].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: Anime_GroupNameShort = AniDBAPILib.ProcessAniDBString (sDetails [41].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: Episode_Rating = AniDBAPILib.ProcessAniDBInt (sDetails [38].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: Episode_Votes = AniDBAPILib.ProcessAniDBInt (sDetails [39].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Group,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: Votes = int.Parse (sDetails [2]);  
Magic Number,AniDBAPI,Raw_AniDB_Group,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: AnimeCount = int.Parse (sDetails [3]);  
Magic Number,AniDBAPI,Raw_AniDB_Group,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: FileCount = int.Parse (sDetails [4]);  
Magic Number,AniDBAPI,Raw_AniDB_Group,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: GroupName = AniDBAPILib.ProcessAniDBString (sDetails [5]);  
Magic Number,AniDBAPI,Raw_AniDB_Group,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: GroupNameShort = AniDBAPILib.ProcessAniDBString (sDetails [6]);  
Magic Number,AniDBAPI,Raw_AniDB_Group,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: IRCChannel = AniDBAPILib.ProcessAniDBString (sDetails [7]);  
Magic Number,AniDBAPI,Raw_AniDB_Group,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: IRCServer = AniDBAPILib.ProcessAniDBString (sDetails [8]);  
Magic Number,AniDBAPI,Raw_AniDB_Group,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: URL = AniDBAPILib.ProcessAniDBString (sDetails [9]);  
Magic Number,AniDBAPI,Raw_AniDB_Group,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: Picname = AniDBAPILib.ProcessAniDBString (sDetails [10]);  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.EpisodeID = AniDBAPILib.ProcessAniDBInt (sDetails [2]);  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.AnimeID = AniDBAPILib.ProcessAniDBInt (sDetails [3]);  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.GroupID = AniDBAPILib.ProcessAniDBInt (sDetails [4]);  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.FileDate = AniDBAPILib.ProcessAniDBString (sDetails [5]);  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.State = AniDBAPILib.ProcessAniDBInt (sDetails [6]);  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.ViewDateUDP = AniDBAPILib.ProcessAniDBInt (sDetails [7]);  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.Storage = AniDBAPILib.ProcessAniDBString (sDetails [8]);  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.Source = AniDBAPILib.ProcessAniDBString (sDetails [9]);  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.Other = AniDBAPILib.ProcessAniDBString (sDetails [10]);  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.FileState = AniDBAPILib.ProcessAniDBInt (sDetails [11]);  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: if (ViewDateUDP > 0) {  	DateTime utcDate = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: if (!string.IsNullOrEmpty (ViewDateHTTP) && ViewDateHTTP.Length > 17) {  	try {  		// eg "2011-02-23T20:49:18+0000"  		int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  		int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  		int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  		int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  		int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  		int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  		DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  		utcDate = utcDate.AddSeconds (ViewDateUDP);  		WatchedDate = utcDate.ToLocalTime ();  	}  	catch (Exception ex) {  		logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  	}  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: try {  	// eg "2011-02-23T20:49:18+0000"  	int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  	int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  	int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  	int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  	int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  	int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  	DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  catch (Exception ex) {  	logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: try {  	// eg "2011-02-23T20:49:18+0000"  	int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  	int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  	int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  	int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  	int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  	int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  	DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  catch (Exception ex) {  	logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: try {  	// eg "2011-02-23T20:49:18+0000"  	int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  	int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  	int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  	int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  	int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  	int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  	DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  catch (Exception ex) {  	logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: try {  	// eg "2011-02-23T20:49:18+0000"  	int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  	int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  	int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  	int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  	int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  	int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  	DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  catch (Exception ex) {  	logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: try {  	// eg "2011-02-23T20:49:18+0000"  	int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  	int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  	int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  	int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  	int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  	int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  	DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  catch (Exception ex) {  	logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: try {  	// eg "2011-02-23T20:49:18+0000"  	int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  	int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  	int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  	int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  	int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  	int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  	DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  catch (Exception ex) {  	logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: try {  	// eg "2011-02-23T20:49:18+0000"  	int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  	int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  	int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  	int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  	int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  	int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  	DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  catch (Exception ex) {  	logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: try {  	// eg "2011-02-23T20:49:18+0000"  	int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  	int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  	int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  	int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  	int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  	int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  	DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  catch (Exception ex) {  	logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: try {  	// eg "2011-02-23T20:49:18+0000"  	int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  	int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  	int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  	int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  	int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  	int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  	DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  catch (Exception ex) {  	logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: try {  	// eg "2011-02-23T20:49:18+0000"  	int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  	int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  	int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  	int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  	int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  	int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  	DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  catch (Exception ex) {  	logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: try {  	// eg "2011-02-23T20:49:18+0000"  	int year = int.Parse (ViewDateHTTP.Trim ().Substring (0' 4));  	int month = int.Parse (ViewDateHTTP.Trim ().Substring (5' 2));  	int day = int.Parse (ViewDateHTTP.Trim ().Substring (8' 2));  	int hour = int.Parse (ViewDateHTTP.Trim ().Substring (11' 2));  	int minute = int.Parse (ViewDateHTTP.Trim ().Substring (14' 2));  	int second = int.Parse (ViewDateHTTP.Trim ().Substring (17' 2));  	DateTime utcDate = new DateTime (year' month' day' hour' minute' second' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (ViewDateUDP);  	WatchedDate = utcDate.ToLocalTime ();  }  catch (Exception ex) {  	logger.ErrorException ("Error processing View Date HTTP: " + ex.ToString ()' ex);  }  
Magic Number,AniDBAPI,Raw_AniDB_NotifyAlert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_NotifyAlert.cs,Raw_AniDB_NotifyAlert,The following statement contains a magic number: alertCount = int.Parse (sDetails [2]);  
Magic Number,AniDBAPI,Raw_AniDB_NotifyAlert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_NotifyAlert.cs,Raw_AniDB_NotifyAlert,The following statement contains a magic number: alertDate = AniDBAPILib.ProcessAniDBInt (sDetails [3]);  
Magic Number,AniDBAPI,Raw_AniDB_NotifyAlert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_NotifyAlert.cs,Raw_AniDB_NotifyAlert,The following statement contains a magic number: relName = AniDBAPILib.ProcessAniDBString (sDetails [4]);  
Magic Number,AniDBAPI,Raw_AniDB_NotifyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_NotifyList.cs,Raw_AniDB_NotifyList,The following statement contains a magic number: if (sDetails.Length <= 2)  	return;  
Magic Number,AniDBAPI,Raw_AniDB_NotifyMessage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_NotifyMessage.cs,Raw_AniDB_NotifyMessage,The following statement contains a magic number: fromUserName = AniDBAPILib.ProcessAniDBString (sDetails [2]);  
Magic Number,AniDBAPI,Raw_AniDB_NotifyMessage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_NotifyMessage.cs,Raw_AniDB_NotifyMessage,The following statement contains a magic number: messageDate = AniDBAPILib.ProcessAniDBInt (sDetails [3]);  
Magic Number,AniDBAPI,Raw_AniDB_NotifyMessage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_NotifyMessage.cs,Raw_AniDB_NotifyMessage,The following statement contains a magic number: messageType = long.Parse (sDetails [4]);  
Magic Number,AniDBAPI,Raw_AniDB_NotifyMessage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_NotifyMessage.cs,Raw_AniDB_NotifyMessage,The following statement contains a magic number: title = AniDBAPILib.ProcessAniDBString (sDetails [5]);  
Magic Number,AniDBAPI,Raw_AniDB_NotifyMessage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_NotifyMessage.cs,Raw_AniDB_NotifyMessage,The following statement contains a magic number: body = AniDBAPILib.ProcessAniDBString (sDetails [6]);  
Magic Number,AniDBAPI,Raw_AniDB_Review,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: ReviewID = int.Parse (sDetails [3].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Review,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: AuthorID = int.Parse (sDetails [4].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Review,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingAnimation = int.Parse (sDetails [5].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Review,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingSound = int.Parse (sDetails [6].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Review,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingStory = int.Parse (sDetails [7].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Review,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingCharacter = int.Parse (sDetails [8].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Review,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingValue = int.Parse (sDetails [9].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Review,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingEnjoyment = int.Parse (sDetails [10].Trim ());  
Magic Number,AniDBAPI,Raw_AniDB_Review,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: ReviewText = AniDBAPILib.ProcessAniDBString (sDetails [11].Trim ());  
Magic Number,AniDBAPI,APIUtils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Utils.cs,DownloadWebPage,The following statement contains a magic number: try {  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 20000;  	// 20 seconds  	webReq.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	webReq.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	String enco = WebResponse.CharacterSet;  	Encoding encoding = null;  	if (!String.IsNullOrEmpty (enco))  		encoding = Encoding.GetEncoding (WebResponse.CharacterSet);  	if (encoding == null)  		encoding = Encoding.Default;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string output = Reader.ReadToEnd ();  	WebResponse.Close ();  	responseStream.Close ();  	return output;  }  catch (Exception ex) {  	logger.ErrorException ("Error in APIUtils.DownloadWebPage: {0}"' ex);  	return "";  }  
Magic Number,AniDBAPI,APIUtils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Utils.cs,DownloadWebPage,The following statement contains a magic number: webReq.Timeout = 20000;  
Magic Number,AniDBAPI,APIUtils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Utils.cs,DownloadWebBinary,The following statement contains a magic number: try {  	HttpWebResponse response = null;  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	// Note: some network proxies require the useragent string to be set or they will deny the http request  	// this is true for instance for EVERY thailand internet connection (also needs to be set for banners/episodethumbs and any other http request we send)  	webReq.UserAgent = "Anime2MP";  	webReq.Timeout = 20000;  	// 20 seconds  	response = (HttpWebResponse)webReq.GetResponse ();  	if (response != null)  		// Get the stream associated with the response.  		return response.GetResponseStream ();  	else  		return null;  }  catch (Exception ex) {  	logger.ErrorException ("Error in APIUtils.DownloadWebBinary: {0}"' ex);  	return null;  }  
Magic Number,AniDBAPI,APIUtils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Utils.cs,DownloadWebBinary,The following statement contains a magic number: webReq.Timeout = 20000;  
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: switch (sMsgType) {  case "210":  	return enHelperActivityType.FileAdded;  case "310":  	{  		//file already exists: read 'watched' status  		string[] arrResult = socketResponse.Split ('\n');  		if (arrResult.Length >= 2) {  			string[] arrStatus = arrResult [1].Split ('|');  			int viewdate = int.Parse (arrStatus [7]);  			ReturnIsWatched = (viewdate > 0);  			DateTime utcDate = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  			utcDate = utcDate.AddSeconds (viewdate);  			WatchedDate = utcDate.ToLocalTime ();  		}  	}  	return enHelperActivityType.FileAlreadyExists;  case "311":  	return enHelperActivityType.UpdatingFile;  case "320":  	return enHelperActivityType.NoSuchFile;  case "411":  	return enHelperActivityType.NoSuchFile;  case "502":  	return enHelperActivityType.LoginFailed;  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: switch (sMsgType) {  case "210":  	return enHelperActivityType.FileAdded;  case "310":  	{  		//file already exists: read 'watched' status  		string[] arrResult = socketResponse.Split ('\n');  		if (arrResult.Length >= 2) {  			string[] arrStatus = arrResult [1].Split ('|');  			int viewdate = int.Parse (arrStatus [7]);  			ReturnIsWatched = (viewdate > 0);  			DateTime utcDate = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  			utcDate = utcDate.AddSeconds (viewdate);  			WatchedDate = utcDate.ToLocalTime ();  		}  	}  	return enHelperActivityType.FileAlreadyExists;  case "311":  	return enHelperActivityType.UpdatingFile;  case "320":  	return enHelperActivityType.NoSuchFile;  case "411":  	return enHelperActivityType.NoSuchFile;  case "502":  	return enHelperActivityType.LoginFailed;  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: switch (sMsgType) {  case "210":  	return enHelperActivityType.FileAdded;  case "310":  	{  		//file already exists: read 'watched' status  		string[] arrResult = socketResponse.Split ('\n');  		if (arrResult.Length >= 2) {  			string[] arrStatus = arrResult [1].Split ('|');  			int viewdate = int.Parse (arrStatus [7]);  			ReturnIsWatched = (viewdate > 0);  			DateTime utcDate = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  			utcDate = utcDate.AddSeconds (viewdate);  			WatchedDate = utcDate.ToLocalTime ();  		}  	}  	return enHelperActivityType.FileAlreadyExists;  case "311":  	return enHelperActivityType.UpdatingFile;  case "320":  	return enHelperActivityType.NoSuchFile;  case "411":  	return enHelperActivityType.NoSuchFile;  case "502":  	return enHelperActivityType.LoginFailed;  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: if (arrResult.Length >= 2) {  	string[] arrStatus = arrResult [1].Split ('|');  	int viewdate = int.Parse (arrStatus [7]);  	ReturnIsWatched = (viewdate > 0);  	DateTime utcDate = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (viewdate);  	WatchedDate = utcDate.ToLocalTime ();  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: if (arrResult.Length >= 2) {  	string[] arrStatus = arrResult [1].Split ('|');  	int viewdate = int.Parse (arrStatus [7]);  	ReturnIsWatched = (viewdate > 0);  	DateTime utcDate = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (viewdate);  	WatchedDate = utcDate.ToLocalTime ();  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: if (arrResult.Length >= 2) {  	string[] arrStatus = arrResult [1].Split ('|');  	int viewdate = int.Parse (arrStatus [7]);  	ReturnIsWatched = (viewdate > 0);  	DateTime utcDate = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  	utcDate = utcDate.AddSeconds (viewdate);  	WatchedDate = utcDate.ToLocalTime ();  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_DeleteFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_DeleteFile.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_DeleteFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_DeleteFile.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeDescription,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeDescription.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeDescription,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeDescription.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0')' aByte5.ToString ("X").PadLeft (2' '0')' aByte6.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0')' aByte5.ToString ("X").PadLeft (2' '0')' aByte6.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0')' aByte5.ToString ("X").PadLeft (2' '0')' aByte6.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0')' aByte5.ToString ("X").PadLeft (2' '0')' aByte6.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0')' aByte5.ToString ("X").PadLeft (2' '0')' aByte6.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0')' aByte5.ToString ("X").PadLeft (2' '0')' aByte6.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCalendar,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetCalendar.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCalendar,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetCalendar.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCharacterInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetCharacterInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCharacterInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetCharacterInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCreatorInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetCreatorInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCreatorInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetCreatorInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetEpisodeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetEpisodeInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetEpisodeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetEpisodeInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&fmask={0}{1}{2}{3}{4}"' fByte1.ToString ("X").PadLeft (2' '0')' fByte2.ToString ("X").PadLeft (2' '0')' fByte3.ToString ("X").PadLeft (2' '0')' fByte4.ToString ("X").PadLeft (2' '0')' fByte5.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&fmask={0}{1}{2}{3}{4}"' fByte1.ToString ("X").PadLeft (2' '0')' fByte2.ToString ("X").PadLeft (2' '0')' fByte3.ToString ("X").PadLeft (2' '0')' fByte4.ToString ("X").PadLeft (2' '0')' fByte5.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&fmask={0}{1}{2}{3}{4}"' fByte1.ToString ("X").PadLeft (2' '0')' fByte2.ToString ("X").PadLeft (2' '0')' fByte3.ToString ("X").PadLeft (2' '0')' fByte4.ToString ("X").PadLeft (2' '0')' fByte5.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&fmask={0}{1}{2}{3}{4}"' fByte1.ToString ("X").PadLeft (2' '0')' fByte2.ToString ("X").PadLeft (2' '0')' fByte3.ToString ("X").PadLeft (2' '0')' fByte4.ToString ("X").PadLeft (2' '0')' fByte5.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&fmask={0}{1}{2}{3}{4}"' fByte1.ToString ("X").PadLeft (2' '0')' fByte2.ToString ("X").PadLeft (2' '0')' fByte3.ToString ("X").PadLeft (2' '0')' fByte4.ToString ("X").PadLeft (2' '0')' fByte5.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&amask={0}{1}{2}{3}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&amask={0}{1}{2}{3}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&amask={0}{1}{2}{3}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText += string.Format ("&amask={0}{1}{2}{3}"' aByte1.ToString ("X").PadLeft (2' '0')' aByte2.ToString ("X").PadLeft (2' '0')' aByte3.ToString ("X").PadLeft (2' '0')' aByte4.ToString ("X").PadLeft (2' '0'));  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetGroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetGroupStatus.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetGroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetGroupStatus.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetMyListFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetMyListFileInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetMyListFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetMyListFileInfo.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetMyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetMyListStats.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetMyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetMyListStats.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetReview,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetReview.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetReview,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetReview.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: switch (sMsgType) {  case "243": {  	// remove the header info  	string[] sDetails = socketResponse.Substring (0).Split ('\n');  	if (sDetails.Length > 1) {  		// first item will be the status command so ignore  		// only concerned with the second line  		string[] flds = sDetails [1].Substring (0).Split ('|');  		AniDBEntity = int.Parse (flds [0]);  		RecordCount = int.Parse (flds [1]);  		StartTime = flds [2];  		AnimeIDListRaw = flds [3].Trim ();  		string[] aids = AnimeIDListRaw.Split (''');  		foreach (string sid in aids) {  			AnimeIDList.Add (int.Parse (sid));  		}  	}  	return enHelperActivityType.GotUpdated;  }  case "343": {  	return enHelperActivityType.NoUpdates;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: switch (sMsgType) {  case "243": {  	// remove the header info  	string[] sDetails = socketResponse.Substring (0).Split ('\n');  	if (sDetails.Length > 1) {  		// first item will be the status command so ignore  		// only concerned with the second line  		string[] flds = sDetails [1].Substring (0).Split ('|');  		AniDBEntity = int.Parse (flds [0]);  		RecordCount = int.Parse (flds [1]);  		StartTime = flds [2];  		AnimeIDListRaw = flds [3].Trim ();  		string[] aids = AnimeIDListRaw.Split (''');  		foreach (string sid in aids) {  			AnimeIDList.Add (int.Parse (sid));  		}  	}  	return enHelperActivityType.GotUpdated;  }  case "343": {  	return enHelperActivityType.NoUpdates;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: if (sDetails.Length > 1) {  	// first item will be the status command so ignore  	// only concerned with the second line  	string[] flds = sDetails [1].Substring (0).Split ('|');  	AniDBEntity = int.Parse (flds [0]);  	RecordCount = int.Parse (flds [1]);  	StartTime = flds [2];  	AnimeIDListRaw = flds [3].Trim ();  	string[] aids = AnimeIDListRaw.Split (''');  	foreach (string sid in aids) {  		AnimeIDList.Add (int.Parse (sid));  	}  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: if (sDetails.Length > 1) {  	// first item will be the status command so ignore  	// only concerned with the second line  	string[] flds = sDetails [1].Substring (0).Split ('|');  	AniDBEntity = int.Parse (flds [0]);  	RecordCount = int.Parse (flds [1]);  	StartTime = flds [2];  	AnimeIDListRaw = flds [3].Trim ();  	string[] aids = AnimeIDListRaw.Split (''');  	foreach (string sid in aids) {  		AnimeIDList.Add (int.Parse (sid));  	}  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: StartTime = flds [2];  
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: AnimeIDListRaw = flds [3].Trim ();  
Magic Number,AniDBAPI.Commands,AniDBCommand_Login,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Login.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_Login,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Login.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsDeleted,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_MarkFileAsDeleted.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsDeleted,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_MarkFileAsDeleted.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_NotifyGet,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_NotifyGet.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_NotifyGet,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_NotifyGet.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_NotifyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_NotifyList.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_NotifyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_NotifyList.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_Ping,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Ping.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_Ping,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Ping.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_UpdateFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_UpdateFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,The following statement contains a magic number: if (votevalue > 0)  	this.voteValue = (int)(votevalue * 100);  else  	this.voteValue = (int)votevalue;  
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,The following statement contains a magic number: this.voteValue = (int)(votevalue * 100);  
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,The following statement contains a magic number: switch (voteType) {  case enAniDBVoteType.Anime:  	iVoteType = 1;  	break;  case enAniDBVoteType.AnimeTemp:  	iVoteType = 2;  	break;  case enAniDBVoteType.Group:  	iVoteType = 3;  	break;  case enAniDBVoteType.Episode:  	iVoteType = 1;  	break;  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,The following statement contains a magic number: switch (voteType) {  case enAniDBVoteType.Anime:  	iVoteType = 1;  	break;  case enAniDBVoteType.AnimeTemp:  	iVoteType = 2;  	break;  case enAniDBVoteType.Group:  	iVoteType = 3;  	break;  case enAniDBVoteType.Episode:  	iVoteType = 1;  	break;  }  
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,The following statement contains a magic number: iVoteType = 2;  
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,The following statement contains a magic number: iVoteType = 3;  
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,InitEpisode,The following statement contains a magic number: if (votevalue > 0)  	this.voteValue = (int)(votevalue * 100);  else  	this.voteValue = (int)votevalue;  
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,InitEpisode,The following statement contains a magic number: this.voteValue = (int)(votevalue * 100);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	if (part > 0) {  		mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  		Thread.Sleep (2300);  	}  	if (commandType != enAniDBCommandType.Login) {  		string msg = string.Format ("UDP_COMMAND: {0}"' mcommandText);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		//string msg = commandText.Replace(MainWindow.settings.Username' "******");  		//msg = msg.Replace(MainWindow.settings.Password' "******");  		//MyAnimeLog.Write("commandText: {0}"' msg);  	}  	bool repeatcmd;  	int received;  	Byte[] byReceivedAdd = new Byte[2000];  	// max length should actually be 1400  	do {  		repeatcmd = false;  		// Send Message  		Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  		try {  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			//MyAnimeLog.Write(ex.ToString());  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		// Receive Response  		received = 0;  		try {  			//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  			received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  			JMMService.LastAniDBMessage = DateTime.Now;  			JMMService.LastAniDBUDPMessage = DateTime.Now;  			if (commandType != enAniDBCommandType.Ping)  				JMMService.LastAniDBMessageNonPing = DateTime.Now;  			else  				JMMService.LastAniDBPing = DateTime.Now;  			//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  			if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  				//deflate  				Byte[] buff = new byte[65536];  				Byte[] input = new byte[received - 2];  				Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  				Inflater inf = new Inflater (false);  				inf.SetInput (input);  				inf.Inflate (buff);  				byReceivedAdd = buff;  				received = (int)inf.TotalOut;  			}  		}  		catch (SocketException sex) {  			// most likely we have timed out  			logger.ErrorException (sex.ToString ()' sex);  			errorOccurred = true;  			errorMessage = sex.ToString ();  		}  		catch (Exception ex) {  			logger.ErrorException (ex.ToString ()' ex);  			errorOccurred = true;  			errorMessage = ex.ToString ();  		}  		if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  			//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  			//AUTH command was not understand because it was encoded in ASCII.  			encoding = changeencoding;  			repeatcmd = true;  		}  	}  	while (repeatcmd);  	if (!errorOccurred) {  		if (changeencoding != null)  			encoding = changeencoding;  		System.Text.Encoding enco;  		if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  			enco = encoding;  		else  			enco = Encoding.ASCII;  		decodedstring = enco.GetString (byReceivedAdd' 0' received);  		if (decodedstring [0] == 0xFEFF)  			// remove BOM  			decodedstring = decodedstring.Substring (1);  		if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  			//Lets handle multipart  			part++;  			string[] sp1 = decodedstring.Split (new char[] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  				string[] sp2 = sp1 [1].Split ('|');  				fulldesc += sp2 [2];  				maxpart = int.Parse (sp2 [1]);  			}  			if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  				string[] sp2 = sp1 [1].Split ('|');  				if (sp2.Length == 3)  					fulldesc += sp2 [2];  				else {  					for (int i = 2; i < sp2.Length; i++)  						fulldesc += "|" + sp2 [i];  				}  				maxpart = int.Parse (sp2 [1]);  			}  			multipart = true;  			if (part == maxpart) {  				decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  				multipart = false;  			}  		}  	}  }  while ((multipart) && (!errorOccurred));  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (part > 0) {  	mcommandText = mcommandText.Replace ("part=" + (part - 1).ToString ()' "part=" + part.ToString ());  	Thread.Sleep (2300);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: Thread.Sleep (2300);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	repeatcmd = false;  	// Send Message  	Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  	try {  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		//MyAnimeLog.Write(ex.ToString());  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	// Receive Response  	received = 0;  	try {  		//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  		received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  		if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  			//deflate  			Byte[] buff = new byte[65536];  			Byte[] input = new byte[received - 2];  			Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  			Inflater inf = new Inflater (false);  			inf.SetInput (input);  			inf.Inflate (buff);  			byReceivedAdd = buff;  			received = (int)inf.TotalOut;  		}  	}  	catch (SocketException sex) {  		// most likely we have timed out  		logger.ErrorException (sex.ToString ()' sex);  		errorOccurred = true;  		errorMessage = sex.ToString ();  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  		//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  		//AUTH command was not understand because it was encoded in ASCII.  		encoding = changeencoding;  		repeatcmd = true;  	}  }  while (repeatcmd);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	repeatcmd = false;  	// Send Message  	Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  	try {  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		//MyAnimeLog.Write(ex.ToString());  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	// Receive Response  	received = 0;  	try {  		//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  		received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  		if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  			//deflate  			Byte[] buff = new byte[65536];  			Byte[] input = new byte[received - 2];  			Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  			Inflater inf = new Inflater (false);  			inf.SetInput (input);  			inf.Inflate (buff);  			byReceivedAdd = buff;  			received = (int)inf.TotalOut;  		}  	}  	catch (SocketException sex) {  		// most likely we have timed out  		logger.ErrorException (sex.ToString ()' sex);  		errorOccurred = true;  		errorMessage = sex.ToString ();  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  		//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  		//AUTH command was not understand because it was encoded in ASCII.  		encoding = changeencoding;  		repeatcmd = true;  	}  }  while (repeatcmd);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	repeatcmd = false;  	// Send Message  	Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  	try {  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		//MyAnimeLog.Write(ex.ToString());  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	// Receive Response  	received = 0;  	try {  		//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  		received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  		if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  			//deflate  			Byte[] buff = new byte[65536];  			Byte[] input = new byte[received - 2];  			Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  			Inflater inf = new Inflater (false);  			inf.SetInput (input);  			inf.Inflate (buff);  			byReceivedAdd = buff;  			received = (int)inf.TotalOut;  		}  	}  	catch (SocketException sex) {  		// most likely we have timed out  		logger.ErrorException (sex.ToString ()' sex);  		errorOccurred = true;  		errorMessage = sex.ToString ();  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  		//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  		//AUTH command was not understand because it was encoded in ASCII.  		encoding = changeencoding;  		repeatcmd = true;  	}  }  while (repeatcmd);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	repeatcmd = false;  	// Send Message  	Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  	try {  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		//MyAnimeLog.Write(ex.ToString());  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	// Receive Response  	received = 0;  	try {  		//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  		received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  		if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  			//deflate  			Byte[] buff = new byte[65536];  			Byte[] input = new byte[received - 2];  			Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  			Inflater inf = new Inflater (false);  			inf.SetInput (input);  			inf.Inflate (buff);  			byReceivedAdd = buff;  			received = (int)inf.TotalOut;  		}  	}  	catch (SocketException sex) {  		// most likely we have timed out  		logger.ErrorException (sex.ToString ()' sex);  		errorOccurred = true;  		errorMessage = sex.ToString ();  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  		//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  		//AUTH command was not understand because it was encoded in ASCII.  		encoding = changeencoding;  		repeatcmd = true;  	}  }  while (repeatcmd);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	repeatcmd = false;  	// Send Message  	Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  	try {  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		//MyAnimeLog.Write(ex.ToString());  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	// Receive Response  	received = 0;  	try {  		//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  		received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  		if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  			//deflate  			Byte[] buff = new byte[65536];  			Byte[] input = new byte[received - 2];  			Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  			Inflater inf = new Inflater (false);  			inf.SetInput (input);  			inf.Inflate (buff);  			byReceivedAdd = buff;  			received = (int)inf.TotalOut;  		}  	}  	catch (SocketException sex) {  		// most likely we have timed out  		logger.ErrorException (sex.ToString ()' sex);  		errorOccurred = true;  		errorMessage = sex.ToString ();  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  		//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  		//AUTH command was not understand because it was encoded in ASCII.  		encoding = changeencoding;  		repeatcmd = true;  	}  }  while (repeatcmd);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	repeatcmd = false;  	// Send Message  	Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  	try {  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		//MyAnimeLog.Write(ex.ToString());  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	// Receive Response  	received = 0;  	try {  		//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  		received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  		if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  			//deflate  			Byte[] buff = new byte[65536];  			Byte[] input = new byte[received - 2];  			Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  			Inflater inf = new Inflater (false);  			inf.SetInput (input);  			inf.Inflate (buff);  			byReceivedAdd = buff;  			received = (int)inf.TotalOut;  		}  	}  	catch (SocketException sex) {  		// most likely we have timed out  		logger.ErrorException (sex.ToString ()' sex);  		errorOccurred = true;  		errorMessage = sex.ToString ();  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  		//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  		//AUTH command was not understand because it was encoded in ASCII.  		encoding = changeencoding;  		repeatcmd = true;  	}  }  while (repeatcmd);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	repeatcmd = false;  	// Send Message  	Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  	try {  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		//MyAnimeLog.Write(ex.ToString());  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	// Receive Response  	received = 0;  	try {  		//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  		received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  		if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  			//deflate  			Byte[] buff = new byte[65536];  			Byte[] input = new byte[received - 2];  			Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  			Inflater inf = new Inflater (false);  			inf.SetInput (input);  			inf.Inflate (buff);  			byReceivedAdd = buff;  			received = (int)inf.TotalOut;  		}  	}  	catch (SocketException sex) {  		// most likely we have timed out  		logger.ErrorException (sex.ToString ()' sex);  		errorOccurred = true;  		errorMessage = sex.ToString ();  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  		//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  		//AUTH command was not understand because it was encoded in ASCII.  		encoding = changeencoding;  		repeatcmd = true;  	}  }  while (repeatcmd);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	repeatcmd = false;  	// Send Message  	Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  	try {  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		//MyAnimeLog.Write(ex.ToString());  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	// Receive Response  	received = 0;  	try {  		//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  		received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  		if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  			//deflate  			Byte[] buff = new byte[65536];  			Byte[] input = new byte[received - 2];  			Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  			Inflater inf = new Inflater (false);  			inf.SetInput (input);  			inf.Inflate (buff);  			byReceivedAdd = buff;  			received = (int)inf.TotalOut;  		}  	}  	catch (SocketException sex) {  		// most likely we have timed out  		logger.ErrorException (sex.ToString ()' sex);  		errorOccurred = true;  		errorMessage = sex.ToString ();  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  		//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  		//AUTH command was not understand because it was encoded in ASCII.  		encoding = changeencoding;  		repeatcmd = true;  	}  }  while (repeatcmd);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: do {  	repeatcmd = false;  	// Send Message  	Byte[] SendByteAdd = Encoding.GetBytes (mcommandText.ToCharArray ());  	try {  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		soUDP.SendTo (SendByteAdd' remoteIpEndPoint);  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		//MyAnimeLog.Write(ex.ToString());  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	// Receive Response  	received = 0;  	try {  		//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  		received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  		JMMService.LastAniDBMessage = DateTime.Now;  		JMMService.LastAniDBUDPMessage = DateTime.Now;  		if (commandType != enAniDBCommandType.Ping)  			JMMService.LastAniDBMessageNonPing = DateTime.Now;  		else  			JMMService.LastAniDBPing = DateTime.Now;  		//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  		if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  			//deflate  			Byte[] buff = new byte[65536];  			Byte[] input = new byte[received - 2];  			Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  			Inflater inf = new Inflater (false);  			inf.SetInput (input);  			inf.Inflate (buff);  			byReceivedAdd = buff;  			received = (int)inf.TotalOut;  		}  	}  	catch (SocketException sex) {  		// most likely we have timed out  		logger.ErrorException (sex.ToString ()' sex);  		errorOccurred = true;  		errorMessage = sex.ToString ();  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  		errorOccurred = true;  		errorMessage = ex.ToString ();  	}  	if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  		//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  		//AUTH command was not understand because it was encoded in ASCII.  		encoding = changeencoding;  		repeatcmd = true;  	}  }  while (repeatcmd);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: try {  	//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  	received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  	JMMService.LastAniDBMessage = DateTime.Now;  	JMMService.LastAniDBUDPMessage = DateTime.Now;  	if (commandType != enAniDBCommandType.Ping)  		JMMService.LastAniDBMessageNonPing = DateTime.Now;  	else  		JMMService.LastAniDBPing = DateTime.Now;  	//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  	if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  		//deflate  		Byte[] buff = new byte[65536];  		Byte[] input = new byte[received - 2];  		Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  		Inflater inf = new Inflater (false);  		inf.SetInput (input);  		inf.Inflate (buff);  		byReceivedAdd = buff;  		received = (int)inf.TotalOut;  	}  }  catch (SocketException sex) {  	// most likely we have timed out  	logger.ErrorException (sex.ToString ()' sex);  	errorOccurred = true;  	errorMessage = sex.ToString ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	errorOccurred = true;  	errorMessage = ex.ToString ();  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: try {  	//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  	received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  	JMMService.LastAniDBMessage = DateTime.Now;  	JMMService.LastAniDBUDPMessage = DateTime.Now;  	if (commandType != enAniDBCommandType.Ping)  		JMMService.LastAniDBMessageNonPing = DateTime.Now;  	else  		JMMService.LastAniDBPing = DateTime.Now;  	//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  	if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  		//deflate  		Byte[] buff = new byte[65536];  		Byte[] input = new byte[received - 2];  		Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  		Inflater inf = new Inflater (false);  		inf.SetInput (input);  		inf.Inflate (buff);  		byReceivedAdd = buff;  		received = (int)inf.TotalOut;  	}  }  catch (SocketException sex) {  	// most likely we have timed out  	logger.ErrorException (sex.ToString ()' sex);  	errorOccurred = true;  	errorMessage = sex.ToString ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	errorOccurred = true;  	errorMessage = ex.ToString ();  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: try {  	//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  	received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  	JMMService.LastAniDBMessage = DateTime.Now;  	JMMService.LastAniDBUDPMessage = DateTime.Now;  	if (commandType != enAniDBCommandType.Ping)  		JMMService.LastAniDBMessageNonPing = DateTime.Now;  	else  		JMMService.LastAniDBPing = DateTime.Now;  	//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  	if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  		//deflate  		Byte[] buff = new byte[65536];  		Byte[] input = new byte[received - 2];  		Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  		Inflater inf = new Inflater (false);  		inf.SetInput (input);  		inf.Inflate (buff);  		byReceivedAdd = buff;  		received = (int)inf.TotalOut;  	}  }  catch (SocketException sex) {  	// most likely we have timed out  	logger.ErrorException (sex.ToString ()' sex);  	errorOccurred = true;  	errorMessage = sex.ToString ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	errorOccurred = true;  	errorMessage = ex.ToString ();  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: try {  	//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  	received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  	JMMService.LastAniDBMessage = DateTime.Now;  	JMMService.LastAniDBUDPMessage = DateTime.Now;  	if (commandType != enAniDBCommandType.Ping)  		JMMService.LastAniDBMessageNonPing = DateTime.Now;  	else  		JMMService.LastAniDBPing = DateTime.Now;  	//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  	if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  		//deflate  		Byte[] buff = new byte[65536];  		Byte[] input = new byte[received - 2];  		Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  		Inflater inf = new Inflater (false);  		inf.SetInput (input);  		inf.Inflate (buff);  		byReceivedAdd = buff;  		received = (int)inf.TotalOut;  	}  }  catch (SocketException sex) {  	// most likely we have timed out  	logger.ErrorException (sex.ToString ()' sex);  	errorOccurred = true;  	errorMessage = sex.ToString ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	errorOccurred = true;  	errorMessage = ex.ToString ();  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: try {  	//MyAnimeLog.Write("soUDP.ReceiveTimeout = {0}"' soUDP.ReceiveTimeout.ToString());  	received = soUDP.ReceiveFrom (byReceivedAdd' ref RemotePoint);  	JMMService.LastAniDBMessage = DateTime.Now;  	JMMService.LastAniDBUDPMessage = DateTime.Now;  	if (commandType != enAniDBCommandType.Ping)  		JMMService.LastAniDBMessageNonPing = DateTime.Now;  	else  		JMMService.LastAniDBPing = DateTime.Now;  	//MyAnimeLog.Write("Buffer length = {0}"' received.ToString());  	if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  		//deflate  		Byte[] buff = new byte[65536];  		Byte[] input = new byte[received - 2];  		Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  		Inflater inf = new Inflater (false);  		inf.SetInput (input);  		inf.Inflate (buff);  		byReceivedAdd = buff;  		received = (int)inf.TotalOut;  	}  }  catch (SocketException sex) {  	// most likely we have timed out  	logger.ErrorException (sex.ToString ()' sex);  	errorOccurred = true;  	errorMessage = sex.ToString ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	errorOccurred = true;  	errorMessage = ex.ToString ();  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  	//deflate  	Byte[] buff = new byte[65536];  	Byte[] input = new byte[received - 2];  	Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  	Inflater inf = new Inflater (false);  	inf.SetInput (input);  	inf.Inflate (buff);  	byReceivedAdd = buff;  	received = (int)inf.TotalOut;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  	//deflate  	Byte[] buff = new byte[65536];  	Byte[] input = new byte[received - 2];  	Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  	Inflater inf = new Inflater (false);  	inf.SetInput (input);  	inf.Inflate (buff);  	byReceivedAdd = buff;  	received = (int)inf.TotalOut;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  	//deflate  	Byte[] buff = new byte[65536];  	Byte[] input = new byte[received - 2];  	Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  	Inflater inf = new Inflater (false);  	inf.SetInput (input);  	inf.Inflate (buff);  	byReceivedAdd = buff;  	received = (int)inf.TotalOut;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  	//deflate  	Byte[] buff = new byte[65536];  	Byte[] input = new byte[received - 2];  	Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  	Inflater inf = new Inflater (false);  	inf.SetInput (input);  	inf.Inflate (buff);  	byReceivedAdd = buff;  	received = (int)inf.TotalOut;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if ((received > 2) && ((byReceivedAdd [0] == 0) && (byReceivedAdd [1] == 0))) {  	//deflate  	Byte[] buff = new byte[65536];  	Byte[] input = new byte[received - 2];  	Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  	Inflater inf = new Inflater (false);  	inf.SetInput (input);  	inf.Inflate (buff);  	byReceivedAdd = buff;  	received = (int)inf.TotalOut;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: Array.Copy (byReceivedAdd' 2' input' 0' received - 2);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  	//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  	//AUTH command was not understand because it was encoded in ASCII.  	encoding = changeencoding;  	repeatcmd = true;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  	//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  	//AUTH command was not understand because it was encoded in ASCII.  	encoding = changeencoding;  	repeatcmd = true;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  	//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  	//AUTH command was not understand because it was encoded in ASCII.  	encoding = changeencoding;  	repeatcmd = true;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if ((commandType == enAniDBCommandType.Login) && (byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF) && (byReceivedAdd [3] == 53) && (byReceivedAdd [5] != 53) && (!Encoding.EncodingName.ToLower ().StartsWith ("unicode")) && (changeencoding != null) && (changeencoding.EncodingName.ToLower ().StartsWith ("unicode"))) {  	//Previous Session used utf-16 and was not logged out' AniDB was not yet issued a timeout.  	//AUTH command was not understand because it was encoded in ASCII.  	encoding = changeencoding;  	repeatcmd = true;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (!errorOccurred) {  	if (changeencoding != null)  		encoding = changeencoding;  	System.Text.Encoding enco;  	if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  		enco = encoding;  	else  		enco = Encoding.ASCII;  	decodedstring = enco.GetString (byReceivedAdd' 0' received);  	if (decodedstring [0] == 0xFEFF)  		// remove BOM  		decodedstring = decodedstring.Substring (1);  	if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  		//Lets handle multipart  		part++;  		string[] sp1 = decodedstring.Split (new char[] {  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  			string[] sp2 = sp1 [1].Split ('|');  			fulldesc += sp2 [2];  			maxpart = int.Parse (sp2 [1]);  		}  		if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  			string[] sp2 = sp1 [1].Split ('|');  			if (sp2.Length == 3)  				fulldesc += sp2 [2];  			else {  				for (int i = 2; i < sp2.Length; i++)  					fulldesc += "|" + sp2 [i];  			}  			maxpart = int.Parse (sp2 [1]);  		}  		multipart = true;  		if (part == maxpart) {  			decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  			multipart = false;  		}  	}  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (!errorOccurred) {  	if (changeencoding != null)  		encoding = changeencoding;  	System.Text.Encoding enco;  	if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  		enco = encoding;  	else  		enco = Encoding.ASCII;  	decodedstring = enco.GetString (byReceivedAdd' 0' received);  	if (decodedstring [0] == 0xFEFF)  		// remove BOM  		decodedstring = decodedstring.Substring (1);  	if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  		//Lets handle multipart  		part++;  		string[] sp1 = decodedstring.Split (new char[] {  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  			string[] sp2 = sp1 [1].Split ('|');  			fulldesc += sp2 [2];  			maxpart = int.Parse (sp2 [1]);  		}  		if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  			string[] sp2 = sp1 [1].Split ('|');  			if (sp2.Length == 3)  				fulldesc += sp2 [2];  			else {  				for (int i = 2; i < sp2.Length; i++)  					fulldesc += "|" + sp2 [i];  			}  			maxpart = int.Parse (sp2 [1]);  		}  		multipart = true;  		if (part == maxpart) {  			decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  			multipart = false;  		}  	}  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (!errorOccurred) {  	if (changeencoding != null)  		encoding = changeencoding;  	System.Text.Encoding enco;  	if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  		enco = encoding;  	else  		enco = Encoding.ASCII;  	decodedstring = enco.GetString (byReceivedAdd' 0' received);  	if (decodedstring [0] == 0xFEFF)  		// remove BOM  		decodedstring = decodedstring.Substring (1);  	if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  		//Lets handle multipart  		part++;  		string[] sp1 = decodedstring.Split (new char[] {  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  			string[] sp2 = sp1 [1].Split ('|');  			fulldesc += sp2 [2];  			maxpart = int.Parse (sp2 [1]);  		}  		if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  			string[] sp2 = sp1 [1].Split ('|');  			if (sp2.Length == 3)  				fulldesc += sp2 [2];  			else {  				for (int i = 2; i < sp2.Length; i++)  					fulldesc += "|" + sp2 [i];  			}  			maxpart = int.Parse (sp2 [1]);  		}  		multipart = true;  		if (part == maxpart) {  			decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  			multipart = false;  		}  	}  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (!errorOccurred) {  	if (changeencoding != null)  		encoding = changeencoding;  	System.Text.Encoding enco;  	if ((byReceivedAdd [0] == 0xFE) && (byReceivedAdd [1] == 0xFF))  		enco = encoding;  	else  		enco = Encoding.ASCII;  	decodedstring = enco.GetString (byReceivedAdd' 0' received);  	if (decodedstring [0] == 0xFEFF)  		// remove BOM  		decodedstring = decodedstring.Substring (1);  	if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  		//Lets handle multipart  		part++;  		string[] sp1 = decodedstring.Split (new char[] {  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  			string[] sp2 = sp1 [1].Split ('|');  			fulldesc += sp2 [2];  			maxpart = int.Parse (sp2 [1]);  		}  		if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  			string[] sp2 = sp1 [1].Split ('|');  			if (sp2.Length == 3)  				fulldesc += sp2 [2];  			else {  				for (int i = 2; i < sp2.Length; i++)  					fulldesc += "|" + sp2 [i];  			}  			maxpart = int.Parse (sp2 [1]);  		}  		multipart = true;  		if (part == maxpart) {  			decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  			multipart = false;  		}  	}  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  	//Lets handle multipart  	part++;  	string[] sp1 = decodedstring.Split (new char[] {  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  		string[] sp2 = sp1 [1].Split ('|');  		fulldesc += sp2 [2];  		maxpart = int.Parse (sp2 [1]);  	}  	if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  		string[] sp2 = sp1 [1].Split ('|');  		if (sp2.Length == 3)  			fulldesc += sp2 [2];  		else {  			for (int i = 2; i < sp2.Length; i++)  				fulldesc += "|" + sp2 [i];  		}  		maxpart = int.Parse (sp2 [1]);  	}  	multipart = true;  	if (part == maxpart) {  		decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  		multipart = false;  	}  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  	//Lets handle multipart  	part++;  	string[] sp1 = decodedstring.Split (new char[] {  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  		string[] sp2 = sp1 [1].Split ('|');  		fulldesc += sp2 [2];  		maxpart = int.Parse (sp2 [1]);  	}  	if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  		string[] sp2 = sp1 [1].Split ('|');  		if (sp2.Length == 3)  			fulldesc += sp2 [2];  		else {  			for (int i = 2; i < sp2.Length; i++)  				fulldesc += "|" + sp2 [i];  		}  		maxpart = int.Parse (sp2 [1]);  	}  	multipart = true;  	if (part == maxpart) {  		decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  		multipart = false;  	}  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  	//Lets handle multipart  	part++;  	string[] sp1 = decodedstring.Split (new char[] {  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  		string[] sp2 = sp1 [1].Split ('|');  		fulldesc += sp2 [2];  		maxpart = int.Parse (sp2 [1]);  	}  	if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  		string[] sp2 = sp1 [1].Split ('|');  		if (sp2.Length == 3)  			fulldesc += sp2 [2];  		else {  			for (int i = 2; i < sp2.Length; i++)  				fulldesc += "|" + sp2 [i];  		}  		maxpart = int.Parse (sp2 [1]);  	}  	multipart = true;  	if (part == maxpart) {  		decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  		multipart = false;  	}  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (commandType == enAniDBCommandType.GetAnimeDescription || commandType == enAniDBCommandType.GetReview) {  	//Lets handle multipart  	part++;  	string[] sp1 = decodedstring.Split (new char[] {  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  		string[] sp2 = sp1 [1].Split ('|');  		fulldesc += sp2 [2];  		maxpart = int.Parse (sp2 [1]);  	}  	if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  		string[] sp2 = sp1 [1].Split ('|');  		if (sp2.Length == 3)  			fulldesc += sp2 [2];  		else {  			for (int i = 2; i < sp2.Length; i++)  				fulldesc += "|" + sp2 [i];  		}  		maxpart = int.Parse (sp2 [1]);  	}  	multipart = true;  	if (part == maxpart) {  		decodedstring = sp1 [0] + "\n0|1|" + fulldesc + "\n";  		multipart = false;  	}  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (sp1 [0].StartsWith ("233 ANIMEDESC") || sp1 [0].StartsWith ("233  ANIMEDESC")) {  	string[] sp2 = sp1 [1].Split ('|');  	fulldesc += sp2 [2];  	maxpart = int.Parse (sp2 [1]);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: fulldesc += sp2 [2];  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  	string[] sp2 = sp1 [1].Split ('|');  	if (sp2.Length == 3)  		fulldesc += sp2 [2];  	else {  		for (int i = 2; i < sp2.Length; i++)  			fulldesc += "|" + sp2 [i];  	}  	maxpart = int.Parse (sp2 [1]);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  	string[] sp2 = sp1 [1].Split ('|');  	if (sp2.Length == 3)  		fulldesc += sp2 [2];  	else {  		for (int i = 2; i < sp2.Length; i++)  			fulldesc += "|" + sp2 [i];  	}  	maxpart = int.Parse (sp2 [1]);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (sp1 [0].StartsWith ("234 REVIEW") || sp1 [0].StartsWith ("234  REVIEW")) {  	string[] sp2 = sp1 [1].Split ('|');  	if (sp2.Length == 3)  		fulldesc += sp2 [2];  	else {  		for (int i = 2; i < sp2.Length; i++)  			fulldesc += "|" + sp2 [i];  	}  	maxpart = int.Parse (sp2 [1]);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (sp2.Length == 3)  	fulldesc += sp2 [2];  else {  	for (int i = 2; i < sp2.Length; i++)  		fulldesc += "|" + sp2 [i];  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (sp2.Length == 3)  	fulldesc += sp2 [2];  else {  	for (int i = 2; i < sp2.Length; i++)  		fulldesc += "|" + sp2 [i];  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (sp2.Length == 3)  	fulldesc += sp2 [2];  else {  	for (int i = 2; i < sp2.Length; i++)  		fulldesc += "|" + sp2 [i];  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: fulldesc += sp2 [2];  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: for (int i = 2; i < sp2.Length; i++)  	fulldesc += "|" + sp2 [i];  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (errorOccurred) {  	socketResponse = string.Empty;  }  else {  	// there should be 2 newline characters in each response  	// the first is after the command .e.g "220 FILE"  	// the second is at the end of the data  	int i = 0' ipos = 0' foundpos = 0;  	foreach (char c in decodedstring) {  		if (c == '\n') {  			//MyAnimeLog.Write("NEWLINE FOUND AT: {0}"' ipos);  			i++;  			foundpos = ipos;  		}  		ipos++;  	}  	if (i != 2) {  		socketResponse = decodedstring;  		TimeSpan ts = DateTime.Now - start;  		string msg = string.Format ("UDP_RESPONSE in {0} ms - {1} "' ts.TotalMilliseconds' socketResponse);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  	else {  		socketResponse = decodedstring.Substring (0' foundpos + 1);  		TimeSpan ts = DateTime.Now - start;  		string msg = string.Format ("UDP_RESPONSE_TRUNC in {0}ms - {1} "' ts.TotalMilliseconds' socketResponse);  		JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  	}  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (i != 2) {  	socketResponse = decodedstring;  	TimeSpan ts = DateTime.Now - start;  	string msg = string.Format ("UDP_RESPONSE in {0} ms - {1} "' ts.TotalMilliseconds' socketResponse);  	JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  }  else {  	socketResponse = decodedstring.Substring (0' foundpos + 1);  	TimeSpan ts = DateTime.Now - start;  	string msg = string.Format ("UDP_RESPONSE_TRUNC in {0}ms - {1} "' ts.TotalMilliseconds' socketResponse);  	JMMService.LogToDatabase (Constants.DBLogType.APIAniDBUDP' msg);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (socketResponse.Length > 2)  	int.TryParse (socketResponse.Substring (0' 3)' out val);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (socketResponse.Length > 2)  	int.TryParse (socketResponse.Substring (0' 3)' out val);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: int.TryParse (socketResponse.Substring (0' 3)' out val);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 555) {  	JMMService.AnidbProcessor.IsBanned = true;  	JMMService.AnidbProcessor.BanOrigin = "UDP";  }  else {  	JMMService.AnidbProcessor.IsBanned = false;  	JMMService.AnidbProcessor.BanOrigin = "";  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 598 || ResponseCode == 506 || ResponseCode == 506) {  	JMMService.AnidbProcessor.IsInvalidSession = true;  	logger.Trace ("FORCING Logout because of invalid session");  	ForceReconnection ();  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 598 || ResponseCode == 506 || ResponseCode == 506) {  	JMMService.AnidbProcessor.IsInvalidSession = true;  	logger.Trace ("FORCING Logout because of invalid session");  	ForceReconnection ();  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 598 || ResponseCode == 506 || ResponseCode == 506) {  	JMMService.AnidbProcessor.IsInvalidSession = true;  	logger.Trace ("FORCING Logout because of invalid session");  	ForceReconnection ();  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604) {  	string errormsg = "";  	switch (ResponseCode) {  	case 600:  		errormsg = "600 INTERNAL SERVER ERROR";  		break;  	case 601:  		errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  		break;  	case 602:  		errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  		break;  	case 604:  		errormsg = "TIMEOUT - DELAY AND RESUBMIT";  		break;  	}  	logger.Trace ("FORCING Logout because of invalid session");  	JMMService.AnidbProcessor.ExtendPause (300' errormsg);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604) {  	string errormsg = "";  	switch (ResponseCode) {  	case 600:  		errormsg = "600 INTERNAL SERVER ERROR";  		break;  	case 601:  		errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  		break;  	case 602:  		errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  		break;  	case 604:  		errormsg = "TIMEOUT - DELAY AND RESUBMIT";  		break;  	}  	logger.Trace ("FORCING Logout because of invalid session");  	JMMService.AnidbProcessor.ExtendPause (300' errormsg);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604) {  	string errormsg = "";  	switch (ResponseCode) {  	case 600:  		errormsg = "600 INTERNAL SERVER ERROR";  		break;  	case 601:  		errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  		break;  	case 602:  		errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  		break;  	case 604:  		errormsg = "TIMEOUT - DELAY AND RESUBMIT";  		break;  	}  	logger.Trace ("FORCING Logout because of invalid session");  	JMMService.AnidbProcessor.ExtendPause (300' errormsg);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604) {  	string errormsg = "";  	switch (ResponseCode) {  	case 600:  		errormsg = "600 INTERNAL SERVER ERROR";  		break;  	case 601:  		errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  		break;  	case 602:  		errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  		break;  	case 604:  		errormsg = "TIMEOUT - DELAY AND RESUBMIT";  		break;  	}  	logger.Trace ("FORCING Logout because of invalid session");  	JMMService.AnidbProcessor.ExtendPause (300' errormsg);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604) {  	string errormsg = "";  	switch (ResponseCode) {  	case 600:  		errormsg = "600 INTERNAL SERVER ERROR";  		break;  	case 601:  		errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  		break;  	case 602:  		errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  		break;  	case 604:  		errormsg = "TIMEOUT - DELAY AND RESUBMIT";  		break;  	}  	logger.Trace ("FORCING Logout because of invalid session");  	JMMService.AnidbProcessor.ExtendPause (300' errormsg);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604) {  	string errormsg = "";  	switch (ResponseCode) {  	case 600:  		errormsg = "600 INTERNAL SERVER ERROR";  		break;  	case 601:  		errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  		break;  	case 602:  		errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  		break;  	case 604:  		errormsg = "TIMEOUT - DELAY AND RESUBMIT";  		break;  	}  	logger.Trace ("FORCING Logout because of invalid session");  	JMMService.AnidbProcessor.ExtendPause (300' errormsg);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604) {  	string errormsg = "";  	switch (ResponseCode) {  	case 600:  		errormsg = "600 INTERNAL SERVER ERROR";  		break;  	case 601:  		errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  		break;  	case 602:  		errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  		break;  	case 604:  		errormsg = "TIMEOUT - DELAY AND RESUBMIT";  		break;  	}  	logger.Trace ("FORCING Logout because of invalid session");  	JMMService.AnidbProcessor.ExtendPause (300' errormsg);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604) {  	string errormsg = "";  	switch (ResponseCode) {  	case 600:  		errormsg = "600 INTERNAL SERVER ERROR";  		break;  	case 601:  		errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  		break;  	case 602:  		errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  		break;  	case 604:  		errormsg = "TIMEOUT - DELAY AND RESUBMIT";  		break;  	}  	logger.Trace ("FORCING Logout because of invalid session");  	JMMService.AnidbProcessor.ExtendPause (300' errormsg);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: if (ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604) {  	string errormsg = "";  	switch (ResponseCode) {  	case 600:  		errormsg = "600 INTERNAL SERVER ERROR";  		break;  	case 601:  		errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  		break;  	case 602:  		errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  		break;  	case 604:  		errormsg = "TIMEOUT - DELAY AND RESUBMIT";  		break;  	}  	logger.Trace ("FORCING Logout because of invalid session");  	JMMService.AnidbProcessor.ExtendPause (300' errormsg);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: switch (ResponseCode) {  case 600:  	errormsg = "600 INTERNAL SERVER ERROR";  	break;  case 601:  	errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  	break;  case 602:  	errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  	break;  case 604:  	errormsg = "TIMEOUT - DELAY AND RESUBMIT";  	break;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: switch (ResponseCode) {  case 600:  	errormsg = "600 INTERNAL SERVER ERROR";  	break;  case 601:  	errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  	break;  case 602:  	errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  	break;  case 604:  	errormsg = "TIMEOUT - DELAY AND RESUBMIT";  	break;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: switch (ResponseCode) {  case 600:  	errormsg = "600 INTERNAL SERVER ERROR";  	break;  case 601:  	errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  	break;  case 602:  	errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  	break;  case 604:  	errormsg = "TIMEOUT - DELAY AND RESUBMIT";  	break;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: switch (ResponseCode) {  case 600:  	errormsg = "600 INTERNAL SERVER ERROR";  	break;  case 601:  	errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  	break;  case 602:  	errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  	break;  case 604:  	errormsg = "TIMEOUT - DELAY AND RESUBMIT";  	break;  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: JMMService.AnidbProcessor.ExtendPause (300' errormsg);  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ForceReconnection,The following statement contains a magic number: try {  	if (JMMService.AnidbProcessor != null) {  		logger.Info ("Forcing reconnection to AniDB");  		JMMService.AnidbProcessor.Dispose ();  		Thread.Sleep (1000);  		JMMService.AnidbProcessor.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password' ServerSettings.AniDB_ServerAddress' ServerSettings.AniDB_ServerPort' ServerSettings.AniDB_ClientPort);  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ForceReconnection,The following statement contains a magic number: if (JMMService.AnidbProcessor != null) {  	logger.Info ("Forcing reconnection to AniDB");  	JMMService.AnidbProcessor.Dispose ();  	Thread.Sleep (1000);  	JMMService.AnidbProcessor.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password' ServerSettings.AniDB_ServerAddress' ServerSettings.AniDB_ServerPort' ServerSettings.AniDB_ClientPort);  }  
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ForceReconnection,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,JMMServer.Commands,AniDBCommand_GetGroup,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetGroup.cs,Process,The following statement contains a magic number: if (ResponseCode == 598)  	return enHelperActivityType.UnknownCommand_598;  
Magic Number,JMMServer.Commands,AniDBCommand_GetGroup,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetGroup.cs,Process,The following statement contains a magic number: if (ResponseCode == 555)  	return enHelperActivityType.Banned_555;  
Magic Number,JMMServer.Commands,CommandProcessorGeneral,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorGeneral.cs,workerCommands_DoWork,The following statement contains a magic number: while (true) {  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	// if paused we will sleep for 5 seconds' and the try again  	// we will remove the pause if it was set more than 6 hours ago  	// the pause is initiated when banned from AniDB or manually by the user  	if (Paused) {  		try {  			if (workerCommands.CancellationPending) {  				e.Cancel = true;  				return;  			}  			//logger.Trace("Queue is paused: {0}"' pauseTime.Value);  			TimeSpan ts = DateTime.Now - pauseTime.Value;  			if (ts.TotalHours >= 6) {  				Paused = false;  			}  		}  		catch {  		}  		Thread.Sleep (5000);  		continue;  	}  	//logger.Trace("Looking for next command request...");  	CommandRequestRepository repCR = new CommandRequestRepository ();  	CommandRequest crdb = repCR.GetNextDBCommandRequestGeneral ();  	if (crdb == null)  		return;  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	QueueCount = repCR.GetQueuedCommandCountGeneral ();  	//logger.Trace("{0} commands remaining in queue"' QueueCount);  	//logger.Trace("Next command request: {0}"' crdb.CommandID);  	ICommandRequest icr = CommandHelper.GetCommand (crdb);  	if (icr == null) {  		logger.Trace ("No implementation found for command: {0}-{1}"' crdb.CommandType' crdb.CommandID);  		return;  	}  	QueueState = icr.PrettyDescription;  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	//logger.Trace("Processing command request: {0}"' crdb.CommandID);  	icr.ProcessCommand ();  	//logger.Trace("Deleting command request: {0}"' crdb.CommandID);  	repCR.Delete (crdb.CommandRequestID);  	QueueCount = repCR.GetQueuedCommandCountGeneral ();  }  
Magic Number,JMMServer.Commands,CommandProcessorGeneral,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorGeneral.cs,workerCommands_DoWork,The following statement contains a magic number: while (true) {  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	// if paused we will sleep for 5 seconds' and the try again  	// we will remove the pause if it was set more than 6 hours ago  	// the pause is initiated when banned from AniDB or manually by the user  	if (Paused) {  		try {  			if (workerCommands.CancellationPending) {  				e.Cancel = true;  				return;  			}  			//logger.Trace("Queue is paused: {0}"' pauseTime.Value);  			TimeSpan ts = DateTime.Now - pauseTime.Value;  			if (ts.TotalHours >= 6) {  				Paused = false;  			}  		}  		catch {  		}  		Thread.Sleep (5000);  		continue;  	}  	//logger.Trace("Looking for next command request...");  	CommandRequestRepository repCR = new CommandRequestRepository ();  	CommandRequest crdb = repCR.GetNextDBCommandRequestGeneral ();  	if (crdb == null)  		return;  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	QueueCount = repCR.GetQueuedCommandCountGeneral ();  	//logger.Trace("{0} commands remaining in queue"' QueueCount);  	//logger.Trace("Next command request: {0}"' crdb.CommandID);  	ICommandRequest icr = CommandHelper.GetCommand (crdb);  	if (icr == null) {  		logger.Trace ("No implementation found for command: {0}-{1}"' crdb.CommandType' crdb.CommandID);  		return;  	}  	QueueState = icr.PrettyDescription;  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	//logger.Trace("Processing command request: {0}"' crdb.CommandID);  	icr.ProcessCommand ();  	//logger.Trace("Deleting command request: {0}"' crdb.CommandID);  	repCR.Delete (crdb.CommandRequestID);  	QueueCount = repCR.GetQueuedCommandCountGeneral ();  }  
Magic Number,JMMServer.Commands,CommandProcessorGeneral,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorGeneral.cs,workerCommands_DoWork,The following statement contains a magic number: if (Paused) {  	try {  		if (workerCommands.CancellationPending) {  			e.Cancel = true;  			return;  		}  		//logger.Trace("Queue is paused: {0}"' pauseTime.Value);  		TimeSpan ts = DateTime.Now - pauseTime.Value;  		if (ts.TotalHours >= 6) {  			Paused = false;  		}  	}  	catch {  	}  	Thread.Sleep (5000);  	continue;  }  
Magic Number,JMMServer.Commands,CommandProcessorGeneral,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorGeneral.cs,workerCommands_DoWork,The following statement contains a magic number: if (Paused) {  	try {  		if (workerCommands.CancellationPending) {  			e.Cancel = true;  			return;  		}  		//logger.Trace("Queue is paused: {0}"' pauseTime.Value);  		TimeSpan ts = DateTime.Now - pauseTime.Value;  		if (ts.TotalHours >= 6) {  			Paused = false;  		}  	}  	catch {  	}  	Thread.Sleep (5000);  	continue;  }  
Magic Number,JMMServer.Commands,CommandProcessorGeneral,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorGeneral.cs,workerCommands_DoWork,The following statement contains a magic number: try {  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	//logger.Trace("Queue is paused: {0}"' pauseTime.Value);  	TimeSpan ts = DateTime.Now - pauseTime.Value;  	if (ts.TotalHours >= 6) {  		Paused = false;  	}  }  catch {  }  
Magic Number,JMMServer.Commands,CommandProcessorGeneral,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorGeneral.cs,workerCommands_DoWork,The following statement contains a magic number: if (ts.TotalHours >= 6) {  	Paused = false;  }  
Magic Number,JMMServer.Commands,CommandProcessorGeneral,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorGeneral.cs,workerCommands_DoWork,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,JMMServer.Commands,CommandProcessorHasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorHasher.cs,workerCommands_DoWork,The following statement contains a magic number: while (true) {  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	// if paused we will sleep for 5 seconds' and the try again  	// we will remove the pause if it was set more than 6 hours ago  	// the pause is initiated when banned from AniDB or manually by the user  	if (Paused) {  		try {  			if (workerCommands.CancellationPending) {  				e.Cancel = true;  				return;  			}  			//logger.Trace("Hasher Queue is paused: {0}"' pauseTime.Value);  			TimeSpan ts = DateTime.Now - pauseTime.Value;  			if (ts.TotalHours >= 6) {  				Paused = false;  			}  		}  		catch {  		}  		Thread.Sleep (5000);  		continue;  	}  	//logger.Trace("Looking for next command request (hasher)...");  	CommandRequestRepository repCR = new CommandRequestRepository ();  	CommandRequest crdb = repCR.GetNextDBCommandRequestHasher ();  	if (crdb == null)  		return;  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	QueueCount = repCR.GetQueuedCommandCountHasher ();  	//logger.Trace("{0} commands remaining in queue (hasher)"' QueueCount);  	//logger.Trace("Next command request (hasher): {0}"' crdb.CommandID);  	ICommandRequest icr = CommandHelper.GetCommand (crdb);  	if (icr == null) {  		logger.Trace ("No implementation found for command: {0}-{1}"' crdb.CommandType' crdb.CommandID);  		return;  	}  	QueueState = icr.PrettyDescription;  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	//logger.Trace("Processing command request (hasher): {0}"' crdb.CommandID);  	icr.ProcessCommand ();  	//logger.Trace("Deleting command request (hasher): {0}"' crdb.CommandID);  	repCR.Delete (crdb.CommandRequestID);  	QueueCount = repCR.GetQueuedCommandCountHasher ();  }  
Magic Number,JMMServer.Commands,CommandProcessorHasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorHasher.cs,workerCommands_DoWork,The following statement contains a magic number: while (true) {  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	// if paused we will sleep for 5 seconds' and the try again  	// we will remove the pause if it was set more than 6 hours ago  	// the pause is initiated when banned from AniDB or manually by the user  	if (Paused) {  		try {  			if (workerCommands.CancellationPending) {  				e.Cancel = true;  				return;  			}  			//logger.Trace("Hasher Queue is paused: {0}"' pauseTime.Value);  			TimeSpan ts = DateTime.Now - pauseTime.Value;  			if (ts.TotalHours >= 6) {  				Paused = false;  			}  		}  		catch {  		}  		Thread.Sleep (5000);  		continue;  	}  	//logger.Trace("Looking for next command request (hasher)...");  	CommandRequestRepository repCR = new CommandRequestRepository ();  	CommandRequest crdb = repCR.GetNextDBCommandRequestHasher ();  	if (crdb == null)  		return;  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	QueueCount = repCR.GetQueuedCommandCountHasher ();  	//logger.Trace("{0} commands remaining in queue (hasher)"' QueueCount);  	//logger.Trace("Next command request (hasher): {0}"' crdb.CommandID);  	ICommandRequest icr = CommandHelper.GetCommand (crdb);  	if (icr == null) {  		logger.Trace ("No implementation found for command: {0}-{1}"' crdb.CommandType' crdb.CommandID);  		return;  	}  	QueueState = icr.PrettyDescription;  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	//logger.Trace("Processing command request (hasher): {0}"' crdb.CommandID);  	icr.ProcessCommand ();  	//logger.Trace("Deleting command request (hasher): {0}"' crdb.CommandID);  	repCR.Delete (crdb.CommandRequestID);  	QueueCount = repCR.GetQueuedCommandCountHasher ();  }  
Magic Number,JMMServer.Commands,CommandProcessorHasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorHasher.cs,workerCommands_DoWork,The following statement contains a magic number: if (Paused) {  	try {  		if (workerCommands.CancellationPending) {  			e.Cancel = true;  			return;  		}  		//logger.Trace("Hasher Queue is paused: {0}"' pauseTime.Value);  		TimeSpan ts = DateTime.Now - pauseTime.Value;  		if (ts.TotalHours >= 6) {  			Paused = false;  		}  	}  	catch {  	}  	Thread.Sleep (5000);  	continue;  }  
Magic Number,JMMServer.Commands,CommandProcessorHasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorHasher.cs,workerCommands_DoWork,The following statement contains a magic number: if (Paused) {  	try {  		if (workerCommands.CancellationPending) {  			e.Cancel = true;  			return;  		}  		//logger.Trace("Hasher Queue is paused: {0}"' pauseTime.Value);  		TimeSpan ts = DateTime.Now - pauseTime.Value;  		if (ts.TotalHours >= 6) {  			Paused = false;  		}  	}  	catch {  	}  	Thread.Sleep (5000);  	continue;  }  
Magic Number,JMMServer.Commands,CommandProcessorHasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorHasher.cs,workerCommands_DoWork,The following statement contains a magic number: try {  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	//logger.Trace("Hasher Queue is paused: {0}"' pauseTime.Value);  	TimeSpan ts = DateTime.Now - pauseTime.Value;  	if (ts.TotalHours >= 6) {  		Paused = false;  	}  }  catch {  }  
Magic Number,JMMServer.Commands,CommandProcessorHasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorHasher.cs,workerCommands_DoWork,The following statement contains a magic number: if (ts.TotalHours >= 6) {  	Paused = false;  }  
Magic Number,JMMServer.Commands,CommandProcessorHasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorHasher.cs,workerCommands_DoWork,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,JMMServer.Commands,CommandProcessorImages,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorImages.cs,workerCommands_DoWork,The following statement contains a magic number: while (true) {  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	// if paused we will sleep for 5 seconds' and the try again  	// we will remove the pause if it was set more than 6 hours ago  	// the pause is initiated when banned from AniDB or manually by the user  	if (Paused) {  		try {  			if (workerCommands.CancellationPending) {  				e.Cancel = true;  				return;  			}  			//logger.Trace("Images Queue is paused: {0}"' pauseTime.Value);  			TimeSpan ts = DateTime.Now - pauseTime.Value;  			if (ts.TotalHours >= 6) {  				Paused = false;  			}  		}  		catch {  		}  		Thread.Sleep (5000);  		continue;  	}  	//logger.Trace("Looking for next command request (images)...");  	CommandRequestRepository repCR = new CommandRequestRepository ();  	CommandRequest crdb = repCR.GetNextDBCommandRequestImages ();  	if (crdb == null)  		return;  	QueueCount = repCR.GetQueuedCommandCountImages ();  	//logger.Trace("{0} commands remaining in queue (images)"' QueueCount);  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	//logger.Trace("Next command request (images): {0}"' crdb.CommandID);  	ICommandRequest icr = CommandHelper.GetCommand (crdb);  	if (icr == null) {  		//logger.Trace("No implementation found for command: {0}-{1}"' crdb.CommandType' crdb.CommandID);  		return;  	}  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	QueueState = icr.PrettyDescription;  	//logger.Trace("Processing command request (images): {0}"' crdb.CommandID);  	icr.ProcessCommand ();  	//logger.Trace("Deleting command request (images): {0}"' crdb.CommandID);  	repCR.Delete (crdb.CommandRequestID);  	QueueCount = repCR.GetQueuedCommandCountImages ();  }  
Magic Number,JMMServer.Commands,CommandProcessorImages,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorImages.cs,workerCommands_DoWork,The following statement contains a magic number: while (true) {  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	// if paused we will sleep for 5 seconds' and the try again  	// we will remove the pause if it was set more than 6 hours ago  	// the pause is initiated when banned from AniDB or manually by the user  	if (Paused) {  		try {  			if (workerCommands.CancellationPending) {  				e.Cancel = true;  				return;  			}  			//logger.Trace("Images Queue is paused: {0}"' pauseTime.Value);  			TimeSpan ts = DateTime.Now - pauseTime.Value;  			if (ts.TotalHours >= 6) {  				Paused = false;  			}  		}  		catch {  		}  		Thread.Sleep (5000);  		continue;  	}  	//logger.Trace("Looking for next command request (images)...");  	CommandRequestRepository repCR = new CommandRequestRepository ();  	CommandRequest crdb = repCR.GetNextDBCommandRequestImages ();  	if (crdb == null)  		return;  	QueueCount = repCR.GetQueuedCommandCountImages ();  	//logger.Trace("{0} commands remaining in queue (images)"' QueueCount);  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	//logger.Trace("Next command request (images): {0}"' crdb.CommandID);  	ICommandRequest icr = CommandHelper.GetCommand (crdb);  	if (icr == null) {  		//logger.Trace("No implementation found for command: {0}-{1}"' crdb.CommandType' crdb.CommandID);  		return;  	}  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	QueueState = icr.PrettyDescription;  	//logger.Trace("Processing command request (images): {0}"' crdb.CommandID);  	icr.ProcessCommand ();  	//logger.Trace("Deleting command request (images): {0}"' crdb.CommandID);  	repCR.Delete (crdb.CommandRequestID);  	QueueCount = repCR.GetQueuedCommandCountImages ();  }  
Magic Number,JMMServer.Commands,CommandProcessorImages,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorImages.cs,workerCommands_DoWork,The following statement contains a magic number: if (Paused) {  	try {  		if (workerCommands.CancellationPending) {  			e.Cancel = true;  			return;  		}  		//logger.Trace("Images Queue is paused: {0}"' pauseTime.Value);  		TimeSpan ts = DateTime.Now - pauseTime.Value;  		if (ts.TotalHours >= 6) {  			Paused = false;  		}  	}  	catch {  	}  	Thread.Sleep (5000);  	continue;  }  
Magic Number,JMMServer.Commands,CommandProcessorImages,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorImages.cs,workerCommands_DoWork,The following statement contains a magic number: if (Paused) {  	try {  		if (workerCommands.CancellationPending) {  			e.Cancel = true;  			return;  		}  		//logger.Trace("Images Queue is paused: {0}"' pauseTime.Value);  		TimeSpan ts = DateTime.Now - pauseTime.Value;  		if (ts.TotalHours >= 6) {  			Paused = false;  		}  	}  	catch {  	}  	Thread.Sleep (5000);  	continue;  }  
Magic Number,JMMServer.Commands,CommandProcessorImages,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorImages.cs,workerCommands_DoWork,The following statement contains a magic number: try {  	if (workerCommands.CancellationPending) {  		e.Cancel = true;  		return;  	}  	//logger.Trace("Images Queue is paused: {0}"' pauseTime.Value);  	TimeSpan ts = DateTime.Now - pauseTime.Value;  	if (ts.TotalHours >= 6) {  		Paused = false;  	}  }  catch {  }  
Magic Number,JMMServer.Commands,CommandProcessorImages,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorImages.cs,workerCommands_DoWork,The following statement contains a magic number: if (ts.TotalHours >= 6) {  	Paused = false;  }  
Magic Number,JMMServer.Commands,CommandProcessorImages,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandProcessorImages.cs,workerCommands_DoWork,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,JMMServer.Commands,CommandRequest_GetAniDBTitles,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetAniDBTitles.cs,ProcessCommand,The following statement contains a magic number: try {  	bool process = (ServerSettings.AniDB_Username.Equals ("jonbaby"' StringComparison.InvariantCultureIgnoreCase) || ServerSettings.AniDB_Username.Equals ("jmediamanager"' StringComparison.InvariantCultureIgnoreCase));  	if (!process)  		return;  	string url = Constants.AniDBTitlesURL;  	logger.Trace ("Get AniDB Titles: {0}"' url);  	Stream s = Utils.DownloadWebBinary (url);  	int bytes = 2048;  	byte[] data = new byte[2048];  	StringBuilder b = new StringBuilder ();  	UTF8Encoding enc = new UTF8Encoding ();  	ICSharpCode.SharpZipLib.GZip.GZipInputStream zis = new ICSharpCode.SharpZipLib.GZip.GZipInputStream (s);  	while ((bytes = zis.Read (data' 0' data.Length)) > 0)  		b.Append (enc.GetString (data' 0' bytes));  	zis.Close ();  	AniDB_Anime_TitleRepository repTitles = new AniDB_Anime_TitleRepository ();  	string[] lines = b.ToString ().Split ('\n');  	Dictionary<int' AnimeIDTitle> titles = new Dictionary<int' AnimeIDTitle> ();  	foreach (string line in lines) {  		if (line.Trim ().Length == 0 || line.Trim ().Substring (0' 1) == "#")  			continue;  		string[] fields = line.Split ('|');  		int animeID = 0;  		int.TryParse (fields [0]' out animeID);  		if (animeID == 0)  			continue;  		string titleType = fields [1].Trim ().ToLower ();  		//string language = fields[2].Trim().ToLower();  		string titleValue = fields [3].Trim ();  		AnimeIDTitle thisTitle = null;  		if (titles.ContainsKey (animeID)) {  			thisTitle = titles [animeID];  		}  		else {  			thisTitle = new AnimeIDTitle ();  			thisTitle.AnimeIDTitleId = 0;  			thisTitle.MainTitle = titleValue;  			thisTitle.AnimeID = animeID;  			titles [animeID] = thisTitle;  		}  		if (!string.IsNullOrEmpty (thisTitle.Titles))  			thisTitle.Titles += "|";  		if (titleType.Equals ("1"))  			thisTitle.MainTitle = titleValue;  		thisTitle.Titles += titleValue;  	}  	foreach (AnimeIDTitle aniTitle in titles.Values) {  		//AzureWebAPI.Send_AnimeTitle(aniTitle);  		CommandRequest_Azure_SendAnimeTitle cmdAzure = new CommandRequest_Azure_SendAnimeTitle (aniTitle.AnimeID' aniTitle.MainTitle' aniTitle.Titles);  		cmdAzure.Save ();  	}  }  catch (Exception ex) {  	logger.Error ("Error processing CommandRequest_GetAniDBTitles: {0}"' ex.ToString ());  	return;  }  
Magic Number,JMMServer.Commands,CommandRequest_GetAniDBTitles,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetAniDBTitles.cs,ProcessCommand,The following statement contains a magic number: try {  	bool process = (ServerSettings.AniDB_Username.Equals ("jonbaby"' StringComparison.InvariantCultureIgnoreCase) || ServerSettings.AniDB_Username.Equals ("jmediamanager"' StringComparison.InvariantCultureIgnoreCase));  	if (!process)  		return;  	string url = Constants.AniDBTitlesURL;  	logger.Trace ("Get AniDB Titles: {0}"' url);  	Stream s = Utils.DownloadWebBinary (url);  	int bytes = 2048;  	byte[] data = new byte[2048];  	StringBuilder b = new StringBuilder ();  	UTF8Encoding enc = new UTF8Encoding ();  	ICSharpCode.SharpZipLib.GZip.GZipInputStream zis = new ICSharpCode.SharpZipLib.GZip.GZipInputStream (s);  	while ((bytes = zis.Read (data' 0' data.Length)) > 0)  		b.Append (enc.GetString (data' 0' bytes));  	zis.Close ();  	AniDB_Anime_TitleRepository repTitles = new AniDB_Anime_TitleRepository ();  	string[] lines = b.ToString ().Split ('\n');  	Dictionary<int' AnimeIDTitle> titles = new Dictionary<int' AnimeIDTitle> ();  	foreach (string line in lines) {  		if (line.Trim ().Length == 0 || line.Trim ().Substring (0' 1) == "#")  			continue;  		string[] fields = line.Split ('|');  		int animeID = 0;  		int.TryParse (fields [0]' out animeID);  		if (animeID == 0)  			continue;  		string titleType = fields [1].Trim ().ToLower ();  		//string language = fields[2].Trim().ToLower();  		string titleValue = fields [3].Trim ();  		AnimeIDTitle thisTitle = null;  		if (titles.ContainsKey (animeID)) {  			thisTitle = titles [animeID];  		}  		else {  			thisTitle = new AnimeIDTitle ();  			thisTitle.AnimeIDTitleId = 0;  			thisTitle.MainTitle = titleValue;  			thisTitle.AnimeID = animeID;  			titles [animeID] = thisTitle;  		}  		if (!string.IsNullOrEmpty (thisTitle.Titles))  			thisTitle.Titles += "|";  		if (titleType.Equals ("1"))  			thisTitle.MainTitle = titleValue;  		thisTitle.Titles += titleValue;  	}  	foreach (AnimeIDTitle aniTitle in titles.Values) {  		//AzureWebAPI.Send_AnimeTitle(aniTitle);  		CommandRequest_Azure_SendAnimeTitle cmdAzure = new CommandRequest_Azure_SendAnimeTitle (aniTitle.AnimeID' aniTitle.MainTitle' aniTitle.Titles);  		cmdAzure.Save ();  	}  }  catch (Exception ex) {  	logger.Error ("Error processing CommandRequest_GetAniDBTitles: {0}"' ex.ToString ());  	return;  }  
Magic Number,JMMServer.Commands,CommandRequest_GetAniDBTitles,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetAniDBTitles.cs,ProcessCommand,The following statement contains a magic number: try {  	bool process = (ServerSettings.AniDB_Username.Equals ("jonbaby"' StringComparison.InvariantCultureIgnoreCase) || ServerSettings.AniDB_Username.Equals ("jmediamanager"' StringComparison.InvariantCultureIgnoreCase));  	if (!process)  		return;  	string url = Constants.AniDBTitlesURL;  	logger.Trace ("Get AniDB Titles: {0}"' url);  	Stream s = Utils.DownloadWebBinary (url);  	int bytes = 2048;  	byte[] data = new byte[2048];  	StringBuilder b = new StringBuilder ();  	UTF8Encoding enc = new UTF8Encoding ();  	ICSharpCode.SharpZipLib.GZip.GZipInputStream zis = new ICSharpCode.SharpZipLib.GZip.GZipInputStream (s);  	while ((bytes = zis.Read (data' 0' data.Length)) > 0)  		b.Append (enc.GetString (data' 0' bytes));  	zis.Close ();  	AniDB_Anime_TitleRepository repTitles = new AniDB_Anime_TitleRepository ();  	string[] lines = b.ToString ().Split ('\n');  	Dictionary<int' AnimeIDTitle> titles = new Dictionary<int' AnimeIDTitle> ();  	foreach (string line in lines) {  		if (line.Trim ().Length == 0 || line.Trim ().Substring (0' 1) == "#")  			continue;  		string[] fields = line.Split ('|');  		int animeID = 0;  		int.TryParse (fields [0]' out animeID);  		if (animeID == 0)  			continue;  		string titleType = fields [1].Trim ().ToLower ();  		//string language = fields[2].Trim().ToLower();  		string titleValue = fields [3].Trim ();  		AnimeIDTitle thisTitle = null;  		if (titles.ContainsKey (animeID)) {  			thisTitle = titles [animeID];  		}  		else {  			thisTitle = new AnimeIDTitle ();  			thisTitle.AnimeIDTitleId = 0;  			thisTitle.MainTitle = titleValue;  			thisTitle.AnimeID = animeID;  			titles [animeID] = thisTitle;  		}  		if (!string.IsNullOrEmpty (thisTitle.Titles))  			thisTitle.Titles += "|";  		if (titleType.Equals ("1"))  			thisTitle.MainTitle = titleValue;  		thisTitle.Titles += titleValue;  	}  	foreach (AnimeIDTitle aniTitle in titles.Values) {  		//AzureWebAPI.Send_AnimeTitle(aniTitle);  		CommandRequest_Azure_SendAnimeTitle cmdAzure = new CommandRequest_Azure_SendAnimeTitle (aniTitle.AnimeID' aniTitle.MainTitle' aniTitle.Titles);  		cmdAzure.Save ();  	}  }  catch (Exception ex) {  	logger.Error ("Error processing CommandRequest_GetAniDBTitles: {0}"' ex.ToString ());  	return;  }  
Magic Number,JMMServer.Commands,CommandRequest_GetAniDBTitles,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetAniDBTitles.cs,ProcessCommand,The following statement contains a magic number: foreach (string line in lines) {  	if (line.Trim ().Length == 0 || line.Trim ().Substring (0' 1) == "#")  		continue;  	string[] fields = line.Split ('|');  	int animeID = 0;  	int.TryParse (fields [0]' out animeID);  	if (animeID == 0)  		continue;  	string titleType = fields [1].Trim ().ToLower ();  	//string language = fields[2].Trim().ToLower();  	string titleValue = fields [3].Trim ();  	AnimeIDTitle thisTitle = null;  	if (titles.ContainsKey (animeID)) {  		thisTitle = titles [animeID];  	}  	else {  		thisTitle = new AnimeIDTitle ();  		thisTitle.AnimeIDTitleId = 0;  		thisTitle.MainTitle = titleValue;  		thisTitle.AnimeID = animeID;  		titles [animeID] = thisTitle;  	}  	if (!string.IsNullOrEmpty (thisTitle.Titles))  		thisTitle.Titles += "|";  	if (titleType.Equals ("1"))  		thisTitle.MainTitle = titleValue;  	thisTitle.Titles += titleValue;  }  
Magic Number,JMMServer.Commands,CommandRequest_GetCalendar,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetCalendar.cs,ProcessCommand,The following statement contains a magic number: try {  	// we will always assume that an anime was downloaded via http first  	ScheduledUpdateRepository repSched = new ScheduledUpdateRepository ();  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	ScheduledUpdate sched = repSched.GetByUpdateType ((int)ScheduledUpdateType.AniDBCalendar);  	if (sched == null) {  		sched = new ScheduledUpdate ();  		sched.UpdateType = (int)ScheduledUpdateType.AniDBCalendar;  		sched.UpdateDetails = "";  	}  	else {  		int freqHours = Utils.GetScheduledHours (ServerSettings.AniDB_Calendar_UpdateFrequency);  		// if we have run this in the last 12 hours and are not forcing it' then exit  		TimeSpan tsLastRun = DateTime.Now - sched.LastUpdate;  		if (tsLastRun.TotalHours < freqHours) {  			if (!ForceRefresh)  				return;  		}  	}  	sched.LastUpdate = DateTime.Now;  	repSched.Save (sched);  	CalendarCollection colCalendars = JMMService.AnidbProcessor.GetCalendarUDP ();  	if (colCalendars == null || colCalendars.Calendars == null) {  		logger.Error ("Could not get calendar from AniDB");  		return;  	}  	foreach (Calendar cal in colCalendars.Calendars) {  		AniDB_Anime anime = repAnime.GetByAnimeID (cal.AnimeID);  		if (anime != null) {  			// don't update if the local data is less 2 days old  			TimeSpan ts = DateTime.Now - anime.DateTimeUpdated;  			if (ts.TotalDays >= 2) {  				CommandRequest_GetAnimeHTTP cmdAnime = new CommandRequest_GetAnimeHTTP (cal.AnimeID' true' false);  				cmdAnime.Save ();  			}  			else {  				// update the release date even if we don't update the anime record  				anime.AirDate = cal.ReleaseDate;  				repAnime.Save (anime);  			}  		}  		else {  			CommandRequest_GetAnimeHTTP cmdAnime = new CommandRequest_GetAnimeHTTP (cal.AnimeID' true' false);  			cmdAnime.Save ();  		}  	}  }  catch (Exception ex) {  	logger.ErrorException ("Error processing CommandRequest_GetCalendar: " + ex.ToString ()' ex);  	return;  }  
Magic Number,JMMServer.Commands,CommandRequest_GetCalendar,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetCalendar.cs,ProcessCommand,The following statement contains a magic number: foreach (Calendar cal in colCalendars.Calendars) {  	AniDB_Anime anime = repAnime.GetByAnimeID (cal.AnimeID);  	if (anime != null) {  		// don't update if the local data is less 2 days old  		TimeSpan ts = DateTime.Now - anime.DateTimeUpdated;  		if (ts.TotalDays >= 2) {  			CommandRequest_GetAnimeHTTP cmdAnime = new CommandRequest_GetAnimeHTTP (cal.AnimeID' true' false);  			cmdAnime.Save ();  		}  		else {  			// update the release date even if we don't update the anime record  			anime.AirDate = cal.ReleaseDate;  			repAnime.Save (anime);  		}  	}  	else {  		CommandRequest_GetAnimeHTTP cmdAnime = new CommandRequest_GetAnimeHTTP (cal.AnimeID' true' false);  		cmdAnime.Save ();  	}  }  
Magic Number,JMMServer.Commands,CommandRequest_GetCalendar,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetCalendar.cs,ProcessCommand,The following statement contains a magic number: if (anime != null) {  	// don't update if the local data is less 2 days old  	TimeSpan ts = DateTime.Now - anime.DateTimeUpdated;  	if (ts.TotalDays >= 2) {  		CommandRequest_GetAnimeHTTP cmdAnime = new CommandRequest_GetAnimeHTTP (cal.AnimeID' true' false);  		cmdAnime.Save ();  	}  	else {  		// update the release date even if we don't update the anime record  		anime.AirDate = cal.ReleaseDate;  		repAnime.Save (anime);  	}  }  else {  	CommandRequest_GetAnimeHTTP cmdAnime = new CommandRequest_GetAnimeHTTP (cal.AnimeID' true' false);  	cmdAnime.Save ();  }  
Magic Number,JMMServer.Commands,CommandRequest_GetCalendar,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetCalendar.cs,ProcessCommand,The following statement contains a magic number: if (ts.TotalDays >= 2) {  	CommandRequest_GetAnimeHTTP cmdAnime = new CommandRequest_GetAnimeHTTP (cal.AnimeID' true' false);  	cmdAnime.Save ();  }  else {  	// update the release date even if we don't update the anime record  	anime.AirDate = cal.ReleaseDate;  	repAnime.Save (anime);  }  
Magic Number,JMMServer.Commands,CommandRequest_GetReleaseGroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetReleaseGroupStatus.cs,ProcessCommand,The following statement contains a magic number: try {  	// only get group status if we have an associated series  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	AnimeSeries series = repSeries.GetByAnimeID (AnimeID);  	if (series == null)  		return;  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AniDB_Anime anime = repAnime.GetByAnimeID (AnimeID);  	if (anime == null)  		return;  	// don't get group status if the anime has already ended more than 50 days ago  	bool skip = false;  	if (!ForceRefresh) {  		if (anime.EndDate.HasValue) {  			if (anime.EndDate.Value < DateTime.Now) {  				TimeSpan ts = DateTime.Now - anime.EndDate.Value;  				if (ts.TotalDays > 50) {  					// don't skip if we have never downloaded this info before  					AniDB_GroupStatusRepository repGrpStatus = new AniDB_GroupStatusRepository ();  					List<AniDB_GroupStatus> grpStatuses = repGrpStatus.GetByAnimeID (AnimeID);  					if (grpStatuses != null && grpStatuses.Count > 0) {  						skip = true;  					}  				}  			}  		}  	}  	if (skip) {  		logger.Info ("Skipping group status command because anime has already ended: {0}"' anime.ToString ());  		return;  	}  	GroupStatusCollection grpCol = JMMService.AnidbProcessor.GetReleaseGroupStatusUDP (AnimeID);  	if (ServerSettings.AniDB_DownloadReleaseGroups) {  		// save in bulk to improve performance  		using (var session = JMMService.SessionFactory.OpenSession ()) {  			using (var transaction = session.BeginTransaction ()) {  				foreach (Raw_AniDB_GroupStatus grpStatus in grpCol.Groups) {  					CommandRequest_GetReleaseGroup cmdRelgrp = new CommandRequest_GetReleaseGroup (grpStatus.GroupID' false);  					session.SaveOrUpdate (cmdRelgrp);  				}  				transaction.Commit ();  			}  		}  	}  	//}  }  catch (Exception ex) {  	logger.Error ("Error processing CommandRequest_GetReleaseGroupStatus: {0} - {1}"' AnimeID' ex.ToString ());  	return;  }  
Magic Number,JMMServer.Commands,CommandRequest_GetReleaseGroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetReleaseGroupStatus.cs,ProcessCommand,The following statement contains a magic number: if (!ForceRefresh) {  	if (anime.EndDate.HasValue) {  		if (anime.EndDate.Value < DateTime.Now) {  			TimeSpan ts = DateTime.Now - anime.EndDate.Value;  			if (ts.TotalDays > 50) {  				// don't skip if we have never downloaded this info before  				AniDB_GroupStatusRepository repGrpStatus = new AniDB_GroupStatusRepository ();  				List<AniDB_GroupStatus> grpStatuses = repGrpStatus.GetByAnimeID (AnimeID);  				if (grpStatuses != null && grpStatuses.Count > 0) {  					skip = true;  				}  			}  		}  	}  }  
Magic Number,JMMServer.Commands,CommandRequest_GetReleaseGroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetReleaseGroupStatus.cs,ProcessCommand,The following statement contains a magic number: if (anime.EndDate.HasValue) {  	if (anime.EndDate.Value < DateTime.Now) {  		TimeSpan ts = DateTime.Now - anime.EndDate.Value;  		if (ts.TotalDays > 50) {  			// don't skip if we have never downloaded this info before  			AniDB_GroupStatusRepository repGrpStatus = new AniDB_GroupStatusRepository ();  			List<AniDB_GroupStatus> grpStatuses = repGrpStatus.GetByAnimeID (AnimeID);  			if (grpStatuses != null && grpStatuses.Count > 0) {  				skip = true;  			}  		}  	}  }  
Magic Number,JMMServer.Commands,CommandRequest_GetReleaseGroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetReleaseGroupStatus.cs,ProcessCommand,The following statement contains a magic number: if (anime.EndDate.Value < DateTime.Now) {  	TimeSpan ts = DateTime.Now - anime.EndDate.Value;  	if (ts.TotalDays > 50) {  		// don't skip if we have never downloaded this info before  		AniDB_GroupStatusRepository repGrpStatus = new AniDB_GroupStatusRepository ();  		List<AniDB_GroupStatus> grpStatuses = repGrpStatus.GetByAnimeID (AnimeID);  		if (grpStatuses != null && grpStatuses.Count > 0) {  			skip = true;  		}  	}  }  
Magic Number,JMMServer.Commands,CommandRequest_GetReleaseGroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetReleaseGroupStatus.cs,ProcessCommand,The following statement contains a magic number: if (ts.TotalDays > 50) {  	// don't skip if we have never downloaded this info before  	AniDB_GroupStatusRepository repGrpStatus = new AniDB_GroupStatusRepository ();  	List<AniDB_GroupStatus> grpStatuses = repGrpStatus.GetByAnimeID (AnimeID);  	if (grpStatuses != null && grpStatuses.Count > 0) {  		skip = true;  	}  }  
Magic Number,JMMServer.Commands,CommandRequest_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetUpdated.cs,ProcessCommand,The following statement contains a magic number: try {  	List<int> animeIDsToUpdate = new List<int> ();  	ScheduledUpdateRepository repSched = new ScheduledUpdateRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	//DateTime localTime = DateTime.Now.AddDays(-30);  	long startTime = 0;  	// check the automated update table to see when the last time we ran this command  	ScheduledUpdate sched = repSched.GetByUpdateType ((int)ScheduledUpdateType.AniDBUpdates);  	if (sched != null) {  		int freqHours = Utils.GetScheduledHours (ServerSettings.AniDB_Anime_UpdateFrequency);  		// if we have run this in the last 12 hours and are not forcing it' then exit  		TimeSpan tsLastRun = DateTime.Now - sched.LastUpdate;  		if (tsLastRun.TotalHours < freqHours) {  			if (!ForceRefresh)  				return;  		}  	}  	// get a list of updates in the last day from AniDB  	// startTime will contain the date/time from which the updates apply to  	if (!JMMService.AnidbProcessor.GetUpdated (ref animeIDsToUpdate' ref startTime))  		return;  	long webUpdateTime = 0;  	if (sched == null) {  		// if this is the first time' lets ask web cache for everyting in the last 3 days  		DateTime localTime = DateTime.Now.AddDays (-3);  		DateTime utcTime = localTime.ToUniversalTime ();  		webUpdateTime = long.Parse (Utils.AniDBDate (utcTime));  		sched = new ScheduledUpdate ();  		sched.UpdateType = (int)ScheduledUpdateType.AniDBUpdates;  	}  	else {  		logger.Trace ("Last anidb info update was : {0}"' sched.UpdateDetails);  		webUpdateTime = long.Parse (sched.UpdateDetails);  	}  	// now save the update time from AniDB  	// we will use this next time as a starting point when querying the web cache  	sched.LastUpdate = DateTime.Now;  	sched.UpdateDetails = startTime.ToString ();  	repSched.Save (sched);  	// we now have a listof updates in the last 24 hours  	// get more from the web cache  	UpdatesCollection colUpdates = XMLService.Get_AniDBUpdates (webUpdateTime);  	// get a unqiue list of anime id's  	if (colUpdates != null) {  		logger.Info ("Web cache updates : Time={0} - Count={1} - List={2}"' webUpdateTime' colUpdates.UpdateCount' colUpdates.RawAnimeIDs);  		foreach (int id in colUpdates.AnimeIDs) {  			if (!animeIDsToUpdate.Contains (id))  				animeIDsToUpdate.Add (id);  		}  	}  	else {  		logger.Info ("No web Web cache updates");  	}  	int countAnime = 0;  	int countSeries = 0;  	foreach (int animeID in animeIDsToUpdate) {  		// update the anime from HTTP  		AniDB_Anime anime = repAnime.GetByAnimeID (animeID);  		if (anime == null) {  			logger.Trace ("No local record found for Anime ID: {0}' so skipping..."' animeID);  			continue;  		}  		logger.Info ("Updating CommandRequest_GetUpdated: {0} "' animeID);  		// but only if it hasn't been recently updated  		TimeSpan ts = DateTime.Now - anime.DateTimeUpdated;  		if (ts.TotalHours > 4) {  			CommandRequest_GetAnimeHTTP cmdAnime = new CommandRequest_GetAnimeHTTP (animeID' true' false);  			cmdAnime.Save ();  			countAnime++;  		}  		// update the group status  		// this will allow us to determine which anime has missing episodes  		// so we wonly get by an amime where we also have an associated series  		AnimeSeries ser = repSeries.GetByAnimeID (animeID);  		if (ser != null) {  			CommandRequest_GetReleaseGroupStatus cmdStatus = new CommandRequest_GetReleaseGroupStatus (animeID' true);  			cmdStatus.Save ();  			countSeries++;  		}  	}  	logger.Info ("Updating {0} anime records' and {1} group status records"' countAnime' countSeries);  }  catch (Exception ex) {  	logger.Error ("Error processing CommandRequest_GetUpdated: {0}"' ex.ToString ());  	return;  }  
Magic Number,JMMServer.Commands,CommandRequest_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetUpdated.cs,ProcessCommand,The following statement contains a magic number: try {  	List<int> animeIDsToUpdate = new List<int> ();  	ScheduledUpdateRepository repSched = new ScheduledUpdateRepository ();  	AnimeSeriesRepository repSeries = new AnimeSeriesRepository ();  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	//DateTime localTime = DateTime.Now.AddDays(-30);  	long startTime = 0;  	// check the automated update table to see when the last time we ran this command  	ScheduledUpdate sched = repSched.GetByUpdateType ((int)ScheduledUpdateType.AniDBUpdates);  	if (sched != null) {  		int freqHours = Utils.GetScheduledHours (ServerSettings.AniDB_Anime_UpdateFrequency);  		// if we have run this in the last 12 hours and are not forcing it' then exit  		TimeSpan tsLastRun = DateTime.Now - sched.LastUpdate;  		if (tsLastRun.TotalHours < freqHours) {  			if (!ForceRefresh)  				return;  		}  	}  	// get a list of updates in the last day from AniDB  	// startTime will contain the date/time from which the updates apply to  	if (!JMMService.AnidbProcessor.GetUpdated (ref animeIDsToUpdate' ref startTime))  		return;  	long webUpdateTime = 0;  	if (sched == null) {  		// if this is the first time' lets ask web cache for everyting in the last 3 days  		DateTime localTime = DateTime.Now.AddDays (-3);  		DateTime utcTime = localTime.ToUniversalTime ();  		webUpdateTime = long.Parse (Utils.AniDBDate (utcTime));  		sched = new ScheduledUpdate ();  		sched.UpdateType = (int)ScheduledUpdateType.AniDBUpdates;  	}  	else {  		logger.Trace ("Last anidb info update was : {0}"' sched.UpdateDetails);  		webUpdateTime = long.Parse (sched.UpdateDetails);  	}  	// now save the update time from AniDB  	// we will use this next time as a starting point when querying the web cache  	sched.LastUpdate = DateTime.Now;  	sched.UpdateDetails = startTime.ToString ();  	repSched.Save (sched);  	// we now have a listof updates in the last 24 hours  	// get more from the web cache  	UpdatesCollection colUpdates = XMLService.Get_AniDBUpdates (webUpdateTime);  	// get a unqiue list of anime id's  	if (colUpdates != null) {  		logger.Info ("Web cache updates : Time={0} - Count={1} - List={2}"' webUpdateTime' colUpdates.UpdateCount' colUpdates.RawAnimeIDs);  		foreach (int id in colUpdates.AnimeIDs) {  			if (!animeIDsToUpdate.Contains (id))  				animeIDsToUpdate.Add (id);  		}  	}  	else {  		logger.Info ("No web Web cache updates");  	}  	int countAnime = 0;  	int countSeries = 0;  	foreach (int animeID in animeIDsToUpdate) {  		// update the anime from HTTP  		AniDB_Anime anime = repAnime.GetByAnimeID (animeID);  		if (anime == null) {  			logger.Trace ("No local record found for Anime ID: {0}' so skipping..."' animeID);  			continue;  		}  		logger.Info ("Updating CommandRequest_GetUpdated: {0} "' animeID);  		// but only if it hasn't been recently updated  		TimeSpan ts = DateTime.Now - anime.DateTimeUpdated;  		if (ts.TotalHours > 4) {  			CommandRequest_GetAnimeHTTP cmdAnime = new CommandRequest_GetAnimeHTTP (animeID' true' false);  			cmdAnime.Save ();  			countAnime++;  		}  		// update the group status  		// this will allow us to determine which anime has missing episodes  		// so we wonly get by an amime where we also have an associated series  		AnimeSeries ser = repSeries.GetByAnimeID (animeID);  		if (ser != null) {  			CommandRequest_GetReleaseGroupStatus cmdStatus = new CommandRequest_GetReleaseGroupStatus (animeID' true);  			cmdStatus.Save ();  			countSeries++;  		}  	}  	logger.Info ("Updating {0} anime records' and {1} group status records"' countAnime' countSeries);  }  catch (Exception ex) {  	logger.Error ("Error processing CommandRequest_GetUpdated: {0}"' ex.ToString ());  	return;  }  
Magic Number,JMMServer.Commands,CommandRequest_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetUpdated.cs,ProcessCommand,The following statement contains a magic number: if (sched == null) {  	// if this is the first time' lets ask web cache for everyting in the last 3 days  	DateTime localTime = DateTime.Now.AddDays (-3);  	DateTime utcTime = localTime.ToUniversalTime ();  	webUpdateTime = long.Parse (Utils.AniDBDate (utcTime));  	sched = new ScheduledUpdate ();  	sched.UpdateType = (int)ScheduledUpdateType.AniDBUpdates;  }  else {  	logger.Trace ("Last anidb info update was : {0}"' sched.UpdateDetails);  	webUpdateTime = long.Parse (sched.UpdateDetails);  }  
Magic Number,JMMServer.Commands,CommandRequest_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetUpdated.cs,ProcessCommand,The following statement contains a magic number: foreach (int animeID in animeIDsToUpdate) {  	// update the anime from HTTP  	AniDB_Anime anime = repAnime.GetByAnimeID (animeID);  	if (anime == null) {  		logger.Trace ("No local record found for Anime ID: {0}' so skipping..."' animeID);  		continue;  	}  	logger.Info ("Updating CommandRequest_GetUpdated: {0} "' animeID);  	// but only if it hasn't been recently updated  	TimeSpan ts = DateTime.Now - anime.DateTimeUpdated;  	if (ts.TotalHours > 4) {  		CommandRequest_GetAnimeHTTP cmdAnime = new CommandRequest_GetAnimeHTTP (animeID' true' false);  		cmdAnime.Save ();  		countAnime++;  	}  	// update the group status  	// this will allow us to determine which anime has missing episodes  	// so we wonly get by an amime where we also have an associated series  	AnimeSeries ser = repSeries.GetByAnimeID (animeID);  	if (ser != null) {  		CommandRequest_GetReleaseGroupStatus cmdStatus = new CommandRequest_GetReleaseGroupStatus (animeID' true);  		cmdStatus.Save ();  		countSeries++;  	}  }  
Magic Number,JMMServer.Commands,CommandRequest_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_GetUpdated.cs,ProcessCommand,The following statement contains a magic number: if (ts.TotalHours > 4) {  	CommandRequest_GetAnimeHTTP cmdAnime = new CommandRequest_GetAnimeHTTP (animeID' true' false);  	cmdAnime.Save ();  	countAnime++;  }  
Magic Number,JMMServer.Commands,CommandRequest_HashFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The following statement contains a magic number: while ((!CanAccessFile (FileName)) && (numAttempts < 180)) {  	numAttempts++;  	Thread.Sleep (1000);  	Console.WriteLine ("Attempt # " + numAttempts.ToString ());  }  
Magic Number,JMMServer.Commands,CommandRequest_HashFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The following statement contains a magic number: while ((!CanAccessFile (FileName)) && (numAttempts < 180)) {  	numAttempts++;  	Thread.Sleep (1000);  	Console.WriteLine ("Attempt # " + numAttempts.ToString ());  }  
Magic Number,JMMServer.Commands,CommandRequest_HashFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,JMMServer.Commands,CommandRequest_HashFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The following statement contains a magic number: if (numAttempts == 180) {  	logger.Error ("Could not access file: " + FileName);  	return null;  }  
Magic Number,JMMServer.Commands,CommandRequest_ProcessFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_ProcessFile.cs,ProcessFile_AniDB,The following statement contains a magic number: if (anime != null) {  	TimeSpan ts = DateTime.Now - anime.DateTimeUpdated;  	if (ts.TotalHours < 4)  		animeRecentlyUpdated = true;  }  
Magic Number,JMMServer.Commands,CommandRequest_ProcessFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_ProcessFile.cs,ProcessFile_AniDB,The following statement contains a magic number: if (ts.TotalHours < 4)  	animeRecentlyUpdated = true;  
Magic Number,JMMServer.Commands,CommandRequest_SyncMyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_SyncMyList.cs,ProcessCommand,The following statement contains a magic number: try {  	// we will always assume that an anime was downloaded via http first  	ScheduledUpdateRepository repSched = new ScheduledUpdateRepository ();  	AniDB_FileRepository repAniFile = new AniDB_FileRepository ();  	VideoLocalRepository repVidLocals = new VideoLocalRepository ();  	ScheduledUpdate sched = repSched.GetByUpdateType ((int)ScheduledUpdateType.AniDBMyListSync);  	if (sched == null) {  		sched = new ScheduledUpdate ();  		sched.UpdateType = (int)ScheduledUpdateType.AniDBMyListSync;  		sched.UpdateDetails = "";  	}  	else {  		int freqHours = Utils.GetScheduledHours (ServerSettings.AniDB_MyList_UpdateFrequency);  		// if we have run this in the last 24 hours and are not forcing it' then exit  		TimeSpan tsLastRun = DateTime.Now - sched.LastUpdate;  		if (tsLastRun.TotalHours < freqHours) {  			if (!ForceRefresh)  				return;  		}  	}  	AniDBHTTPCommand_GetMyList cmd = new AniDBHTTPCommand_GetMyList ();  	cmd.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password);  	enHelperActivityType ev = cmd.Process ();  	if (ev == enHelperActivityType.GotMyListHTTP && cmd.MyListItems.Count > 1) {  		int totalItems = 0;  		int watchedItems = 0;  		int modifiedItems = 0;  		double pct = 0;  		// 2. find files locally for the user' which are not recorded on anidb  		//    and then add them to anidb  		Dictionary<int' Raw_AniDB_MyListFile> onlineFiles = new Dictionary<int' Raw_AniDB_MyListFile> ();  		foreach (Raw_AniDB_MyListFile myitem in cmd.MyListItems)  			onlineFiles [myitem.FileID] = myitem;  		Dictionary<string' AniDB_File> dictAniFiles = new Dictionary<string' AniDB_File> ();  		List<AniDB_File> allAniFiles = repAniFile.GetAll ();  		foreach (AniDB_File anifile in allAniFiles)  			dictAniFiles [anifile.Hash] = anifile;  		int missingFiles = 0;  		foreach (VideoLocal vid in repVidLocals.GetAll ()) {  			if (!dictAniFiles.ContainsKey (vid.Hash))  				continue;  			int fileID = dictAniFiles [vid.Hash].FileID;  			if (!onlineFiles.ContainsKey (fileID)) {  				// means we have found a file in our local collection' which is not recorded online  				CommandRequest_AddFileToMyList cmdAddFile = new CommandRequest_AddFileToMyList (vid.Hash);  				cmdAddFile.Save ();  				missingFiles++;  			}  		}  		logger.Info (string.Format ("MYLIST Missing Files: {0} Added to queue for inclusion"' missingFiles));  		JMMUserRepository repUsers = new JMMUserRepository ();  		List<JMMUser> aniDBUsers = repUsers.GetAniDBUsers ();  		VideoLocal_UserRepository repVidUsers = new VideoLocal_UserRepository ();  		CrossRef_File_EpisodeRepository repFileEp = new CrossRef_File_EpisodeRepository ();  		// 1 . sync mylist items  		foreach (Raw_AniDB_MyListFile myitem in cmd.MyListItems) {  			// ignore files mark as deleted by the user  			if (myitem.State == (int)AniDBFileStatus.Deleted)  				continue;  			totalItems++;  			if (myitem.IsWatched)  				watchedItems++;  			//calculate percentage  			pct = (double)totalItems / (double)cmd.MyListItems.Count * (double)100;  			string spct = pct.ToString ("#0.0");  			string hash = string.Empty;  			AniDB_File anifile = repAniFile.GetByFileID (myitem.FileID);  			if (anifile != null)  				hash = anifile.Hash;  			else {  				// look for manually linked files  				List<CrossRef_File_Episode> xrefs = repFileEp.GetByEpisodeID (myitem.EpisodeID);  				foreach (CrossRef_File_Episode xref in xrefs) {  					if (xref.CrossRefSource != (int)CrossRefSource.AniDB) {  						hash = xref.Hash;  						break;  					}  				}  			}  			if (!string.IsNullOrEmpty (hash)) {  				// find the video associated with this record  				VideoLocal vl = repVidLocals.GetByHash (hash);  				if (vl == null)  					continue;  				foreach (JMMUser juser in aniDBUsers) {  					bool localStatus = false;  					int? jmmUserID = null;  					// doesn't matter which anidb user we use  					jmmUserID = juser.JMMUserID;  					VideoLocal_User userRecord = vl.GetUserRecord (juser.JMMUserID);  					if (userRecord != null)  						localStatus = true;  					string action = "";  					if (localStatus != myitem.IsWatched) {  						if (localStatus == true) {  							// local = watched' anidb = unwatched  							if (ServerSettings.AniDB_MyList_ReadUnwatched) {  								modifiedItems++;  								if (jmmUserID.HasValue)  									vl.ToggleWatchedStatus (myitem.IsWatched' false' myitem.WatchedDate' false' false' jmmUserID.Value' false' true);  								action = "Used AniDB Status";  							}  						}  						else {  							// means local is un-watched' and anidb is watched  							if (ServerSettings.AniDB_MyList_ReadWatched) {  								modifiedItems++;  								if (jmmUserID.HasValue)  									vl.ToggleWatchedStatus (true' false' myitem.WatchedDate' false' false' jmmUserID.Value' false' true);  								action = "Updated Local record to Watched";  							}  						}  						string msg = string.Format ("MYLISTDIFF:: File {0} - Local Status = {1}' AniDB Status = {2} --- {3}"' vl.FullServerPath' localStatus' myitem.IsWatched' action);  						logger.Info (msg);  					}  				}  				//string msg = string.Format("MYLIST:: File {0} - Local Status = {1}' AniDB Status = {2} --- {3}"'  				//	vl.FullServerPath' localStatus' myitem.IsWatched' action);  				//logger.Info(msg);  			}  		}  		// now update all stats  		Importer.UpdateAllStats ();  		logger.Info ("Process MyList: {0} Items' {1} Watched' {2} Modified"' totalItems' watchedItems' modifiedItems);  		sched.LastUpdate = DateTime.Now;  		repSched.Save (sched);  	}  }  catch (Exception ex) {  	logger.Error ("Error processing CommandRequest_SyncMyList: {0} "' ex.ToString ());  	return;  }  
Magic Number,JMMServer.Commands,CommandRequest_SyncMyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_SyncMyList.cs,ProcessCommand,The following statement contains a magic number: if (ev == enHelperActivityType.GotMyListHTTP && cmd.MyListItems.Count > 1) {  	int totalItems = 0;  	int watchedItems = 0;  	int modifiedItems = 0;  	double pct = 0;  	// 2. find files locally for the user' which are not recorded on anidb  	//    and then add them to anidb  	Dictionary<int' Raw_AniDB_MyListFile> onlineFiles = new Dictionary<int' Raw_AniDB_MyListFile> ();  	foreach (Raw_AniDB_MyListFile myitem in cmd.MyListItems)  		onlineFiles [myitem.FileID] = myitem;  	Dictionary<string' AniDB_File> dictAniFiles = new Dictionary<string' AniDB_File> ();  	List<AniDB_File> allAniFiles = repAniFile.GetAll ();  	foreach (AniDB_File anifile in allAniFiles)  		dictAniFiles [anifile.Hash] = anifile;  	int missingFiles = 0;  	foreach (VideoLocal vid in repVidLocals.GetAll ()) {  		if (!dictAniFiles.ContainsKey (vid.Hash))  			continue;  		int fileID = dictAniFiles [vid.Hash].FileID;  		if (!onlineFiles.ContainsKey (fileID)) {  			// means we have found a file in our local collection' which is not recorded online  			CommandRequest_AddFileToMyList cmdAddFile = new CommandRequest_AddFileToMyList (vid.Hash);  			cmdAddFile.Save ();  			missingFiles++;  		}  	}  	logger.Info (string.Format ("MYLIST Missing Files: {0} Added to queue for inclusion"' missingFiles));  	JMMUserRepository repUsers = new JMMUserRepository ();  	List<JMMUser> aniDBUsers = repUsers.GetAniDBUsers ();  	VideoLocal_UserRepository repVidUsers = new VideoLocal_UserRepository ();  	CrossRef_File_EpisodeRepository repFileEp = new CrossRef_File_EpisodeRepository ();  	// 1 . sync mylist items  	foreach (Raw_AniDB_MyListFile myitem in cmd.MyListItems) {  		// ignore files mark as deleted by the user  		if (myitem.State == (int)AniDBFileStatus.Deleted)  			continue;  		totalItems++;  		if (myitem.IsWatched)  			watchedItems++;  		//calculate percentage  		pct = (double)totalItems / (double)cmd.MyListItems.Count * (double)100;  		string spct = pct.ToString ("#0.0");  		string hash = string.Empty;  		AniDB_File anifile = repAniFile.GetByFileID (myitem.FileID);  		if (anifile != null)  			hash = anifile.Hash;  		else {  			// look for manually linked files  			List<CrossRef_File_Episode> xrefs = repFileEp.GetByEpisodeID (myitem.EpisodeID);  			foreach (CrossRef_File_Episode xref in xrefs) {  				if (xref.CrossRefSource != (int)CrossRefSource.AniDB) {  					hash = xref.Hash;  					break;  				}  			}  		}  		if (!string.IsNullOrEmpty (hash)) {  			// find the video associated with this record  			VideoLocal vl = repVidLocals.GetByHash (hash);  			if (vl == null)  				continue;  			foreach (JMMUser juser in aniDBUsers) {  				bool localStatus = false;  				int? jmmUserID = null;  				// doesn't matter which anidb user we use  				jmmUserID = juser.JMMUserID;  				VideoLocal_User userRecord = vl.GetUserRecord (juser.JMMUserID);  				if (userRecord != null)  					localStatus = true;  				string action = "";  				if (localStatus != myitem.IsWatched) {  					if (localStatus == true) {  						// local = watched' anidb = unwatched  						if (ServerSettings.AniDB_MyList_ReadUnwatched) {  							modifiedItems++;  							if (jmmUserID.HasValue)  								vl.ToggleWatchedStatus (myitem.IsWatched' false' myitem.WatchedDate' false' false' jmmUserID.Value' false' true);  							action = "Used AniDB Status";  						}  					}  					else {  						// means local is un-watched' and anidb is watched  						if (ServerSettings.AniDB_MyList_ReadWatched) {  							modifiedItems++;  							if (jmmUserID.HasValue)  								vl.ToggleWatchedStatus (true' false' myitem.WatchedDate' false' false' jmmUserID.Value' false' true);  							action = "Updated Local record to Watched";  						}  					}  					string msg = string.Format ("MYLISTDIFF:: File {0} - Local Status = {1}' AniDB Status = {2} --- {3}"' vl.FullServerPath' localStatus' myitem.IsWatched' action);  					logger.Info (msg);  				}  			}  			//string msg = string.Format("MYLIST:: File {0} - Local Status = {1}' AniDB Status = {2} --- {3}"'  			//	vl.FullServerPath' localStatus' myitem.IsWatched' action);  			//logger.Info(msg);  		}  	}  	// now update all stats  	Importer.UpdateAllStats ();  	logger.Info ("Process MyList: {0} Items' {1} Watched' {2} Modified"' totalItems' watchedItems' modifiedItems);  	sched.LastUpdate = DateTime.Now;  	repSched.Save (sched);  }  
Magic Number,JMMServer.Commands,CommandRequest_SyncMyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_SyncMyList.cs,ProcessCommand,The following statement contains a magic number: foreach (Raw_AniDB_MyListFile myitem in cmd.MyListItems) {  	// ignore files mark as deleted by the user  	if (myitem.State == (int)AniDBFileStatus.Deleted)  		continue;  	totalItems++;  	if (myitem.IsWatched)  		watchedItems++;  	//calculate percentage  	pct = (double)totalItems / (double)cmd.MyListItems.Count * (double)100;  	string spct = pct.ToString ("#0.0");  	string hash = string.Empty;  	AniDB_File anifile = repAniFile.GetByFileID (myitem.FileID);  	if (anifile != null)  		hash = anifile.Hash;  	else {  		// look for manually linked files  		List<CrossRef_File_Episode> xrefs = repFileEp.GetByEpisodeID (myitem.EpisodeID);  		foreach (CrossRef_File_Episode xref in xrefs) {  			if (xref.CrossRefSource != (int)CrossRefSource.AniDB) {  				hash = xref.Hash;  				break;  			}  		}  	}  	if (!string.IsNullOrEmpty (hash)) {  		// find the video associated with this record  		VideoLocal vl = repVidLocals.GetByHash (hash);  		if (vl == null)  			continue;  		foreach (JMMUser juser in aniDBUsers) {  			bool localStatus = false;  			int? jmmUserID = null;  			// doesn't matter which anidb user we use  			jmmUserID = juser.JMMUserID;  			VideoLocal_User userRecord = vl.GetUserRecord (juser.JMMUserID);  			if (userRecord != null)  				localStatus = true;  			string action = "";  			if (localStatus != myitem.IsWatched) {  				if (localStatus == true) {  					// local = watched' anidb = unwatched  					if (ServerSettings.AniDB_MyList_ReadUnwatched) {  						modifiedItems++;  						if (jmmUserID.HasValue)  							vl.ToggleWatchedStatus (myitem.IsWatched' false' myitem.WatchedDate' false' false' jmmUserID.Value' false' true);  						action = "Used AniDB Status";  					}  				}  				else {  					// means local is un-watched' and anidb is watched  					if (ServerSettings.AniDB_MyList_ReadWatched) {  						modifiedItems++;  						if (jmmUserID.HasValue)  							vl.ToggleWatchedStatus (true' false' myitem.WatchedDate' false' false' jmmUserID.Value' false' true);  						action = "Updated Local record to Watched";  					}  				}  				string msg = string.Format ("MYLISTDIFF:: File {0} - Local Status = {1}' AniDB Status = {2} --- {3}"' vl.FullServerPath' localStatus' myitem.IsWatched' action);  				logger.Info (msg);  			}  		}  		//string msg = string.Format("MYLIST:: File {0} - Local Status = {1}' AniDB Status = {2} --- {3}"'  		//	vl.FullServerPath' localStatus' myitem.IsWatched' action);  		//logger.Info(msg);  	}  }  
Magic Number,JMMServer.Commands,CommandRequest_SyncMyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\AniDB\CommandRequest_SyncMyList.cs,ProcessCommand,The following statement contains a magic number: pct = (double)totalItems / (double)cmd.MyListItems.Count * (double)100;  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.Files = AniDBAPILib.ProcessAniDBInt (sDetails [2]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.SizeOfFiles = AniDBAPILib.ProcessAniDBLong (sDetails [3]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.AddedAnimes = AniDBAPILib.ProcessAniDBInt (sDetails [4]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.AddedEpisodes = AniDBAPILib.ProcessAniDBInt (sDetails [5]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.AddedFiles = AniDBAPILib.ProcessAniDBInt (sDetails [6]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.AddedGroups = AniDBAPILib.ProcessAniDBInt (sDetails [7]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.LeechPct = AniDBAPILib.ProcessAniDBInt (sDetails [8]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.GloryPct = AniDBAPILib.ProcessAniDBInt (sDetails [9]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.ViewedPct = AniDBAPILib.ProcessAniDBInt (sDetails [10]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.MylistPct = AniDBAPILib.ProcessAniDBInt (sDetails [11]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.ViewedMylistPct = AniDBAPILib.ProcessAniDBInt (sDetails [12]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.EpisodesViewed = AniDBAPILib.ProcessAniDBInt (sDetails [13]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.Votes = AniDBAPILib.ProcessAniDBInt (sDetails [14]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.Reviews = AniDBAPILib.ProcessAniDBInt (sDetails [15]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_MyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.ViewiedLength = AniDBAPILib.ProcessAniDBInt (sDetails [16]);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_Vote_HTTP,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Vote_HTTP.cs,ProcessAnime,The following statement contains a magic number: int.TryParse ((val * (double)100).ToString ()' out ival);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_Vote_HTTP,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Vote_HTTP.cs,ProcessAnimeTemp,The following statement contains a magic number: int.TryParse ((val * (double)100).ToString ()' out ival);  
Magic Number,JMMServer.AniDB_API.Raws,Raw_AniDB_Vote_HTTP,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Raws\Raw_AniDB_Vote_HTTP.cs,ProcessEpisode,The following statement contains a magic number: int.TryParse ((val * (double)100).ToString ()' out ival);  
Magic Number,JMMServer.Commands.MAL,CommandRequest_MALDownloadStatusFromMAL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALDownloadStatusFromMAL.cs,ProcessCommand,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (ServerSettings.MAL_Username) || string.IsNullOrEmpty (ServerSettings.MAL_Password))  		return;  	// find the latest eps to update  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	myanimelist mal = MALHelper.GetMALAnimeList ();  	if (mal == null)  		return;  	if (mal.anime == null)  		return;  	CrossRef_AniDB_MALRepository repCrossRef = new CrossRef_AniDB_MALRepository ();  	AniDB_EpisodeRepository repAniEps = new AniDB_EpisodeRepository ();  	AnimeEpisodeRepository repEp = new AnimeEpisodeRepository ();  	// find the anidb user  	JMMUserRepository repUsers = new JMMUserRepository ();  	List<JMMUser> aniDBUsers = repUsers.GetAniDBUsers ();  	if (aniDBUsers.Count == 0)  		return;  	JMMUser user = aniDBUsers [0];  	foreach (myanimelistAnime malAnime in mal.anime) {  		// look up the anime  		CrossRef_AniDB_MAL xref = repCrossRef.GetByMALID (malAnime.series_animedb_id);  		if (xref == null)  			continue;  		if (malAnime.series_animedb_id == 8107 || malAnime.series_animedb_id == 10737) {  			Console.Write ("");  		}  		// check if this anime has any other links  		List<CrossRef_AniDB_MAL> allXrefs = repCrossRef.GetByAnimeID (xref.AnimeID);  		if (allXrefs.Count == 0)  			continue;  		// find the range of watched episodes that this applies to  		int startEpNumber = xref.StartEpisodeNumber;  		int endEpNumber = GetUpperEpisodeLimit (allXrefs' xref);  		List<AniDB_Episode> aniEps = repAniEps.GetByAnimeID (xref.AnimeID);  		foreach (AniDB_Episode aniep in aniEps) {  			if (aniep.EpisodeType != xref.StartEpisodeType)  				continue;  			AnimeEpisode ep = repEp.GetByAniDBEpisodeID (aniep.EpisodeID);  			if (ep == null)  				continue;  			int adjustedWatchedEps = malAnime.my_watched_episodes + xref.StartEpisodeNumber - 1;  			int epNum = aniep.EpisodeNumber;  			if (epNum < startEpNumber || epNum > endEpNumber)  				continue;  			AnimeEpisode_User usrRec = ep.GetUserRecord (user.JMMUserID);  			if (epNum <= adjustedWatchedEps) {  				// update if the user doesn't have a record (means not watched)  				// or it is currently un-watched  				bool update = false;  				if (usrRec == null)  					update = true;  				else {  					if (!usrRec.WatchedDate.HasValue)  						update = true;  				}  				if (update)  					ep.ToggleWatchedStatus (true' true' DateTime.Now' user.JMMUserID' false);  			}  			else {  				bool update = false;  				if (usrRec != null) {  					if (usrRec.WatchedDate.HasValue)  						update = true;  				}  				if (update)  					ep.ToggleWatchedStatus (false' true' DateTime.Now' user.JMMUserID' false);  			}  		}  	}  }  catch (Exception ex) {  	logger.Error ("Error processing CommandRequest_MALDownloadStatusFromMAL: {0}"' ex.ToString ());  	return;  }  
Magic Number,JMMServer.Commands.MAL,CommandRequest_MALDownloadStatusFromMAL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALDownloadStatusFromMAL.cs,ProcessCommand,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (ServerSettings.MAL_Username) || string.IsNullOrEmpty (ServerSettings.MAL_Password))  		return;  	// find the latest eps to update  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	myanimelist mal = MALHelper.GetMALAnimeList ();  	if (mal == null)  		return;  	if (mal.anime == null)  		return;  	CrossRef_AniDB_MALRepository repCrossRef = new CrossRef_AniDB_MALRepository ();  	AniDB_EpisodeRepository repAniEps = new AniDB_EpisodeRepository ();  	AnimeEpisodeRepository repEp = new AnimeEpisodeRepository ();  	// find the anidb user  	JMMUserRepository repUsers = new JMMUserRepository ();  	List<JMMUser> aniDBUsers = repUsers.GetAniDBUsers ();  	if (aniDBUsers.Count == 0)  		return;  	JMMUser user = aniDBUsers [0];  	foreach (myanimelistAnime malAnime in mal.anime) {  		// look up the anime  		CrossRef_AniDB_MAL xref = repCrossRef.GetByMALID (malAnime.series_animedb_id);  		if (xref == null)  			continue;  		if (malAnime.series_animedb_id == 8107 || malAnime.series_animedb_id == 10737) {  			Console.Write ("");  		}  		// check if this anime has any other links  		List<CrossRef_AniDB_MAL> allXrefs = repCrossRef.GetByAnimeID (xref.AnimeID);  		if (allXrefs.Count == 0)  			continue;  		// find the range of watched episodes that this applies to  		int startEpNumber = xref.StartEpisodeNumber;  		int endEpNumber = GetUpperEpisodeLimit (allXrefs' xref);  		List<AniDB_Episode> aniEps = repAniEps.GetByAnimeID (xref.AnimeID);  		foreach (AniDB_Episode aniep in aniEps) {  			if (aniep.EpisodeType != xref.StartEpisodeType)  				continue;  			AnimeEpisode ep = repEp.GetByAniDBEpisodeID (aniep.EpisodeID);  			if (ep == null)  				continue;  			int adjustedWatchedEps = malAnime.my_watched_episodes + xref.StartEpisodeNumber - 1;  			int epNum = aniep.EpisodeNumber;  			if (epNum < startEpNumber || epNum > endEpNumber)  				continue;  			AnimeEpisode_User usrRec = ep.GetUserRecord (user.JMMUserID);  			if (epNum <= adjustedWatchedEps) {  				// update if the user doesn't have a record (means not watched)  				// or it is currently un-watched  				bool update = false;  				if (usrRec == null)  					update = true;  				else {  					if (!usrRec.WatchedDate.HasValue)  						update = true;  				}  				if (update)  					ep.ToggleWatchedStatus (true' true' DateTime.Now' user.JMMUserID' false);  			}  			else {  				bool update = false;  				if (usrRec != null) {  					if (usrRec.WatchedDate.HasValue)  						update = true;  				}  				if (update)  					ep.ToggleWatchedStatus (false' true' DateTime.Now' user.JMMUserID' false);  			}  		}  	}  }  catch (Exception ex) {  	logger.Error ("Error processing CommandRequest_MALDownloadStatusFromMAL: {0}"' ex.ToString ());  	return;  }  
Magic Number,JMMServer.Commands.MAL,CommandRequest_MALDownloadStatusFromMAL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALDownloadStatusFromMAL.cs,ProcessCommand,The following statement contains a magic number: foreach (myanimelistAnime malAnime in mal.anime) {  	// look up the anime  	CrossRef_AniDB_MAL xref = repCrossRef.GetByMALID (malAnime.series_animedb_id);  	if (xref == null)  		continue;  	if (malAnime.series_animedb_id == 8107 || malAnime.series_animedb_id == 10737) {  		Console.Write ("");  	}  	// check if this anime has any other links  	List<CrossRef_AniDB_MAL> allXrefs = repCrossRef.GetByAnimeID (xref.AnimeID);  	if (allXrefs.Count == 0)  		continue;  	// find the range of watched episodes that this applies to  	int startEpNumber = xref.StartEpisodeNumber;  	int endEpNumber = GetUpperEpisodeLimit (allXrefs' xref);  	List<AniDB_Episode> aniEps = repAniEps.GetByAnimeID (xref.AnimeID);  	foreach (AniDB_Episode aniep in aniEps) {  		if (aniep.EpisodeType != xref.StartEpisodeType)  			continue;  		AnimeEpisode ep = repEp.GetByAniDBEpisodeID (aniep.EpisodeID);  		if (ep == null)  			continue;  		int adjustedWatchedEps = malAnime.my_watched_episodes + xref.StartEpisodeNumber - 1;  		int epNum = aniep.EpisodeNumber;  		if (epNum < startEpNumber || epNum > endEpNumber)  			continue;  		AnimeEpisode_User usrRec = ep.GetUserRecord (user.JMMUserID);  		if (epNum <= adjustedWatchedEps) {  			// update if the user doesn't have a record (means not watched)  			// or it is currently un-watched  			bool update = false;  			if (usrRec == null)  				update = true;  			else {  				if (!usrRec.WatchedDate.HasValue)  					update = true;  			}  			if (update)  				ep.ToggleWatchedStatus (true' true' DateTime.Now' user.JMMUserID' false);  		}  		else {  			bool update = false;  			if (usrRec != null) {  				if (usrRec.WatchedDate.HasValue)  					update = true;  			}  			if (update)  				ep.ToggleWatchedStatus (false' true' DateTime.Now' user.JMMUserID' false);  		}  	}  }  
Magic Number,JMMServer.Commands.MAL,CommandRequest_MALDownloadStatusFromMAL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALDownloadStatusFromMAL.cs,ProcessCommand,The following statement contains a magic number: foreach (myanimelistAnime malAnime in mal.anime) {  	// look up the anime  	CrossRef_AniDB_MAL xref = repCrossRef.GetByMALID (malAnime.series_animedb_id);  	if (xref == null)  		continue;  	if (malAnime.series_animedb_id == 8107 || malAnime.series_animedb_id == 10737) {  		Console.Write ("");  	}  	// check if this anime has any other links  	List<CrossRef_AniDB_MAL> allXrefs = repCrossRef.GetByAnimeID (xref.AnimeID);  	if (allXrefs.Count == 0)  		continue;  	// find the range of watched episodes that this applies to  	int startEpNumber = xref.StartEpisodeNumber;  	int endEpNumber = GetUpperEpisodeLimit (allXrefs' xref);  	List<AniDB_Episode> aniEps = repAniEps.GetByAnimeID (xref.AnimeID);  	foreach (AniDB_Episode aniep in aniEps) {  		if (aniep.EpisodeType != xref.StartEpisodeType)  			continue;  		AnimeEpisode ep = repEp.GetByAniDBEpisodeID (aniep.EpisodeID);  		if (ep == null)  			continue;  		int adjustedWatchedEps = malAnime.my_watched_episodes + xref.StartEpisodeNumber - 1;  		int epNum = aniep.EpisodeNumber;  		if (epNum < startEpNumber || epNum > endEpNumber)  			continue;  		AnimeEpisode_User usrRec = ep.GetUserRecord (user.JMMUserID);  		if (epNum <= adjustedWatchedEps) {  			// update if the user doesn't have a record (means not watched)  			// or it is currently un-watched  			bool update = false;  			if (usrRec == null)  				update = true;  			else {  				if (!usrRec.WatchedDate.HasValue)  					update = true;  			}  			if (update)  				ep.ToggleWatchedStatus (true' true' DateTime.Now' user.JMMUserID' false);  		}  		else {  			bool update = false;  			if (usrRec != null) {  				if (usrRec.WatchedDate.HasValue)  					update = true;  			}  			if (update)  				ep.ToggleWatchedStatus (false' true' DateTime.Now' user.JMMUserID' false);  		}  	}  }  
Magic Number,JMMServer.Commands.MAL,CommandRequest_MALDownloadStatusFromMAL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALDownloadStatusFromMAL.cs,ProcessCommand,The following statement contains a magic number: if (malAnime.series_animedb_id == 8107 || malAnime.series_animedb_id == 10737) {  	Console.Write ("");  }  
Magic Number,JMMServer.Commands.MAL,CommandRequest_MALDownloadStatusFromMAL,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\MAL\CommandRequest_MALDownloadStatusFromMAL.cs,ProcessCommand,The following statement contains a magic number: if (malAnime.series_animedb_id == 8107 || malAnime.series_animedb_id == 10737) {  	Console.Write ("");  }  
Magic Number,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,InitDB,The following statement contains a magic number: try {  	if (ServerSettings.DatabaseType.Trim ().ToUpper () == "SQLSERVER") {  		if (!SQLServer.DatabaseAlreadyExists ()) {  			logger.Error ("Database: {0} does not exist"' ServerSettings.DatabaseName);  			SQLServer.CreateDatabase ();  			Thread.Sleep (3000);  		}  		JMMService.CloseSessionFactory ();  		ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  		ISessionFactory temp = JMMService.SessionFactory;  		ServerState.Instance.CurrentSetupStatus = "Database - Creating Initial Schema...";  		SQLServer.CreateInitialSchema ();  		ServerState.Instance.CurrentSetupStatus = "Database - Applying Schema Patches...";  		SQLServer.UpdateSchema ();  		PopulateInitialData ();  		return true;  	}  	else if (ServerSettings.DatabaseType.Trim ().ToUpper () == "SQLITE") {  		ServerState.Instance.CurrentSetupStatus = "Database - Creating Database...";  		SQLite.CreateDatabase ();  		JMMService.CloseSessionFactory ();  		ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  		ISessionFactory temp = JMMService.SessionFactory;  		ServerState.Instance.CurrentSetupStatus = "Database - Creating Initial Schema...";  		SQLite.CreateInitialSchema ();  		ServerState.Instance.CurrentSetupStatus = "Database - Applying Schema Patches...";  		SQLite.UpdateSchema ();  		PopulateInitialData ();  		return true;  	}  	else if (ServerSettings.DatabaseType.Trim ().ToUpper () == "MYSQL") {  		logger.Trace ("Database - Creating Database...");  		ServerState.Instance.CurrentSetupStatus = "Database - Creating Database...";  		MySQL.CreateDatabase ();  		logger.Trace ("Initializing Session Factory...");  		JMMService.CloseSessionFactory ();  		ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  		ISessionFactory temp = JMMService.SessionFactory;  		logger.Trace ("Database - Creating Initial Schema...");  		ServerState.Instance.CurrentSetupStatus = "Database - Creating Initial Schema...";  		MySQL.CreateInitialSchema ();  		logger.Trace ("Database - Applying Schema Patches...");  		ServerState.Instance.CurrentSetupStatus = "Database - Applying Schema Patches...";  		MySQL.UpdateSchema ();  		//MySQL.UpdateSchema_Fix();  		PopulateInitialData ();  		return true;  	}  	return false;  }  catch (Exception ex) {  	logger.ErrorException ("Could not init database: " + ex.ToString ()' ex);  	return false;  }  
Magic Number,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,InitDB,The following statement contains a magic number: if (ServerSettings.DatabaseType.Trim ().ToUpper () == "SQLSERVER") {  	if (!SQLServer.DatabaseAlreadyExists ()) {  		logger.Error ("Database: {0} does not exist"' ServerSettings.DatabaseName);  		SQLServer.CreateDatabase ();  		Thread.Sleep (3000);  	}  	JMMService.CloseSessionFactory ();  	ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  	ISessionFactory temp = JMMService.SessionFactory;  	ServerState.Instance.CurrentSetupStatus = "Database - Creating Initial Schema...";  	SQLServer.CreateInitialSchema ();  	ServerState.Instance.CurrentSetupStatus = "Database - Applying Schema Patches...";  	SQLServer.UpdateSchema ();  	PopulateInitialData ();  	return true;  }  else if (ServerSettings.DatabaseType.Trim ().ToUpper () == "SQLITE") {  	ServerState.Instance.CurrentSetupStatus = "Database - Creating Database...";  	SQLite.CreateDatabase ();  	JMMService.CloseSessionFactory ();  	ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  	ISessionFactory temp = JMMService.SessionFactory;  	ServerState.Instance.CurrentSetupStatus = "Database - Creating Initial Schema...";  	SQLite.CreateInitialSchema ();  	ServerState.Instance.CurrentSetupStatus = "Database - Applying Schema Patches...";  	SQLite.UpdateSchema ();  	PopulateInitialData ();  	return true;  }  else if (ServerSettings.DatabaseType.Trim ().ToUpper () == "MYSQL") {  	logger.Trace ("Database - Creating Database...");  	ServerState.Instance.CurrentSetupStatus = "Database - Creating Database...";  	MySQL.CreateDatabase ();  	logger.Trace ("Initializing Session Factory...");  	JMMService.CloseSessionFactory ();  	ServerState.Instance.CurrentSetupStatus = "Initializing Session Factory...";  	ISessionFactory temp = JMMService.SessionFactory;  	logger.Trace ("Database - Creating Initial Schema...");  	ServerState.Instance.CurrentSetupStatus = "Database - Creating Initial Schema...";  	MySQL.CreateInitialSchema ();  	logger.Trace ("Database - Applying Schema Patches...");  	ServerState.Instance.CurrentSetupStatus = "Database - Applying Schema Patches...";  	MySQL.UpdateSchema ();  	//MySQL.UpdateSchema_Fix();  	PopulateInitialData ();  	return true;  }  
Magic Number,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,InitDB,The following statement contains a magic number: if (!SQLServer.DatabaseAlreadyExists ()) {  	logger.Error ("Database: {0} does not exist"' ServerSettings.DatabaseName);  	SQLServer.CreateDatabase ();  	Thread.Sleep (3000);  }  
Magic Number,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,InitDB,The following statement contains a magic number: Thread.Sleep (3000);  
Magic Number,JMMServer.Databases,DatabaseHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Databases\DatabaseHelper.cs,CreateInitialRenameScript,The following statement contains a magic number: initialScript.Script = "// Sample Output: [Coalgirls]_Highschool_of_the_Dead_-_01_(1920x1080_Blu-ray_H264)_[90CC6DC1].mkv" + Environment.NewLine + "// Sub group name" + Environment.NewLine + "DO ADD '[%grp] '" + Environment.NewLine + "// Anime Name' use english name if it exists' otherwise use the Romaji name" + Environment.NewLine + "IF I(eng) DO ADD '%eng '" + Environment.NewLine + "IF I(ann);I(!eng) DO ADD '%ann '" + Environment.NewLine + "// Episode Number' don't use episode number for movies" + Environment.NewLine + "IF T(!Movie) DO ADD '- %enr'" + Environment.NewLine + "// If the file version is v2 or higher add it here" + Environment.NewLine + "IF F(!1) DO ADD 'v%ver'" + Environment.NewLine + "// Video Resolution" + Environment.NewLine + "DO ADD ' (%res'" + Environment.NewLine + "// Video Source (only if blu-ray or DVD)" + Environment.NewLine + "IF R(DVD)'R(Blu-ray) DO ADD ' %src'" + Environment.NewLine + "// Video Codec" + Environment.NewLine + "DO ADD ' %vid'" + Environment.NewLine + "// Video Bit Depth (only if 10bit)" + Environment.NewLine + "IF Z(10) DO ADD ' %bitbit'" + Environment.NewLine + "DO ADD ') '" + Environment.NewLine + "DO ADD '[%CRC]'" + Environment.NewLine + "" + Environment.NewLine + "// Replacement rules (cleanup)" + Environment.NewLine + "DO REPLACE ' ' '_' // replace spaces with underscores" + Environment.NewLine + "DO REPLACE 'H264/AVC' 'H264'" + Environment.NewLine + "DO REPLACE '0x0' ''" + Environment.NewLine + "DO REPLACE '__' '_'" + Environment.NewLine + "DO REPLACE '__' '_'" + Environment.NewLine + "" + Environment.NewLine + "// Replace all illegal file name characters" + Environment.NewLine + "DO REPLACE '<' '('" + Environment.NewLine + "DO REPLACE '>' ')'" + Environment.NewLine + "DO REPLACE ':' '-'" + Environment.NewLine + "DO REPLACE '" + ((Char)34).ToString () + "' '`'" + Environment.NewLine + "DO REPLACE '/' '_'" + Environment.NewLine + "DO REPLACE '/' '_'" + Environment.NewLine + "DO REPLACE '\\' '_'" + Environment.NewLine + "DO REPLACE '|' '_'" + Environment.NewLine + "DO REPLACE '?' '_'" + Environment.NewLine + "DO REPLACE '*' '_'" + Environment.NewLine;  
Magic Number,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDictTvDBSeasons,The following statement contains a magic number: if (dictTvDBSeasons == null) {  	try {  		List<TvDB_Episode> tvdbEpisodes = GetTvDBEpisodes (session);  		if (tvdbEpisodes != null) {  			dictTvDBSeasons = new Dictionary<int' int> ();  			// create a dictionary of season numbers and the first episode for that season  			List<TvDB_Episode> eps = tvdbEpisodes;  			int i = 1;  			int lastSeason = -999;  			foreach (TvDB_Episode ep in eps) {  				if (ep.SeasonNumber != lastSeason)  					dictTvDBSeasons [ep.SeasonNumber] = i;  				lastSeason = ep.SeasonNumber;  				i++;  			}  		}  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  	}  }  
Magic Number,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDictTvDBSeasons,The following statement contains a magic number: try {  	List<TvDB_Episode> tvdbEpisodes = GetTvDBEpisodes (session);  	if (tvdbEpisodes != null) {  		dictTvDBSeasons = new Dictionary<int' int> ();  		// create a dictionary of season numbers and the first episode for that season  		List<TvDB_Episode> eps = tvdbEpisodes;  		int i = 1;  		int lastSeason = -999;  		foreach (TvDB_Episode ep in eps) {  			if (ep.SeasonNumber != lastSeason)  				dictTvDBSeasons [ep.SeasonNumber] = i;  			lastSeason = ep.SeasonNumber;  			i++;  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDictTvDBSeasons,The following statement contains a magic number: if (tvdbEpisodes != null) {  	dictTvDBSeasons = new Dictionary<int' int> ();  	// create a dictionary of season numbers and the first episode for that season  	List<TvDB_Episode> eps = tvdbEpisodes;  	int i = 1;  	int lastSeason = -999;  	foreach (TvDB_Episode ep in eps) {  		if (ep.SeasonNumber != lastSeason)  			dictTvDBSeasons [ep.SeasonNumber] = i;  		lastSeason = ep.SeasonNumber;  		i++;  	}  }  
Magic Number,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDictTvDBSeasonsSpecials,The following statement contains a magic number: if (dictTvDBSeasonsSpecials == null) {  	try {  		List<TvDB_Episode> tvdbEpisodes = GetTvDBEpisodes (session);  		if (tvdbEpisodes != null) {  			dictTvDBSeasonsSpecials = new Dictionary<int' int> ();  			// create a dictionary of season numbers and the first episode for that season  			List<TvDB_Episode> eps = tvdbEpisodes;  			int i = 1;  			int lastSeason = -999;  			foreach (TvDB_Episode ep in eps) {  				if (ep.SeasonNumber > 0)  					continue;  				int thisSeason = 0;  				if (ep.AirsBeforeSeason.HasValue)  					thisSeason = ep.AirsBeforeSeason.Value;  				if (ep.AirsAfterSeason.HasValue)  					thisSeason = ep.AirsAfterSeason.Value;  				if (thisSeason != lastSeason)  					dictTvDBSeasonsSpecials [thisSeason] = i;  				lastSeason = thisSeason;  				i++;  			}  		}  	}  	catch (Exception ex) {  		logger.ErrorException (ex.ToString ()' ex);  	}  }  
Magic Number,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDictTvDBSeasonsSpecials,The following statement contains a magic number: try {  	List<TvDB_Episode> tvdbEpisodes = GetTvDBEpisodes (session);  	if (tvdbEpisodes != null) {  		dictTvDBSeasonsSpecials = new Dictionary<int' int> ();  		// create a dictionary of season numbers and the first episode for that season  		List<TvDB_Episode> eps = tvdbEpisodes;  		int i = 1;  		int lastSeason = -999;  		foreach (TvDB_Episode ep in eps) {  			if (ep.SeasonNumber > 0)  				continue;  			int thisSeason = 0;  			if (ep.AirsBeforeSeason.HasValue)  				thisSeason = ep.AirsBeforeSeason.Value;  			if (ep.AirsAfterSeason.HasValue)  				thisSeason = ep.AirsAfterSeason.Value;  			if (thisSeason != lastSeason)  				dictTvDBSeasonsSpecials [thisSeason] = i;  			lastSeason = thisSeason;  			i++;  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDictTvDBSeasonsSpecials,The following statement contains a magic number: if (tvdbEpisodes != null) {  	dictTvDBSeasonsSpecials = new Dictionary<int' int> ();  	// create a dictionary of season numbers and the first episode for that season  	List<TvDB_Episode> eps = tvdbEpisodes;  	int i = 1;  	int lastSeason = -999;  	foreach (TvDB_Episode ep in eps) {  		if (ep.SeasonNumber > 0)  			continue;  		int thisSeason = 0;  		if (ep.AirsBeforeSeason.HasValue)  			thisSeason = ep.AirsBeforeSeason.Value;  		if (ep.AirsAfterSeason.HasValue)  			thisSeason = ep.AirsAfterSeason.Value;  		if (thisSeason != lastSeason)  			dictTvDBSeasonsSpecials [thisSeason] = i;  		lastSeason = thisSeason;  		i++;  	}  }  
Magic Number,JMMServer.Entities,AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_File.cs,CreateCrossEpisodes,The following statement contains a magic number: if (episodesRAW != null)//Only create relations if the origin of the data if from Raw (AniDB)   {  	CrossRef_File_EpisodeRepository repFileEpisodes = new CrossRef_File_EpisodeRepository ();  	List<CrossRef_File_Episode> fileEps = repFileEpisodes.GetByHash (this.Hash);  	foreach (CrossRef_File_Episode fileEp in fileEps)  		repFileEpisodes.Delete (fileEp.CrossRef_File_EpisodeID);  	char apostrophe = ("'").ToCharArray () [0];  	char epiSplit = ''';  	if (episodesRAW.Contains (apostrophe))  		epiSplit = apostrophe;  	char eppSplit = ''';  	if (episodesPercentRAW.Contains (apostrophe))  		eppSplit = apostrophe;  	string[] epi = episodesRAW.Split (epiSplit);  	string[] epp = episodesPercentRAW.Split (eppSplit);  	for (int x = 0; x < epi.Length; x++) {  		string epis = epi [x].Trim ();  		string epps = epp [x].Trim ();  		if (epis.Length > 0) {  			int epid = 0;  			int.TryParse (epis' out epid);  			int eppp = 100;  			int.TryParse (epps' out eppp);  			if (epid != 0) {  				CrossRef_File_Episode cross = new CrossRef_File_Episode ();  				cross.Hash = Hash;  				cross.CrossRefSource = (int)CrossRefSource.AniDB;  				cross.AnimeID = this.AnimeID;  				cross.EpisodeID = epid;  				cross.Percentage = eppp;  				cross.EpisodeOrder = x + 1;  				cross.FileName = localFileName;  				cross.FileSize = FileSize;  				repFileEpisodes.Save (cross);  			}  		}  	}  }  
Magic Number,JMMServer.Entities,AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_File.cs,CreateCrossEpisodes,The following statement contains a magic number: for (int x = 0; x < epi.Length; x++) {  	string epis = epi [x].Trim ();  	string epps = epp [x].Trim ();  	if (epis.Length > 0) {  		int epid = 0;  		int.TryParse (epis' out epid);  		int eppp = 100;  		int.TryParse (epps' out eppp);  		if (epid != 0) {  			CrossRef_File_Episode cross = new CrossRef_File_Episode ();  			cross.Hash = Hash;  			cross.CrossRefSource = (int)CrossRefSource.AniDB;  			cross.AnimeID = this.AnimeID;  			cross.EpisodeID = epid;  			cross.Percentage = eppp;  			cross.EpisodeOrder = x + 1;  			cross.FileName = localFileName;  			cross.FileSize = FileSize;  			repFileEpisodes.Save (cross);  		}  	}  }  
Magic Number,JMMServer.Entities,AniDB_File,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_File.cs,CreateCrossEpisodes,The following statement contains a magic number: if (epis.Length > 0) {  	int epid = 0;  	int.TryParse (epis' out epid);  	int eppp = 100;  	int.TryParse (epps' out eppp);  	if (epid != 0) {  		CrossRef_File_Episode cross = new CrossRef_File_Episode ();  		cross.Hash = Hash;  		cross.CrossRefSource = (int)CrossRefSource.AniDB;  		cross.AnimeID = this.AnimeID;  		cross.EpisodeID = epid;  		cross.Percentage = eppp;  		cross.EpisodeOrder = x + 1;  		cross.FileName = localFileName;  		cross.FileSize = FileSize;  		repFileEpisodes.Save (cross);  	}  }  
Magic Number,JMMServer.Entities,AniDB_GroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_GroupStatus.cs,HasGroupReleasedEpisode,The following statement contains a magic number: foreach (string range in ranges) {  	string[] subRanges = range.Split ('-');  	if (subRanges.Length == 1)// 1 episode  	 {  		if (int.Parse (subRanges [0]) == episodeNumber)  			return true;  	}  	if (subRanges.Length == 2)// range  	 {  		if (episodeNumber >= int.Parse (subRanges [0]) && episodeNumber <= int.Parse (subRanges [1]))  			return true;  	}  }  
Magic Number,JMMServer.Entities,AniDB_GroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_GroupStatus.cs,HasGroupReleasedEpisode,The following statement contains a magic number: if (subRanges.Length == 2)// range   {  	if (episodeNumber >= int.Parse (subRanges [0]) && episodeNumber <= int.Parse (subRanges [1]))  		return true;  }  
Magic Number,JMMServer.Entities,AniDB_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Vote.cs,ToContract,The following statement contains a magic number: contract.VoteValue = (decimal)this.VoteValue / (decimal)100;  
Magic Number,JMMServer.Entities,CrossRef_File_Episode,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\CrossRef_File_Episode.cs,PopulateManually,The following statement contains a magic number: Percentage = 100;  
Magic Number,JMMServer.Entities,JMMUser,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\JMMUser.cs,AllowedGroup,The following statement contains a magic number: if (grp.AnimeGroupID == 266)  	Console.Write ("");  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: if (watched) {  	// find the total watched percentage  	// eg one file can have a % = 100  	// or if 2 files make up one episodes they will each have a % = 50  	foreach (CrossRef_File_Episode xref in xrefs) {  		// get the episode for this file  		AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xref.EpisodeID);  		if (ep == null)  			continue;  		// get all the files for this episode  		int epPercentWatched = 0;  		foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  			VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  			if (vidUser != null) {  				// if not null means it is watched  				epPercentWatched += filexref.Percentage;  			}  			if (epPercentWatched > 95)  				break;  		}  		if (epPercentWatched > 95) {  			ser = ep.GetAnimeSeries ();  			if (user.IsAniDBUser == 0)  				ep.SaveWatchedStatus (true' userID' watchedDate' updateWatchedDate);  			else {  				// if the user is AniDB user we also want to update any other AniDB  				// users to keep them in sync  				foreach (JMMUser juser in aniDBUsers) {  					if (juser.IsAniDBUser == 1)  						ep.SaveWatchedStatus (true' juser.JMMUserID' watchedDate' updateWatchedDate);  				}  			}  			if (scrobbleTrakt && !string.IsNullOrEmpty (ServerSettings.Trakt_Username) && !string.IsNullOrEmpty (ServerSettings.Trakt_Password)) {  				CommandRequest_TraktShowScrobble cmdScrobble = new CommandRequest_TraktShowScrobble (ep.AnimeEpisodeID);  				cmdScrobble.Save ();  			}  			if (!string.IsNullOrEmpty (ServerSettings.MAL_Username) && !string.IsNullOrEmpty (ServerSettings.MAL_Password)) {  				CommandRequest_MALUpdatedWatchedStatus cmdMAL = new CommandRequest_MALUpdatedWatchedStatus (ser.AniDB_ID);  				cmdMAL.Save ();  			}  		}  	}  }  else {  	// if setting a file to unwatched only set the episode unwatched' if ALL the files are unwatched  	foreach (CrossRef_File_Episode xrefEp in xrefs) {  		AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xrefEp.EpisodeID);  		if (ep == null)  			continue;  		ser = ep.GetAnimeSeries ();  		// get all the files for this episode  		int epPercentWatched = 0;  		foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  			VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  			if (vidUser != null)  				epPercentWatched += filexref.Percentage;  			if (epPercentWatched > 95)  				break;  		}  		if (epPercentWatched < 95) {  			if (user.IsAniDBUser == 0)  				ep.SaveWatchedStatus (false' userID' watchedDate' true);  			else {  				// if the user is AniDB user we also want to update any other AniDB  				// users to keep them in sync  				foreach (JMMUser juser in aniDBUsers) {  					if (juser.IsAniDBUser == 1)  						ep.SaveWatchedStatus (false' juser.JMMUserID' watchedDate' true);  				}  			}  			CommandRequest_TraktShowEpisodeUnseen cmdUnseen = new CommandRequest_TraktShowEpisodeUnseen (ep.AnimeEpisodeID);  			cmdUnseen.Save ();  		}  	}  	if (!string.IsNullOrEmpty (ServerSettings.MAL_Username) && !string.IsNullOrEmpty (ServerSettings.MAL_Password)) {  		CommandRequest_MALUpdatedWatchedStatus cmdMAL = new CommandRequest_MALUpdatedWatchedStatus (ser.AniDB_ID);  		cmdMAL.Save ();  	}  }  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: if (watched) {  	// find the total watched percentage  	// eg one file can have a % = 100  	// or if 2 files make up one episodes they will each have a % = 50  	foreach (CrossRef_File_Episode xref in xrefs) {  		// get the episode for this file  		AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xref.EpisodeID);  		if (ep == null)  			continue;  		// get all the files for this episode  		int epPercentWatched = 0;  		foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  			VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  			if (vidUser != null) {  				// if not null means it is watched  				epPercentWatched += filexref.Percentage;  			}  			if (epPercentWatched > 95)  				break;  		}  		if (epPercentWatched > 95) {  			ser = ep.GetAnimeSeries ();  			if (user.IsAniDBUser == 0)  				ep.SaveWatchedStatus (true' userID' watchedDate' updateWatchedDate);  			else {  				// if the user is AniDB user we also want to update any other AniDB  				// users to keep them in sync  				foreach (JMMUser juser in aniDBUsers) {  					if (juser.IsAniDBUser == 1)  						ep.SaveWatchedStatus (true' juser.JMMUserID' watchedDate' updateWatchedDate);  				}  			}  			if (scrobbleTrakt && !string.IsNullOrEmpty (ServerSettings.Trakt_Username) && !string.IsNullOrEmpty (ServerSettings.Trakt_Password)) {  				CommandRequest_TraktShowScrobble cmdScrobble = new CommandRequest_TraktShowScrobble (ep.AnimeEpisodeID);  				cmdScrobble.Save ();  			}  			if (!string.IsNullOrEmpty (ServerSettings.MAL_Username) && !string.IsNullOrEmpty (ServerSettings.MAL_Password)) {  				CommandRequest_MALUpdatedWatchedStatus cmdMAL = new CommandRequest_MALUpdatedWatchedStatus (ser.AniDB_ID);  				cmdMAL.Save ();  			}  		}  	}  }  else {  	// if setting a file to unwatched only set the episode unwatched' if ALL the files are unwatched  	foreach (CrossRef_File_Episode xrefEp in xrefs) {  		AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xrefEp.EpisodeID);  		if (ep == null)  			continue;  		ser = ep.GetAnimeSeries ();  		// get all the files for this episode  		int epPercentWatched = 0;  		foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  			VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  			if (vidUser != null)  				epPercentWatched += filexref.Percentage;  			if (epPercentWatched > 95)  				break;  		}  		if (epPercentWatched < 95) {  			if (user.IsAniDBUser == 0)  				ep.SaveWatchedStatus (false' userID' watchedDate' true);  			else {  				// if the user is AniDB user we also want to update any other AniDB  				// users to keep them in sync  				foreach (JMMUser juser in aniDBUsers) {  					if (juser.IsAniDBUser == 1)  						ep.SaveWatchedStatus (false' juser.JMMUserID' watchedDate' true);  				}  			}  			CommandRequest_TraktShowEpisodeUnseen cmdUnseen = new CommandRequest_TraktShowEpisodeUnseen (ep.AnimeEpisodeID);  			cmdUnseen.Save ();  		}  	}  	if (!string.IsNullOrEmpty (ServerSettings.MAL_Username) && !string.IsNullOrEmpty (ServerSettings.MAL_Password)) {  		CommandRequest_MALUpdatedWatchedStatus cmdMAL = new CommandRequest_MALUpdatedWatchedStatus (ser.AniDB_ID);  		cmdMAL.Save ();  	}  }  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: if (watched) {  	// find the total watched percentage  	// eg one file can have a % = 100  	// or if 2 files make up one episodes they will each have a % = 50  	foreach (CrossRef_File_Episode xref in xrefs) {  		// get the episode for this file  		AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xref.EpisodeID);  		if (ep == null)  			continue;  		// get all the files for this episode  		int epPercentWatched = 0;  		foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  			VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  			if (vidUser != null) {  				// if not null means it is watched  				epPercentWatched += filexref.Percentage;  			}  			if (epPercentWatched > 95)  				break;  		}  		if (epPercentWatched > 95) {  			ser = ep.GetAnimeSeries ();  			if (user.IsAniDBUser == 0)  				ep.SaveWatchedStatus (true' userID' watchedDate' updateWatchedDate);  			else {  				// if the user is AniDB user we also want to update any other AniDB  				// users to keep them in sync  				foreach (JMMUser juser in aniDBUsers) {  					if (juser.IsAniDBUser == 1)  						ep.SaveWatchedStatus (true' juser.JMMUserID' watchedDate' updateWatchedDate);  				}  			}  			if (scrobbleTrakt && !string.IsNullOrEmpty (ServerSettings.Trakt_Username) && !string.IsNullOrEmpty (ServerSettings.Trakt_Password)) {  				CommandRequest_TraktShowScrobble cmdScrobble = new CommandRequest_TraktShowScrobble (ep.AnimeEpisodeID);  				cmdScrobble.Save ();  			}  			if (!string.IsNullOrEmpty (ServerSettings.MAL_Username) && !string.IsNullOrEmpty (ServerSettings.MAL_Password)) {  				CommandRequest_MALUpdatedWatchedStatus cmdMAL = new CommandRequest_MALUpdatedWatchedStatus (ser.AniDB_ID);  				cmdMAL.Save ();  			}  		}  	}  }  else {  	// if setting a file to unwatched only set the episode unwatched' if ALL the files are unwatched  	foreach (CrossRef_File_Episode xrefEp in xrefs) {  		AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xrefEp.EpisodeID);  		if (ep == null)  			continue;  		ser = ep.GetAnimeSeries ();  		// get all the files for this episode  		int epPercentWatched = 0;  		foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  			VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  			if (vidUser != null)  				epPercentWatched += filexref.Percentage;  			if (epPercentWatched > 95)  				break;  		}  		if (epPercentWatched < 95) {  			if (user.IsAniDBUser == 0)  				ep.SaveWatchedStatus (false' userID' watchedDate' true);  			else {  				// if the user is AniDB user we also want to update any other AniDB  				// users to keep them in sync  				foreach (JMMUser juser in aniDBUsers) {  					if (juser.IsAniDBUser == 1)  						ep.SaveWatchedStatus (false' juser.JMMUserID' watchedDate' true);  				}  			}  			CommandRequest_TraktShowEpisodeUnseen cmdUnseen = new CommandRequest_TraktShowEpisodeUnseen (ep.AnimeEpisodeID);  			cmdUnseen.Save ();  		}  	}  	if (!string.IsNullOrEmpty (ServerSettings.MAL_Username) && !string.IsNullOrEmpty (ServerSettings.MAL_Password)) {  		CommandRequest_MALUpdatedWatchedStatus cmdMAL = new CommandRequest_MALUpdatedWatchedStatus (ser.AniDB_ID);  		cmdMAL.Save ();  	}  }  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: if (watched) {  	// find the total watched percentage  	// eg one file can have a % = 100  	// or if 2 files make up one episodes they will each have a % = 50  	foreach (CrossRef_File_Episode xref in xrefs) {  		// get the episode for this file  		AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xref.EpisodeID);  		if (ep == null)  			continue;  		// get all the files for this episode  		int epPercentWatched = 0;  		foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  			VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  			if (vidUser != null) {  				// if not null means it is watched  				epPercentWatched += filexref.Percentage;  			}  			if (epPercentWatched > 95)  				break;  		}  		if (epPercentWatched > 95) {  			ser = ep.GetAnimeSeries ();  			if (user.IsAniDBUser == 0)  				ep.SaveWatchedStatus (true' userID' watchedDate' updateWatchedDate);  			else {  				// if the user is AniDB user we also want to update any other AniDB  				// users to keep them in sync  				foreach (JMMUser juser in aniDBUsers) {  					if (juser.IsAniDBUser == 1)  						ep.SaveWatchedStatus (true' juser.JMMUserID' watchedDate' updateWatchedDate);  				}  			}  			if (scrobbleTrakt && !string.IsNullOrEmpty (ServerSettings.Trakt_Username) && !string.IsNullOrEmpty (ServerSettings.Trakt_Password)) {  				CommandRequest_TraktShowScrobble cmdScrobble = new CommandRequest_TraktShowScrobble (ep.AnimeEpisodeID);  				cmdScrobble.Save ();  			}  			if (!string.IsNullOrEmpty (ServerSettings.MAL_Username) && !string.IsNullOrEmpty (ServerSettings.MAL_Password)) {  				CommandRequest_MALUpdatedWatchedStatus cmdMAL = new CommandRequest_MALUpdatedWatchedStatus (ser.AniDB_ID);  				cmdMAL.Save ();  			}  		}  	}  }  else {  	// if setting a file to unwatched only set the episode unwatched' if ALL the files are unwatched  	foreach (CrossRef_File_Episode xrefEp in xrefs) {  		AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xrefEp.EpisodeID);  		if (ep == null)  			continue;  		ser = ep.GetAnimeSeries ();  		// get all the files for this episode  		int epPercentWatched = 0;  		foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  			VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  			if (vidUser != null)  				epPercentWatched += filexref.Percentage;  			if (epPercentWatched > 95)  				break;  		}  		if (epPercentWatched < 95) {  			if (user.IsAniDBUser == 0)  				ep.SaveWatchedStatus (false' userID' watchedDate' true);  			else {  				// if the user is AniDB user we also want to update any other AniDB  				// users to keep them in sync  				foreach (JMMUser juser in aniDBUsers) {  					if (juser.IsAniDBUser == 1)  						ep.SaveWatchedStatus (false' juser.JMMUserID' watchedDate' true);  				}  			}  			CommandRequest_TraktShowEpisodeUnseen cmdUnseen = new CommandRequest_TraktShowEpisodeUnseen (ep.AnimeEpisodeID);  			cmdUnseen.Save ();  		}  	}  	if (!string.IsNullOrEmpty (ServerSettings.MAL_Username) && !string.IsNullOrEmpty (ServerSettings.MAL_Password)) {  		CommandRequest_MALUpdatedWatchedStatus cmdMAL = new CommandRequest_MALUpdatedWatchedStatus (ser.AniDB_ID);  		cmdMAL.Save ();  	}  }  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: foreach (CrossRef_File_Episode xref in xrefs) {  	// get the episode for this file  	AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xref.EpisodeID);  	if (ep == null)  		continue;  	// get all the files for this episode  	int epPercentWatched = 0;  	foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  		VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  		if (vidUser != null) {  			// if not null means it is watched  			epPercentWatched += filexref.Percentage;  		}  		if (epPercentWatched > 95)  			break;  	}  	if (epPercentWatched > 95) {  		ser = ep.GetAnimeSeries ();  		if (user.IsAniDBUser == 0)  			ep.SaveWatchedStatus (true' userID' watchedDate' updateWatchedDate);  		else {  			// if the user is AniDB user we also want to update any other AniDB  			// users to keep them in sync  			foreach (JMMUser juser in aniDBUsers) {  				if (juser.IsAniDBUser == 1)  					ep.SaveWatchedStatus (true' juser.JMMUserID' watchedDate' updateWatchedDate);  			}  		}  		if (scrobbleTrakt && !string.IsNullOrEmpty (ServerSettings.Trakt_Username) && !string.IsNullOrEmpty (ServerSettings.Trakt_Password)) {  			CommandRequest_TraktShowScrobble cmdScrobble = new CommandRequest_TraktShowScrobble (ep.AnimeEpisodeID);  			cmdScrobble.Save ();  		}  		if (!string.IsNullOrEmpty (ServerSettings.MAL_Username) && !string.IsNullOrEmpty (ServerSettings.MAL_Password)) {  			CommandRequest_MALUpdatedWatchedStatus cmdMAL = new CommandRequest_MALUpdatedWatchedStatus (ser.AniDB_ID);  			cmdMAL.Save ();  		}  	}  }  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: foreach (CrossRef_File_Episode xref in xrefs) {  	// get the episode for this file  	AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xref.EpisodeID);  	if (ep == null)  		continue;  	// get all the files for this episode  	int epPercentWatched = 0;  	foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  		VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  		if (vidUser != null) {  			// if not null means it is watched  			epPercentWatched += filexref.Percentage;  		}  		if (epPercentWatched > 95)  			break;  	}  	if (epPercentWatched > 95) {  		ser = ep.GetAnimeSeries ();  		if (user.IsAniDBUser == 0)  			ep.SaveWatchedStatus (true' userID' watchedDate' updateWatchedDate);  		else {  			// if the user is AniDB user we also want to update any other AniDB  			// users to keep them in sync  			foreach (JMMUser juser in aniDBUsers) {  				if (juser.IsAniDBUser == 1)  					ep.SaveWatchedStatus (true' juser.JMMUserID' watchedDate' updateWatchedDate);  			}  		}  		if (scrobbleTrakt && !string.IsNullOrEmpty (ServerSettings.Trakt_Username) && !string.IsNullOrEmpty (ServerSettings.Trakt_Password)) {  			CommandRequest_TraktShowScrobble cmdScrobble = new CommandRequest_TraktShowScrobble (ep.AnimeEpisodeID);  			cmdScrobble.Save ();  		}  		if (!string.IsNullOrEmpty (ServerSettings.MAL_Username) && !string.IsNullOrEmpty (ServerSettings.MAL_Password)) {  			CommandRequest_MALUpdatedWatchedStatus cmdMAL = new CommandRequest_MALUpdatedWatchedStatus (ser.AniDB_ID);  			cmdMAL.Save ();  		}  	}  }  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  	VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  	if (vidUser != null) {  		// if not null means it is watched  		epPercentWatched += filexref.Percentage;  	}  	if (epPercentWatched > 95)  		break;  }  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: if (epPercentWatched > 95)  	break;  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: if (epPercentWatched > 95) {  	ser = ep.GetAnimeSeries ();  	if (user.IsAniDBUser == 0)  		ep.SaveWatchedStatus (true' userID' watchedDate' updateWatchedDate);  	else {  		// if the user is AniDB user we also want to update any other AniDB  		// users to keep them in sync  		foreach (JMMUser juser in aniDBUsers) {  			if (juser.IsAniDBUser == 1)  				ep.SaveWatchedStatus (true' juser.JMMUserID' watchedDate' updateWatchedDate);  		}  	}  	if (scrobbleTrakt && !string.IsNullOrEmpty (ServerSettings.Trakt_Username) && !string.IsNullOrEmpty (ServerSettings.Trakt_Password)) {  		CommandRequest_TraktShowScrobble cmdScrobble = new CommandRequest_TraktShowScrobble (ep.AnimeEpisodeID);  		cmdScrobble.Save ();  	}  	if (!string.IsNullOrEmpty (ServerSettings.MAL_Username) && !string.IsNullOrEmpty (ServerSettings.MAL_Password)) {  		CommandRequest_MALUpdatedWatchedStatus cmdMAL = new CommandRequest_MALUpdatedWatchedStatus (ser.AniDB_ID);  		cmdMAL.Save ();  	}  }  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: foreach (CrossRef_File_Episode xrefEp in xrefs) {  	AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xrefEp.EpisodeID);  	if (ep == null)  		continue;  	ser = ep.GetAnimeSeries ();  	// get all the files for this episode  	int epPercentWatched = 0;  	foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  		VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  		if (vidUser != null)  			epPercentWatched += filexref.Percentage;  		if (epPercentWatched > 95)  			break;  	}  	if (epPercentWatched < 95) {  		if (user.IsAniDBUser == 0)  			ep.SaveWatchedStatus (false' userID' watchedDate' true);  		else {  			// if the user is AniDB user we also want to update any other AniDB  			// users to keep them in sync  			foreach (JMMUser juser in aniDBUsers) {  				if (juser.IsAniDBUser == 1)  					ep.SaveWatchedStatus (false' juser.JMMUserID' watchedDate' true);  			}  		}  		CommandRequest_TraktShowEpisodeUnseen cmdUnseen = new CommandRequest_TraktShowEpisodeUnseen (ep.AnimeEpisodeID);  		cmdUnseen.Save ();  	}  }  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: foreach (CrossRef_File_Episode xrefEp in xrefs) {  	AnimeEpisode ep = repEpisodes.GetByAniDBEpisodeID (xrefEp.EpisodeID);  	if (ep == null)  		continue;  	ser = ep.GetAnimeSeries ();  	// get all the files for this episode  	int epPercentWatched = 0;  	foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  		VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  		if (vidUser != null)  			epPercentWatched += filexref.Percentage;  		if (epPercentWatched > 95)  			break;  	}  	if (epPercentWatched < 95) {  		if (user.IsAniDBUser == 0)  			ep.SaveWatchedStatus (false' userID' watchedDate' true);  		else {  			// if the user is AniDB user we also want to update any other AniDB  			// users to keep them in sync  			foreach (JMMUser juser in aniDBUsers) {  				if (juser.IsAniDBUser == 1)  					ep.SaveWatchedStatus (false' juser.JMMUserID' watchedDate' true);  			}  		}  		CommandRequest_TraktShowEpisodeUnseen cmdUnseen = new CommandRequest_TraktShowEpisodeUnseen (ep.AnimeEpisodeID);  		cmdUnseen.Save ();  	}  }  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: foreach (CrossRef_File_Episode filexref in ep.FileCrossRefs) {  	VideoLocal_User vidUser = filexref.GetVideoLocalUserRecord (userID);  	if (vidUser != null)  		epPercentWatched += filexref.Percentage;  	if (epPercentWatched > 95)  		break;  }  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: if (epPercentWatched > 95)  	break;  
Magic Number,JMMServer.Entities,VideoLocal,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: if (epPercentWatched < 95) {  	if (user.IsAniDBUser == 0)  		ep.SaveWatchedStatus (false' userID' watchedDate' true);  	else {  		// if the user is AniDB user we also want to update any other AniDB  		// users to keep them in sync  		foreach (JMMUser juser in aniDBUsers) {  			if (juser.IsAniDBUser == 1)  				ep.SaveWatchedStatus (false' juser.JMMUserID' watchedDate' true);  		}  	}  	CommandRequest_TraktShowEpisodeUnseen cmdUnseen = new CommandRequest_TraktShowEpisodeUnseen (ep.AnimeEpisodeID);  	cmdUnseen.Save ();  }  
Magic Number,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,Process,The following statement contains a magic number: try {  	bool fname = false;  	string[] dta = obj.Request.RawUrl.Split (new char[] {  		'/'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (dta.Length < 2)  		return;  	string cmd = dta [0].ToLower ();  	string arg = dta [1];  	string fullname;  	if (cmd == "videolocal") {  		int sid = 0;  		int.TryParse (arg' out sid);  		if (sid == 0) {  			obj.Response.StatusCode = (int)HttpStatusCode.BadRequest;  			obj.Response.StatusDescription = "Stream Id missing.";  			return;  		}  		VideoLocalRepository rep = new VideoLocalRepository ();  		VideoLocal loc = rep.GetByID (sid);  		if (loc == null) {  			obj.Response.StatusCode = (int)HttpStatusCode.NotFound;  			obj.Response.StatusDescription = "Stream Id not found.";  			return;  		}  		fullname = loc.FullServerPath;  	}  	else if (cmd == "file") {  		fullname = Base64DecodeUrl (arg);  	}  	else {  		obj.Response.StatusCode = (int)HttpStatusCode.BadRequest;  		obj.Response.StatusDescription = "Not know command";  		return;  	}  	bool range = false;  	try {  		if (!File.Exists (fullname)) {  			obj.Response.StatusCode = (int)HttpStatusCode.NotFound;  			obj.Response.StatusDescription = "File '" + fullname + "' not found.";  			return;  		}  	}  	catch (Exception) {  		obj.Response.StatusCode = (int)HttpStatusCode.InternalServerError;  		obj.Response.StatusDescription = "Unable to access File '" + fullname + "'.";  		return;  	}  	obj.Response.ContentType = GetMime (fullname);  	obj.Response.AddHeader ("Accept-Ranges"' "bytes");  	obj.Response.AddHeader ("X-Plex-Protocol"' "1.0");  	if (obj.Request.HttpMethod == "OPTIONS") {  		obj.Response.AddHeader ("Access-Control-Allow-Methods"' "POST' GET' OPTIONS' DELETE' PUT' HEAD");  		obj.Response.AddHeader ("Access-Control-Max-Age"' "1209600");  		obj.Response.AddHeader ("Access-Control-Allow-Headers"' "accept' x-plex-token' x-plex-client-identifier' x-plex-username' x-plex-product' x-plex-device' x-plex-platform' x-plex-platform-version' x-plex-version' x-plex-device-name");  		obj.Response.AddHeader ("Cache-Control"' "no-cache");  		obj.Response.ContentType = "text/plain";  		return;  	}  	string rangevalue = null;  	if (obj.Request.Headers.AllKeys.Contains ("Range"))  		rangevalue = obj.Request.Headers ["Range"].Replace ("bytes="' string.Empty).Trim ();  	if (obj.Request.Headers.AllKeys.Contains ("range"))  		rangevalue = obj.Request.Headers ["range"].Replace ("bytes="' string.Empty).Trim ();  	if (obj.Request.HttpMethod != "HEAD") {  		org = new FileStream (fullname' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);  		long totalsize = org.Length;  		long start = 0;  		long end = 0;  		if (!string.IsNullOrEmpty (rangevalue)) {  			range = true;  			string[] split = rangevalue.Split ('-');  			if (split.Length == 2) {  				if (string.IsNullOrEmpty (split [0]) && !string.IsNullOrEmpty (split [1])) {  					long e = long.Parse (split [1]);  					start = totalsize - e;  					end = totalsize - 1;  				}  				else if (!string.IsNullOrEmpty (split [0]) && string.IsNullOrEmpty (split [1])) {  					start = long.Parse (split [0]);  					end = totalsize - 1;  				}  				else if (!string.IsNullOrEmpty (split [0]) && !string.IsNullOrEmpty (split [1])) {  					start = long.Parse (split [0]);  					end = long.Parse (split [1]);  					if (start > totalsize - 1)  						start = totalsize - 1;  					if (end > totalsize - 1)  						end = totalsize - 1;  				}  				else {  					start = 0;  					end = totalsize - 1;  				}  			}  		}  		if (range) {  			obj.Response.StatusCode = (int)HttpStatusCode.PartialContent;  			obj.Response.AddHeader ("Content-Range"' "bytes " + start + "-" + end + "/" + totalsize);  			org = new SubStream (org' start' end - start + 1);  			obj.Response.ContentLength64 = end - start + 1;  		}  		else {  			obj.Response.ContentLength64 = totalsize;  			obj.Response.StatusCode = (int)HttpStatusCode.OK;  		}  		obj.Response.SendChunked = false;  		org.CopyTo (obj.Response.OutputStream);  		obj.Response.OutputStream.Close ();  		org.Close ();  	}  	else {  		obj.Response.SendChunked = false;  		obj.Response.StatusCode = (int)HttpStatusCode.OK;  		obj.Response.ContentLength64 = new FileInfo (fullname).Length;  		obj.Response.KeepAlive = false;  		obj.Response.OutputStream.Close ();  	}  }  catch (HttpListenerException e) {  }  catch (Exception e) {  	logger.Error (e.ToString);  }  finally {  	if (org != null)  		org.Close ();  	if ((obj != null) && (obj.Response != null) && (obj.Response.OutputStream != null))  		obj.Response.OutputStream.Close ();  }  
Magic Number,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,Process,The following statement contains a magic number: try {  	bool fname = false;  	string[] dta = obj.Request.RawUrl.Split (new char[] {  		'/'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (dta.Length < 2)  		return;  	string cmd = dta [0].ToLower ();  	string arg = dta [1];  	string fullname;  	if (cmd == "videolocal") {  		int sid = 0;  		int.TryParse (arg' out sid);  		if (sid == 0) {  			obj.Response.StatusCode = (int)HttpStatusCode.BadRequest;  			obj.Response.StatusDescription = "Stream Id missing.";  			return;  		}  		VideoLocalRepository rep = new VideoLocalRepository ();  		VideoLocal loc = rep.GetByID (sid);  		if (loc == null) {  			obj.Response.StatusCode = (int)HttpStatusCode.NotFound;  			obj.Response.StatusDescription = "Stream Id not found.";  			return;  		}  		fullname = loc.FullServerPath;  	}  	else if (cmd == "file") {  		fullname = Base64DecodeUrl (arg);  	}  	else {  		obj.Response.StatusCode = (int)HttpStatusCode.BadRequest;  		obj.Response.StatusDescription = "Not know command";  		return;  	}  	bool range = false;  	try {  		if (!File.Exists (fullname)) {  			obj.Response.StatusCode = (int)HttpStatusCode.NotFound;  			obj.Response.StatusDescription = "File '" + fullname + "' not found.";  			return;  		}  	}  	catch (Exception) {  		obj.Response.StatusCode = (int)HttpStatusCode.InternalServerError;  		obj.Response.StatusDescription = "Unable to access File '" + fullname + "'.";  		return;  	}  	obj.Response.ContentType = GetMime (fullname);  	obj.Response.AddHeader ("Accept-Ranges"' "bytes");  	obj.Response.AddHeader ("X-Plex-Protocol"' "1.0");  	if (obj.Request.HttpMethod == "OPTIONS") {  		obj.Response.AddHeader ("Access-Control-Allow-Methods"' "POST' GET' OPTIONS' DELETE' PUT' HEAD");  		obj.Response.AddHeader ("Access-Control-Max-Age"' "1209600");  		obj.Response.AddHeader ("Access-Control-Allow-Headers"' "accept' x-plex-token' x-plex-client-identifier' x-plex-username' x-plex-product' x-plex-device' x-plex-platform' x-plex-platform-version' x-plex-version' x-plex-device-name");  		obj.Response.AddHeader ("Cache-Control"' "no-cache");  		obj.Response.ContentType = "text/plain";  		return;  	}  	string rangevalue = null;  	if (obj.Request.Headers.AllKeys.Contains ("Range"))  		rangevalue = obj.Request.Headers ["Range"].Replace ("bytes="' string.Empty).Trim ();  	if (obj.Request.Headers.AllKeys.Contains ("range"))  		rangevalue = obj.Request.Headers ["range"].Replace ("bytes="' string.Empty).Trim ();  	if (obj.Request.HttpMethod != "HEAD") {  		org = new FileStream (fullname' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);  		long totalsize = org.Length;  		long start = 0;  		long end = 0;  		if (!string.IsNullOrEmpty (rangevalue)) {  			range = true;  			string[] split = rangevalue.Split ('-');  			if (split.Length == 2) {  				if (string.IsNullOrEmpty (split [0]) && !string.IsNullOrEmpty (split [1])) {  					long e = long.Parse (split [1]);  					start = totalsize - e;  					end = totalsize - 1;  				}  				else if (!string.IsNullOrEmpty (split [0]) && string.IsNullOrEmpty (split [1])) {  					start = long.Parse (split [0]);  					end = totalsize - 1;  				}  				else if (!string.IsNullOrEmpty (split [0]) && !string.IsNullOrEmpty (split [1])) {  					start = long.Parse (split [0]);  					end = long.Parse (split [1]);  					if (start > totalsize - 1)  						start = totalsize - 1;  					if (end > totalsize - 1)  						end = totalsize - 1;  				}  				else {  					start = 0;  					end = totalsize - 1;  				}  			}  		}  		if (range) {  			obj.Response.StatusCode = (int)HttpStatusCode.PartialContent;  			obj.Response.AddHeader ("Content-Range"' "bytes " + start + "-" + end + "/" + totalsize);  			org = new SubStream (org' start' end - start + 1);  			obj.Response.ContentLength64 = end - start + 1;  		}  		else {  			obj.Response.ContentLength64 = totalsize;  			obj.Response.StatusCode = (int)HttpStatusCode.OK;  		}  		obj.Response.SendChunked = false;  		org.CopyTo (obj.Response.OutputStream);  		obj.Response.OutputStream.Close ();  		org.Close ();  	}  	else {  		obj.Response.SendChunked = false;  		obj.Response.StatusCode = (int)HttpStatusCode.OK;  		obj.Response.ContentLength64 = new FileInfo (fullname).Length;  		obj.Response.KeepAlive = false;  		obj.Response.OutputStream.Close ();  	}  }  catch (HttpListenerException e) {  }  catch (Exception e) {  	logger.Error (e.ToString);  }  finally {  	if (org != null)  		org.Close ();  	if ((obj != null) && (obj.Response != null) && (obj.Response.OutputStream != null))  		obj.Response.OutputStream.Close ();  }  
Magic Number,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,Process,The following statement contains a magic number: if (dta.Length < 2)  	return;  
Magic Number,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,Process,The following statement contains a magic number: if (obj.Request.HttpMethod != "HEAD") {  	org = new FileStream (fullname' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);  	long totalsize = org.Length;  	long start = 0;  	long end = 0;  	if (!string.IsNullOrEmpty (rangevalue)) {  		range = true;  		string[] split = rangevalue.Split ('-');  		if (split.Length == 2) {  			if (string.IsNullOrEmpty (split [0]) && !string.IsNullOrEmpty (split [1])) {  				long e = long.Parse (split [1]);  				start = totalsize - e;  				end = totalsize - 1;  			}  			else if (!string.IsNullOrEmpty (split [0]) && string.IsNullOrEmpty (split [1])) {  				start = long.Parse (split [0]);  				end = totalsize - 1;  			}  			else if (!string.IsNullOrEmpty (split [0]) && !string.IsNullOrEmpty (split [1])) {  				start = long.Parse (split [0]);  				end = long.Parse (split [1]);  				if (start > totalsize - 1)  					start = totalsize - 1;  				if (end > totalsize - 1)  					end = totalsize - 1;  			}  			else {  				start = 0;  				end = totalsize - 1;  			}  		}  	}  	if (range) {  		obj.Response.StatusCode = (int)HttpStatusCode.PartialContent;  		obj.Response.AddHeader ("Content-Range"' "bytes " + start + "-" + end + "/" + totalsize);  		org = new SubStream (org' start' end - start + 1);  		obj.Response.ContentLength64 = end - start + 1;  	}  	else {  		obj.Response.ContentLength64 = totalsize;  		obj.Response.StatusCode = (int)HttpStatusCode.OK;  	}  	obj.Response.SendChunked = false;  	org.CopyTo (obj.Response.OutputStream);  	obj.Response.OutputStream.Close ();  	org.Close ();  }  else {  	obj.Response.SendChunked = false;  	obj.Response.StatusCode = (int)HttpStatusCode.OK;  	obj.Response.ContentLength64 = new FileInfo (fullname).Length;  	obj.Response.KeepAlive = false;  	obj.Response.OutputStream.Close ();  }  
Magic Number,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,Process,The following statement contains a magic number: if (!string.IsNullOrEmpty (rangevalue)) {  	range = true;  	string[] split = rangevalue.Split ('-');  	if (split.Length == 2) {  		if (string.IsNullOrEmpty (split [0]) && !string.IsNullOrEmpty (split [1])) {  			long e = long.Parse (split [1]);  			start = totalsize - e;  			end = totalsize - 1;  		}  		else if (!string.IsNullOrEmpty (split [0]) && string.IsNullOrEmpty (split [1])) {  			start = long.Parse (split [0]);  			end = totalsize - 1;  		}  		else if (!string.IsNullOrEmpty (split [0]) && !string.IsNullOrEmpty (split [1])) {  			start = long.Parse (split [0]);  			end = long.Parse (split [1]);  			if (start > totalsize - 1)  				start = totalsize - 1;  			if (end > totalsize - 1)  				end = totalsize - 1;  		}  		else {  			start = 0;  			end = totalsize - 1;  		}  	}  }  
Magic Number,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,Process,The following statement contains a magic number: if (split.Length == 2) {  	if (string.IsNullOrEmpty (split [0]) && !string.IsNullOrEmpty (split [1])) {  		long e = long.Parse (split [1]);  		start = totalsize - e;  		end = totalsize - 1;  	}  	else if (!string.IsNullOrEmpty (split [0]) && string.IsNullOrEmpty (split [1])) {  		start = long.Parse (split [0]);  		end = totalsize - 1;  	}  	else if (!string.IsNullOrEmpty (split [0]) && !string.IsNullOrEmpty (split [1])) {  		start = long.Parse (split [0]);  		end = long.Parse (split [1]);  		if (start > totalsize - 1)  			start = totalsize - 1;  		if (end > totalsize - 1)  			end = totalsize - 1;  	}  	else {  		start = 0;  		end = totalsize - 1;  	}  }  
Magic Number,JMMServer.ImageDownload,ImageUtils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\ImageDownload\ImageUtils.cs,GetAniDBCharacterImagePath,The following statement contains a magic number: if (sid.Length == 1)  	subFolder = sid;  else  	subFolder = sid.Substring (0' 2);  
Magic Number,JMMServer.ImageDownload,ImageUtils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\ImageDownload\ImageUtils.cs,GetAniDBCharacterImagePath,The following statement contains a magic number: subFolder = sid.Substring (0' 2);  
Magic Number,JMMServer.ImageDownload,ImageUtils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\ImageDownload\ImageUtils.cs,GetAniDBCreatorImagePath,The following statement contains a magic number: if (sid.Length == 1)  	subFolder = sid;  else  	subFolder = sid.Substring (0' 2);  
Magic Number,JMMServer.ImageDownload,ImageUtils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\ImageDownload\ImageUtils.cs,GetAniDBCreatorImagePath,The following statement contains a magic number: subFolder = sid.Substring (0' 2);  
Magic Number,JMMServer.ImageDownload,ImageUtils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\ImageDownload\ImageUtils.cs,GetAniDBImagePath,The following statement contains a magic number: if (sid.Length == 1)  	subFolder = sid;  else  	subFolder = sid.Substring (0' 2);  
Magic Number,JMMServer.ImageDownload,ImageUtils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\ImageDownload\ImageUtils.cs,GetAniDBImagePath,The following statement contains a magic number: subFolder = sid.Substring (0' 2);  
Magic Number,JMMServer.Providers.Azure,AzureWebAPI,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\Azure\AzureWebAPI.cs,Get_AnimeXML,The following statement contains a magic number: if (content.Length > 100)  	content = content.Substring (0' 100);  
Magic Number,JMMServer.Providers.Azure,AzureWebAPI,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\Azure\AzureWebAPI.cs,Get_AnimeXML,The following statement contains a magic number: if (content.Length > 100)  	content = content.Substring (0' 100);  
Magic Number,JMMServer.Providers.Azure,AzureWebAPI,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\Azure\AzureWebAPI.cs,Get_AnimeXML,The following statement contains a magic number: content = content.Substring (0' 100);  
Magic Number,JMMServer.Providers.Azure,AzureWebAPI,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\Azure\AzureWebAPI.cs,GetDataJson,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (uri);  	webReq.Timeout = 60000;  	// 60 seconds  	webReq.Proxy = null;  	webReq.Method = "GET";  	webReq.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	webReq.ContentType = "application/json; charset=UTF-8";  	// content type  	webReq.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	Encoding encoding = Encoding.UTF8;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string output = Reader.ReadToEnd ();  	output = HttpUtility.HtmlDecode (output);  	WebResponse.Close ();  	responseStream.Close ();  	return output;  }  catch (WebException webEx) {  	logger.Error ("Error(1) in AzureWebAPI.GetData: {0}"' webEx);  }  catch (Exception ex) {  	logger.ErrorException ("Error(2) in AzureWebAPI.GetData: {0}"' ex);  }  
Magic Number,JMMServer.Providers.Azure,AzureWebAPI,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\Azure\AzureWebAPI.cs,GetDataJson,The following statement contains a magic number: webReq.Timeout = 60000;  
Magic Number,JMMServer.Providers.Azure,AzureWebAPI,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\Azure\AzureWebAPI.cs,DeleteDataJson,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (uri);  	webReq.Timeout = 60000;  	// 60 seconds  	webReq.Proxy = null;  	webReq.Method = "DELETE";  	webReq.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	webReq.ContentType = "application/json; charset=UTF-8";  	// content type  	webReq.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	Encoding encoding = Encoding.UTF8;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string output = Reader.ReadToEnd ();  	output = HttpUtility.HtmlDecode (output);  	WebResponse.Close ();  	responseStream.Close ();  	return output;  }  catch (WebException webEx) {  	logger.Error ("Error(1) in AzureWebAPI.GetData: {0}"' webEx);  }  catch (Exception ex) {  	logger.ErrorException ("Error(2) in AzureWebAPI.GetData: {0}"' ex);  }  
Magic Number,JMMServer.Providers.Azure,AzureWebAPI,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\Azure\AzureWebAPI.cs,DeleteDataJson,The following statement contains a magic number: webReq.Timeout = 60000;  
Magic Number,JMMServer.Providers.Azure,AzureWebAPI,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\Azure\AzureWebAPI.cs,GetDataXML,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (uri);  	webReq.Timeout = 60000;  	// 60 seconds  	webReq.Proxy = null;  	webReq.Method = "GET";  	webReq.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	webReq.ContentType = "text/xml";  	// content type  	webReq.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	String enco = WebResponse.CharacterSet;  	Encoding encoding = null;  	if (!String.IsNullOrEmpty (enco))  		encoding = Encoding.GetEncoding (WebResponse.CharacterSet);  	if (encoding == null)  		encoding = Encoding.Default;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string output = Reader.ReadToEnd ();  	output = HttpUtility.HtmlDecode (output);  	WebResponse.Close ();  	responseStream.Close ();  	return output;  }  catch (WebException webEx) {  	logger.Error ("Error(1) in AzureWebAPI.GetData: {0}"' webEx);  }  catch (Exception ex) {  	logger.ErrorException ("Error(2) in AzureWebAPI.GetData: {0}"' ex);  }  
Magic Number,JMMServer.Providers.Azure,AzureWebAPI,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\Azure\AzureWebAPI.cs,GetDataXML,The following statement contains a magic number: webReq.Timeout = 60000;  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,SendMALAuthenticatedRequest,The following statement contains a magic number: webReq.Timeout = 30 * 1000;  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,SendMALAuthenticatedRequest,The following statement contains a magic number: webReq.Timeout = 30 * 1000;  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,VerifyCredentials,The following statement contains a magic number: try {  	string username = ServerSettings.MAL_Username;  	string password = ServerSettings.MAL_Password;  	string url = "http://myanimelist.net/api/account/verify_credentials.xml";  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 30 * 1000;  	webReq.Credentials = new NetworkCredential (username' password);  	webReq.PreAuthenticate = true;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	String enco = WebResponse.CharacterSet;  	Encoding encoding = null;  	if (!String.IsNullOrEmpty (enco))  		encoding = Encoding.GetEncoding (WebResponse.CharacterSet);  	if (encoding == null)  		encoding = Encoding.Default;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string outputXML = Reader.ReadToEnd ();  	WebResponse.Close ();  	responseStream.Close ();  	if (outputXML.Trim ().Length == 0)  		return false;  	outputXML = ReplaceEntityNamesByCharacter (outputXML);  	XmlSerializer serializer = new XmlSerializer (typeof(user));  	XmlDocument docVerifyCredentials = new XmlDocument ();  	docVerifyCredentials.LoadXml (outputXML);  	XmlNodeReader reader = new XmlNodeReader (docVerifyCredentials.DocumentElement);  	object obj = serializer.Deserialize (reader);  	user _user = (user)obj;  	if (_user.username.ToUpper () == username.ToUpper ())  		return true;  	return false;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return false;  }  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,VerifyCredentials,The following statement contains a magic number: try {  	string username = ServerSettings.MAL_Username;  	string password = ServerSettings.MAL_Password;  	string url = "http://myanimelist.net/api/account/verify_credentials.xml";  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 30 * 1000;  	webReq.Credentials = new NetworkCredential (username' password);  	webReq.PreAuthenticate = true;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	String enco = WebResponse.CharacterSet;  	Encoding encoding = null;  	if (!String.IsNullOrEmpty (enco))  		encoding = Encoding.GetEncoding (WebResponse.CharacterSet);  	if (encoding == null)  		encoding = Encoding.Default;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string outputXML = Reader.ReadToEnd ();  	WebResponse.Close ();  	responseStream.Close ();  	if (outputXML.Trim ().Length == 0)  		return false;  	outputXML = ReplaceEntityNamesByCharacter (outputXML);  	XmlSerializer serializer = new XmlSerializer (typeof(user));  	XmlDocument docVerifyCredentials = new XmlDocument ();  	docVerifyCredentials.LoadXml (outputXML);  	XmlNodeReader reader = new XmlNodeReader (docVerifyCredentials.DocumentElement);  	object obj = serializer.Deserialize (reader);  	user _user = (user)obj;  	if (_user.username.ToUpper () == username.ToUpper ())  		return true;  	return false;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return false;  }  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,VerifyCredentials,The following statement contains a magic number: webReq.Timeout = 30 * 1000;  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,VerifyCredentials,The following statement contains a magic number: webReq.Timeout = 30 * 1000;  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (ServerSettings.MAL_Username) || string.IsNullOrEmpty (ServerSettings.MAL_Password))  		return;  	// Populate MAL animelist hashtable if isNeverDecreaseWatched set  	Hashtable animeListHashtable = new Hashtable ();  	if (ServerSettings.MAL_NeverDecreaseWatchedNums)//if set' check watched number before update: take some time' as user anime list must be loaded  	 {  		myanimelist malAnimeList = GetMALAnimeList ();  		if (malAnimeList != null && malAnimeList.anime != null) {  			for (int i = 0; i < malAnimeList.anime.Length; i++) {  				animeListHashtable.Add (malAnimeList.anime [i].series_animedb_id' malAnimeList.anime [i]);  			}  		}  	}  	// look for MAL Links  	List<CrossRef_AniDB_MAL> crossRefs = ser.GetAnime ().GetCrossRefMAL ();  	if (crossRefs == null || crossRefs.Count == 0) {  		logger.Warn ("Could not find MAL link for : {0} ({1})"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID);  		return;  	}  	AnimeEpisodeRepository repEps = new AnimeEpisodeRepository ();  	AniDB_FileRepository repFiles = new AniDB_FileRepository ();  	List<AnimeEpisode> eps = ser.GetAnimeEpisodes ();  	// find the anidb user  	JMMUserRepository repUsers = new JMMUserRepository ();  	List<JMMUser> aniDBUsers = repUsers.GetAniDBUsers ();  	if (aniDBUsers.Count == 0)  		return;  	JMMUser user = aniDBUsers [0];  	int score = 0;  	if (ser.GetAnime ().UserVote != null)  		score = (int)(ser.GetAnime ().UserVote.VoteValue / 100);  	// e.g.  	// AniDB - Code Geass R2  	// MAL Equivalent = AniDB Normal Eps 1 - 25 / Code Geass: Hangyaku no Lelouch R2 / hxxp://myanimelist.net/anime/2904/Code_Geass:_Hangyaku_no_Lelouch_R2  	// MAL Equivalent = AniDB Special Eps 1 - 9 / Code Geass: Hangyaku no Lelouch R2 Picture Drama / hxxp://myanimelist.net/anime/5163/Code_Geass:_Hangyaku_no_Lelouch_R2_Picture_Drama  	// MAL Equivalent = AniDB Special Eps 9 - 18 / Code Geass: Hangyaku no Lelouch R2: Flash Specials / hxxp://myanimelist.net/anime/9591/Code_Geass:_Hangyaku_no_Lelouch_R2:_Flash_Specials  	// MAL Equivalent = AniDB Special Eps 20 / Code Geass: Hangyaku no Lelouch - Kiseki no Birthday Picture Drama / hxxp://myanimelist.net/anime/8728/Code_Geass:_Hangyaku_no_Lelouch_-_Kiseki_no_Birthday_Picture_Drama  	foreach (CrossRef_AniDB_MAL xref in crossRefs) {  		// look for the right MAL id  		int malID = -1;  		int epNumber = -1;  		int totalEpCount = -1;  		List<string> fanSubGroups = new List<string> ();  		// for each cross ref (which is a series on MAL) we need to update the data  		// so find all the episodes which apply to this cross ref  		int lastWatchedEpNumber = 0;  		int downloadedEps = 0;  		foreach (AnimeEpisode ep in eps) {  			int epNum = ep.AniDB_Episode.EpisodeNumber;  			if (xref.StartEpisodeType == (int)ep.EpisodeTypeEnum && epNum >= xref.StartEpisodeNumber && epNum <= GetUpperEpisodeLimit (crossRefs' xref)) {  				malID = xref.MALID;  				epNumber = epNum - xref.StartEpisodeNumber + 1;  				// find the total episode count  				if (totalEpCount < 0) {  					if (ep.EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  						totalEpCount = ser.GetAnime ().EpisodeCountNormal;  					if (ep.EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  						totalEpCount = ser.GetAnime ().EpisodeCountSpecial;  					totalEpCount = totalEpCount - xref.StartEpisodeNumber + 1;  				}  				// any episodes here belong to the MAL series  				// find the latest watched episod enumber  				AnimeEpisode_User usrRecord = ep.GetUserRecord (user.JMMUserID);  				if (usrRecord != null && usrRecord.WatchedDate.HasValue && epNum > lastWatchedEpNumber) {  					lastWatchedEpNumber = epNum;  				}  				List<Contract_VideoDetailed> contracts = ep.GetVideoDetailedContracts (user.JMMUserID);  				// find the latest episode number in the collection  				if (contracts.Count > 0)  					downloadedEps++;  				foreach (Contract_VideoDetailed contract in contracts) {  					if (!string.IsNullOrEmpty (contract.AniDB_Anime_GroupNameShort) && !fanSubGroups.Contains (contract.AniDB_Anime_GroupNameShort))  						fanSubGroups.Add (contract.AniDB_Anime_GroupNameShort);  				}  			}  		}  		string fanSubs = "";  		foreach (string fgrp in fanSubGroups) {  			if (!string.IsNullOrEmpty (fanSubs))  				fanSubs += "'";  			fanSubs += fgrp;  		}  		// determine status  		int status = 1;  		//watching  		if (animeListHashtable.ContainsKey (malID)) {  			myanimelistAnime animeInList = (myanimelistAnime)animeListHashtable [malID];  			status = animeInList.my_status;  		}  		// over-ride is user has watched an episode  		// don't override on hold (3) or dropped (4) but do override plan to watch (6)  		if (status == 6 && lastWatchedEpNumber > 0)  			status = 1;  		//watching  		if (lastWatchedEpNumber == totalEpCount)  			status = 2;  		//completed  		if (lastWatchedEpNumber > totalEpCount) {  			logger.Error ("updateMAL' episode number > matching anime episode total : {0} ({1}) / {2}"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID' epNumber);  			continue;  		}  		if (malID <= 0 || totalEpCount <= 0) {  			logger.Warn ("Could not find MAL link for : {0} ({1})"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID);  			continue;  		}  		else {  			bool res = UpdateAnime (malID' lastWatchedEpNumber' status' score' downloadedEps' fanSubs);  			string confirmationMessage = string.Format ("MAL successfully updated' mal id: {0}' ep: {1}' score: {2}"' malID' lastWatchedEpNumber' score);  			if (res)  				logger.Trace (confirmationMessage);  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (ServerSettings.MAL_Username) || string.IsNullOrEmpty (ServerSettings.MAL_Password))  		return;  	// Populate MAL animelist hashtable if isNeverDecreaseWatched set  	Hashtable animeListHashtable = new Hashtable ();  	if (ServerSettings.MAL_NeverDecreaseWatchedNums)//if set' check watched number before update: take some time' as user anime list must be loaded  	 {  		myanimelist malAnimeList = GetMALAnimeList ();  		if (malAnimeList != null && malAnimeList.anime != null) {  			for (int i = 0; i < malAnimeList.anime.Length; i++) {  				animeListHashtable.Add (malAnimeList.anime [i].series_animedb_id' malAnimeList.anime [i]);  			}  		}  	}  	// look for MAL Links  	List<CrossRef_AniDB_MAL> crossRefs = ser.GetAnime ().GetCrossRefMAL ();  	if (crossRefs == null || crossRefs.Count == 0) {  		logger.Warn ("Could not find MAL link for : {0} ({1})"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID);  		return;  	}  	AnimeEpisodeRepository repEps = new AnimeEpisodeRepository ();  	AniDB_FileRepository repFiles = new AniDB_FileRepository ();  	List<AnimeEpisode> eps = ser.GetAnimeEpisodes ();  	// find the anidb user  	JMMUserRepository repUsers = new JMMUserRepository ();  	List<JMMUser> aniDBUsers = repUsers.GetAniDBUsers ();  	if (aniDBUsers.Count == 0)  		return;  	JMMUser user = aniDBUsers [0];  	int score = 0;  	if (ser.GetAnime ().UserVote != null)  		score = (int)(ser.GetAnime ().UserVote.VoteValue / 100);  	// e.g.  	// AniDB - Code Geass R2  	// MAL Equivalent = AniDB Normal Eps 1 - 25 / Code Geass: Hangyaku no Lelouch R2 / hxxp://myanimelist.net/anime/2904/Code_Geass:_Hangyaku_no_Lelouch_R2  	// MAL Equivalent = AniDB Special Eps 1 - 9 / Code Geass: Hangyaku no Lelouch R2 Picture Drama / hxxp://myanimelist.net/anime/5163/Code_Geass:_Hangyaku_no_Lelouch_R2_Picture_Drama  	// MAL Equivalent = AniDB Special Eps 9 - 18 / Code Geass: Hangyaku no Lelouch R2: Flash Specials / hxxp://myanimelist.net/anime/9591/Code_Geass:_Hangyaku_no_Lelouch_R2:_Flash_Specials  	// MAL Equivalent = AniDB Special Eps 20 / Code Geass: Hangyaku no Lelouch - Kiseki no Birthday Picture Drama / hxxp://myanimelist.net/anime/8728/Code_Geass:_Hangyaku_no_Lelouch_-_Kiseki_no_Birthday_Picture_Drama  	foreach (CrossRef_AniDB_MAL xref in crossRefs) {  		// look for the right MAL id  		int malID = -1;  		int epNumber = -1;  		int totalEpCount = -1;  		List<string> fanSubGroups = new List<string> ();  		// for each cross ref (which is a series on MAL) we need to update the data  		// so find all the episodes which apply to this cross ref  		int lastWatchedEpNumber = 0;  		int downloadedEps = 0;  		foreach (AnimeEpisode ep in eps) {  			int epNum = ep.AniDB_Episode.EpisodeNumber;  			if (xref.StartEpisodeType == (int)ep.EpisodeTypeEnum && epNum >= xref.StartEpisodeNumber && epNum <= GetUpperEpisodeLimit (crossRefs' xref)) {  				malID = xref.MALID;  				epNumber = epNum - xref.StartEpisodeNumber + 1;  				// find the total episode count  				if (totalEpCount < 0) {  					if (ep.EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  						totalEpCount = ser.GetAnime ().EpisodeCountNormal;  					if (ep.EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  						totalEpCount = ser.GetAnime ().EpisodeCountSpecial;  					totalEpCount = totalEpCount - xref.StartEpisodeNumber + 1;  				}  				// any episodes here belong to the MAL series  				// find the latest watched episod enumber  				AnimeEpisode_User usrRecord = ep.GetUserRecord (user.JMMUserID);  				if (usrRecord != null && usrRecord.WatchedDate.HasValue && epNum > lastWatchedEpNumber) {  					lastWatchedEpNumber = epNum;  				}  				List<Contract_VideoDetailed> contracts = ep.GetVideoDetailedContracts (user.JMMUserID);  				// find the latest episode number in the collection  				if (contracts.Count > 0)  					downloadedEps++;  				foreach (Contract_VideoDetailed contract in contracts) {  					if (!string.IsNullOrEmpty (contract.AniDB_Anime_GroupNameShort) && !fanSubGroups.Contains (contract.AniDB_Anime_GroupNameShort))  						fanSubGroups.Add (contract.AniDB_Anime_GroupNameShort);  				}  			}  		}  		string fanSubs = "";  		foreach (string fgrp in fanSubGroups) {  			if (!string.IsNullOrEmpty (fanSubs))  				fanSubs += "'";  			fanSubs += fgrp;  		}  		// determine status  		int status = 1;  		//watching  		if (animeListHashtable.ContainsKey (malID)) {  			myanimelistAnime animeInList = (myanimelistAnime)animeListHashtable [malID];  			status = animeInList.my_status;  		}  		// over-ride is user has watched an episode  		// don't override on hold (3) or dropped (4) but do override plan to watch (6)  		if (status == 6 && lastWatchedEpNumber > 0)  			status = 1;  		//watching  		if (lastWatchedEpNumber == totalEpCount)  			status = 2;  		//completed  		if (lastWatchedEpNumber > totalEpCount) {  			logger.Error ("updateMAL' episode number > matching anime episode total : {0} ({1}) / {2}"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID' epNumber);  			continue;  		}  		if (malID <= 0 || totalEpCount <= 0) {  			logger.Warn ("Could not find MAL link for : {0} ({1})"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID);  			continue;  		}  		else {  			bool res = UpdateAnime (malID' lastWatchedEpNumber' status' score' downloadedEps' fanSubs);  			string confirmationMessage = string.Format ("MAL successfully updated' mal id: {0}' ep: {1}' score: {2}"' malID' lastWatchedEpNumber' score);  			if (res)  				logger.Trace (confirmationMessage);  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (ServerSettings.MAL_Username) || string.IsNullOrEmpty (ServerSettings.MAL_Password))  		return;  	// Populate MAL animelist hashtable if isNeverDecreaseWatched set  	Hashtable animeListHashtable = new Hashtable ();  	if (ServerSettings.MAL_NeverDecreaseWatchedNums)//if set' check watched number before update: take some time' as user anime list must be loaded  	 {  		myanimelist malAnimeList = GetMALAnimeList ();  		if (malAnimeList != null && malAnimeList.anime != null) {  			for (int i = 0; i < malAnimeList.anime.Length; i++) {  				animeListHashtable.Add (malAnimeList.anime [i].series_animedb_id' malAnimeList.anime [i]);  			}  		}  	}  	// look for MAL Links  	List<CrossRef_AniDB_MAL> crossRefs = ser.GetAnime ().GetCrossRefMAL ();  	if (crossRefs == null || crossRefs.Count == 0) {  		logger.Warn ("Could not find MAL link for : {0} ({1})"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID);  		return;  	}  	AnimeEpisodeRepository repEps = new AnimeEpisodeRepository ();  	AniDB_FileRepository repFiles = new AniDB_FileRepository ();  	List<AnimeEpisode> eps = ser.GetAnimeEpisodes ();  	// find the anidb user  	JMMUserRepository repUsers = new JMMUserRepository ();  	List<JMMUser> aniDBUsers = repUsers.GetAniDBUsers ();  	if (aniDBUsers.Count == 0)  		return;  	JMMUser user = aniDBUsers [0];  	int score = 0;  	if (ser.GetAnime ().UserVote != null)  		score = (int)(ser.GetAnime ().UserVote.VoteValue / 100);  	// e.g.  	// AniDB - Code Geass R2  	// MAL Equivalent = AniDB Normal Eps 1 - 25 / Code Geass: Hangyaku no Lelouch R2 / hxxp://myanimelist.net/anime/2904/Code_Geass:_Hangyaku_no_Lelouch_R2  	// MAL Equivalent = AniDB Special Eps 1 - 9 / Code Geass: Hangyaku no Lelouch R2 Picture Drama / hxxp://myanimelist.net/anime/5163/Code_Geass:_Hangyaku_no_Lelouch_R2_Picture_Drama  	// MAL Equivalent = AniDB Special Eps 9 - 18 / Code Geass: Hangyaku no Lelouch R2: Flash Specials / hxxp://myanimelist.net/anime/9591/Code_Geass:_Hangyaku_no_Lelouch_R2:_Flash_Specials  	// MAL Equivalent = AniDB Special Eps 20 / Code Geass: Hangyaku no Lelouch - Kiseki no Birthday Picture Drama / hxxp://myanimelist.net/anime/8728/Code_Geass:_Hangyaku_no_Lelouch_-_Kiseki_no_Birthday_Picture_Drama  	foreach (CrossRef_AniDB_MAL xref in crossRefs) {  		// look for the right MAL id  		int malID = -1;  		int epNumber = -1;  		int totalEpCount = -1;  		List<string> fanSubGroups = new List<string> ();  		// for each cross ref (which is a series on MAL) we need to update the data  		// so find all the episodes which apply to this cross ref  		int lastWatchedEpNumber = 0;  		int downloadedEps = 0;  		foreach (AnimeEpisode ep in eps) {  			int epNum = ep.AniDB_Episode.EpisodeNumber;  			if (xref.StartEpisodeType == (int)ep.EpisodeTypeEnum && epNum >= xref.StartEpisodeNumber && epNum <= GetUpperEpisodeLimit (crossRefs' xref)) {  				malID = xref.MALID;  				epNumber = epNum - xref.StartEpisodeNumber + 1;  				// find the total episode count  				if (totalEpCount < 0) {  					if (ep.EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  						totalEpCount = ser.GetAnime ().EpisodeCountNormal;  					if (ep.EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  						totalEpCount = ser.GetAnime ().EpisodeCountSpecial;  					totalEpCount = totalEpCount - xref.StartEpisodeNumber + 1;  				}  				// any episodes here belong to the MAL series  				// find the latest watched episod enumber  				AnimeEpisode_User usrRecord = ep.GetUserRecord (user.JMMUserID);  				if (usrRecord != null && usrRecord.WatchedDate.HasValue && epNum > lastWatchedEpNumber) {  					lastWatchedEpNumber = epNum;  				}  				List<Contract_VideoDetailed> contracts = ep.GetVideoDetailedContracts (user.JMMUserID);  				// find the latest episode number in the collection  				if (contracts.Count > 0)  					downloadedEps++;  				foreach (Contract_VideoDetailed contract in contracts) {  					if (!string.IsNullOrEmpty (contract.AniDB_Anime_GroupNameShort) && !fanSubGroups.Contains (contract.AniDB_Anime_GroupNameShort))  						fanSubGroups.Add (contract.AniDB_Anime_GroupNameShort);  				}  			}  		}  		string fanSubs = "";  		foreach (string fgrp in fanSubGroups) {  			if (!string.IsNullOrEmpty (fanSubs))  				fanSubs += "'";  			fanSubs += fgrp;  		}  		// determine status  		int status = 1;  		//watching  		if (animeListHashtable.ContainsKey (malID)) {  			myanimelistAnime animeInList = (myanimelistAnime)animeListHashtable [malID];  			status = animeInList.my_status;  		}  		// over-ride is user has watched an episode  		// don't override on hold (3) or dropped (4) but do override plan to watch (6)  		if (status == 6 && lastWatchedEpNumber > 0)  			status = 1;  		//watching  		if (lastWatchedEpNumber == totalEpCount)  			status = 2;  		//completed  		if (lastWatchedEpNumber > totalEpCount) {  			logger.Error ("updateMAL' episode number > matching anime episode total : {0} ({1}) / {2}"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID' epNumber);  			continue;  		}  		if (malID <= 0 || totalEpCount <= 0) {  			logger.Warn ("Could not find MAL link for : {0} ({1})"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID);  			continue;  		}  		else {  			bool res = UpdateAnime (malID' lastWatchedEpNumber' status' score' downloadedEps' fanSubs);  			string confirmationMessage = string.Format ("MAL successfully updated' mal id: {0}' ep: {1}' score: {2}"' malID' lastWatchedEpNumber' score);  			if (res)  				logger.Trace (confirmationMessage);  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The following statement contains a magic number: if (ser.GetAnime ().UserVote != null)  	score = (int)(ser.GetAnime ().UserVote.VoteValue / 100);  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The following statement contains a magic number: score = (int)(ser.GetAnime ().UserVote.VoteValue / 100);  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The following statement contains a magic number: foreach (CrossRef_AniDB_MAL xref in crossRefs) {  	// look for the right MAL id  	int malID = -1;  	int epNumber = -1;  	int totalEpCount = -1;  	List<string> fanSubGroups = new List<string> ();  	// for each cross ref (which is a series on MAL) we need to update the data  	// so find all the episodes which apply to this cross ref  	int lastWatchedEpNumber = 0;  	int downloadedEps = 0;  	foreach (AnimeEpisode ep in eps) {  		int epNum = ep.AniDB_Episode.EpisodeNumber;  		if (xref.StartEpisodeType == (int)ep.EpisodeTypeEnum && epNum >= xref.StartEpisodeNumber && epNum <= GetUpperEpisodeLimit (crossRefs' xref)) {  			malID = xref.MALID;  			epNumber = epNum - xref.StartEpisodeNumber + 1;  			// find the total episode count  			if (totalEpCount < 0) {  				if (ep.EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  					totalEpCount = ser.GetAnime ().EpisodeCountNormal;  				if (ep.EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  					totalEpCount = ser.GetAnime ().EpisodeCountSpecial;  				totalEpCount = totalEpCount - xref.StartEpisodeNumber + 1;  			}  			// any episodes here belong to the MAL series  			// find the latest watched episod enumber  			AnimeEpisode_User usrRecord = ep.GetUserRecord (user.JMMUserID);  			if (usrRecord != null && usrRecord.WatchedDate.HasValue && epNum > lastWatchedEpNumber) {  				lastWatchedEpNumber = epNum;  			}  			List<Contract_VideoDetailed> contracts = ep.GetVideoDetailedContracts (user.JMMUserID);  			// find the latest episode number in the collection  			if (contracts.Count > 0)  				downloadedEps++;  			foreach (Contract_VideoDetailed contract in contracts) {  				if (!string.IsNullOrEmpty (contract.AniDB_Anime_GroupNameShort) && !fanSubGroups.Contains (contract.AniDB_Anime_GroupNameShort))  					fanSubGroups.Add (contract.AniDB_Anime_GroupNameShort);  			}  		}  	}  	string fanSubs = "";  	foreach (string fgrp in fanSubGroups) {  		if (!string.IsNullOrEmpty (fanSubs))  			fanSubs += "'";  		fanSubs += fgrp;  	}  	// determine status  	int status = 1;  	//watching  	if (animeListHashtable.ContainsKey (malID)) {  		myanimelistAnime animeInList = (myanimelistAnime)animeListHashtable [malID];  		status = animeInList.my_status;  	}  	// over-ride is user has watched an episode  	// don't override on hold (3) or dropped (4) but do override plan to watch (6)  	if (status == 6 && lastWatchedEpNumber > 0)  		status = 1;  	//watching  	if (lastWatchedEpNumber == totalEpCount)  		status = 2;  	//completed  	if (lastWatchedEpNumber > totalEpCount) {  		logger.Error ("updateMAL' episode number > matching anime episode total : {0} ({1}) / {2}"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID' epNumber);  		continue;  	}  	if (malID <= 0 || totalEpCount <= 0) {  		logger.Warn ("Could not find MAL link for : {0} ({1})"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID);  		continue;  	}  	else {  		bool res = UpdateAnime (malID' lastWatchedEpNumber' status' score' downloadedEps' fanSubs);  		string confirmationMessage = string.Format ("MAL successfully updated' mal id: {0}' ep: {1}' score: {2}"' malID' lastWatchedEpNumber' score);  		if (res)  			logger.Trace (confirmationMessage);  	}  }  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The following statement contains a magic number: foreach (CrossRef_AniDB_MAL xref in crossRefs) {  	// look for the right MAL id  	int malID = -1;  	int epNumber = -1;  	int totalEpCount = -1;  	List<string> fanSubGroups = new List<string> ();  	// for each cross ref (which is a series on MAL) we need to update the data  	// so find all the episodes which apply to this cross ref  	int lastWatchedEpNumber = 0;  	int downloadedEps = 0;  	foreach (AnimeEpisode ep in eps) {  		int epNum = ep.AniDB_Episode.EpisodeNumber;  		if (xref.StartEpisodeType == (int)ep.EpisodeTypeEnum && epNum >= xref.StartEpisodeNumber && epNum <= GetUpperEpisodeLimit (crossRefs' xref)) {  			malID = xref.MALID;  			epNumber = epNum - xref.StartEpisodeNumber + 1;  			// find the total episode count  			if (totalEpCount < 0) {  				if (ep.EpisodeTypeEnum == AniDBAPI.enEpisodeType.Episode)  					totalEpCount = ser.GetAnime ().EpisodeCountNormal;  				if (ep.EpisodeTypeEnum == AniDBAPI.enEpisodeType.Special)  					totalEpCount = ser.GetAnime ().EpisodeCountSpecial;  				totalEpCount = totalEpCount - xref.StartEpisodeNumber + 1;  			}  			// any episodes here belong to the MAL series  			// find the latest watched episod enumber  			AnimeEpisode_User usrRecord = ep.GetUserRecord (user.JMMUserID);  			if (usrRecord != null && usrRecord.WatchedDate.HasValue && epNum > lastWatchedEpNumber) {  				lastWatchedEpNumber = epNum;  			}  			List<Contract_VideoDetailed> contracts = ep.GetVideoDetailedContracts (user.JMMUserID);  			// find the latest episode number in the collection  			if (contracts.Count > 0)  				downloadedEps++;  			foreach (Contract_VideoDetailed contract in contracts) {  				if (!string.IsNullOrEmpty (contract.AniDB_Anime_GroupNameShort) && !fanSubGroups.Contains (contract.AniDB_Anime_GroupNameShort))  					fanSubGroups.Add (contract.AniDB_Anime_GroupNameShort);  			}  		}  	}  	string fanSubs = "";  	foreach (string fgrp in fanSubGroups) {  		if (!string.IsNullOrEmpty (fanSubs))  			fanSubs += "'";  		fanSubs += fgrp;  	}  	// determine status  	int status = 1;  	//watching  	if (animeListHashtable.ContainsKey (malID)) {  		myanimelistAnime animeInList = (myanimelistAnime)animeListHashtable [malID];  		status = animeInList.my_status;  	}  	// over-ride is user has watched an episode  	// don't override on hold (3) or dropped (4) but do override plan to watch (6)  	if (status == 6 && lastWatchedEpNumber > 0)  		status = 1;  	//watching  	if (lastWatchedEpNumber == totalEpCount)  		status = 2;  	//completed  	if (lastWatchedEpNumber > totalEpCount) {  		logger.Error ("updateMAL' episode number > matching anime episode total : {0} ({1}) / {2}"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID' epNumber);  		continue;  	}  	if (malID <= 0 || totalEpCount <= 0) {  		logger.Warn ("Could not find MAL link for : {0} ({1})"' ser.GetAnime ().GetFormattedTitle ()' ser.GetAnime ().AnimeID);  		continue;  	}  	else {  		bool res = UpdateAnime (malID' lastWatchedEpNumber' status' score' downloadedEps' fanSubs);  		string confirmationMessage = string.Format ("MAL successfully updated' mal id: {0}' ep: {1}' score: {2}"' malID' lastWatchedEpNumber' score);  		if (res)  			logger.Trace (confirmationMessage);  	}  }  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The following statement contains a magic number: if (status == 6 && lastWatchedEpNumber > 0)  	status = 1;  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The following statement contains a magic number: if (lastWatchedEpNumber == totalEpCount)  	status = 2;  
Magic Number,JMMServer.Providers.MyAnimeList,MALHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,UpdateMALSeries,The following statement contains a magic number: status = 2;  
Magic Number,JMMServer.Providers.MyAnimeList,HtmlEntities,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,Lookup,The following statement contains a magic number: if (_entitiesLookupTable == null) {  	lock (_lookupLockObject) {  		if (_entitiesLookupTable == null) {  			Hashtable hashtable = new Hashtable ();  			foreach (string str in _entitiesList) {  				hashtable [str.Substring (2)] = str [0];  			}  			_entitiesLookupTable = hashtable;  		}  	}  }  
Magic Number,JMMServer.Providers.MyAnimeList,HtmlEntities,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,Lookup,The following statement contains a magic number: lock (_lookupLockObject) {  	if (_entitiesLookupTable == null) {  		Hashtable hashtable = new Hashtable ();  		foreach (string str in _entitiesList) {  			hashtable [str.Substring (2)] = str [0];  		}  		_entitiesLookupTable = hashtable;  	}  }  
Magic Number,JMMServer.Providers.MyAnimeList,HtmlEntities,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,Lookup,The following statement contains a magic number: if (_entitiesLookupTable == null) {  	Hashtable hashtable = new Hashtable ();  	foreach (string str in _entitiesList) {  		hashtable [str.Substring (2)] = str [0];  	}  	_entitiesLookupTable = hashtable;  }  
Magic Number,JMMServer.Providers.MyAnimeList,HtmlEntities,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,Lookup,The following statement contains a magic number: foreach (string str in _entitiesList) {  	hashtable [str.Substring (2)] = str [0];  }  
Magic Number,JMMServer.Providers.MyAnimeList,HtmlEntities,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,Lookup,The following statement contains a magic number: hashtable [str.Substring (2)] = str [0];  
Magic Number,JMMServer.Providers.MyAnimeList,HttpUtilityV2,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,HtmlDecode,The following statement contains a magic number: if (s != null) {  	if (s.IndexOf ('&') < 0) {  		output.Write (s);  	}  	else {  		int length = s.Length;  		for (int i = 0; i < length; i++) {  			char ch = s [i];  			if (ch == '&') {  				int num3 = s.IndexOfAny (s_entityEndingChars' i + 1);  				if ((num3 > 0) && (s [num3] == ';')) {  					string entity = s.Substring (i + 1' (num3 - i) - 1);  					if ((entity.Length > 1) && (entity [0] == '#')) {  						try {  							if ((entity [1] == 'x') || (entity [1] == 'X')) {  								ch = (char)int.Parse (entity.Substring (2)' NumberStyles.AllowHexSpecifier);  							}  							else {  								ch = (char)int.Parse (entity.Substring (1));  							}  							i = num3;  						}  						catch (FormatException) {  							i++;  						}  						catch (ArgumentException) {  							i++;  						}  					}  					else {  						i = num3;  						char ch2 = HtmlEntities.Lookup (entity);  						if (ch2 != '\0') {  							ch = ch2;  						}  						else {  							output.Write ('&');  							output.Write (entity);  							output.Write (';');  							goto Label_0103;  						}  					}  				}  			}  			output.Write (ch);  			Label_0103:  			;  		}  	}  }  
Magic Number,JMMServer.Providers.MyAnimeList,HttpUtilityV2,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,HtmlDecode,The following statement contains a magic number: if (s.IndexOf ('&') < 0) {  	output.Write (s);  }  else {  	int length = s.Length;  	for (int i = 0; i < length; i++) {  		char ch = s [i];  		if (ch == '&') {  			int num3 = s.IndexOfAny (s_entityEndingChars' i + 1);  			if ((num3 > 0) && (s [num3] == ';')) {  				string entity = s.Substring (i + 1' (num3 - i) - 1);  				if ((entity.Length > 1) && (entity [0] == '#')) {  					try {  						if ((entity [1] == 'x') || (entity [1] == 'X')) {  							ch = (char)int.Parse (entity.Substring (2)' NumberStyles.AllowHexSpecifier);  						}  						else {  							ch = (char)int.Parse (entity.Substring (1));  						}  						i = num3;  					}  					catch (FormatException) {  						i++;  					}  					catch (ArgumentException) {  						i++;  					}  				}  				else {  					i = num3;  					char ch2 = HtmlEntities.Lookup (entity);  					if (ch2 != '\0') {  						ch = ch2;  					}  					else {  						output.Write ('&');  						output.Write (entity);  						output.Write (';');  						goto Label_0103;  					}  				}  			}  		}  		output.Write (ch);  		Label_0103:  		;  	}  }  
Magic Number,JMMServer.Providers.MyAnimeList,HttpUtilityV2,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	char ch = s [i];  	if (ch == '&') {  		int num3 = s.IndexOfAny (s_entityEndingChars' i + 1);  		if ((num3 > 0) && (s [num3] == ';')) {  			string entity = s.Substring (i + 1' (num3 - i) - 1);  			if ((entity.Length > 1) && (entity [0] == '#')) {  				try {  					if ((entity [1] == 'x') || (entity [1] == 'X')) {  						ch = (char)int.Parse (entity.Substring (2)' NumberStyles.AllowHexSpecifier);  					}  					else {  						ch = (char)int.Parse (entity.Substring (1));  					}  					i = num3;  				}  				catch (FormatException) {  					i++;  				}  				catch (ArgumentException) {  					i++;  				}  			}  			else {  				i = num3;  				char ch2 = HtmlEntities.Lookup (entity);  				if (ch2 != '\0') {  					ch = ch2;  				}  				else {  					output.Write ('&');  					output.Write (entity);  					output.Write (';');  					goto Label_0103;  				}  			}  		}  	}  	output.Write (ch);  	Label_0103:  	;  }  
Magic Number,JMMServer.Providers.MyAnimeList,HttpUtilityV2,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,HtmlDecode,The following statement contains a magic number: if (ch == '&') {  	int num3 = s.IndexOfAny (s_entityEndingChars' i + 1);  	if ((num3 > 0) && (s [num3] == ';')) {  		string entity = s.Substring (i + 1' (num3 - i) - 1);  		if ((entity.Length > 1) && (entity [0] == '#')) {  			try {  				if ((entity [1] == 'x') || (entity [1] == 'X')) {  					ch = (char)int.Parse (entity.Substring (2)' NumberStyles.AllowHexSpecifier);  				}  				else {  					ch = (char)int.Parse (entity.Substring (1));  				}  				i = num3;  			}  			catch (FormatException) {  				i++;  			}  			catch (ArgumentException) {  				i++;  			}  		}  		else {  			i = num3;  			char ch2 = HtmlEntities.Lookup (entity);  			if (ch2 != '\0') {  				ch = ch2;  			}  			else {  				output.Write ('&');  				output.Write (entity);  				output.Write (';');  				goto Label_0103;  			}  		}  	}  }  
Magic Number,JMMServer.Providers.MyAnimeList,HttpUtilityV2,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,HtmlDecode,The following statement contains a magic number: if ((num3 > 0) && (s [num3] == ';')) {  	string entity = s.Substring (i + 1' (num3 - i) - 1);  	if ((entity.Length > 1) && (entity [0] == '#')) {  		try {  			if ((entity [1] == 'x') || (entity [1] == 'X')) {  				ch = (char)int.Parse (entity.Substring (2)' NumberStyles.AllowHexSpecifier);  			}  			else {  				ch = (char)int.Parse (entity.Substring (1));  			}  			i = num3;  		}  		catch (FormatException) {  			i++;  		}  		catch (ArgumentException) {  			i++;  		}  	}  	else {  		i = num3;  		char ch2 = HtmlEntities.Lookup (entity);  		if (ch2 != '\0') {  			ch = ch2;  		}  		else {  			output.Write ('&');  			output.Write (entity);  			output.Write (';');  			goto Label_0103;  		}  	}  }  
Magic Number,JMMServer.Providers.MyAnimeList,HttpUtilityV2,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,HtmlDecode,The following statement contains a magic number: if ((entity.Length > 1) && (entity [0] == '#')) {  	try {  		if ((entity [1] == 'x') || (entity [1] == 'X')) {  			ch = (char)int.Parse (entity.Substring (2)' NumberStyles.AllowHexSpecifier);  		}  		else {  			ch = (char)int.Parse (entity.Substring (1));  		}  		i = num3;  	}  	catch (FormatException) {  		i++;  	}  	catch (ArgumentException) {  		i++;  	}  }  else {  	i = num3;  	char ch2 = HtmlEntities.Lookup (entity);  	if (ch2 != '\0') {  		ch = ch2;  	}  	else {  		output.Write ('&');  		output.Write (entity);  		output.Write (';');  		goto Label_0103;  	}  }  
Magic Number,JMMServer.Providers.MyAnimeList,HttpUtilityV2,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,HtmlDecode,The following statement contains a magic number: try {  	if ((entity [1] == 'x') || (entity [1] == 'X')) {  		ch = (char)int.Parse (entity.Substring (2)' NumberStyles.AllowHexSpecifier);  	}  	else {  		ch = (char)int.Parse (entity.Substring (1));  	}  	i = num3;  }  catch (FormatException) {  	i++;  }  catch (ArgumentException) {  	i++;  }  
Magic Number,JMMServer.Providers.MyAnimeList,HttpUtilityV2,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,HtmlDecode,The following statement contains a magic number: if ((entity [1] == 'x') || (entity [1] == 'X')) {  	ch = (char)int.Parse (entity.Substring (2)' NumberStyles.AllowHexSpecifier);  }  else {  	ch = (char)int.Parse (entity.Substring (1));  }  
Magic Number,JMMServer.Providers.MyAnimeList,HttpUtilityV2,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\MyAnimeList\MALHelper.cs,HtmlDecode,The following statement contains a magic number: ch = (char)int.Parse (entity.Substring (2)' NumberStyles.AllowHexSpecifier);  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetShowShouts,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (ServerSettings.Trakt_Username) || string.IsNullOrEmpty (ServerSettings.Trakt_Password))  		return null;  	CrossRef_AniDB_TraktRepository repXrefTrakt = new CrossRef_AniDB_TraktRepository ();  	CrossRef_AniDB_Trakt traktXRef = repXrefTrakt.GetByAnimeID (session' animeID);  	if (traktXRef == null)  		return null;  	string url = string.Format (Constants.TraktTvURLs.URLGetShowShouts' Constants.TraktTvURLs.APIKey' traktXRef.TraktID);  	logger.Trace ("GetShowShouts: {0}"' url);  	// Search for a series  	string json = Utils.DownloadWebPage (url);  	if (json.Trim ().Length == 0)  		return new List<TraktTV_ShoutGet> ();  	shouts = JSONHelper.Deserialize<List<TraktTV_ShoutGet>> (json);  	Trakt_FriendRepository repFriends = new Trakt_FriendRepository ();  	foreach (TraktTV_ShoutGet shout in shouts) {  		Trakt_Friend traktFriend = repFriends.GetByUsername (session' shout.user.username);  		if (traktFriend == null) {  			traktFriend = new Trakt_Friend ();  			traktFriend.LastAvatarUpdate = DateTime.Now;  		}  		traktFriend.Populate (shout.user);  		repFriends.Save (traktFriend);  		if (!string.IsNullOrEmpty (traktFriend.FullImagePath)) {  			bool fileExists = File.Exists (traktFriend.FullImagePath);  			TimeSpan ts = DateTime.Now - traktFriend.LastAvatarUpdate;  			if (!fileExists || ts.TotalHours > 8) {  				traktFriend.LastAvatarUpdate = DateTime.Now;  				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  				cmd.Save (session);  			}  		}  	}  }  catch (Exception ex) {  	logger.ErrorException ("Error in TraktTVHelper.GetShowShouts: " + ex.ToString ()' ex);  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetShowShouts,The following statement contains a magic number: foreach (TraktTV_ShoutGet shout in shouts) {  	Trakt_Friend traktFriend = repFriends.GetByUsername (session' shout.user.username);  	if (traktFriend == null) {  		traktFriend = new Trakt_Friend ();  		traktFriend.LastAvatarUpdate = DateTime.Now;  	}  	traktFriend.Populate (shout.user);  	repFriends.Save (traktFriend);  	if (!string.IsNullOrEmpty (traktFriend.FullImagePath)) {  		bool fileExists = File.Exists (traktFriend.FullImagePath);  		TimeSpan ts = DateTime.Now - traktFriend.LastAvatarUpdate;  		if (!fileExists || ts.TotalHours > 8) {  			traktFriend.LastAvatarUpdate = DateTime.Now;  			CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  			cmd.Save (session);  		}  	}  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetShowShouts,The following statement contains a magic number: if (!string.IsNullOrEmpty (traktFriend.FullImagePath)) {  	bool fileExists = File.Exists (traktFriend.FullImagePath);  	TimeSpan ts = DateTime.Now - traktFriend.LastAvatarUpdate;  	if (!fileExists || ts.TotalHours > 8) {  		traktFriend.LastAvatarUpdate = DateTime.Now;  		CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  		cmd.Save (session);  	}  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetShowShouts,The following statement contains a magic number: if (!fileExists || ts.TotalHours > 8) {  	traktFriend.LastAvatarUpdate = DateTime.Now;  	CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  	cmd.Save (session);  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetActivityFriends,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (ServerSettings.Trakt_Username) || string.IsNullOrEmpty (ServerSettings.Trakt_Password))  		return null;  	string url = string.Format (Constants.TraktTvURLs.URLGetActivityFriends' Constants.TraktTvURLs.APIKey);  	if (shoutsOnly)  		url = string.Format (Constants.TraktTvURLs.URLGetActivityFriendsShoutsOnly' Constants.TraktTvURLs.APIKey);  	logger.Trace ("GetActivityFriends: {0}"' url);  	TraktTVPost_GetFriends cmdFriends = new TraktTVPost_GetFriends ();  	cmdFriends.Init ();  	string json = JSONHelper.Serialize<TraktTVPost_GetFriends> (cmdFriends);  	// TraktTVPost_GetFriends is really just an auth method  	string jsonResponse = SendData (url' json);  	if (jsonResponse.Trim ().Length == 0)  		return null;  	summ = JSONHelper.Deserialize<TraktTV_ActivitySummary> (jsonResponse);  	if (summ == null)  		return null;  	// save any trakt data that we don't have already  	Trakt_ShowRepository repShows = new Trakt_ShowRepository ();  	Trakt_EpisodeRepository repEpisodes = new Trakt_EpisodeRepository ();  	Trakt_FriendRepository repFriends = new Trakt_FriendRepository ();  	foreach (TraktTV_Activity act in summ.activity) {  		if (act.user == null)  			continue;  		TraktTV_UserActivity friend = act.user;  		Trakt_Friend traktFriend = repFriends.GetByUsername (friend.username);  		if (traktFriend == null) {  			traktFriend = new Trakt_Friend ();  			traktFriend.LastAvatarUpdate = DateTime.Now;  		}  		traktFriend.Populate (friend);  		repFriends.Save (traktFriend);  		if (!string.IsNullOrEmpty (traktFriend.FullImagePath)) {  			bool fileExists = File.Exists (traktFriend.FullImagePath);  			TimeSpan ts = DateTime.Now - traktFriend.LastAvatarUpdate;  			if (!fileExists || ts.TotalHours > 8) {  				traktFriend.LastAvatarUpdate = DateTime.Now;  				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  				cmd.Save ();  			}  		}  		if (act.episode != null && act.show != null) {  			Trakt_Show show = repShows.GetByTraktID (act.show.TraktID);  			if (show == null) {  				show = new Trakt_Show ();  				show.Populate (act.show);  				repShows.Save (show);  			}  			Trakt_Episode episode = repEpisodes.GetByShowIDSeasonAndEpisode (show.Trakt_ShowID' int.Parse (act.episode.season)' int.Parse (act.episode.number));  			if (episode == null)  				episode = new Trakt_Episode ();  			episode.Populate (act.episode' show.Trakt_ShowID);  			repEpisodes.Save (episode);  			if (!string.IsNullOrEmpty (episode.FullImagePath)) {  				bool fileExists = File.Exists (episode.FullImagePath);  				if (!fileExists) {  					CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (episode.Trakt_EpisodeID' JMMImageType.Trakt_Episode' false);  					cmd.Save ();  				}  			}  		}  		// a shout on just the show  		if (act.episode == null && act.show != null) {  			Trakt_Show show = repShows.GetByTraktID (act.show.TraktID);  			if (show == null) {  				show = new Trakt_Show ();  				show.Populate (act.show);  				repShows.Save (show);  			}  		}  	}  }  catch (Exception ex) {  	logger.ErrorException ("Error in TraktTVHelper.GetActivityFriends: " + ex.ToString ()' ex);  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetActivityFriends,The following statement contains a magic number: foreach (TraktTV_Activity act in summ.activity) {  	if (act.user == null)  		continue;  	TraktTV_UserActivity friend = act.user;  	Trakt_Friend traktFriend = repFriends.GetByUsername (friend.username);  	if (traktFriend == null) {  		traktFriend = new Trakt_Friend ();  		traktFriend.LastAvatarUpdate = DateTime.Now;  	}  	traktFriend.Populate (friend);  	repFriends.Save (traktFriend);  	if (!string.IsNullOrEmpty (traktFriend.FullImagePath)) {  		bool fileExists = File.Exists (traktFriend.FullImagePath);  		TimeSpan ts = DateTime.Now - traktFriend.LastAvatarUpdate;  		if (!fileExists || ts.TotalHours > 8) {  			traktFriend.LastAvatarUpdate = DateTime.Now;  			CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  			cmd.Save ();  		}  	}  	if (act.episode != null && act.show != null) {  		Trakt_Show show = repShows.GetByTraktID (act.show.TraktID);  		if (show == null) {  			show = new Trakt_Show ();  			show.Populate (act.show);  			repShows.Save (show);  		}  		Trakt_Episode episode = repEpisodes.GetByShowIDSeasonAndEpisode (show.Trakt_ShowID' int.Parse (act.episode.season)' int.Parse (act.episode.number));  		if (episode == null)  			episode = new Trakt_Episode ();  		episode.Populate (act.episode' show.Trakt_ShowID);  		repEpisodes.Save (episode);  		if (!string.IsNullOrEmpty (episode.FullImagePath)) {  			bool fileExists = File.Exists (episode.FullImagePath);  			if (!fileExists) {  				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (episode.Trakt_EpisodeID' JMMImageType.Trakt_Episode' false);  				cmd.Save ();  			}  		}  	}  	// a shout on just the show  	if (act.episode == null && act.show != null) {  		Trakt_Show show = repShows.GetByTraktID (act.show.TraktID);  		if (show == null) {  			show = new Trakt_Show ();  			show.Populate (act.show);  			repShows.Save (show);  		}  	}  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetActivityFriends,The following statement contains a magic number: if (!string.IsNullOrEmpty (traktFriend.FullImagePath)) {  	bool fileExists = File.Exists (traktFriend.FullImagePath);  	TimeSpan ts = DateTime.Now - traktFriend.LastAvatarUpdate;  	if (!fileExists || ts.TotalHours > 8) {  		traktFriend.LastAvatarUpdate = DateTime.Now;  		CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  		cmd.Save ();  	}  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetActivityFriends,The following statement contains a magic number: if (!fileExists || ts.TotalHours > 8) {  	traktFriend.LastAvatarUpdate = DateTime.Now;  	CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  	cmd.Save ();  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetFriends,The following statement contains a magic number: try {  	string url = string.Format (Constants.TraktTvURLs.URLGetFriends' Constants.TraktTvURLs.APIKey' ServerSettings.Trakt_Username);  	//string url = string.Format(Constants.TraktTvURLs.URLGetFriends' Constants.TraktTvURLs.APIKey' "lwerndly");  	logger.Trace ("GetFriends: {0}"' url);  	TraktTVPost_GetFriends cmdFriends = new TraktTVPost_GetFriends ();  	cmdFriends.Init ();  	string json = JSONHelper.Serialize<TraktTVPost_GetFriends> (cmdFriends);  	string jsonResponse = SendData (url' json);  	if (jsonResponse.Trim ().Length == 0)  		return friends;  	friends = JSONHelper.Deserialize<List<TraktTVUser>> (jsonResponse);  	/*string json = Utils.DownloadWebPage(url);  				if (json.Trim().Length == 0) return null;  				friends = JSONHelper.Deserialize<List<TraktTVUser>>(json);*/Trakt_ShowRepository repShows = new Trakt_ShowRepository ();  	Trakt_EpisodeRepository repEpisodes = new Trakt_EpisodeRepository ();  	Trakt_FriendRepository repFriends = new Trakt_FriendRepository ();  	foreach (TraktTVUser friend in friends) {  		Trakt_Friend traktFriend = repFriends.GetByUsername (friend.username);  		if (traktFriend == null) {  			traktFriend = new Trakt_Friend ();  			traktFriend.LastAvatarUpdate = DateTime.Now;  		}  		traktFriend.Populate (friend);  		repFriends.Save (traktFriend);  		if (!string.IsNullOrEmpty (traktFriend.FullImagePath)) {  			bool fileExists = File.Exists (traktFriend.FullImagePath);  			TimeSpan ts = DateTime.Now - traktFriend.LastAvatarUpdate;  			if (!fileExists || ts.TotalHours > 8) {  				traktFriend.LastAvatarUpdate = DateTime.Now;  				CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  				cmd.Save ();  			}  		}  		foreach (TraktTVWatched wtch in friend.watched) {  			if (wtch.episode != null && wtch.show != null) {  				Trakt_Show show = repShows.GetByTraktID (wtch.show.TraktID);  				if (show == null) {  					show = new Trakt_Show ();  					show.Populate (wtch.show);  					repShows.Save (show);  				}  				Trakt_Episode episode = repEpisodes.GetByShowIDSeasonAndEpisode (show.Trakt_ShowID' int.Parse (wtch.episode.season)' int.Parse (wtch.episode.number));  				if (episode == null)  					episode = new Trakt_Episode ();  				episode.Populate (wtch.episode' show.Trakt_ShowID);  				repEpisodes.Save (episode);  				if (!string.IsNullOrEmpty (episode.FullImagePath)) {  					bool fileExists = File.Exists (episode.FullImagePath);  					if (!fileExists) {  						CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (episode.Trakt_EpisodeID' JMMImageType.Trakt_Episode' false);  						cmd.Save ();  					}  				}  			}  		}  	}  	//Contract_Trakt_Friend fr = friends[0].ToContract();  }  catch (Exception ex) {  	logger.ErrorException ("Error in TraktTVHelper.GetFriends: " + ex.ToString ()' ex);  	return friends;  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetFriends,The following statement contains a magic number: foreach (TraktTVUser friend in friends) {  	Trakt_Friend traktFriend = repFriends.GetByUsername (friend.username);  	if (traktFriend == null) {  		traktFriend = new Trakt_Friend ();  		traktFriend.LastAvatarUpdate = DateTime.Now;  	}  	traktFriend.Populate (friend);  	repFriends.Save (traktFriend);  	if (!string.IsNullOrEmpty (traktFriend.FullImagePath)) {  		bool fileExists = File.Exists (traktFriend.FullImagePath);  		TimeSpan ts = DateTime.Now - traktFriend.LastAvatarUpdate;  		if (!fileExists || ts.TotalHours > 8) {  			traktFriend.LastAvatarUpdate = DateTime.Now;  			CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  			cmd.Save ();  		}  	}  	foreach (TraktTVWatched wtch in friend.watched) {  		if (wtch.episode != null && wtch.show != null) {  			Trakt_Show show = repShows.GetByTraktID (wtch.show.TraktID);  			if (show == null) {  				show = new Trakt_Show ();  				show.Populate (wtch.show);  				repShows.Save (show);  			}  			Trakt_Episode episode = repEpisodes.GetByShowIDSeasonAndEpisode (show.Trakt_ShowID' int.Parse (wtch.episode.season)' int.Parse (wtch.episode.number));  			if (episode == null)  				episode = new Trakt_Episode ();  			episode.Populate (wtch.episode' show.Trakt_ShowID);  			repEpisodes.Save (episode);  			if (!string.IsNullOrEmpty (episode.FullImagePath)) {  				bool fileExists = File.Exists (episode.FullImagePath);  				if (!fileExists) {  					CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (episode.Trakt_EpisodeID' JMMImageType.Trakt_Episode' false);  					cmd.Save ();  				}  			}  		}  	}  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetFriends,The following statement contains a magic number: if (!string.IsNullOrEmpty (traktFriend.FullImagePath)) {  	bool fileExists = File.Exists (traktFriend.FullImagePath);  	TimeSpan ts = DateTime.Now - traktFriend.LastAvatarUpdate;  	if (!fileExists || ts.TotalHours > 8) {  		traktFriend.LastAvatarUpdate = DateTime.Now;  		CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  		cmd.Save ();  	}  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetFriends,The following statement contains a magic number: if (!fileExists || ts.TotalHours > 8) {  	traktFriend.LastAvatarUpdate = DateTime.Now;  	CommandRequest_DownloadImage cmd = new CommandRequest_DownloadImage (traktFriend.Trakt_FriendID' JMMImageType.Trakt_Friend' true);  	cmd.Save ();  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,MarkEpisodeWatched,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (ServerSettings.Trakt_Username) || string.IsNullOrEmpty (ServerSettings.Trakt_Password))  		return;  	CrossRef_AniDB_Trakt xref = ep.GetAnimeSeries ().CrossRefTrakt;  	if (xref == null)  		return;  	Trakt_ShowRepository repShows = new Trakt_ShowRepository ();  	Trakt_Show show = repShows.GetByTraktID (xref.TraktID);  	if (show == null)  		return;  	if (!show.TvDB_ID.HasValue)  		return;  	Dictionary<int' int> dictTraktSeasons = null;  	Dictionary<int' Trakt_Episode> dictTraktEpisodes = null;  	Dictionary<int' Trakt_Episode> dictTraktSpecials = null;  	GetDictTraktEpisodesAndSeasons (show' ref dictTraktEpisodes' ref dictTraktSpecials' ref dictTraktSeasons);  	int retEpNum = -1;  	int retSeason = -1;  	GetTraktEpisodeNumber (ep' ep.GetAnimeSeries ()' show' xref.TraktSeasonNumber' ref retEpNum' ref retSeason' dictTraktEpisodes' dictTraktSpecials' dictTraktSeasons);  	if (retEpNum < 0)  		return;  	TraktTVPost_ShowScrobble postScrobble = new TraktTVPost_ShowScrobble ();  	postScrobble.SetCredentials ();  	postScrobble.imdb_id = "";  	postScrobble.title = show.Title;  	postScrobble.year = show.Year;  	postScrobble.tvdb_id = show.TvDB_ID.Value.ToString ();  	postScrobble.episode = retEpNum.ToString ();  	postScrobble.season = retSeason.ToString ();  	AniDB_Episode aniep = ep.AniDB_Episode;  	if (aniep != null) {  		TimeSpan t = TimeSpan.FromSeconds (aniep.LengthSeconds + 14);  		int toMinutes = int.Parse (Math.Round (t.TotalMinutes).ToString ());  		postScrobble.duration = toMinutes.ToString ();  	}  	else  		postScrobble.duration = "25";  	postScrobble.progress = "100";  	postScrobble.plugin_version = "0.4";  	postScrobble.media_center_version = "1.2.0.1";  	postScrobble.media_center_date = "Dec 17 2010";  	logger.Trace ("Marking episode as watched (scrobble) on Trakt: {0} - S{1} - EP{2}"' show.Title' retSeason' retEpNum);  	string url = string.Format (Constants.TraktTvURLs.URLPostShowScrobble' Constants.TraktTvURLs.APIKey);  	string json = JSONHelper.Serialize<TraktTVPost_ShowScrobble> (postScrobble);  	SendData (url' json);  }  catch (Exception ex) {  	logger.ErrorException ("Error in TraktTVHelper.MarkEpisodeWatched: " + ex.ToString ()' ex);  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,MarkEpisodeWatched,The following statement contains a magic number: if (aniep != null) {  	TimeSpan t = TimeSpan.FromSeconds (aniep.LengthSeconds + 14);  	int toMinutes = int.Parse (Math.Round (t.TotalMinutes).ToString ());  	postScrobble.duration = toMinutes.ToString ();  }  else  	postScrobble.duration = "25";  
Magic Number,JMMServer.Providers.TraktTV,TraktTVHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVHelper.cs,GetDictTraktEpisodesAndSeasons,The following statement contains a magic number: try {  	Trakt_EpisodeRepository repEps = new Trakt_EpisodeRepository ();  	// create a dictionary of absolute episode numbers for trakt episodes  	// sort by season and episode number  	// ignore season 0' which is used for specials  	List<Trakt_Episode> eps = repEps.GetByShowID (show.Trakt_ShowID);  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("Season"' false' SortType.eInteger));  	sortCriteria.Add (new SortPropOrFieldAndDirection ("EpisodeNumber"' false' SortType.eInteger));  	eps = Sorting.MultiSort<Trakt_Episode> (eps' sortCriteria);  	int i = 1;  	int iSpec = 1;  	int lastSeason = -999;  	foreach (Trakt_Episode ep in eps) {  		//if (ep.Season == 0) continue;  		if (ep.Season > 0) {  			dictTraktEpisodes [i] = ep;  			if (ep.Season != lastSeason)  				dictTraktSeasons [ep.Season] = i;  			i++;  		}  		else {  			dictTraktSpecials [iSpec] = ep;  			if (ep.Season != lastSeason)  				dictTraktSeasons [ep.Season] = iSpec;  			iSpec++;  		}  		lastSeason = ep.Season;  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVPost_ShowScrobble,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVPost_ShowScrobble.cs,Init,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (ServerSettings.Trakt_Username) || string.IsNullOrEmpty (ServerSettings.Trakt_Password))  		return false;  	username = ServerSettings.Trakt_Username;  	password = Utils.CalculateSHA1 (ServerSettings.Trakt_Password' Encoding.Default);  	imdb_id = "";  	AnimeSeries ser = aniepisode.GetAnimeSeries ();  	if (ser == null)  		return false;  	CrossRef_AniDB_TraktRepository repCrossRef = new CrossRef_AniDB_TraktRepository ();  	CrossRef_AniDB_Trakt xref = repCrossRef.GetByAnimeID (ser.AniDB_ID);  	if (xref == null)  		return false;  	Trakt_ShowRepository repShows = new Trakt_ShowRepository ();  	Trakt_Show show = repShows.GetByTraktID (xref.TraktID);  	if (show == null)  		return false;  	if (!show.TvDB_ID.HasValue)  		return false;  	tvdb_id = show.TvDB_ID.Value.ToString ();  	title = show.Title;  	year = show.Year;  	int retEpNum = 0' retSeason = 0;  	GetTraktEpisodeNumber (aniepisode' show' xref.TraktSeasonNumber' ref retEpNum' ref retSeason);  	if (retEpNum < 0)  		return false;  	episode = retEpNum.ToString ();  	season = retSeason.ToString ();  	AniDB_Episode aniep = aniepisode.AniDB_Episode;  	if (aniep != null) {  		TimeSpan t = TimeSpan.FromSeconds (aniep.LengthSeconds + 14);  		int toMinutes = int.Parse (Math.Round (t.TotalMinutes).ToString ());  		duration = toMinutes.ToString ();  	}  	else  		duration = "25";  	progress = "100";  	plugin_version = "0.4";  	media_center_version = "1.2.0.1";  	media_center_date = "Dec 17 2010";  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return false;  }  
Magic Number,JMMServer.Providers.TraktTV,TraktTVPost_ShowScrobble,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVPost_ShowScrobble.cs,Init,The following statement contains a magic number: if (aniep != null) {  	TimeSpan t = TimeSpan.FromSeconds (aniep.LengthSeconds + 14);  	int toMinutes = int.Parse (Math.Round (t.TotalMinutes).ToString ());  	duration = toMinutes.ToString ();  }  else  	duration = "25";  
Magic Number,JMMServer.Providers.TraktTV,TraktTVPost_ShowScrobble,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Providers\TraktTV\TraktTVPost_ShowScrobble.cs,GetDictTraktEpisodesAndSeasons,The following statement contains a magic number: try {  	Trakt_EpisodeRepository repEps = new Trakt_EpisodeRepository ();  	// create a dictionary of absolute episode numbers for trakt episodes  	// sort by season and episode number  	// ignore season 0' which is used for specials  	List<Trakt_Episode> eps = repEps.GetByShowID (show.Trakt_ShowID);  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("Season"' false' SortType.eInteger));  	sortCriteria.Add (new SortPropOrFieldAndDirection ("EpisodeNumber"' false' SortType.eInteger));  	eps = Sorting.MultiSort<Trakt_Episode> (eps' sortCriteria);  	int i = 1;  	int lastSeason = -999;  	foreach (Trakt_Episode ep in eps) {  		if (ep.Season == 0)  			continue;  		dictTraktEpisodes [i] = ep;  		if (ep.Season != lastSeason)  			dictTraktSeasons [ep.Season] = i;  		lastSeason = ep.Season;  		i++;  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAllVideoQualityByAnime,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	System.Data.IDbCommand command = session.Connection.CreateCommand ();  	command.CommandText = "SELECT anime.AnimeID' anime.MainTitle' anifile.File_Source ";  	command.CommandText += "FROM AnimeSeries ser ";  	command.CommandText += "INNER JOIN AniDB_Anime anime on anime.AnimeID = ser.AniDB_ID ";  	command.CommandText += "INNER JOIN AnimeEpisode ep on ep.AnimeSeriesID = ser.AnimeSeriesID ";  	command.CommandText += "INNER JOIN AniDB_Episode aniep on ep.AniDB_EpisodeID = aniep.EpisodeID ";  	command.CommandText += "INNER JOIN CrossRef_File_Episode xref on aniep.EpisodeID = xref.EpisodeID ";  	command.CommandText += "INNER JOIN AniDB_File anifile on anifile.Hash = xref.Hash ";  	command.CommandText += "INNER JOIN CrossRef_Subtitles_AniDB_File subt on subt.FileID = anifile.FileID ";  	// See Note 1  	command.CommandText += "GROUP BY anime.AnimeID' anime.MainTitle' anifile.File_Source ";  	using (IDataReader rdr = command.ExecuteReader ()) {  		while (rdr.Read ()) {  			int groupID = int.Parse (rdr [0].ToString ());  			string vidQual = rdr [2].ToString ().Trim ();  			if (!allVidQuality.ContainsKey (groupID))  				allVidQuality [groupID] = "";  			if (allVidQuality [groupID].Length > 0)  				allVidQuality [groupID] += "'";  			allVidQuality [groupID] += vidQual;  		}  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAllVideoQualityByAnime,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		int groupID = int.Parse (rdr [0].ToString ());  		string vidQual = rdr [2].ToString ().Trim ();  		if (!allVidQuality.ContainsKey (groupID))  			allVidQuality [groupID] = "";  		if (allVidQuality [groupID].Length > 0)  			allVidQuality [groupID] += "'";  		allVidQuality [groupID] += vidQual;  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAllVideoQualityByAnime,The following statement contains a magic number: while (rdr.Read ()) {  	int groupID = int.Parse (rdr [0].ToString ());  	string vidQual = rdr [2].ToString ().Trim ();  	if (!allVidQuality.ContainsKey (groupID))  		allVidQuality [groupID] = "";  	if (allVidQuality [groupID].Length > 0)  		allVidQuality [groupID] += "'";  	allVidQuality [groupID] += vidQual;  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsByAnime,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		int animeID = int.Parse (rdr [0].ToString ());  		string mainTitle = rdr [1].ToString ().Trim ();  		string vidQual = rdr [2].ToString ().Trim ();  		int epNumber = int.Parse (rdr [3].ToString ());  		if (animeID == 7656) {  			Debug.Print ("");  		}  		if (!dictStats.ContainsKey (animeID)) {  			AnimeVideoQualityStat stat = new AnimeVideoQualityStat ();  			stat.AnimeID = animeID;  			stat.MainTitle = mainTitle;  			stat.VideoQualityEpisodeCount = new Dictionary<string' int> ();  			stat.VideoQualityEpisodeCount [vidQual] = 1;  			dictStats [animeID] = stat;  		}  		else {  			if (dictStats [animeID].VideoQualityEpisodeCount.ContainsKey (vidQual))  				dictStats [animeID].VideoQualityEpisodeCount [vidQual]++;  			else  				dictStats [animeID].VideoQualityEpisodeCount [vidQual] = 1;  		}  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsByAnime,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		int animeID = int.Parse (rdr [0].ToString ());  		string mainTitle = rdr [1].ToString ().Trim ();  		string vidQual = rdr [2].ToString ().Trim ();  		int epNumber = int.Parse (rdr [3].ToString ());  		if (animeID == 7656) {  			Debug.Print ("");  		}  		if (!dictStats.ContainsKey (animeID)) {  			AnimeVideoQualityStat stat = new AnimeVideoQualityStat ();  			stat.AnimeID = animeID;  			stat.MainTitle = mainTitle;  			stat.VideoQualityEpisodeCount = new Dictionary<string' int> ();  			stat.VideoQualityEpisodeCount [vidQual] = 1;  			dictStats [animeID] = stat;  		}  		else {  			if (dictStats [animeID].VideoQualityEpisodeCount.ContainsKey (vidQual))  				dictStats [animeID].VideoQualityEpisodeCount [vidQual]++;  			else  				dictStats [animeID].VideoQualityEpisodeCount [vidQual] = 1;  		}  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsByAnime,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		int animeID = int.Parse (rdr [0].ToString ());  		string mainTitle = rdr [1].ToString ().Trim ();  		string vidQual = rdr [2].ToString ().Trim ();  		int epNumber = int.Parse (rdr [3].ToString ());  		if (animeID == 7656) {  			Debug.Print ("");  		}  		if (!dictStats.ContainsKey (animeID)) {  			AnimeVideoQualityStat stat = new AnimeVideoQualityStat ();  			stat.AnimeID = animeID;  			stat.MainTitle = mainTitle;  			stat.VideoQualityEpisodeCount = new Dictionary<string' int> ();  			stat.VideoQualityEpisodeCount [vidQual] = 1;  			dictStats [animeID] = stat;  		}  		else {  			if (dictStats [animeID].VideoQualityEpisodeCount.ContainsKey (vidQual))  				dictStats [animeID].VideoQualityEpisodeCount [vidQual]++;  			else  				dictStats [animeID].VideoQualityEpisodeCount [vidQual] = 1;  		}  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsByAnime,The following statement contains a magic number: while (rdr.Read ()) {  	int animeID = int.Parse (rdr [0].ToString ());  	string mainTitle = rdr [1].ToString ().Trim ();  	string vidQual = rdr [2].ToString ().Trim ();  	int epNumber = int.Parse (rdr [3].ToString ());  	if (animeID == 7656) {  		Debug.Print ("");  	}  	if (!dictStats.ContainsKey (animeID)) {  		AnimeVideoQualityStat stat = new AnimeVideoQualityStat ();  		stat.AnimeID = animeID;  		stat.MainTitle = mainTitle;  		stat.VideoQualityEpisodeCount = new Dictionary<string' int> ();  		stat.VideoQualityEpisodeCount [vidQual] = 1;  		dictStats [animeID] = stat;  	}  	else {  		if (dictStats [animeID].VideoQualityEpisodeCount.ContainsKey (vidQual))  			dictStats [animeID].VideoQualityEpisodeCount [vidQual]++;  		else  			dictStats [animeID].VideoQualityEpisodeCount [vidQual] = 1;  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsByAnime,The following statement contains a magic number: while (rdr.Read ()) {  	int animeID = int.Parse (rdr [0].ToString ());  	string mainTitle = rdr [1].ToString ().Trim ();  	string vidQual = rdr [2].ToString ().Trim ();  	int epNumber = int.Parse (rdr [3].ToString ());  	if (animeID == 7656) {  		Debug.Print ("");  	}  	if (!dictStats.ContainsKey (animeID)) {  		AnimeVideoQualityStat stat = new AnimeVideoQualityStat ();  		stat.AnimeID = animeID;  		stat.MainTitle = mainTitle;  		stat.VideoQualityEpisodeCount = new Dictionary<string' int> ();  		stat.VideoQualityEpisodeCount [vidQual] = 1;  		dictStats [animeID] = stat;  	}  	else {  		if (dictStats [animeID].VideoQualityEpisodeCount.ContainsKey (vidQual))  			dictStats [animeID].VideoQualityEpisodeCount [vidQual]++;  		else  			dictStats [animeID].VideoQualityEpisodeCount [vidQual] = 1;  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsByAnime,The following statement contains a magic number: while (rdr.Read ()) {  	int animeID = int.Parse (rdr [0].ToString ());  	string mainTitle = rdr [1].ToString ().Trim ();  	string vidQual = rdr [2].ToString ().Trim ();  	int epNumber = int.Parse (rdr [3].ToString ());  	if (animeID == 7656) {  		Debug.Print ("");  	}  	if (!dictStats.ContainsKey (animeID)) {  		AnimeVideoQualityStat stat = new AnimeVideoQualityStat ();  		stat.AnimeID = animeID;  		stat.MainTitle = mainTitle;  		stat.VideoQualityEpisodeCount = new Dictionary<string' int> ();  		stat.VideoQualityEpisodeCount [vidQual] = 1;  		dictStats [animeID] = stat;  	}  	else {  		if (dictStats [animeID].VideoQualityEpisodeCount.ContainsKey (vidQual))  			dictStats [animeID].VideoQualityEpisodeCount [vidQual]++;  		else  			dictStats [animeID].VideoQualityEpisodeCount [vidQual] = 1;  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsByAnime,The following statement contains a magic number: if (animeID == 7656) {  	Debug.Print ("");  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsForAnime,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		stat.AnimeID = int.Parse (rdr [0].ToString ());  		stat.MainTitle = rdr [1].ToString ().Trim ();  		string vidQual = rdr [2].ToString ().Trim ();  		int epNumber = int.Parse (rdr [3].ToString ());  		if (!stat.VideoQualityEpisodeCount.ContainsKey (vidQual))  			stat.VideoQualityEpisodeCount [vidQual] = 1;  		else  			stat.VideoQualityEpisodeCount [vidQual]++;  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsForAnime,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		stat.AnimeID = int.Parse (rdr [0].ToString ());  		stat.MainTitle = rdr [1].ToString ().Trim ();  		string vidQual = rdr [2].ToString ().Trim ();  		int epNumber = int.Parse (rdr [3].ToString ());  		if (!stat.VideoQualityEpisodeCount.ContainsKey (vidQual))  			stat.VideoQualityEpisodeCount [vidQual] = 1;  		else  			stat.VideoQualityEpisodeCount [vidQual]++;  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsForAnime,The following statement contains a magic number: while (rdr.Read ()) {  	stat.AnimeID = int.Parse (rdr [0].ToString ());  	stat.MainTitle = rdr [1].ToString ().Trim ();  	string vidQual = rdr [2].ToString ().Trim ();  	int epNumber = int.Parse (rdr [3].ToString ());  	if (!stat.VideoQualityEpisodeCount.ContainsKey (vidQual))  		stat.VideoQualityEpisodeCount [vidQual] = 1;  	else  		stat.VideoQualityEpisodeCount [vidQual]++;  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsForAnime,The following statement contains a magic number: while (rdr.Read ()) {  	stat.AnimeID = int.Parse (rdr [0].ToString ());  	stat.MainTitle = rdr [1].ToString ().Trim ();  	string vidQual = rdr [2].ToString ().Trim ();  	int epNumber = int.Parse (rdr [3].ToString ());  	if (!stat.VideoQualityEpisodeCount.ContainsKey (vidQual))  		stat.VideoQualityEpisodeCount [vidQual] = 1;  	else  		stat.VideoQualityEpisodeCount [vidQual]++;  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAudioLanguageStatsForAnime,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	System.Data.IDbCommand command = session.Connection.CreateCommand ();  	command.CommandText = "SELECT anime.AnimeID' anime.MainTitle' lan.LanguageName ";  	command.CommandText += "FROM AnimeSeries ser  ";  	command.CommandText += "INNER JOIN AniDB_Anime anime on anime.AnimeID = ser.AniDB_ID ";  	command.CommandText += "INNER JOIN AnimeEpisode ep on ep.AnimeSeriesID = ser.AnimeSeriesID ";  	command.CommandText += "INNER JOIN AniDB_Episode aniep on ep.AniDB_EpisodeID = aniep.EpisodeID ";  	command.CommandText += "INNER JOIN CrossRef_File_Episode xref on aniep.EpisodeID = xref.EpisodeID ";  	command.CommandText += "INNER JOIN AniDB_File anifile on anifile.Hash = xref.Hash ";  	command.CommandText += "INNER JOIN CrossRef_Languages_AniDB_File audio on audio.FileID = anifile.FileID ";  	command.CommandText += "INNER JOIN Language lan on audio.LanguageID = lan.LanguageID ";  	command.CommandText += "GROUP BY anime.AnimeID' anime.MainTitle' lan.LanguageName ";  	using (IDataReader rdr = command.ExecuteReader ()) {  		while (rdr.Read ()) {  			int animeID = int.Parse (rdr [0].ToString ());  			string mainTitle = rdr [1].ToString ().Trim ();  			string lanName = rdr [2].ToString ().Trim ();  			if (animeID == 7656) {  				Debug.Print ("");  			}  			if (!dictStats.ContainsKey (animeID)) {  				LanguageStat stat = new LanguageStat ();  				stat.AnimeID = animeID;  				stat.MainTitle = mainTitle;  				stat.LanguageNames = new List<string> ();  				stat.LanguageNames.Add (lanName);  				dictStats [animeID] = stat;  			}  			else  				dictStats [animeID].LanguageNames.Add (lanName);  		}  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAudioLanguageStatsForAnime,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	System.Data.IDbCommand command = session.Connection.CreateCommand ();  	command.CommandText = "SELECT anime.AnimeID' anime.MainTitle' lan.LanguageName ";  	command.CommandText += "FROM AnimeSeries ser  ";  	command.CommandText += "INNER JOIN AniDB_Anime anime on anime.AnimeID = ser.AniDB_ID ";  	command.CommandText += "INNER JOIN AnimeEpisode ep on ep.AnimeSeriesID = ser.AnimeSeriesID ";  	command.CommandText += "INNER JOIN AniDB_Episode aniep on ep.AniDB_EpisodeID = aniep.EpisodeID ";  	command.CommandText += "INNER JOIN CrossRef_File_Episode xref on aniep.EpisodeID = xref.EpisodeID ";  	command.CommandText += "INNER JOIN AniDB_File anifile on anifile.Hash = xref.Hash ";  	command.CommandText += "INNER JOIN CrossRef_Languages_AniDB_File audio on audio.FileID = anifile.FileID ";  	command.CommandText += "INNER JOIN Language lan on audio.LanguageID = lan.LanguageID ";  	command.CommandText += "GROUP BY anime.AnimeID' anime.MainTitle' lan.LanguageName ";  	using (IDataReader rdr = command.ExecuteReader ()) {  		while (rdr.Read ()) {  			int animeID = int.Parse (rdr [0].ToString ());  			string mainTitle = rdr [1].ToString ().Trim ();  			string lanName = rdr [2].ToString ().Trim ();  			if (animeID == 7656) {  				Debug.Print ("");  			}  			if (!dictStats.ContainsKey (animeID)) {  				LanguageStat stat = new LanguageStat ();  				stat.AnimeID = animeID;  				stat.MainTitle = mainTitle;  				stat.LanguageNames = new List<string> ();  				stat.LanguageNames.Add (lanName);  				dictStats [animeID] = stat;  			}  			else  				dictStats [animeID].LanguageNames.Add (lanName);  		}  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAudioLanguageStatsForAnime,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		int animeID = int.Parse (rdr [0].ToString ());  		string mainTitle = rdr [1].ToString ().Trim ();  		string lanName = rdr [2].ToString ().Trim ();  		if (animeID == 7656) {  			Debug.Print ("");  		}  		if (!dictStats.ContainsKey (animeID)) {  			LanguageStat stat = new LanguageStat ();  			stat.AnimeID = animeID;  			stat.MainTitle = mainTitle;  			stat.LanguageNames = new List<string> ();  			stat.LanguageNames.Add (lanName);  			dictStats [animeID] = stat;  		}  		else  			dictStats [animeID].LanguageNames.Add (lanName);  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAudioLanguageStatsForAnime,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		int animeID = int.Parse (rdr [0].ToString ());  		string mainTitle = rdr [1].ToString ().Trim ();  		string lanName = rdr [2].ToString ().Trim ();  		if (animeID == 7656) {  			Debug.Print ("");  		}  		if (!dictStats.ContainsKey (animeID)) {  			LanguageStat stat = new LanguageStat ();  			stat.AnimeID = animeID;  			stat.MainTitle = mainTitle;  			stat.LanguageNames = new List<string> ();  			stat.LanguageNames.Add (lanName);  			dictStats [animeID] = stat;  		}  		else  			dictStats [animeID].LanguageNames.Add (lanName);  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAudioLanguageStatsForAnime,The following statement contains a magic number: while (rdr.Read ()) {  	int animeID = int.Parse (rdr [0].ToString ());  	string mainTitle = rdr [1].ToString ().Trim ();  	string lanName = rdr [2].ToString ().Trim ();  	if (animeID == 7656) {  		Debug.Print ("");  	}  	if (!dictStats.ContainsKey (animeID)) {  		LanguageStat stat = new LanguageStat ();  		stat.AnimeID = animeID;  		stat.MainTitle = mainTitle;  		stat.LanguageNames = new List<string> ();  		stat.LanguageNames.Add (lanName);  		dictStats [animeID] = stat;  	}  	else  		dictStats [animeID].LanguageNames.Add (lanName);  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAudioLanguageStatsForAnime,The following statement contains a magic number: while (rdr.Read ()) {  	int animeID = int.Parse (rdr [0].ToString ());  	string mainTitle = rdr [1].ToString ().Trim ();  	string lanName = rdr [2].ToString ().Trim ();  	if (animeID == 7656) {  		Debug.Print ("");  	}  	if (!dictStats.ContainsKey (animeID)) {  		LanguageStat stat = new LanguageStat ();  		stat.AnimeID = animeID;  		stat.MainTitle = mainTitle;  		stat.LanguageNames = new List<string> ();  		stat.LanguageNames.Add (lanName);  		dictStats [animeID] = stat;  	}  	else  		dictStats [animeID].LanguageNames.Add (lanName);  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAudioLanguageStatsForAnime,The following statement contains a magic number: if (animeID == 7656) {  	Debug.Print ("");  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsForAnime,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	System.Data.IDbCommand command = session.Connection.CreateCommand ();  	command.CommandText = "SELECT anime.AnimeID' anime.MainTitle' lan.LanguageName ";  	command.CommandText += "FROM AnimeSeries ser  ";  	command.CommandText += "INNER JOIN AniDB_Anime anime on anime.AnimeID = ser.AniDB_ID ";  	command.CommandText += "INNER JOIN AnimeEpisode ep on ep.AnimeSeriesID = ser.AnimeSeriesID ";  	command.CommandText += "INNER JOIN AniDB_Episode aniep on ep.AniDB_EpisodeID = aniep.EpisodeID ";  	command.CommandText += "INNER JOIN CrossRef_File_Episode xref on aniep.EpisodeID = xref.EpisodeID ";  	command.CommandText += "INNER JOIN AniDB_File anifile on anifile.Hash = xref.Hash ";  	command.CommandText += "INNER JOIN CrossRef_Subtitles_AniDB_File subt on subt.FileID = anifile.FileID ";  	command.CommandText += "INNER JOIN Language lan on subt.LanguageID = lan.LanguageID ";  	command.CommandText += "GROUP BY anime.AnimeID' anime.MainTitle' lan.LanguageName ";  	using (IDataReader rdr = command.ExecuteReader ()) {  		while (rdr.Read ()) {  			int animeID = int.Parse (rdr [0].ToString ());  			string mainTitle = rdr [1].ToString ().Trim ();  			string lanName = rdr [2].ToString ().Trim ();  			if (animeID == 7656) {  				Debug.Print ("");  			}  			if (!dictStats.ContainsKey (animeID)) {  				LanguageStat stat = new LanguageStat ();  				stat.AnimeID = animeID;  				stat.MainTitle = mainTitle;  				stat.LanguageNames = new List<string> ();  				stat.LanguageNames.Add (lanName);  				dictStats [animeID] = stat;  			}  			else  				dictStats [animeID].LanguageNames.Add (lanName);  		}  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsForAnime,The following statement contains a magic number: using (var session = JMMService.SessionFactory.OpenSession ()) {  	System.Data.IDbCommand command = session.Connection.CreateCommand ();  	command.CommandText = "SELECT anime.AnimeID' anime.MainTitle' lan.LanguageName ";  	command.CommandText += "FROM AnimeSeries ser  ";  	command.CommandText += "INNER JOIN AniDB_Anime anime on anime.AnimeID = ser.AniDB_ID ";  	command.CommandText += "INNER JOIN AnimeEpisode ep on ep.AnimeSeriesID = ser.AnimeSeriesID ";  	command.CommandText += "INNER JOIN AniDB_Episode aniep on ep.AniDB_EpisodeID = aniep.EpisodeID ";  	command.CommandText += "INNER JOIN CrossRef_File_Episode xref on aniep.EpisodeID = xref.EpisodeID ";  	command.CommandText += "INNER JOIN AniDB_File anifile on anifile.Hash = xref.Hash ";  	command.CommandText += "INNER JOIN CrossRef_Subtitles_AniDB_File subt on subt.FileID = anifile.FileID ";  	command.CommandText += "INNER JOIN Language lan on subt.LanguageID = lan.LanguageID ";  	command.CommandText += "GROUP BY anime.AnimeID' anime.MainTitle' lan.LanguageName ";  	using (IDataReader rdr = command.ExecuteReader ()) {  		while (rdr.Read ()) {  			int animeID = int.Parse (rdr [0].ToString ());  			string mainTitle = rdr [1].ToString ().Trim ();  			string lanName = rdr [2].ToString ().Trim ();  			if (animeID == 7656) {  				Debug.Print ("");  			}  			if (!dictStats.ContainsKey (animeID)) {  				LanguageStat stat = new LanguageStat ();  				stat.AnimeID = animeID;  				stat.MainTitle = mainTitle;  				stat.LanguageNames = new List<string> ();  				stat.LanguageNames.Add (lanName);  				dictStats [animeID] = stat;  			}  			else  				dictStats [animeID].LanguageNames.Add (lanName);  		}  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsForAnime,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		int animeID = int.Parse (rdr [0].ToString ());  		string mainTitle = rdr [1].ToString ().Trim ();  		string lanName = rdr [2].ToString ().Trim ();  		if (animeID == 7656) {  			Debug.Print ("");  		}  		if (!dictStats.ContainsKey (animeID)) {  			LanguageStat stat = new LanguageStat ();  			stat.AnimeID = animeID;  			stat.MainTitle = mainTitle;  			stat.LanguageNames = new List<string> ();  			stat.LanguageNames.Add (lanName);  			dictStats [animeID] = stat;  		}  		else  			dictStats [animeID].LanguageNames.Add (lanName);  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsForAnime,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		int animeID = int.Parse (rdr [0].ToString ());  		string mainTitle = rdr [1].ToString ().Trim ();  		string lanName = rdr [2].ToString ().Trim ();  		if (animeID == 7656) {  			Debug.Print ("");  		}  		if (!dictStats.ContainsKey (animeID)) {  			LanguageStat stat = new LanguageStat ();  			stat.AnimeID = animeID;  			stat.MainTitle = mainTitle;  			stat.LanguageNames = new List<string> ();  			stat.LanguageNames.Add (lanName);  			dictStats [animeID] = stat;  		}  		else  			dictStats [animeID].LanguageNames.Add (lanName);  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsForAnime,The following statement contains a magic number: while (rdr.Read ()) {  	int animeID = int.Parse (rdr [0].ToString ());  	string mainTitle = rdr [1].ToString ().Trim ();  	string lanName = rdr [2].ToString ().Trim ();  	if (animeID == 7656) {  		Debug.Print ("");  	}  	if (!dictStats.ContainsKey (animeID)) {  		LanguageStat stat = new LanguageStat ();  		stat.AnimeID = animeID;  		stat.MainTitle = mainTitle;  		stat.LanguageNames = new List<string> ();  		stat.LanguageNames.Add (lanName);  		dictStats [animeID] = stat;  	}  	else  		dictStats [animeID].LanguageNames.Add (lanName);  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsForAnime,The following statement contains a magic number: while (rdr.Read ()) {  	int animeID = int.Parse (rdr [0].ToString ());  	string mainTitle = rdr [1].ToString ().Trim ();  	string lanName = rdr [2].ToString ().Trim ();  	if (animeID == 7656) {  		Debug.Print ("");  	}  	if (!dictStats.ContainsKey (animeID)) {  		LanguageStat stat = new LanguageStat ();  		stat.AnimeID = animeID;  		stat.MainTitle = mainTitle;  		stat.LanguageNames = new List<string> ();  		stat.LanguageNames.Add (lanName);  		dictStats [animeID] = stat;  	}  	else  		dictStats [animeID].LanguageNames.Add (lanName);  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsForAnime,The following statement contains a magic number: if (animeID == 7656) {  	Debug.Print ("");  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAudioLanguageStatsByAnimeResults,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		int animeID = int.Parse (rdr [0].ToString ());  		string mainTitle = rdr [1].ToString ().Trim ();  		string lanName = rdr [2].ToString ().Trim ();  		if (!dictStats.ContainsKey (animeID)) {  			LanguageStat stat = new LanguageStat ();  			stat.AnimeID = animeID;  			stat.MainTitle = mainTitle;  			stat.LanguageNames = new List<string> ();  			stat.LanguageNames.Add (lanName);  			dictStats [animeID] = stat;  		}  		else  			dictStats [animeID].LanguageNames.Add (lanName);  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetAudioLanguageStatsByAnimeResults,The following statement contains a magic number: while (rdr.Read ()) {  	int animeID = int.Parse (rdr [0].ToString ());  	string mainTitle = rdr [1].ToString ().Trim ();  	string lanName = rdr [2].ToString ().Trim ();  	if (!dictStats.ContainsKey (animeID)) {  		LanguageStat stat = new LanguageStat ();  		stat.AnimeID = animeID;  		stat.MainTitle = mainTitle;  		stat.LanguageNames = new List<string> ();  		stat.LanguageNames.Add (lanName);  		dictStats [animeID] = stat;  	}  	else  		dictStats [animeID].LanguageNames.Add (lanName);  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsByAnimeResults,The following statement contains a magic number: using (IDataReader rdr = command.ExecuteReader ()) {  	while (rdr.Read ()) {  		int animeID = int.Parse (rdr [0].ToString ());  		string mainTitle = rdr [1].ToString ().Trim ();  		string lanName = rdr [2].ToString ().Trim ();  		if (!dictStats.ContainsKey (animeID)) {  			LanguageStat stat = new LanguageStat ();  			stat.AnimeID = animeID;  			stat.MainTitle = mainTitle;  			stat.LanguageNames = new List<string> ();  			stat.LanguageNames.Add (lanName);  			dictStats [animeID] = stat;  		}  		else  			dictStats [animeID].LanguageNames.Add (lanName);  	}  }  
Magic Number,JMMServer.Repositories,AdhocRepository,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsByAnimeResults,The following statement contains a magic number: while (rdr.Read ()) {  	int animeID = int.Parse (rdr [0].ToString ());  	string mainTitle = rdr [1].ToString ().Trim ();  	string lanName = rdr [2].ToString ().Trim ();  	if (!dictStats.ContainsKey (animeID)) {  		LanguageStat stat = new LanguageStat ();  		stat.AnimeID = animeID;  		stat.MainTitle = mainTitle;  		stat.LanguageNames = new List<string> ();  		stat.LanguageNames.Add (lanName);  		dictStats [animeID] = stat;  	}  	else  		dictStats [animeID].LanguageNames.Add (lanName);  }  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,Reflect,The following statement contains a magic number: for (int i = 0; i < 32; i++) {  	oval = (oval << 1) + (val & 1);  	val >>= 1;  }  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,BuildCRC32Table,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	dwCrc = (uint)i;  	for (int j = 8; j > 0; j--) {  		if ((dwCrc & 1) == 1)  			dwCrc = (dwCrc >> 1) ^ ulPolynomial;  		else  			dwCrc >>= 1;  	}  	table [i] = dwCrc;  }  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,BuildCRC32Table,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	dwCrc = (uint)i;  	for (int j = 8; j > 0; j--) {  		if ((dwCrc & 1) == 1)  			dwCrc = (dwCrc >> 1) ^ ulPolynomial;  		else  			dwCrc >>= 1;  	}  	table [i] = dwCrc;  }  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,BuildCRC32Table,The following statement contains a magic number: for (int j = 8; j > 0; j--) {  	if ((dwCrc & 1) == 1)  		dwCrc = (dwCrc >> 1) ^ ulPolynomial;  	else  		dwCrc >>= 1;  }  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,CRC32,The following statement contains a magic number: this.HashSizeValue = 32;  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,HashCore,The following statement contains a magic number: for (int i = offset; i < offset + count; i++) {  	ulong tabPtr = (m_crc & 0xFF) ^ buffer [i];  	m_crc >>= 8;  	m_crc ^= crc32Table [tabPtr];  }  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,HashCore,The following statement contains a magic number: m_crc >>= 8;  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash [0] = (byte)((finalCRC >> 24) & 0xFF);  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash [1] = (byte)((finalCRC >> 16) & 0xFF);  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash [2] = (byte)((finalCRC >> 8) & 0xFF);  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash [2] = (byte)((finalCRC >> 8) & 0xFF);  
Magic Number,JMMServer.Security,CRC32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Security\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash [3] = (byte)((finalCRC >> 0) & 0xFF);  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int n = 0; n < rgCopies.Count; n++) {  	List<T> rgList = rgCopies [n];  	// Be conservative and set the initial sublist capacity to a small number' but  	// still honor the original list's item count.  (Example: If you are sorting a list  	// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  	// each sublist (each of which store all Address information entries with the same Zipcode)  	// with a capacity of 1000.   32'000 / 32 = 1000  	List<T> rgSublist = new List<T> (rgList.Count / 32);  	// Compare items to the item that preceeded it to determine where the "value boundaries"   	// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  	// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  	// when comparing elements during the sort routine).    	// Another alternative is to take advantage of the fact that the list is sorted and to  	// use a O(LogN) binary search rather than the (currently) linear O(N) search.  	for (int j = 0; j < rgList.Count; j++) {  		T item = rgList [j];  		if (j > 0) {  			// Compare the item to the preceeding item using the same comparison criterion  			// used during the sort  			T itemprev = rgList [j - 1];  			if (compare.Compare (item' itemprev) == 0) {  				// The item had the same property or field value as the preceeding item.    				// Add it on to the same sublist.  				rgSublist.Add (item);  			}  			else {  				// The item did NOT have the same property or field value as the preceeding item.  				// "Close up" the previous sublist and start a new one.  				rgNewCopies.Add (rgSublist);  				rgSublist = new List<T> (rgList.Count / 32);  				rgSublist.Add (item);  			}  		}  		else {  			// The first item has no predecessor - just add the item to the first sublist  			rgSublist.Add (item);  		}  	}  	// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  	// Add the last created sublist to our "master list of sublists" :P  	// It may be that this list has 0 elements in some cases' but this is not a problem  	rgNewCopies.Add (rgSublist);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int n = 0; n < rgCopies.Count; n++) {  	List<T> rgList = rgCopies [n];  	// Be conservative and set the initial sublist capacity to a small number' but  	// still honor the original list's item count.  (Example: If you are sorting a list  	// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  	// each sublist (each of which store all Address information entries with the same Zipcode)  	// with a capacity of 1000.   32'000 / 32 = 1000  	List<T> rgSublist = new List<T> (rgList.Count / 32);  	// Compare items to the item that preceeded it to determine where the "value boundaries"   	// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  	// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  	// when comparing elements during the sort routine).    	// Another alternative is to take advantage of the fact that the list is sorted and to  	// use a O(LogN) binary search rather than the (currently) linear O(N) search.  	for (int j = 0; j < rgList.Count; j++) {  		T item = rgList [j];  		if (j > 0) {  			// Compare the item to the preceeding item using the same comparison criterion  			// used during the sort  			T itemprev = rgList [j - 1];  			if (compare.Compare (item' itemprev) == 0) {  				// The item had the same property or field value as the preceeding item.    				// Add it on to the same sublist.  				rgSublist.Add (item);  			}  			else {  				// The item did NOT have the same property or field value as the preceeding item.  				// "Close up" the previous sublist and start a new one.  				rgNewCopies.Add (rgSublist);  				rgSublist = new List<T> (rgList.Count / 32);  				rgSublist.Add (item);  			}  		}  		else {  			// The first item has no predecessor - just add the item to the first sublist  			rgSublist.Add (item);  		}  	}  	// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  	// Add the last created sublist to our "master list of sublists" :P  	// It may be that this list has 0 elements in some cases' but this is not a problem  	rgNewCopies.Add (rgSublist);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int j = 0; j < rgList.Count; j++) {  	T item = rgList [j];  	if (j > 0) {  		// Compare the item to the preceeding item using the same comparison criterion  		// used during the sort  		T itemprev = rgList [j - 1];  		if (compare.Compare (item' itemprev) == 0) {  			// The item had the same property or field value as the preceeding item.    			// Add it on to the same sublist.  			rgSublist.Add (item);  		}  		else {  			// The item did NOT have the same property or field value as the preceeding item.  			// "Close up" the previous sublist and start a new one.  			rgNewCopies.Add (rgSublist);  			rgSublist = new List<T> (rgList.Count / 32);  			rgSublist.Add (item);  		}  	}  	else {  		// The first item has no predecessor - just add the item to the first sublist  		rgSublist.Add (item);  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (j > 0) {  	// Compare the item to the preceeding item using the same comparison criterion  	// used during the sort  	T itemprev = rgList [j - 1];  	if (compare.Compare (item' itemprev) == 0) {  		// The item had the same property or field value as the preceeding item.    		// Add it on to the same sublist.  		rgSublist.Add (item);  	}  	else {  		// The item did NOT have the same property or field value as the preceeding item.  		// "Close up" the previous sublist and start a new one.  		rgNewCopies.Add (rgSublist);  		rgSublist = new List<T> (rgList.Count / 32);  		rgSublist.Add (item);  	}  }  else {  	// The first item has no predecessor - just add the item to the first sublist  	rgSublist.Add (item);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (compare.Compare (item' itemprev) == 0) {  	// The item had the same property or field value as the preceeding item.    	// Add it on to the same sublist.  	rgSublist.Add (item);  }  else {  	// The item did NOT have the same property or field value as the preceeding item.  	// "Close up" the previous sublist and start a new one.  	rgNewCopies.Add (rgSublist);  	rgSublist = new List<T> (rgList.Count / 32);  	rgSublist.Add (item);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: rgSublist = new List<T> (rgList.Count / 32);  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (fFoundProperty == false) {  	fFoundProperty = true;  	if (pi == null) {  		PropertyDescriptorCollection props = TypeDescriptor.GetProperties (typeof(T));  		property = props [sPropertyName];  		pi = typeof(T).GetProperty (sPropertyName);  		if (pi == null) {  			throw new Exception ("Property name " + sPropertyName + " not found while trying to compare objects of type " + typeof(T).Name);  		}  	}  	typ = pi.PropertyType;  	// Set up the property comparison delegate to use based on the type of values we will be comparing  	if (sortType == SortType.eUsePropertyOrFieldType) {  		sortType = Sorting.GetSortTypeEnumForType (typ);  		if (typ == typeof(string)) {  			if (stringComparisonToUse == StringComparison.Ordinal)  				DoCompare = StringCompareOrdinal;  			else  				DoCompare = StringCompare;  		}  		else if (typ == typeof(int) && !fSortDescending)  			DoCompare = CompareInt;  		else if (typ == typeof(int))  			DoCompare = CompareIntDesc;  		else if (typ == typeof(DateTime))  			DoCompare = CompareDates;  		else if (typ == typeof(long))  			DoCompare = CompareTypeSensitive<long>;  		else if (typ == typeof(double))  			DoCompare = CompareTypeSensitive<double>;  		else if (typ == typeof(float))  			DoCompare = CompareTypeSensitive<float>;  		else if (typ == typeof(short))  			DoCompare = CompareTypeSensitive<short>;  		else if (typ == typeof(byte))  			DoCompare = CompareTypeSensitive<byte>;  		else if (typ == typeof(bool))  			DoCompare = CompareTypeSensitive<bool>;  		else if (typ.BaseType == typeof(Enum)) {  			FastEnumLookup = new Dictionary<int' string> (32);  			if (fSortDescending) {  				DoCompare = FastCompareEnumsDesc;  			}  			else {  				DoCompare = FastCompareEnumsAsc;  			}  		}  		else  			DoCompare = CompareUsingToString;  	}  	else {  		if (sortType == SortType.eString)  			DoCompare = CompareUsingToString;  		else if (sortType == SortType.eByte)  			DoCompare = CompareUsingToByte;  		else if (sortType == SortType.eDateTime)  			DoCompare = CompareUsingToDate;  		else if (sortType == SortType.eInteger)  			DoCompare = CompareUsingToInt;  		else if (sortType == SortType.eLong)  			DoCompare = CompareUsingToInt64;  		else if (sortType == SortType.eDoubleOrFloat)  			DoCompare = CompareUsingToDouble;  		else  			DoCompare = CompareUsingToString;  	}  }  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (sortType == SortType.eUsePropertyOrFieldType) {  	sortType = Sorting.GetSortTypeEnumForType (typ);  	if (typ == typeof(string)) {  		if (stringComparisonToUse == StringComparison.Ordinal)  			DoCompare = StringCompareOrdinal;  		else  			DoCompare = StringCompare;  	}  	else if (typ == typeof(int) && !fSortDescending)  		DoCompare = CompareInt;  	else if (typ == typeof(int))  		DoCompare = CompareIntDesc;  	else if (typ == typeof(DateTime))  		DoCompare = CompareDates;  	else if (typ == typeof(long))  		DoCompare = CompareTypeSensitive<long>;  	else if (typ == typeof(double))  		DoCompare = CompareTypeSensitive<double>;  	else if (typ == typeof(float))  		DoCompare = CompareTypeSensitive<float>;  	else if (typ == typeof(short))  		DoCompare = CompareTypeSensitive<short>;  	else if (typ == typeof(byte))  		DoCompare = CompareTypeSensitive<byte>;  	else if (typ == typeof(bool))  		DoCompare = CompareTypeSensitive<bool>;  	else if (typ.BaseType == typeof(Enum)) {  		FastEnumLookup = new Dictionary<int' string> (32);  		if (fSortDescending) {  			DoCompare = FastCompareEnumsDesc;  		}  		else {  			DoCompare = FastCompareEnumsAsc;  		}  	}  	else  		DoCompare = CompareUsingToString;  }  else {  	if (sortType == SortType.eString)  		DoCompare = CompareUsingToString;  	else if (sortType == SortType.eByte)  		DoCompare = CompareUsingToByte;  	else if (sortType == SortType.eDateTime)  		DoCompare = CompareUsingToDate;  	else if (sortType == SortType.eInteger)  		DoCompare = CompareUsingToInt;  	else if (sortType == SortType.eLong)  		DoCompare = CompareUsingToInt64;  	else if (sortType == SortType.eDoubleOrFloat)  		DoCompare = CompareUsingToDouble;  	else  		DoCompare = CompareUsingToString;  }  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(string)) {  	if (stringComparisonToUse == StringComparison.Ordinal)  		DoCompare = StringCompareOrdinal;  	else  		DoCompare = StringCompare;  }  else if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: FastEnumLookup = new Dictionary<int' string> (32);  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (fFoundField == false) {  	fFoundField = true;  	if (fi == null) {  		// You can play around with binding flags if you really want to access nonpublic fields' etc...   		// note that there is a significant performance hit on accessing protected and private fields'  		// since security / permissions are checked every time' from what I can tell.  It's better  		// just to go through public properties if you're not accessing public fields.  		// fi = typeof(T).GetField(sFieldName' BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);  		fi = typeof(T).GetField (sFieldName);  		if (fi == null) {  			throw new Exception ("Field name " + sFieldName + " not found while trying to compare objects of type " + typeof(T).Name);  		}  	}  	typ = fi.FieldType;  	if (sortType == SortType.eUsePropertyOrFieldType) {  		sortType = Sorting.GetSortTypeEnumForType (typ);  		if (typ == typeof(string)) {  			if (stringComparisonToUse == StringComparison.Ordinal)  				DoCompare = StringCompareOrdinal;  			else  				DoCompare = StringCompare;  		}  		else if (typ == typeof(int) && !fSortDescending)  			DoCompare = CompareInt;  		else if (typ == typeof(int))  			DoCompare = CompareIntDesc;  		else if (typ == typeof(DateTime))  			DoCompare = CompareDates;  		else if (typ == typeof(long))  			DoCompare = CompareTypeSensitive<long>;  		else if (typ == typeof(double))  			DoCompare = CompareTypeSensitive<double>;  		else if (typ == typeof(float))  			DoCompare = CompareTypeSensitive<float>;  		else if (typ == typeof(short))  			DoCompare = CompareTypeSensitive<short>;  		else if (typ == typeof(byte))  			DoCompare = CompareTypeSensitive<byte>;  		else if (typ == typeof(bool))  			DoCompare = CompareTypeSensitive<bool>;  		else if (typ.BaseType == typeof(Enum)) {  			FastEnumLookup = new Dictionary<int' string> (32);  			if (fSortDescending) {  				DoCompare = FastCompareEnumsDesc;  			}  			else {  				DoCompare = FastCompareEnumsAsc;  			}  		}  		else  			DoCompare = CompareUsingToString;  		// optimize to use the ABOVE path if the property or field type matches  		// the requested sort type (i.e. below)  	}  	else {  		if (sortType == SortType.eString)  			DoCompare = CompareUsingToString;  		else if (sortType == SortType.eByte)  			DoCompare = CompareUsingToByte;  		else if (sortType == SortType.eDateTime)  			DoCompare = CompareUsingToDate;  		else if (sortType == SortType.eInteger)  			DoCompare = CompareUsingToInt;  		else if (sortType == SortType.eLong)  			DoCompare = CompareUsingToInt64;  		else if (sortType == SortType.eDoubleOrFloat)  			DoCompare = CompareUsingToDouble;  		else  			DoCompare = CompareUsingToString;  	}  }  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (sortType == SortType.eUsePropertyOrFieldType) {  	sortType = Sorting.GetSortTypeEnumForType (typ);  	if (typ == typeof(string)) {  		if (stringComparisonToUse == StringComparison.Ordinal)  			DoCompare = StringCompareOrdinal;  		else  			DoCompare = StringCompare;  	}  	else if (typ == typeof(int) && !fSortDescending)  		DoCompare = CompareInt;  	else if (typ == typeof(int))  		DoCompare = CompareIntDesc;  	else if (typ == typeof(DateTime))  		DoCompare = CompareDates;  	else if (typ == typeof(long))  		DoCompare = CompareTypeSensitive<long>;  	else if (typ == typeof(double))  		DoCompare = CompareTypeSensitive<double>;  	else if (typ == typeof(float))  		DoCompare = CompareTypeSensitive<float>;  	else if (typ == typeof(short))  		DoCompare = CompareTypeSensitive<short>;  	else if (typ == typeof(byte))  		DoCompare = CompareTypeSensitive<byte>;  	else if (typ == typeof(bool))  		DoCompare = CompareTypeSensitive<bool>;  	else if (typ.BaseType == typeof(Enum)) {  		FastEnumLookup = new Dictionary<int' string> (32);  		if (fSortDescending) {  			DoCompare = FastCompareEnumsDesc;  		}  		else {  			DoCompare = FastCompareEnumsAsc;  		}  	}  	else  		DoCompare = CompareUsingToString;  	// optimize to use the ABOVE path if the property or field type matches  	// the requested sort type (i.e. below)  }  else {  	if (sortType == SortType.eString)  		DoCompare = CompareUsingToString;  	else if (sortType == SortType.eByte)  		DoCompare = CompareUsingToByte;  	else if (sortType == SortType.eDateTime)  		DoCompare = CompareUsingToDate;  	else if (sortType == SortType.eInteger)  		DoCompare = CompareUsingToInt;  	else if (sortType == SortType.eLong)  		DoCompare = CompareUsingToInt64;  	else if (sortType == SortType.eDoubleOrFloat)  		DoCompare = CompareUsingToDouble;  	else  		DoCompare = CompareUsingToString;  }  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(string)) {  	if (stringComparisonToUse == StringComparison.Ordinal)  		DoCompare = StringCompareOrdinal;  	else  		DoCompare = StringCompare;  }  else if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: FastEnumLookup = new Dictionary<int' string> (32);  
Magic Number,JMMServer.UI,InitialSetupForm,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\InitialSetupForm.xaml.cs,workerTestLogin_DoWork,The following statement contains a magic number: try {  	workerTestLogin.ReportProgress (0' "Disposing...");  	JMMService.AnidbProcessor.ForceLogout ();  	JMMService.AnidbProcessor.CloseConnections ();  	Thread.Sleep (1000);  	workerTestLogin.ReportProgress (0' "Init...");  	JMMService.AnidbProcessor.Init (ServerSettings.AniDB_Username' ServerSettings.AniDB_Password' ServerSettings.AniDB_ServerAddress' ServerSettings.AniDB_ServerPort' ServerSettings.AniDB_ClientPort);  	workerTestLogin.ReportProgress (0' "Login...");  	if (JMMService.AnidbProcessor.Login ()) {  		workerTestLogin.ReportProgress (0' "Login Success! Logging out...");  		JMMService.AnidbProcessor.ForceLogout ();  		workerTestLogin.ReportProgress (0' "Login Success! Logged out.");  	}  	else {  		workerTestLogin.ReportProgress (0' "Login FAILED!");  	}  }  catch (Exception ex) {  	workerTestLogin.ReportProgress (0' ex.Message);  }  
Magic Number,JMMServer.UI,InitialSetupForm,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\UI\InitialSetupForm.xaml.cs,workerTestLogin_DoWork,The following statement contains a magic number: Thread.Sleep (1000);  
Missing Default,JMMServer,JMMServiceImplementationMetro,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationMetro.cs,GetAniDBRecommendationsForAnime,The following switch statement is missing a default case: switch (recType) {  case AniDBRecommendationType.ForFans:  	shout.ShoutType = (int)WhatPeopleAreSayingType.AniDBForFans;  	break;  case AniDBRecommendationType.MustSee:  	shout.ShoutType = (int)WhatPeopleAreSayingType.AniDBMustSee;  	break;  case AniDBRecommendationType.Recommended:  	shout.ShoutType = (int)WhatPeopleAreSayingType.AniDBRecommendation;  	break;  }  
Missing Default,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,GetMetadata,The following switch statement is missing a default case: switch ((JMMType)type) {  case JMMType.Group:  	return GetItemsFromGroup (UserId' Id);  case JMMType.GroupFilter:  	return GetGroupsFromFilter (UserId' Id);  case JMMType.GroupUnsort:  	return GetUnsort ();  case JMMType.Serie:  	return GetItemsFromSerie (UserId' Id);  case JMMType.File:  	return InternalGetFile (Id);  }  
Missing Default,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,Search,The following switch statement is missing a default case: switch (anidb_anime.AnimeTypeEnum) {  case enAnimeType.Movie:  	v.SourceTitle = "Anime Movies";  	v.Type = "movie";  	break;  case enAnimeType.OVA:  	v.SourceTitle = "Anime Ovas";  	v.Type = "show";  	break;  case enAnimeType.Other:  	v.SourceTitle = "Anime Others";  	v.Type = "show";  	break;  case enAnimeType.TVSeries:  	v.SourceTitle = "Anime Series";  	v.Type = "show";  	break;  case enAnimeType.TVSpecial:  	v.SourceTitle = "Anime Specials";  	v.Type = "show";  	break;  case enAnimeType.Web:  	v.SourceTitle = "Anime Web Clips";  	v.Type = "show";  	break;  }  
Missing Default,JMMServer,JMMServiceImplementationPlex,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementationPlex.cs,EpisodeTypeTranslated,The following switch statement is missing a default case: switch (an) {  case AnimeTypes.Movie:  	tp.Name = plural ? "Movies" : "Movie";  	tp.Image = "plex_movies.png";  	return;  case AnimeTypes.OVA:  	tp.Name = plural ? "Ovas" : "Ova";  	tp.Image = "plex_ovas.png";  	return;  case AnimeTypes.Other:  	tp.Name = plural ? "Others" : "Other";  	tp.Image = "plex_others.png";  	return;  case AnimeTypes.TV_Series:  	tp.Name = plural ? "Episodes" : "Episode";  	tp.Image = "plex_episodes.png";  	return;  case AnimeTypes.TV_Special:  	tp.Name = plural ? "TV Episodes" : "TV Episode";  	tp.Image = "plex_tvepisodes.png";  	return;  case AnimeTypes.Web:  	tp.Name = plural ? "Web Clips" : "Web Clip";  	tp.Image = "plex_webclips.png";  	return;  }  
Missing Default,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,EnableDisableImage,The following switch statement is missing a default case: switch (imgType) {  case JMMImageType.AniDB_Cover:  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AniDB_Anime anime = repAnime.GetByAnimeID (imageID);  	if (anime == null)  		return "Could not find anime";  	anime.ImageEnabled = enabled ? 1 : 0;  	repAnime.Save (anime);  	break;  case JMMImageType.TvDB_Banner:  	TvDB_ImageWideBannerRepository repBanners = new TvDB_ImageWideBannerRepository ();  	TvDB_ImageWideBanner banner = repBanners.GetByID (imageID);  	if (banner == null)  		return "Could not find image";  	banner.Enabled = enabled ? 1 : 0;  	repBanners.Save (banner);  	break;  case JMMImageType.TvDB_Cover:  	TvDB_ImagePosterRepository repPosters = new TvDB_ImagePosterRepository ();  	TvDB_ImagePoster poster = repPosters.GetByID (imageID);  	if (poster == null)  		return "Could not find image";  	poster.Enabled = enabled ? 1 : 0;  	repPosters.Save (poster);  	break;  case JMMImageType.TvDB_FanArt:  	TvDB_ImageFanartRepository repFanart = new TvDB_ImageFanartRepository ();  	TvDB_ImageFanart fanart = repFanart.GetByID (imageID);  	if (fanart == null)  		return "Could not find image";  	fanart.Enabled = enabled ? 1 : 0;  	repFanart.Save (fanart);  	break;  case JMMImageType.MovieDB_Poster:  	MovieDB_PosterRepository repMoviePosters = new MovieDB_PosterRepository ();  	MovieDB_Poster moviePoster = repMoviePosters.GetByID (imageID);  	if (moviePoster == null)  		return "Could not find image";  	moviePoster.Enabled = enabled ? 1 : 0;  	repMoviePosters.Save (moviePoster);  	break;  case JMMImageType.MovieDB_FanArt:  	MovieDB_FanartRepository repMovieFanart = new MovieDB_FanartRepository ();  	MovieDB_Fanart movieFanart = repMovieFanart.GetByID (imageID);  	if (movieFanart == null)  		return "Could not find image";  	movieFanart.Enabled = enabled ? 1 : 0;  	repMovieFanart.Save (movieFanart);  	break;  case JMMImageType.Trakt_Poster:  	Trakt_ImagePosterRepository repTraktPosters = new Trakt_ImagePosterRepository ();  	Trakt_ImagePoster traktPoster = repTraktPosters.GetByID (imageID);  	if (traktPoster == null)  		return "Could not find image";  	traktPoster.Enabled = enabled ? 1 : 0;  	repTraktPosters.Save (traktPoster);  	break;  case JMMImageType.Trakt_Fanart:  	Trakt_ImageFanartRepository repTraktFanart = new Trakt_ImageFanartRepository ();  	Trakt_ImageFanart traktFanart = repTraktFanart.GetByID (imageID);  	if (traktFanart == null)  		return "Could not find image";  	traktFanart.Enabled = enabled ? 1 : 0;  	repTraktFanart.Save (traktFanart);  	break;  }  
Missing Default,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SetDefaultImage,The following switch statement is missing a default case: switch (imgType) {  case JMMImageType.AniDB_Cover:  case JMMImageType.TvDB_Cover:  case JMMImageType.MovieDB_Poster:  case JMMImageType.Trakt_Poster:  	sizeType = ImageSizeType.Poster;  	break;  case JMMImageType.TvDB_Banner:  	sizeType = ImageSizeType.WideBanner;  	break;  case JMMImageType.TvDB_FanArt:  case JMMImageType.MovieDB_FanArt:  case JMMImageType.Trakt_Fanart:  	sizeType = ImageSizeType.Fanart;  	break;  }  
Missing Default,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,LinkAniDBOther,The following switch statement is missing a default case: switch (xrefType) {  case CrossRefType.MovieDB:  	MovieDBHelper.LinkAniDBMovieDB (animeID' movieID' false);  	break;  }  
Missing Default,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,RemoveLinkAniDBOther,The following switch statement is missing a default case: switch (xrefType) {  case CrossRefType.MovieDB:  	// check if there are default images used associated  	AniDB_Anime_DefaultImageRepository repDefaults = new AniDB_Anime_DefaultImageRepository ();  	List<AniDB_Anime_DefaultImage> images = repDefaults.GetByAnimeID (animeID);  	foreach (AniDB_Anime_DefaultImage image in images) {  		if (image.ImageParentType == (int)JMMImageType.MovieDB_FanArt || image.ImageParentType == (int)JMMImageType.MovieDB_Poster) {  			repDefaults.Delete (image.AniDB_Anime_DefaultImageID);  		}  	}  	MovieDBHelper.RemoveLinkAniDBMovieDB (animeID);  	break;  }  
Missing Default,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,GetRecommendations,The following switch statement is missing a default case: switch (recommendationType) {  case 1:  	ignoreType = 1;  	break;  case 2:  	ignoreType = 2;  	break;  }  
Missing Default,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,IncrementEpisodeStats,The following switch statement is missing a default case: switch ((StatCountType)statCountType) {  case StatCountType.Played:  	epUserRecord.PlayedCount++;  	break;  case StatCountType.Stopped:  	epUserRecord.StoppedCount++;  	break;  case StatCountType.Watched:  	epUserRecord.WatchedCount++;  	break;  }  
Missing Default,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,IncrementEpisodeStats,The following switch statement is missing a default case: switch ((StatCountType)statCountType) {  case StatCountType.Played:  	userRecord.PlayedCount++;  	break;  case StatCountType.Stopped:  	userRecord.StoppedCount++;  	break;  case StatCountType.Watched:  	userRecord.WatchedCount++;  	break;  }  
Missing Default,JMMServer,JMMServiceImplementation,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\JMMServiceImplementation.cs,SearchForFiles,The following switch statement is missing a default case: switch (sType) {  case FileSearchCriteria.Name:  	List<VideoLocal> results1 = repVids.GetByName (searchCriteria.Trim ());  	foreach (VideoLocal vid in results1)  		vids.Add (vid.ToContract (userID));  	break;  case FileSearchCriteria.ED2KHash:  	VideoLocal vidByHash = repVids.GetByHash (searchCriteria.Trim ());  	if (vidByHash != null)  		vids.Add (vidByHash.ToContract (userID));  	break;  case FileSearchCriteria.Size:  	break;  case FileSearchCriteria.LastOneHundred:  	List<VideoLocal> results2 = repVids.GetMostRecentlyAdded (100);  	foreach (VideoLocal vid in results2)  		vids.Add (vid.ToContract (userID));  	break;  }  
Missing Default,JMMServer,StatsCache,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\StatsCache.cs,EvaluateGroupFilter,The following switch statement is missing a default case: switch (gfc.ConditionTypeEnum) {  case GroupFilterConditionType.Favourite:  	if (userRec == null)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && userRec.IsFave == 0)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && userRec.IsFave == 1)  		return false;  	break;  case GroupFilterConditionType.MissingEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesAny == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesAny == true)  		return false;  	break;  case GroupFilterConditionType.MissingEpisodesCollecting:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesGroups == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesGroups == true)  		return false;  	break;  case GroupFilterConditionType.HasWatchedEpisodes:  	if (userRec == null)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && userRec.AnyFilesWatched == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && userRec.AnyFilesWatched == true)  		return false;  	break;  case GroupFilterConditionType.HasUnwatchedEpisodes:  	if (userRec == null)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && userRec.HasUnwatchedFiles == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && userRec.HasUnwatchedFiles == true)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasTvDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasTvDBLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedMALInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasMALLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasMALLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedMovieDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasMovieDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasMovieDBLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasMovieDBOrTvDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_HasMovieDBOrTvDBLink == true)  		return false;  	break;  case GroupFilterConditionType.CompletedSeries:  	/*if (grp.IsComplete != grp.Stat_IsComplete) 						{ 							Debug.Print("IsComplete DIFF  {0}"' grp.GroupName); 						}*/if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_IsComplete == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_IsComplete == true)  		return false;  	break;  case GroupFilterConditionType.FinishedAiring:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_HasFinishedAiring == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_IsCurrentlyAiring == false)  		return false;  	break;  case GroupFilterConditionType.UserVoted:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_UserVotePermanent.HasValue == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_UserVotePermanent.HasValue == true)  		return false;  	break;  case GroupFilterConditionType.UserVotedAny:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && contractGroup.Stat_UserVoteOverall.HasValue == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && contractGroup.Stat_UserVoteOverall.HasValue == true)  		return false;  	break;  case GroupFilterConditionType.AirDate:  	DateTime filterDate;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDate = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDate = GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!contractGroup.Stat_AirDate_Min.HasValue || !contractGroup.Stat_AirDate_Max.HasValue)  			return false;  		if (contractGroup.Stat_AirDate_Max.Value < filterDate)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!contractGroup.Stat_AirDate_Min.HasValue || !contractGroup.Stat_AirDate_Max.HasValue)  			return false;  		if (contractGroup.Stat_AirDate_Min.Value > filterDate)  			return false;  	}  	break;  case GroupFilterConditionType.SeriesCreatedDate:  	DateTime filterDateSeries;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateSeries = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateSeries = GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!contractGroup.Stat_SeriesCreatedDate.HasValue)  			return false;  		if (contractGroup.Stat_SeriesCreatedDate.Value < filterDateSeries)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!contractGroup.Stat_SeriesCreatedDate.HasValue)  			return false;  		if (contractGroup.Stat_SeriesCreatedDate.Value > filterDateSeries)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeWatchedDate:  	DateTime filterDateEpsiodeWatched;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpsiodeWatched = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpsiodeWatched = GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (userRec == null)  			return false;  		if (!userRec.WatchedDate.HasValue)  			return false;  		if (userRec.WatchedDate.Value < filterDateEpsiodeWatched)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (userRec == null)  			return false;  		if (!userRec.WatchedDate.HasValue)  			return false;  		if (userRec.WatchedDate.Value > filterDateEpsiodeWatched)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeAddedDate:  	DateTime filterDateEpisodeAdded;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpisodeAdded = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpisodeAdded = GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.EpisodeAddedDate.HasValue)  			return false;  		if (grp.EpisodeAddedDate.Value < filterDateEpisodeAdded)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.EpisodeAddedDate.HasValue)  			return false;  		if (grp.EpisodeAddedDate.Value > filterDateEpisodeAdded)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeCount:  	int epCount = -1;  	int.TryParse (gfc.ConditionParameter' out epCount);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && contractGroup.Stat_EpisodeCount < epCount)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && contractGroup.Stat_EpisodeCount > epCount)  		return false;  	break;  case GroupFilterConditionType.AniDBRating:  	decimal dRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dRating);  	decimal thisRating = contractGroup.Stat_AniDBRating / (decimal)100;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && thisRating < dRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && thisRating > dRating)  		return false;  	break;  case GroupFilterConditionType.UserRating:  	if (!contractGroup.Stat_UserVoteOverall.HasValue)  		return false;  	decimal dUserRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dUserRating);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && contractGroup.Stat_UserVoteOverall.Value < dUserRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && contractGroup.Stat_UserVoteOverall.Value > dUserRating)  		return false;  	break;  case GroupFilterConditionType.Category:  	string filterParm = gfc.ConditionParameter.Trim ();  	string[] cats = filterParm.Split (''');  	bool foundCat = false;  	int index = 0;  	foreach (string cat in cats) {  		if (cat.Trim ().Length == 0)  			continue;  		if (cat.Trim () == "'")  			continue;  		index = contractGroup.Stat_AllCategories.IndexOf (cat' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1) {  			foundCat = true;  			break;  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundCat)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundCat)  			return false;  	break;  case GroupFilterConditionType.AnimeType:  	filterParm = gfc.ConditionParameter.Trim ();  	List<string> grpTypeList = grp.AnimeTypesList;  	string[] atypes = filterParm.Split (''');  	bool foundAnimeType = false;  	index = 0;  	foreach (string atype in atypes) {  		if (atype.Trim ().Length == 0)  			continue;  		if (atype.Trim () == "'")  			continue;  		foreach (string thisAType in grpTypeList) {  			if (string.Equals (thisAType' atype' StringComparison.InvariantCultureIgnoreCase)) {  				foundAnimeType = true;  				break;  			}  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundAnimeType)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundAnimeType)  			return false;  	break;  case GroupFilterConditionType.VideoQuality:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] vidQuals = filterParm.Split (''');  	bool foundVid = false;  	bool foundVidAllEps = false;  	index = 0;  	foreach (string vidq in vidQuals) {  		if (vidq.Trim ().Length == 0)  			continue;  		if (vidq.Trim () == "'")  			continue;  		index = contractGroup.Stat_AllVideoQuality.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVid = true;  		index = contractGroup.Stat_AllVideoQuality_Episodes.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVidAllEps = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.InAllEpisodes)  		if (!foundVidAllEps)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotInAllEpisodes)  		if (foundVidAllEps)  			return false;  	break;  case GroupFilterConditionType.AudioLanguage:  case GroupFilterConditionType.SubtitleLanguage:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] languages = filterParm.Split (''');  	bool foundLan = false;  	index = 0;  	foreach (string lanName in languages) {  		if (lanName.Trim ().Length == 0)  			continue;  		if (lanName.Trim () == "'")  			continue;  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.AudioLanguage)  			index = contractGroup.Stat_AudioLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.SubtitleLanguage)  			index = contractGroup.Stat_SubtitleLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundLan = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundLan)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundLan)  			return false;  	break;  }  
Missing Default,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTestH,The following switch statement is missing a default case: switch (episodes [0].EpisodeTypeEnum) {  case AniDBAPI.enEpisodeType.Episode:  	epType = "E";  	break;  case AniDBAPI.enEpisodeType.Credits:  	epType = "C";  	break;  case AniDBAPI.enEpisodeType.Other:  	epType = "O";  	break;  case AniDBAPI.enEpisodeType.Parody:  	epType = "P";  	break;  case AniDBAPI.enEpisodeType.Special:  	epType = "S";  	break;  case AniDBAPI.enEpisodeType.Trailer:  	epType = "T";  	break;  }  
Missing Default,JMMServer,RenameFileHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utilities\RenameFileHelper.cs,EvaluateTest,The following switch statement is missing a default case: switch (testChar) {  case 'A':  	return EvaluateTestA (testCondition' vid' aniFile' episodes);  case 'D':  	return EvaluateTestD (testCondition' vid' aniFile);  case 'S':  	return EvaluateTestS (testCondition' vid' aniFile);  case 'F':  	return EvaluateTestF (testCondition' vid' aniFile);  case 'R':  	return EvaluateTestR (testCondition' vid' aniFile);  case 'Z':  	return EvaluateTestZ (testCondition' vid' vi);  case 'T':  	return EvaluateTestT (testCondition' vid' anime);  case 'Y':  	return EvaluateTestY (testCondition' vid' anime);  case 'E':  	return EvaluateTestE (testCondition' vid' episodes);  case 'H':  	return EvaluateTestH (testCondition' vid' episodes);  case 'X':  	return EvaluateTestX (testCondition' vid' anime);  case 'C':  	return EvaluateTestC (testCondition' vid' aniFile);  case 'J':  	return EvaluateTestJ (testCondition' vid' aniFile);  case 'I':  	return EvaluateTestI (testCondition' vid' aniFile' episodes' anime' vi);  case 'W':  	return EvaluateTestW (testCondition' vid' aniFile' vi);  case 'U':  	return EvaluateTestU (testCondition' vid' aniFile' vi);  case 'M':  	return EvaluateTestM (testCondition' aniFile' episodes);  case 'N':  	return EvaluateTestN (testCondition' aniFile' episodes);  }  
Missing Default,JMMServer,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Utils.cs,GetScheduledHours,The following switch statement is missing a default case: switch (freq) {  case ScheduledUpdateFrequency.Daily:  	return 24;  case ScheduledUpdateFrequency.HoursSix:  	return 6;  case ScheduledUpdateFrequency.HoursTwelve:  	return 12;  case ScheduledUpdateFrequency.Never:  	return int.MaxValue;  }  
Missing Default,JMMServer,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\MainWindow.xaml.cs,cboDatabaseType_SelectionChanged,The following switch statement is missing a default case: switch (cboDatabaseType.SelectedIndex) {  case 0:  	ServerState.Instance.DatabaseIsSQLite = true;  	break;  case 1:  	bool anySettingsMSSQL = !string.IsNullOrEmpty (ServerSettings.DatabaseName) || !string.IsNullOrEmpty (ServerSettings.DatabasePassword) || !string.IsNullOrEmpty (ServerSettings.DatabaseServer) || !string.IsNullOrEmpty (ServerSettings.DatabaseUsername);  	if (anySettingsMSSQL) {  		txtMSSQL_DatabaseName.Text = ServerSettings.DatabaseName;  		txtMSSQL_Password.Password = ServerSettings.DatabasePassword;  		cboMSSQLServerList.Text = ServerSettings.DatabaseServer;  		txtMSSQL_Username.Text = ServerSettings.DatabaseUsername;  	}  	else {  		txtMSSQL_DatabaseName.Text = "JMMServer";  		txtMSSQL_Password.Password = "";  		cboMSSQLServerList.Text = "localhost";  		txtMSSQL_Username.Text = "sa";  	}  	ServerState.Instance.DatabaseIsSQLServer = true;  	break;  case 2:  	bool anySettingsMySQL = !string.IsNullOrEmpty (ServerSettings.MySQL_SchemaName) || !string.IsNullOrEmpty (ServerSettings.MySQL_Password) || !string.IsNullOrEmpty (ServerSettings.MySQL_Hostname) || !string.IsNullOrEmpty (ServerSettings.MySQL_Username);  	if (anySettingsMySQL) {  		txtMySQL_DatabaseName.Text = ServerSettings.MySQL_SchemaName;  		txtMySQL_Password.Password = ServerSettings.MySQL_Password;  		txtMySQL_ServerAddress.Text = ServerSettings.MySQL_Hostname;  		txtMySQL_Username.Text = ServerSettings.MySQL_Username;  	}  	else {  		txtMySQL_DatabaseName.Text = "JMMServer";  		txtMySQL_Password.Password = "";  		txtMySQL_ServerAddress.Text = "localhost";  		txtMySQL_Username.Text = "root";  	}  	ServerState.Instance.DatabaseIsMySQL = true;  	break;  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_AddFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "210":  	return enHelperActivityType.FileAdded;  case "310":  	{  		//file already exists: read 'watched' status  		string[] arrResult = socketResponse.Split ('\n');  		if (arrResult.Length >= 2) {  			string[] arrStatus = arrResult [1].Split ('|');  			int viewdate = int.Parse (arrStatus [7]);  			ReturnIsWatched = (viewdate > 0);  			DateTime utcDate = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  			utcDate = utcDate.AddSeconds (viewdate);  			WatchedDate = utcDate.ToLocalTime ();  		}  	}  	return enHelperActivityType.FileAlreadyExists;  case "311":  	return enHelperActivityType.UpdatingFile;  case "320":  	return enHelperActivityType.NoSuchFile;  case "411":  	return enHelperActivityType.NoSuchFile;  case "502":  	return enHelperActivityType.LoginFailed;  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_DeleteFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_DeleteFile.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "211":  	return enHelperActivityType.FileDeleted;  case "411":  	return enHelperActivityType.NoSuchFile;  case "502":  	return enHelperActivityType.LoginFailed;  case "501":  	return enHelperActivityType.LoginRequired;  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetAnimeDescription,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeDescription.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "233": {  	// 233 ANIMEDESC  	// the first 11 characters should be "240 EPISODE"  	// the rest of the information should be the data list  	animeDesc = new Raw_AniDB_AnimeDesc (socketResponse);  	return enHelperActivityType.GotAnimeDesc;  }  case "330": {  	return enHelperActivityType.NoSuchAnime;  }  case "333":// no such description   {  	return enHelperActivityType.NoSuchAnime;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "230": {  	// 230 FILE INFO  	// the first 9 characters should be "230 ANIME "  	// the rest of the information should be the data list  	animeInfo = new Raw_AniDB_Anime (socketResponse);  	return enHelperActivityType.GotAnimeInfo;  }  case "330": {  	return enHelperActivityType.NoSuchAnime;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetCalendar,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetCalendar.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "297": {  	calendars = new CalendarCollection (socketResponse);  	return enHelperActivityType.GotCalendar;  }  case "397": {  	return enHelperActivityType.CalendarEmpty;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetCharacterInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetCharacterInfo.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "235": {  	// 235 CHARACTER INFO  	// the first 11 characters should be "235 CHARACTER"  	// the rest of the information should be the data list  	charInfo = new Raw_AniDB_Character (socketResponse);  	return enHelperActivityType.GotCharInfo;  	// Response: 235 CHARACTER 99297|6267|25|539|5|01|The Girl Returns|Shoujo Kikan|????|1238976000  }  case "335": {  	return enHelperActivityType.NoSuchChar;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetCreatorInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetCreatorInfo.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "245": {  	// 245 CREATOR  	// the first 11 characters should be "245 CREATOR"  	// the rest of the information should be the data list  	creatorInfo = new Raw_AniDB_Creator (socketResponse);  	return enHelperActivityType.GotCreatorInfo;  	// 245 CREATOR 200|?????|Suwabe Jun`ichi|1|17015.jpg||http://www.haikyo.or.jp/PROFILE/man/11470.html|Junichi_Suwabe|%E8%AB%8F%E8%A8%AA%E9%83%A8%E9%A0%86%E4%B8%80|1236300570  }  case "345": {  	return enHelperActivityType.NoSuchCreator;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetEpisodeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetEpisodeInfo.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "240": {  	// 240 EPISODE INFO  	// the first 11 characters should be "240 EPISODE"  	// the rest of the information should be the data list  	episodeInfo = new Raw_AniDB_Episode (socketResponse' enEpisodeSourceType.Episode);  	return enHelperActivityType.GotEpisodeInfo;  	// Response: 240 EPISODE 99297|6267|25|539|5|01|The Girl Returns|Shoujo Kikan|????|1238976000  }  case "340": {  	return enHelperActivityType.NoSuchEpisode;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetEpisodeInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetEpisodeInfo.cs,Init,The following switch statement is missing a default case: switch (epType) {  case enEpisodeType.Credits:  	epNumberFormatted = "C" + episodeNumber.ToString ();  	break;  case enEpisodeType.Special:  	epNumberFormatted = "S" + episodeNumber.ToString ();  	break;  case enEpisodeType.Other:  	epNumberFormatted = "0" + episodeNumber.ToString ();  	break;  case enEpisodeType.Trailer:  	epNumberFormatted = "T" + episodeNumber.ToString ();  	break;  case enEpisodeType.Parody:  	epNumberFormatted = "P" + episodeNumber.ToString ();  	break;  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "220": {  	// 220 FILE INFO  	// the first 9 characters should be "220 FILE "  	// the rest of the information should be the data list  	fileInfo = new Raw_AniDB_File (socketResponse);  	//episodeInfo = new Raw_AniDB_Episode(socketResponse' enEpisodeSourceType.File);  	return enHelperActivityType.GotFileInfo;  }  case "320": {  	return enHelperActivityType.FileDoesNotExist;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetGroupStatus,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetGroupStatus.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "225": {  	// 225 GROUPSTATUS  	grpStatus = new GroupStatusCollection (animeID' socketResponse);  	return enHelperActivityType.GotGroupStatus;  }  case "330": {  	return enHelperActivityType.NoSuchAnime;  }  case "325":// no such description   {  	return enHelperActivityType.NoGroupsFound;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetMyListFileInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetMyListFileInfo.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "221": {  	myListFile = new Raw_AniDB_MyListFile (socketResponse);  	//BaseConfig.MyAnimeLog.Write(myListFile.ToString());  	return enHelperActivityType.GotMyListFileInfo;  }  case "321": {  	return enHelperActivityType.NoSuchMyListFile;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetMyListStats,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetMyListStats.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "222": {  	myListStats = new Raw_AniDB_MyListStats (socketResponse);  	return enHelperActivityType.GotMyListStats;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetReview,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetReview.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "234": {  	// 234 REVIEW   	// the first 10 characters should be "240 REVIEW"  	// the rest of the information should be the data list  	ReviewInfo = new Raw_AniDB_Review (socketResponse);  	return enHelperActivityType.GotReview;  }  case "334": {  	return enHelperActivityType.NoSuchReview;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_GetUpdated,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "243": {  	// remove the header info  	string[] sDetails = socketResponse.Substring (0).Split ('\n');  	if (sDetails.Length > 1) {  		// first item will be the status command so ignore  		// only concerned with the second line  		string[] flds = sDetails [1].Substring (0).Split ('|');  		AniDBEntity = int.Parse (flds [0]);  		RecordCount = int.Parse (flds [1]);  		StartTime = flds [2];  		AnimeIDListRaw = flds [3].Trim ();  		string[] aids = AnimeIDListRaw.Split (''');  		foreach (string sid in aids) {  			AnimeIDList.Add (int.Parse (sid));  		}  	}  	return enHelperActivityType.GotUpdated;  }  case "343": {  	return enHelperActivityType.NoUpdates;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_MarkFileAsDeleted,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_MarkFileAsDeleted.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "210":  	return enHelperActivityType.FileMarkedAsDeleted;  case "310":  	return enHelperActivityType.FileMarkedAsDeleted;  case "311":  	return enHelperActivityType.FileMarkedAsDeleted;  case "320":  	return enHelperActivityType.NoSuchFile;  case "411":  	return enHelperActivityType.NoSuchFile;  case "502":  	return enHelperActivityType.LoginFailed;  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_NotifyGet,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_NotifyGet.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "292": {  	NotifyMessage = new Raw_AniDB_NotifyMessage (socketResponse);  	return enHelperActivityType.GotNotifyGet;  }  case "293": {  	NotifyAlert = new Raw_AniDB_NotifyAlert (socketResponse);  	return enHelperActivityType.GotNotifyGet;  }  case "392":  case "393": {  	return enHelperActivityType.NoSuchNotify;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_NotifyList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_NotifyList.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "291": {  	notifyListCollection = new Raw_AniDB_NotifyList (socketResponse);  	return enHelperActivityType.GotNotifyList;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_UpdateFile,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "210":  	return enHelperActivityType.FileAdded;  case "310":  	return enHelperActivityType.FileAlreadyExists;  case "311":  	return enHelperActivityType.UpdatingFile;  case "320":  	return enHelperActivityType.NoSuchFile;  case "411":  	return enHelperActivityType.NoSuchMyListFile;  case "502":  	return enHelperActivityType.LoginFailed;  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "260":  	return enHelperActivityType.Voted;  case "261":  	// this means we were trying to retrieve the vote  	if (voteType == enAniDBVoteType.Anime || voteType == enAniDBVoteType.AnimeTemp) {  		// 261 VOTE FOUNDCode Geass Hangyaku no Lelouch|900|1|4521  		Raw_AniDB_Vote vote = new Raw_AniDB_Vote ();  		vote.ProcessVoteFoundAnime (socketResponse' this.entityID' this.voteType);  		this.voteValue = vote.VoteValue;  	}  	if (voteType == enAniDBVoteType.Episode) {  		//261 VOTE FOUNDThe Day a New Demon Was Born|700|1|63091  		Raw_AniDB_Vote vote = new Raw_AniDB_Vote ();  		vote.ProcessVoteFoundEpisode (socketResponse' this.entityID' this.episodeNumber' this.episodeType);  		this.voteValue = vote.VoteValue;  	}  	return enHelperActivityType.VoteFound;  case "262":  	return enHelperActivityType.VoteUpdated;  case "263":  	return enHelperActivityType.VoteRevoked;  case "360":  	return enHelperActivityType.NoSuchVote;  case "361":  	return enHelperActivityType.InvalidVoteType;  case "362":  	return enHelperActivityType.InvalidVoteValue;  case "363":  	return enHelperActivityType.PermVoteNotAllowed;  case "364":  	return enHelperActivityType.PermVoteAlready;  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,The following switch statement is missing a default case: switch (voteType) {  case enAniDBVoteType.Anime:  	iVoteType = 1;  	break;  case enAniDBVoteType.AnimeTemp:  	iVoteType = 2;  	break;  case enAniDBVoteType.Group:  	iVoteType = 3;  	break;  case enAniDBVoteType.Episode:  	iVoteType = 1;  	break;  }  
Missing Default,AniDBAPI.Commands,AniDBCommand_Vote,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_Vote.cs,InitEpisode,The following switch statement is missing a default case: switch (epType) {  case enEpisodeType.Credits:  	epNumberFormatted = "C" + epno.ToString ();  	break;  case enEpisodeType.Special:  	epNumberFormatted = "S" + epno.ToString ();  	break;  case enEpisodeType.Other:  	epNumberFormatted = "0" + epno.ToString ();  	break;  case enEpisodeType.Trailer:  	epNumberFormatted = "T" + epno.ToString ();  	break;  case enEpisodeType.Parody:  	epNumberFormatted = "P" + epno.ToString ();  	break;  }  
Missing Default,AniDBAPI.Commands,AniDBUDPCommand,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following switch statement is missing a default case: switch (ResponseCode) {  case 600:  	errormsg = "600 INTERNAL SERVER ERROR";  	break;  case 601:  	errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";  	break;  case 602:  	errormsg = "602 SERVER BUSY - TRY AGAIN LATER";  	break;  case 604:  	errormsg = "TIMEOUT - DELAY AND RESUBMIT";  	break;  }  
Missing Default,JMMServer.Commands,AniDBCommand_GetGroup,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\AniDB_API\Commands\AniDBCommand_GetGroup.cs,Process,The following switch statement is missing a default case: switch (sMsgType) {  case "250": {  	// 250 GROUP  	//3938|704|1900|53|1126|Ayako-Fansubs|Ayako|#Ayako|irc.rizon.net|http://ayakofansubs.info/|1669.png  	Group = new Raw_AniDB_Group (socketResponse);  	return enHelperActivityType.GotGroup;  }  case "350": {  	return enHelperActivityType.NoSuchGroup;  }  case "501": {  	return enHelperActivityType.LoginRequired;  }  }  
Missing Default,JMMServer.Commands,CommandHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandHelper.cs,GetCommand,The following switch statement is missing a default case: switch (crt) {  case CommandRequestType.AniDB_GetEpisodeUDP:  	CommandRequest_GetEpisode cr_CommandRequest_GetEpisode = new CommandRequest_GetEpisode ();  	cr_CommandRequest_GetEpisode.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_CommandRequest_GetEpisode;  case CommandRequestType.Azure_SendAnimeTitle:  	CommandRequest_Azure_SendAnimeTitle cr_CommandRequest_Azure_SendAnimeTitle = new CommandRequest_Azure_SendAnimeTitle ();  	cr_CommandRequest_Azure_SendAnimeTitle.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_CommandRequest_Azure_SendAnimeTitle;  case CommandRequestType.AniDB_GetTitles:  	CommandRequest_GetAniDBTitles cr_CommandRequest_GetAniDBTitles = new CommandRequest_GetAniDBTitles ();  	cr_CommandRequest_GetAniDBTitles.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_CommandRequest_GetAniDBTitles;  case CommandRequestType.Azure_SendAnimeXML:  	CommandRequest_Azure_SendAnimeXML cr_CommandRequest_Azure_SendAnimeXML = new CommandRequest_Azure_SendAnimeXML ();  	cr_CommandRequest_Azure_SendAnimeXML.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_CommandRequest_Azure_SendAnimeXML;  case CommandRequestType.Azure_SendAnimeFull:  	CommandRequest_Azure_SendAnimeFull cr_CommandRequest_Azure_SendAnimeFull = new CommandRequest_Azure_SendAnimeFull ();  	cr_CommandRequest_Azure_SendAnimeFull.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_CommandRequest_Azure_SendAnimeFull;  case CommandRequestType.AniDB_UpdateMylistStats:  	CommandRequest_UpdateMylistStats cr_AniDB_UpdateMylistStats = new CommandRequest_UpdateMylistStats ();  	cr_AniDB_UpdateMylistStats.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_AniDB_UpdateMylistStats;  case CommandRequestType.WebCache_SendAniDB_File:  	CommandRequest_WebCacheSendAniDB_File cr_WebCache_SendAniDB_File = new CommandRequest_WebCacheSendAniDB_File ();  	cr_WebCache_SendAniDB_File.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_WebCache_SendAniDB_File;  case CommandRequestType.MAL_DownloadWatchedStates:  	CommandRequest_MALDownloadStatusFromMAL cr_MAL_DownloadWatchedStates = new CommandRequest_MALDownloadStatusFromMAL ();  	cr_MAL_DownloadWatchedStates.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_MAL_DownloadWatchedStates;  case CommandRequestType.MAL_UploadWatchedStates:  	CommandRequest_MALUploadStatusToMAL cr_MAL_UploadWatchedStates = new CommandRequest_MALUploadStatusToMAL ();  	cr_MAL_UploadWatchedStates.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_MAL_UploadWatchedStates;  case CommandRequestType.MAL_UpdateStatus:  	CommandRequest_MALUpdatedWatchedStatus cr_MAL_UpdateStatus = new CommandRequest_MALUpdatedWatchedStatus ();  	cr_MAL_UpdateStatus.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_MAL_UpdateStatus;  case CommandRequestType.MAL_SearchAnime:  	CommandRequest_MALSearchAnime cr_MAL_SearchAnime = new CommandRequest_MALSearchAnime ();  	cr_MAL_SearchAnime.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_MAL_SearchAnime;  case CommandRequestType.WebCache_SendXRefAniDBMAL:  	CommandRequest_WebCacheSendXRefAniDBMAL cr_WebCacheSendXRefAniDBMAL = new CommandRequest_WebCacheSendXRefAniDBMAL ();  	cr_WebCacheSendXRefAniDBMAL.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_WebCacheSendXRefAniDBMAL;  case CommandRequestType.WebCache_DeleteXRefAniDBMAL:  	CommandRequest_WebCacheDeleteXRefAniDBMAL cr_WebCacheDeleteXRefAniDBMAL = new CommandRequest_WebCacheDeleteXRefAniDBMAL ();  	cr_WebCacheDeleteXRefAniDBMAL.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_WebCacheDeleteXRefAniDBMAL;  case CommandRequestType.AniDB_GetFileUDP:  	CommandRequest_GetFile cr_AniDB_GetFileUDP = new CommandRequest_GetFile ();  	cr_AniDB_GetFileUDP.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_AniDB_GetFileUDP;  case CommandRequestType.ReadMediaInfo:  	CommandRequest_ReadMediaInfo cr_ReadMediaInfo = new CommandRequest_ReadMediaInfo ();  	cr_ReadMediaInfo.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_ReadMediaInfo;  case CommandRequestType.Trakt_UpdateAllSeries:  	CommandRequest_TraktUpdateAllSeries cr_Trakt_UpdateAllSeries = new CommandRequest_TraktUpdateAllSeries ();  	cr_Trakt_UpdateAllSeries.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_Trakt_UpdateAllSeries;  case CommandRequestType.Trakt_ShowEpisodeUnseen:  	CommandRequest_TraktShowEpisodeUnseen cr_Trakt_ShowEpisodeUnseen = new CommandRequest_TraktShowEpisodeUnseen ();  	cr_Trakt_ShowEpisodeUnseen.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_Trakt_ShowEpisodeUnseen;  case CommandRequestType.Trakt_SyncCollectionSeries:  	CommandRequest_TraktSyncCollectionSeries cr_Trakt_SyncCollectionSeries = new CommandRequest_TraktSyncCollectionSeries ();  	cr_Trakt_SyncCollectionSeries.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_Trakt_SyncCollectionSeries;  case CommandRequestType.Trakt_SyncCollection:  	CommandRequest_TraktSyncCollection cr_Trakt_SyncCollection = new CommandRequest_TraktSyncCollection ();  	cr_Trakt_SyncCollection.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_Trakt_SyncCollection;  case CommandRequestType.Trakt_ShowScrobble:  	CommandRequest_TraktShowScrobble cr_Trakt_ShowScrobble = new CommandRequest_TraktShowScrobble ();  	cr_Trakt_ShowScrobble.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_Trakt_ShowScrobble;  case CommandRequestType.Trakt_UpdateInfoImages:  	CommandRequest_TraktUpdateInfoAndImages cr_Trakt_UpdateInfoImages = new CommandRequest_TraktUpdateInfoAndImages ();  	cr_Trakt_UpdateInfoImages.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_Trakt_UpdateInfoImages;  case CommandRequestType.WebCache_SendXRefAniDBTrakt:  	CommandRequest_WebCacheSendXRefAniDBTrakt cr_WebCache_SendXRefAniDBTrakt = new CommandRequest_WebCacheSendXRefAniDBTrakt ();  	cr_WebCache_SendXRefAniDBTrakt.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_WebCache_SendXRefAniDBTrakt;  case CommandRequestType.WebCache_DeleteXRefAniDBTrakt:  	CommandRequest_WebCacheDeleteXRefAniDBTrakt cr_WebCache_DeleteXRefAniDBTrakt = new CommandRequest_WebCacheDeleteXRefAniDBTrakt ();  	cr_WebCache_DeleteXRefAniDBTrakt.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_WebCache_DeleteXRefAniDBTrakt;  case CommandRequestType.Trakt_SearchAnime:  	CommandRequest_TraktSearchAnime cr_Trakt_SearchAnime = new CommandRequest_TraktSearchAnime ();  	cr_Trakt_SearchAnime.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_Trakt_SearchAnime;  case CommandRequestType.MovieDB_SearchAnime:  	CommandRequest_MovieDBSearchAnime cr_MovieDB_SearchAnime = new CommandRequest_MovieDBSearchAnime ();  	cr_MovieDB_SearchAnime.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_MovieDB_SearchAnime;  case CommandRequestType.WebCache_DeleteXRefAniDBOther:  	CommandRequest_WebCacheDeleteXRefAniDBOther cr_SendXRefAniDBOther = new CommandRequest_WebCacheDeleteXRefAniDBOther ();  	cr_SendXRefAniDBOther.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_SendXRefAniDBOther;  case CommandRequestType.WebCache_SendXRefAniDBOther:  	CommandRequest_WebCacheSendXRefAniDBOther cr_WebCacheSendXRefAniDBOther = new CommandRequest_WebCacheSendXRefAniDBOther ();  	cr_WebCacheSendXRefAniDBOther.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_WebCacheSendXRefAniDBOther;  case CommandRequestType.AniDB_DeleteFileUDP:  	CommandRequest_DeleteFileFromMyList cr_AniDB_DeleteFileUDP = new CommandRequest_DeleteFileFromMyList ();  	cr_AniDB_DeleteFileUDP.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_AniDB_DeleteFileUDP;  case CommandRequestType.ImageDownload:  	CommandRequest_DownloadImage cr_ImageDownload = new CommandRequest_DownloadImage ();  	cr_ImageDownload.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_ImageDownload;  case CommandRequestType.WebCache_DeleteXRefAniDBTvDB:  	CommandRequest_WebCacheDeleteXRefAniDBTvDB cr_DeleteXRefAniDBTvDB = new CommandRequest_WebCacheDeleteXRefAniDBTvDB ();  	cr_DeleteXRefAniDBTvDB.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_DeleteXRefAniDBTvDB;  case CommandRequestType.WebCache_SendXRefAniDBTvDB:  	CommandRequest_WebCacheSendXRefAniDBTvDB cr_SendXRefAniDBTvDB = new CommandRequest_WebCacheSendXRefAniDBTvDB ();  	cr_SendXRefAniDBTvDB.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_SendXRefAniDBTvDB;  case CommandRequestType.TvDB_SearchAnime:  	CommandRequest_TvDBSearchAnime cr_TvDB_SearchAnime = new CommandRequest_TvDBSearchAnime ();  	cr_TvDB_SearchAnime.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_TvDB_SearchAnime;  case CommandRequestType.TvDB_DownloadImages:  	CommandRequest_TvDBDownloadImages cr_TvDB_DownloadImages = new CommandRequest_TvDBDownloadImages ();  	cr_TvDB_DownloadImages.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_TvDB_DownloadImages;  case CommandRequestType.TvDB_SeriesEpisodes:  	CommandRequest_TvDBUpdateSeriesAndEpisodes cr_TvDB_Episodes = new CommandRequest_TvDBUpdateSeriesAndEpisodes ();  	cr_TvDB_Episodes.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_TvDB_Episodes;  case CommandRequestType.AniDB_SyncVotes:  	CommandRequest_SyncMyVotes cr_SyncVotes = new CommandRequest_SyncMyVotes ();  	cr_SyncVotes.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_SyncVotes;  case CommandRequestType.AniDB_VoteAnime:  	CommandRequest_VoteAnime cr_VoteAnime = new CommandRequest_VoteAnime ();  	cr_VoteAnime.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_VoteAnime;  case CommandRequestType.AniDB_GetCalendar:  	CommandRequest_GetCalendar cr_GetCalendar = new CommandRequest_GetCalendar ();  	cr_GetCalendar.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_GetCalendar;  case CommandRequestType.AniDB_GetReleaseGroup:  	CommandRequest_GetReleaseGroup cr_GetReleaseGroup = new CommandRequest_GetReleaseGroup ();  	cr_GetReleaseGroup.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_GetReleaseGroup;  case CommandRequestType.AniDB_GetAnimeHTTP:  	CommandRequest_GetAnimeHTTP cr_geth = new CommandRequest_GetAnimeHTTP ();  	cr_geth.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_geth;  case CommandRequestType.AniDB_GetReleaseGroupStatus:  	CommandRequest_GetReleaseGroupStatus cr_GetReleaseGroupStatus = new CommandRequest_GetReleaseGroupStatus ();  	cr_GetReleaseGroupStatus.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_GetReleaseGroupStatus;  case CommandRequestType.HashFile:  	CommandRequest_HashFile cr_HashFile = new CommandRequest_HashFile ();  	cr_HashFile.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_HashFile;  case CommandRequestType.ProcessFile:  	CommandRequest_ProcessFile cr_pf = new CommandRequest_ProcessFile ();  	cr_pf.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_pf;  case CommandRequestType.AniDB_AddFileUDP:  	CommandRequest_AddFileToMyList cr_af = new CommandRequest_AddFileToMyList ();  	cr_af.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_af;  case CommandRequestType.AniDB_UpdateWatchedUDP:  	CommandRequest_UpdateMyListFileStatus cr_umlf = new CommandRequest_UpdateMyListFileStatus ();  	cr_umlf.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_umlf;  case CommandRequestType.WebCache_SendFileHash:  	CommandRequest_WebCacheSendFileHash cr_SendFileHash = new CommandRequest_WebCacheSendFileHash ();  	cr_SendFileHash.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_SendFileHash;  case CommandRequestType.WebCache_DeleteXRefFileEpisode:  	CommandRequest_WebCacheDeleteXRefFileEpisode cr_DeleteXRefFileEpisode = new CommandRequest_WebCacheDeleteXRefFileEpisode ();  	cr_DeleteXRefFileEpisode.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_DeleteXRefFileEpisode;  case CommandRequestType.WebCache_SendXRefFileEpisode:  	CommandRequest_WebCacheSendXRefFileEpisode cr_SendXRefFileEpisode = new CommandRequest_WebCacheSendXRefFileEpisode ();  	cr_SendXRefFileEpisode.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_SendXRefFileEpisode;  case CommandRequestType.AniDB_GetReviews:  	CommandRequest_GetReviews cr_GetReviews = new CommandRequest_GetReviews ();  	cr_GetReviews.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_GetReviews;  case CommandRequestType.AniDB_GetUpdated:  	CommandRequest_GetUpdated cr_GetUpdated = new CommandRequest_GetUpdated ();  	cr_GetUpdated.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_GetUpdated;  case CommandRequestType.AniDB_SyncMyList:  	CommandRequest_SyncMyList cr_SyncMyList = new CommandRequest_SyncMyList ();  	cr_SyncMyList.LoadFromDBCommand (crdb);  	return (ICommandRequest)cr_SyncMyList;  }  
Missing Default,JMMServer.Commands,CommandRequest_DownloadImage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Commands\CommandRequest_DownloadImage.cs,ProcessCommand,The following switch statement is missing a default case: switch (EntityTypeEnum) {  case JMMImageType.AniDB_Cover:  	AniDB_AnimeRepository repAnime = new AniDB_AnimeRepository ();  	AniDB_Anime anime = repAnime.GetByID (EntityID);  	if (anime == null)  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' anime' ForceDownload);  	break;  case JMMImageType.TvDB_Episode:  	TvDB_EpisodeRepository repTvEp = new TvDB_EpisodeRepository ();  	TvDB_Episode ep = repTvEp.GetByID (EntityID);  	if (ep == null)  		return;  	if (string.IsNullOrEmpty (ep.Filename))  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' ep' ForceDownload);  	break;  case JMMImageType.TvDB_FanArt:  	TvDB_ImageFanartRepository repFanart = new TvDB_ImageFanartRepository ();  	TvDB_ImageFanart fanart = repFanart.GetByID (EntityID);  	if (fanart == null)  		return;  	if (string.IsNullOrEmpty (fanart.BannerPath))  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' fanart' ForceDownload);  	break;  case JMMImageType.TvDB_Cover:  	TvDB_ImagePosterRepository repPoster = new TvDB_ImagePosterRepository ();  	TvDB_ImagePoster poster = repPoster.GetByID (EntityID);  	if (poster == null)  		return;  	if (string.IsNullOrEmpty (poster.BannerPath))  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' poster' ForceDownload);  	break;  case JMMImageType.TvDB_Banner:  	TvDB_ImageWideBannerRepository repBanners = new TvDB_ImageWideBannerRepository ();  	TvDB_ImageWideBanner wideBanner = repBanners.GetByID (EntityID);  	if (wideBanner == null)  		return;  	if (string.IsNullOrEmpty (wideBanner.BannerPath))  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' wideBanner' ForceDownload);  	break;  case JMMImageType.MovieDB_Poster:  	MovieDB_PosterRepository repMoviePosters = new MovieDB_PosterRepository ();  	MovieDB_Poster moviePoster = repMoviePosters.GetByID (EntityID);  	if (moviePoster == null)  		return;  	if (string.IsNullOrEmpty (moviePoster.URL))  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' moviePoster' ForceDownload);  	break;  case JMMImageType.MovieDB_FanArt:  	MovieDB_FanartRepository repMovieFanart = new MovieDB_FanartRepository ();  	MovieDB_Fanart movieFanart = repMovieFanart.GetByID (EntityID);  	if (movieFanart == null)  		return;  	if (string.IsNullOrEmpty (movieFanart.URL))  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' movieFanart' ForceDownload);  	break;  case JMMImageType.Trakt_Poster:  	Trakt_ImagePosterRepository repTraktPosters = new Trakt_ImagePosterRepository ();  	Trakt_ImagePoster traktPoster = repTraktPosters.GetByID (EntityID);  	if (traktPoster == null)  		return;  	if (string.IsNullOrEmpty (traktPoster.ImageURL))  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' traktPoster' ForceDownload);  	break;  case JMMImageType.Trakt_Fanart:  	Trakt_ImageFanartRepository repTraktFanarts = new Trakt_ImageFanartRepository ();  	Trakt_ImageFanart traktFanart = repTraktFanarts.GetByID (EntityID);  	if (traktFanart == null)  		return;  	if (string.IsNullOrEmpty (traktFanart.ImageURL))  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' traktFanart' ForceDownload);  	break;  case JMMImageType.Trakt_Friend:  	Trakt_FriendRepository repFriends = new Trakt_FriendRepository ();  	Trakt_Friend friend = repFriends.GetByID (EntityID);  	if (friend == null)  		return;  	if (string.IsNullOrEmpty (friend.Avatar))  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' friend' ForceDownload);  	break;  case JMMImageType.Trakt_Episode:  	Trakt_EpisodeRepository repTraktEpisodes = new Trakt_EpisodeRepository ();  	Trakt_Episode traktEp = repTraktEpisodes.GetByID (EntityID);  	if (traktEp == null)  		return;  	if (string.IsNullOrEmpty (traktEp.EpisodeImage))  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' traktEp' ForceDownload);  	break;  case JMMImageType.AniDB_Character:  	AniDB_CharacterRepository repChars = new AniDB_CharacterRepository ();  	AniDB_Character chr = repChars.GetByID (EntityID);  	if (chr == null)  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' chr' ForceDownload);  	break;  case JMMImageType.AniDB_Creator:  	AniDB_SeiyuuRepository repCreator = new AniDB_SeiyuuRepository ();  	AniDB_Seiyuu creator = repCreator.GetByID (EntityID);  	if (creator == null)  		return;  	req = new ImageDownloadRequest (EntityTypeEnum' creator' ForceDownload);  	break;  }  
Missing Default,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDefaultPosterPathNoBlanks,The following switch statement is missing a default case: switch (imageType) {  case ImageEntityType.AniDB_Cover:  	return this.PosterPath;  case ImageEntityType.TvDB_Cover:  	TvDB_ImagePosterRepository repTvPosters = new TvDB_ImagePosterRepository ();  	TvDB_ImagePoster tvPoster = repTvPosters.GetByID (session' defaultPoster.ImageParentID);  	if (tvPoster != null)  		return tvPoster.FullImagePath;  	else  		return this.PosterPath;  case ImageEntityType.Trakt_Poster:  	Trakt_ImagePosterRepository repTraktPosters = new Trakt_ImagePosterRepository ();  	Trakt_ImagePoster traktPoster = repTraktPosters.GetByID (session' defaultPoster.ImageParentID);  	if (traktPoster != null)  		return traktPoster.FullImagePath;  	else  		return this.PosterPath;  case ImageEntityType.MovieDB_Poster:  	MovieDB_PosterRepository repMoviePosters = new MovieDB_PosterRepository ();  	MovieDB_Poster moviePoster = repMoviePosters.GetByID (session' defaultPoster.ImageParentID);  	if (moviePoster != null)  		return moviePoster.FullImagePath;  	else  		return this.PosterPath;  }  
Missing Default,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDefaultPosterDetailsNoBlanks,The following switch statement is missing a default case: switch (imageType) {  case ImageEntityType.AniDB_Cover:  	return details;  case ImageEntityType.TvDB_Cover:  	TvDB_ImagePosterRepository repTvPosters = new TvDB_ImagePosterRepository ();  	TvDB_ImagePoster tvPoster = repTvPosters.GetByID (session' defaultPoster.ImageParentID);  	if (tvPoster != null)  		details = new ImageDetails () {  			ImageType = JMMImageType.TvDB_Cover'  			ImageID = tvPoster.TvDB_ImagePosterID  		};  	return details;  case ImageEntityType.Trakt_Poster:  	Trakt_ImagePosterRepository repTraktPosters = new Trakt_ImagePosterRepository ();  	Trakt_ImagePoster traktPoster = repTraktPosters.GetByID (session' defaultPoster.ImageParentID);  	if (traktPoster != null)  		details = new ImageDetails () {  			ImageType = JMMImageType.Trakt_Poster'  			ImageID = traktPoster.Trakt_ImagePosterID  		};  	return details;  case ImageEntityType.MovieDB_Poster:  	MovieDB_PosterRepository repMoviePosters = new MovieDB_PosterRepository ();  	MovieDB_Poster moviePoster = repMoviePosters.GetByID (session' defaultPoster.ImageParentID);  	if (moviePoster != null)  		details = new ImageDetails () {  			ImageType = JMMImageType.MovieDB_Poster'  			ImageID = moviePoster.MovieDB_PosterID  		};  	return details;  }  
Missing Default,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDefaultFanartDetailsNoBlanks,The following switch statement is missing a default case: switch (imageType) {  case ImageEntityType.TvDB_FanArt:  	TvDB_ImageFanartRepository repTvFanarts = new TvDB_ImageFanartRepository ();  	TvDB_ImageFanart tvFanart = repTvFanarts.GetByID (session' GetDefaultFanart (session).ImageParentID);  	if (tvFanart != null)  		details = new ImageDetails () {  			ImageType = JMMImageType.TvDB_FanArt'  			ImageID = tvFanart.TvDB_ImageFanartID  		};  	return details;  case ImageEntityType.Trakt_Fanart:  	Trakt_ImageFanartRepository repTraktFanarts = new Trakt_ImageFanartRepository ();  	Trakt_ImageFanart traktFanart = repTraktFanarts.GetByID (session' GetDefaultFanart (session).ImageParentID);  	if (traktFanart != null)  		details = new ImageDetails () {  			ImageType = JMMImageType.Trakt_Fanart'  			ImageID = traktFanart.Trakt_ImageFanartID  		};  	return details;  case ImageEntityType.MovieDB_FanArt:  	MovieDB_FanartRepository repMovieFanarts = new MovieDB_FanartRepository ();  	MovieDB_Fanart movieFanart = repMovieFanarts.GetByID (session' GetDefaultFanart (session).ImageParentID);  	if (movieFanart != null)  		details = new ImageDetails () {  			ImageType = JMMImageType.MovieDB_FanArt'  			ImageID = movieFanart.MovieDB_FanartID  		};  	return details;  }  
Missing Default,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,GetDefaultFanartOnlineURL,The following switch statement is missing a default case: switch (imageType) {  case ImageEntityType.TvDB_FanArt:  	TvDB_ImageFanartRepository repTvFanarts = new TvDB_ImageFanartRepository ();  	TvDB_ImageFanart tvFanart = repTvFanarts.GetByID (GetDefaultFanart (session).ImageParentID);  	if (tvFanart != null)  		return string.Format (Constants.URLS.TvDB_Images' tvFanart.BannerPath);  	break;  case ImageEntityType.Trakt_Fanart:  	Trakt_ImageFanartRepository repTraktFanarts = new Trakt_ImageFanartRepository ();  	Trakt_ImageFanart traktFanart = repTraktFanarts.GetByID (GetDefaultFanart (session).ImageParentID);  	if (traktFanart != null)  		return traktFanart.ImageURL;  	break;  case ImageEntityType.MovieDB_FanArt:  	MovieDB_FanartRepository repMovieFanarts = new MovieDB_FanartRepository ();  	MovieDB_Fanart movieFanart = repMovieFanarts.GetByID (GetDefaultFanart (session).ImageParentID);  	if (movieFanart != null)  		return movieFanart.URL;  	break;  }  
Missing Default,JMMServer.Entities,AniDB_Anime,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime.cs,ToContractAzure,The following switch statement is missing a default case: switch (recType) {  case AniDBRecommendationType.ForFans:  	shout.ShoutType = (int)WhatPeopleAreSayingType.AniDBForFans;  	break;  case AniDBRecommendationType.MustSee:  	shout.ShoutType = (int)WhatPeopleAreSayingType.AniDBMustSee;  	break;  case AniDBRecommendationType.Recommended:  	shout.ShoutType = (int)WhatPeopleAreSayingType.AniDBRecommendation;  	break;  }  
Missing Default,JMMServer.Entities,AniDB_Anime_DefaultImage,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\Entities\AniDB_Anime_DefaultImage.cs,ToContract,The following switch statement is missing a default case: switch (imgType) {  case JMMImageType.TvDB_Banner:  	TvDB_ImageWideBannerRepository repBanners = new TvDB_ImageWideBannerRepository ();  	TvDB_ImageWideBanner banner = repBanners.GetByID (session' ImageParentID);  	if (banner != null)  		contract.TVWideBanner = banner.ToContract ();  	break;  case JMMImageType.TvDB_Cover:  	TvDB_ImagePosterRepository repPosters = new TvDB_ImagePosterRepository ();  	TvDB_ImagePoster poster = repPosters.GetByID (session' ImageParentID);  	if (poster != null)  		contract.TVPoster = poster.ToContract ();  	break;  case JMMImageType.TvDB_FanArt:  	TvDB_ImageFanartRepository repFanart = new TvDB_ImageFanartRepository ();  	TvDB_ImageFanart fanart = repFanart.GetByID (session' ImageParentID);  	if (fanart != null)  		contract.TVFanart = fanart.ToContract ();  	break;  case JMMImageType.MovieDB_Poster:  	MovieDB_PosterRepository repMoviePosters = new MovieDB_PosterRepository ();  	MovieDB_Poster moviePoster = repMoviePosters.GetByID (session' ImageParentID);  	if (moviePoster != null)  		contract.MoviePoster = moviePoster.ToContract ();  	break;  case JMMImageType.MovieDB_FanArt:  	MovieDB_FanartRepository repMovieFanart = new MovieDB_FanartRepository ();  	MovieDB_Fanart movieFanart = repMovieFanart.GetByID (session' ImageParentID);  	if (movieFanart != null)  		contract.MovieFanart = movieFanart.ToContract ();  	break;  case JMMImageType.Trakt_Fanart:  	Trakt_ImageFanartRepository repTraktFanart = new Trakt_ImageFanartRepository ();  	Trakt_ImageFanart traktFanart = repTraktFanart.GetByID (session' ImageParentID);  	if (traktFanart != null)  		contract.TraktFanart = traktFanart.ToContract ();  	break;  case JMMImageType.Trakt_Poster:  	Trakt_ImagePosterRepository repTraktPoster = new Trakt_ImagePosterRepository ();  	Trakt_ImagePoster traktPoster = repTraktPoster.GetByID (session' ImageParentID);  	if (traktPoster != null)  		contract.TraktPoster = traktPoster.ToContract ();  	break;  }  
Missing Default,JMMServer.FileServer,FileServer,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMServer\FileServer\FileServer.cs,GetMime,The following switch statement is missing a default case: switch (ext) {  case "png":  	return "image/png";  case "jpg":  	return "image/jpeg";  case "mkv":  	return "video/x-matroska";  case "mka":  	return "audio/x-matroska";  case "mk3d":  	return "video/x-matroska-3d";  case "avi":  	return "video/avi";  case "mp4":  	return "video/mp4";  case "mov":  	return "video/quicktime";  case "ogm":  case "ogv":  	return "video/ogg";  case "mpg":  case "mpeg":  	return "video/mpeg";  case "flv":  	return "video/x-flv";  case "rm":  	return "application/vnd.rn-realmedia";  }  
