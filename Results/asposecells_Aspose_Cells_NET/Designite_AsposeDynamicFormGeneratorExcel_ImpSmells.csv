Implementation smell,Namespace,Class,File,Method,Description
Long Method,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The method has 165 lines of code.
Complex Method,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Edit,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Edit.ascx.cs,GetSaveFormat,Cyclomatic complexity of the method is 18
Complex Method,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Settings,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Settings.ascx.cs,GridView1_RowCommand,Cyclomatic complexity of the method is 10
Complex Method,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Settings,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Settings.ascx.cs,ProcessButton_Click,Cyclomatic complexity of the method is 10
Complex Method,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,ProcessButton_Click,Cyclomatic complexity of the method is 20
Complex Method,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,Cyclomatic complexity of the method is 44
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel.Data,DataProvider,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Data\DataProvider.cs,Instance,The length of the statement  "		const string assembly = "Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel.Data.SqlDataprovider'AsposeDNNDynamicFormGenerator"; " is 135.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel.Data,DataProvider,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Data\DataProvider.cs,GetConnection,The length of the statement  "	if (!String.IsNullOrEmpty (objProvider.Attributes ["connectionStringName"]) && !String.IsNullOrEmpty (System.Configuration.ConfigurationManager.AppSettings [objProvider.Attributes ["connectionStringName"]])) { " is 209.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel.Data,DataProvider,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Data\DataProvider.cs,GetConnection,The length of the statement  "		_connectionString = System.Configuration.ConfigurationManager.AppSettings [objProvider.Attributes ["connectionStringName"]]; " is 124.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Edit,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Edit.ascx.cs,ProcessButton_Click,The length of the statement  "		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read); " is 181.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Edit,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Edit.ascx.cs,ProcessButton_Click,The length of the statement  "			dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' worksheet.Cells.Columns.Count' true); " is 124.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Settings,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Settings.ascx.cs,ProcessButton_Click,The length of the statement  "						FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read); " is 181.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Settings,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Settings.ascx.cs,ProcessButton_Click,The length of the statement  "						workbook.Save (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' SaveFormat.Xlsx); " is 144.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Settings,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Settings.ascx.cs,PopulateGrid,The length of the statement  "			FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read); " is 181.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,ProcessButton_Click,The length of the statement  "		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read); " is 181.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,ProcessButton_Click,The length of the statement  "			dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' worksheet.Cells.Columns.Count' true); " is 124.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,ProcessButton_Click,The length of the statement  "		workbook.Save (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' SaveFormat.Xlsx); " is 144.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The length of the statement  "			FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read); " is 181.
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Settings,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Settings.ascx.cs,PopulateGrid,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			GridView1.DataSource = dataTable;  			GridView1.DataBind ();  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Settings,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Settings.ascx.cs,PopulateGrid,The following statement contains a magic number: if (Session ["AsposeDynamicFormsdataTable"] == null) {  	//Creating a file stream containing the Excel file to be opened  	FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  	//Instantiating a Workbook object  	//Opening the Excel file through the file stream  	Workbook workbook = new Workbook (fstream);  	//Accessing a worksheet using its sheet name  	Worksheet worksheet = workbook.Worksheets ["Settings"];  	//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  	dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  	//Closing the file stream to free all resources  	fstream.Close ();  	dataTable.DefaultView.Sort = "[Sort ID] ASC";  	dataTable = dataTable.DefaultView.ToTable ();  	Session ["AsposeDynamicFormsdataTable"] = dataTable;  } else {  	dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Settings,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Settings.ascx.cs,PopulateGrid,The following statement contains a magic number: dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,ProcessButton_Click,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	//Creating a file stream containing the Excel file to be opened  	FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  	//Instantiating a Workbook object  	//Opening the Excel file through the file stream  	Workbook workbook = new Workbook (fstream);  	//Accessing a worksheet using its sheet name  	Worksheet worksheet = workbook.Worksheets ["Data"];  	Worksheet worksheet1 = workbook.Worksheets ["Settings"];  	//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  	DataTable dataTable = null;  	if (worksheet.Cells.Rows.Count <= 0) {  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' 1' 1' true);  	} else {  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' worksheet.Cells.Columns.Count' true);  	}  	//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  	DataTable dataTable1 = worksheet1.Cells.ExportDataTableAsString (0' 0' worksheet1.Cells.Rows.Count' 10' true);  	if (dataTable1 != null) {  		if (dataTable != null) {  			if (dataTable.Columns.Count <= 1) {  				dataTable.Columns.RemoveAt (0);  			}  			foreach (DataRow row in dataTable1.Rows) {  				if (!row [1].ToString ().Trim ().Equals ("Title") && !row [1].ToString ().Trim ().Equals ("Success")) {  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Trim ().Equals ("")) {  							if (dataTable.Columns [strItem.Trim ()] == null) {  								dataTable.Columns.Add (strItem.Trim ());  							}  						}  					}  				}  			}  		}  	}  	//Closing the file stream to free all resources  	fstream.Close ();  	DataRow dr = dataTable.NewRow ();  	foreach (Control ctrl in myPlaceHolder.Controls) {  		if (ctrl != null) {  			if (ctrl is TextBox) {  				dr [ctrl.ID] = ((TextBox)ctrl).Text.Trim ();  				continue;  			}  			if (ctrl is RadioButton) {  				if (((RadioButton)ctrl).Checked) {  					dr [ctrl.ID] = ((RadioButton)ctrl).Text.Trim ();  					continue;  				}  			}  			if (ctrl is CheckBox) {  				if (((CheckBox)ctrl).Checked) {  					dr [ctrl.ID] = ((CheckBox)ctrl).Text.Trim ();  					continue;  				}  			}  			if (ctrl is DropDownList) {  				dr [ctrl.ID] = ((DropDownList)ctrl).SelectedItem.Text.Trim ();  				continue;  			}  		}  	}  	dataTable.Rows.Add (dr);  	workbook.Worksheets.RemoveAt ("Data");  	worksheet = workbook.Worksheets.Add ("Data");  	worksheet.Cells.ImportDataTable (dataTable' true' "A1");  	// Apply Hearder Row/First Row text to Bold  	Cells.Style objStyle = new Cells.Style ();  	objStyle.Font.IsBold = true;  	StyleFlag objStyleFlag = new StyleFlag ();  	objStyleFlag.FontBold = true;  	worksheet.Cells.ApplyRowStyle (0' objStyle' objStyleFlag);  	//Auto-fit all the columns  	workbook.Worksheets ["Data"].AutoFitColumns ();  	workbook.Save (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' SaveFormat.Xlsx);  	error_msg.Visible = false;  	success_msg.Visible = true;  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,ProcessButton_Click,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	//Creating a file stream containing the Excel file to be opened  	FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  	//Instantiating a Workbook object  	//Opening the Excel file through the file stream  	Workbook workbook = new Workbook (fstream);  	//Accessing a worksheet using its sheet name  	Worksheet worksheet = workbook.Worksheets ["Data"];  	Worksheet worksheet1 = workbook.Worksheets ["Settings"];  	//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  	DataTable dataTable = null;  	if (worksheet.Cells.Rows.Count <= 0) {  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' 1' 1' true);  	} else {  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' worksheet.Cells.Columns.Count' true);  	}  	//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  	DataTable dataTable1 = worksheet1.Cells.ExportDataTableAsString (0' 0' worksheet1.Cells.Rows.Count' 10' true);  	if (dataTable1 != null) {  		if (dataTable != null) {  			if (dataTable.Columns.Count <= 1) {  				dataTable.Columns.RemoveAt (0);  			}  			foreach (DataRow row in dataTable1.Rows) {  				if (!row [1].ToString ().Trim ().Equals ("Title") && !row [1].ToString ().Trim ().Equals ("Success")) {  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Trim ().Equals ("")) {  							if (dataTable.Columns [strItem.Trim ()] == null) {  								dataTable.Columns.Add (strItem.Trim ());  							}  						}  					}  				}  			}  		}  	}  	//Closing the file stream to free all resources  	fstream.Close ();  	DataRow dr = dataTable.NewRow ();  	foreach (Control ctrl in myPlaceHolder.Controls) {  		if (ctrl != null) {  			if (ctrl is TextBox) {  				dr [ctrl.ID] = ((TextBox)ctrl).Text.Trim ();  				continue;  			}  			if (ctrl is RadioButton) {  				if (((RadioButton)ctrl).Checked) {  					dr [ctrl.ID] = ((RadioButton)ctrl).Text.Trim ();  					continue;  				}  			}  			if (ctrl is CheckBox) {  				if (((CheckBox)ctrl).Checked) {  					dr [ctrl.ID] = ((CheckBox)ctrl).Text.Trim ();  					continue;  				}  			}  			if (ctrl is DropDownList) {  				dr [ctrl.ID] = ((DropDownList)ctrl).SelectedItem.Text.Trim ();  				continue;  			}  		}  	}  	dataTable.Rows.Add (dr);  	workbook.Worksheets.RemoveAt ("Data");  	worksheet = workbook.Worksheets.Add ("Data");  	worksheet.Cells.ImportDataTable (dataTable' true' "A1");  	// Apply Hearder Row/First Row text to Bold  	Cells.Style objStyle = new Cells.Style ();  	objStyle.Font.IsBold = true;  	StyleFlag objStyleFlag = new StyleFlag ();  	objStyleFlag.FontBold = true;  	worksheet.Cells.ApplyRowStyle (0' objStyle' objStyleFlag);  	//Auto-fit all the columns  	workbook.Worksheets ["Data"].AutoFitColumns ();  	workbook.Save (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' SaveFormat.Xlsx);  	error_msg.Visible = false;  	success_msg.Visible = true;  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,ProcessButton_Click,The following statement contains a magic number: if (dataTable1 != null) {  	if (dataTable != null) {  		if (dataTable.Columns.Count <= 1) {  			dataTable.Columns.RemoveAt (0);  		}  		foreach (DataRow row in dataTable1.Rows) {  			if (!row [1].ToString ().Trim ().Equals ("Title") && !row [1].ToString ().Trim ().Equals ("Success")) {  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Trim ().Equals ("")) {  						if (dataTable.Columns [strItem.Trim ()] == null) {  							dataTable.Columns.Add (strItem.Trim ());  						}  					}  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,ProcessButton_Click,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Columns.Count <= 1) {  		dataTable.Columns.RemoveAt (0);  	}  	foreach (DataRow row in dataTable1.Rows) {  		if (!row [1].ToString ().Trim ().Equals ("Title") && !row [1].ToString ().Trim ().Equals ("Success")) {  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Trim ().Equals ("")) {  					if (dataTable.Columns [strItem.Trim ()] == null) {  						dataTable.Columns.Add (strItem.Trim ());  					}  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,ProcessButton_Click,The following statement contains a magic number: foreach (DataRow row in dataTable1.Rows) {  	if (!row [1].ToString ().Trim ().Equals ("Title") && !row [1].ToString ().Trim ().Equals ("Success")) {  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Trim ().Equals ("")) {  				if (dataTable.Columns [strItem.Trim ()] == null) {  					dataTable.Columns.Add (strItem.Trim ());  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,ProcessButton_Click,The following statement contains a magic number: if (!row [1].ToString ().Trim ().Equals ("Title") && !row [1].ToString ().Trim ().Equals ("Success")) {  	foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  		if (!strItem.Trim ().Equals ("")) {  			if (dataTable.Columns [strItem.Trim ()] == null) {  				dataTable.Columns.Add (strItem.Trim ());  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,ProcessButton_Click,The following statement contains a magic number: foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  	if (!strItem.Trim ().Equals ("")) {  		if (dataTable.Columns [strItem.Trim ()] == null) {  			dataTable.Columns.Add (strItem.Trim ());  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: try {  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Total.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	DataTable dataTable = null;  	if (Session ["AsposeDynamicFormsdataTable"] == null) {  		//Creating a file stream containing the Excel file to be opened  		FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  		//Instantiating a Workbook object  		//Opening the Excel file through the file stream  		Workbook workbook = new Workbook (fstream);  		//Accessing a worksheet using its sheet name  		Worksheet worksheet = workbook.Worksheets ["Settings"];  		//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  		dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  		//Closing the file stream to free all resources  		fstream.Close ();  		dataTable.DefaultView.Sort = "[Sort ID] ASC";  		dataTable = dataTable.DefaultView.ToTable ();  		Session ["AsposeDynamicFormsdataTable"] = dataTable;  	} else {  		dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  	}  	if (dataTable != null) {  		if (dataTable.Rows.Count > 0) {  			string fieldType = "Text";  			int rows = 0;  			foreach (DataRow row in dataTable.Rows) {  				if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  					rows += 1;  					fieldType = row [1].ToString ();  					switch (fieldType) {  					case "Title":  						{  							lblTitle.Text = row [4].ToString ().Trim ();  						}  						break;  					case "Success":  						{  							success_msg.InnerText = row [4].ToString ().Trim ();  						}  						break;  					case "Text":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ();  							lbl.Text = row [3].ToString ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "MultiText":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							TextBox textBox = new TextBox ();  							textBox.ID = row [2].ToString ().Trim ();  							textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  							textBox.TextMode = TextBoxMode.MultiLine;  							textBox.Rows = 5;  							if (myPlaceHolder.FindControl (textBox.ID) == null)  								myPlaceHolder.Controls.Add (textBox);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Radio":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									RadioButton radioButton = new RadioButton ();  									radioButton.GroupName = "RadioGroup" + rows.ToString ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  										radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  										if (i == 0) {  											radioButton.Checked = true;  										}  									}  									if (myPlaceHolder.FindControl (radioButton.ID) == null)  										myPlaceHolder.Controls.Add (radioButton);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "Check":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							int i = 0;  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									CheckBox checkBox = new CheckBox ();  									if (row [4].ToString ().Trim ().Split (';').Length >= i) {  										checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  										checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  									}  									if (myPlaceHolder.FindControl (checkBox.ID) == null)  										myPlaceHolder.Controls.Add (checkBox);  									i++;  								}  							}  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					case "DropDown":  						{  							Label lbl = new Label ();  							lbl.ID = "lbl" + row [2].ToString ().Trim ();  							lbl.Text = row [3].ToString ().Trim ();  							lbl.CssClass = "dnnLabel";  							myPlaceHolder.Controls.Add (lbl);  							DropDownList dropdownList = new DropDownList ();  							dropdownList.ID = row [2].ToString ().Trim ();  							foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  								if (!strItem.Equals ("")) {  									dropdownList.Items.Add (strItem);  								}  							}  							if (myPlaceHolder.FindControl (dropdownList.ID) == null)  								myPlaceHolder.Controls.Add (dropdownList);  							LiteralControl literalBreak = new LiteralControl ("<br />");  							myPlaceHolder.Controls.Add (literalBreak);  						}  						break;  					default:  						break;  					}  				}  			}  		}  	}  } catch (Exception exc) {  	success_msg.Visible = false;  	error_msg.Visible = true;  	error_msg.InnerText = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (Session ["AsposeDynamicFormsdataTable"] == null) {  	//Creating a file stream containing the Excel file to be opened  	FileStream fstream = new FileStream (Server.MapPath ("~/DesktopModules/Aspose.DNN.DynamicFormGenerator.Excel/Docs/AsposeDynamicFormsDataFile.xlsx")' FileMode.Open' FileAccess.Read);  	//Instantiating a Workbook object  	//Opening the Excel file through the file stream  	Workbook workbook = new Workbook (fstream);  	//Accessing a worksheet using its sheet name  	Worksheet worksheet = workbook.Worksheets ["Settings"];  	//Exporting the contents of 7 rows and 2 columns starting from 1st cell to DataTable  	dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  	//Closing the file stream to free all resources  	fstream.Close ();  	dataTable.DefaultView.Sort = "[Sort ID] ASC";  	dataTable = dataTable.DefaultView.ToTable ();  	Session ["AsposeDynamicFormsdataTable"] = dataTable;  } else {  	dataTable = (DataTable)Session ["AsposeDynamicFormsdataTable"];  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: dataTable = worksheet.Cells.ExportDataTableAsString (0' 0' worksheet.Cells.Rows.Count' 10' true);  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable != null) {  	if (dataTable.Rows.Count > 0) {  		string fieldType = "Text";  		int rows = 0;  		foreach (DataRow row in dataTable.Rows) {  			if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  				rows += 1;  				fieldType = row [1].ToString ();  				switch (fieldType) {  				case "Title":  					{  						lblTitle.Text = row [4].ToString ().Trim ();  					}  					break;  				case "Success":  					{  						success_msg.InnerText = row [4].ToString ().Trim ();  					}  					break;  				case "Text":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ();  						lbl.Text = row [3].ToString ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "MultiText":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						TextBox textBox = new TextBox ();  						textBox.ID = row [2].ToString ().Trim ();  						textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  						textBox.TextMode = TextBoxMode.MultiLine;  						textBox.Rows = 5;  						if (myPlaceHolder.FindControl (textBox.ID) == null)  							myPlaceHolder.Controls.Add (textBox);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Radio":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								RadioButton radioButton = new RadioButton ();  								radioButton.GroupName = "RadioGroup" + rows.ToString ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  									radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  									if (i == 0) {  										radioButton.Checked = true;  									}  								}  								if (myPlaceHolder.FindControl (radioButton.ID) == null)  									myPlaceHolder.Controls.Add (radioButton);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "Check":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						int i = 0;  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								CheckBox checkBox = new CheckBox ();  								if (row [4].ToString ().Trim ().Split (';').Length >= i) {  									checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  									checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  								}  								if (myPlaceHolder.FindControl (checkBox.ID) == null)  									myPlaceHolder.Controls.Add (checkBox);  								i++;  							}  						}  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				case "DropDown":  					{  						Label lbl = new Label ();  						lbl.ID = "lbl" + row [2].ToString ().Trim ();  						lbl.Text = row [3].ToString ().Trim ();  						lbl.CssClass = "dnnLabel";  						myPlaceHolder.Controls.Add (lbl);  						DropDownList dropdownList = new DropDownList ();  						dropdownList.ID = row [2].ToString ().Trim ();  						foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  							if (!strItem.Equals ("")) {  								dropdownList.Items.Add (strItem);  							}  						}  						if (myPlaceHolder.FindControl (dropdownList.ID) == null)  							myPlaceHolder.Controls.Add (dropdownList);  						LiteralControl literalBreak = new LiteralControl ("<br />");  						myPlaceHolder.Controls.Add (literalBreak);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (dataTable.Rows.Count > 0) {  	string fieldType = "Text";  	int rows = 0;  	foreach (DataRow row in dataTable.Rows) {  		if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  			rows += 1;  			fieldType = row [1].ToString ();  			switch (fieldType) {  			case "Title":  				{  					lblTitle.Text = row [4].ToString ().Trim ();  				}  				break;  			case "Success":  				{  					success_msg.InnerText = row [4].ToString ().Trim ();  				}  				break;  			case "Text":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ();  					lbl.Text = row [3].ToString ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "MultiText":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					TextBox textBox = new TextBox ();  					textBox.ID = row [2].ToString ().Trim ();  					textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  					textBox.TextMode = TextBoxMode.MultiLine;  					textBox.Rows = 5;  					if (myPlaceHolder.FindControl (textBox.ID) == null)  						myPlaceHolder.Controls.Add (textBox);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Radio":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							RadioButton radioButton = new RadioButton ();  							radioButton.GroupName = "RadioGroup" + rows.ToString ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  								radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  								if (i == 0) {  									radioButton.Checked = true;  								}  							}  							if (myPlaceHolder.FindControl (radioButton.ID) == null)  								myPlaceHolder.Controls.Add (radioButton);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "Check":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					int i = 0;  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							CheckBox checkBox = new CheckBox ();  							if (row [4].ToString ().Trim ().Split (';').Length >= i) {  								checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  								checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  							}  							if (myPlaceHolder.FindControl (checkBox.ID) == null)  								myPlaceHolder.Controls.Add (checkBox);  							i++;  						}  					}  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			case "DropDown":  				{  					Label lbl = new Label ();  					lbl.ID = "lbl" + row [2].ToString ().Trim ();  					lbl.Text = row [3].ToString ().Trim ();  					lbl.CssClass = "dnnLabel";  					myPlaceHolder.Controls.Add (lbl);  					DropDownList dropdownList = new DropDownList ();  					dropdownList.ID = row [2].ToString ().Trim ();  					foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  						if (!strItem.Equals ("")) {  							dropdownList.Items.Add (strItem);  						}  					}  					if (myPlaceHolder.FindControl (dropdownList.ID) == null)  						myPlaceHolder.Controls.Add (dropdownList);  					LiteralControl literalBreak = new LiteralControl ("<br />");  					myPlaceHolder.Controls.Add (literalBreak);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (DataRow row in dataTable.Rows) {  	if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  		rows += 1;  		fieldType = row [1].ToString ();  		switch (fieldType) {  		case "Title":  			{  				lblTitle.Text = row [4].ToString ().Trim ();  			}  			break;  		case "Success":  			{  				success_msg.InnerText = row [4].ToString ().Trim ();  			}  			break;  		case "Text":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ();  				lbl.Text = row [3].ToString ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "MultiText":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				TextBox textBox = new TextBox ();  				textBox.ID = row [2].ToString ().Trim ();  				textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  				textBox.TextMode = TextBoxMode.MultiLine;  				textBox.Rows = 5;  				if (myPlaceHolder.FindControl (textBox.ID) == null)  					myPlaceHolder.Controls.Add (textBox);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Radio":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						RadioButton radioButton = new RadioButton ();  						radioButton.GroupName = "RadioGroup" + rows.ToString ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  							radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  							if (i == 0) {  								radioButton.Checked = true;  							}  						}  						if (myPlaceHolder.FindControl (radioButton.ID) == null)  							myPlaceHolder.Controls.Add (radioButton);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "Check":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				int i = 0;  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						CheckBox checkBox = new CheckBox ();  						if (row [4].ToString ().Trim ().Split (';').Length >= i) {  							checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  							checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  						}  						if (myPlaceHolder.FindControl (checkBox.ID) == null)  							myPlaceHolder.Controls.Add (checkBox);  						i++;  					}  				}  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		case "DropDown":  			{  				Label lbl = new Label ();  				lbl.ID = "lbl" + row [2].ToString ().Trim ();  				lbl.Text = row [3].ToString ().Trim ();  				lbl.CssClass = "dnnLabel";  				myPlaceHolder.Controls.Add (lbl);  				DropDownList dropdownList = new DropDownList ();  				dropdownList.ID = row [2].ToString ().Trim ();  				foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  					if (!strItem.Equals ("")) {  						dropdownList.Items.Add (strItem);  					}  				}  				if (myPlaceHolder.FindControl (dropdownList.ID) == null)  					myPlaceHolder.Controls.Add (dropdownList);  				LiteralControl literalBreak = new LiteralControl ("<br />");  				myPlaceHolder.Controls.Add (literalBreak);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!row [7].ToString ().Trim ().ToLower ().Equals ("false")) {  	rows += 1;  	fieldType = row [1].ToString ();  	switch (fieldType) {  	case "Title":  		{  			lblTitle.Text = row [4].ToString ().Trim ();  		}  		break;  	case "Success":  		{  			success_msg.InnerText = row [4].ToString ().Trim ();  		}  		break;  	case "Text":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ();  			lbl.Text = row [3].ToString ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "MultiText":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			TextBox textBox = new TextBox ();  			textBox.ID = row [2].ToString ().Trim ();  			textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  			textBox.TextMode = TextBoxMode.MultiLine;  			textBox.Rows = 5;  			if (myPlaceHolder.FindControl (textBox.ID) == null)  				myPlaceHolder.Controls.Add (textBox);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Radio":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					RadioButton radioButton = new RadioButton ();  					radioButton.GroupName = "RadioGroup" + rows.ToString ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  						radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  						if (i == 0) {  							radioButton.Checked = true;  						}  					}  					if (myPlaceHolder.FindControl (radioButton.ID) == null)  						myPlaceHolder.Controls.Add (radioButton);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "Check":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			int i = 0;  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					CheckBox checkBox = new CheckBox ();  					if (row [4].ToString ().Trim ().Split (';').Length >= i) {  						checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  						checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  					}  					if (myPlaceHolder.FindControl (checkBox.ID) == null)  						myPlaceHolder.Controls.Add (checkBox);  					i++;  				}  			}  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	case "DropDown":  		{  			Label lbl = new Label ();  			lbl.ID = "lbl" + row [2].ToString ().Trim ();  			lbl.Text = row [3].ToString ().Trim ();  			lbl.CssClass = "dnnLabel";  			myPlaceHolder.Controls.Add (lbl);  			DropDownList dropdownList = new DropDownList ();  			dropdownList.ID = row [2].ToString ().Trim ();  			foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  				if (!strItem.Equals ("")) {  					dropdownList.Items.Add (strItem);  				}  			}  			if (myPlaceHolder.FindControl (dropdownList.ID) == null)  				myPlaceHolder.Controls.Add (dropdownList);  			LiteralControl literalBreak = new LiteralControl ("<br />");  			myPlaceHolder.Controls.Add (literalBreak);  		}  		break;  	default:  		break;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: switch (fieldType) {  case "Title":  	{  		lblTitle.Text = row [4].ToString ().Trim ();  	}  	break;  case "Success":  	{  		success_msg.InnerText = row [4].ToString ().Trim ();  	}  	break;  case "Text":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ();  		lbl.Text = row [3].ToString ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "MultiText":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		TextBox textBox = new TextBox ();  		textBox.ID = row [2].ToString ().Trim ();  		textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  		textBox.TextMode = TextBoxMode.MultiLine;  		textBox.Rows = 5;  		if (myPlaceHolder.FindControl (textBox.ID) == null)  			myPlaceHolder.Controls.Add (textBox);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Radio":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				RadioButton radioButton = new RadioButton ();  				radioButton.GroupName = "RadioGroup" + rows.ToString ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  					radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  					if (i == 0) {  						radioButton.Checked = true;  					}  				}  				if (myPlaceHolder.FindControl (radioButton.ID) == null)  					myPlaceHolder.Controls.Add (radioButton);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "Check":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		int i = 0;  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				CheckBox checkBox = new CheckBox ();  				if (row [4].ToString ().Trim ().Split (';').Length >= i) {  					checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  					checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  				}  				if (myPlaceHolder.FindControl (checkBox.ID) == null)  					myPlaceHolder.Controls.Add (checkBox);  				i++;  			}  		}  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  case "DropDown":  	{  		Label lbl = new Label ();  		lbl.ID = "lbl" + row [2].ToString ().Trim ();  		lbl.Text = row [3].ToString ().Trim ();  		lbl.CssClass = "dnnLabel";  		myPlaceHolder.Controls.Add (lbl);  		DropDownList dropdownList = new DropDownList ();  		dropdownList.ID = row [2].ToString ().Trim ();  		foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  			if (!strItem.Equals ("")) {  				dropdownList.Items.Add (strItem);  			}  		}  		if (myPlaceHolder.FindControl (dropdownList.ID) == null)  			myPlaceHolder.Controls.Add (dropdownList);  		LiteralControl literalBreak = new LiteralControl ("<br />");  		myPlaceHolder.Controls.Add (literalBreak);  	}  	break;  default:  	break;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: lblTitle.Text = row [4].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: success_msg.InnerText = row [4].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: lbl.ID = "lbl" + row [2].ToString ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: lbl.Text = row [3].ToString ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: textBox.ID = row [2].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: lbl.ID = "lbl" + row [2].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: lbl.Text = row [3].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: textBox.ID = row [2].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: textBox.Attributes.Add ("placeholder"' row [4].ToString ().Trim ());  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: textBox.Rows = 5;  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: lbl.ID = "lbl" + row [2].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: lbl.Text = row [3].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  	if (!strItem.Equals ("")) {  		RadioButton radioButton = new RadioButton ();  		radioButton.GroupName = "RadioGroup" + rows.ToString ();  		if (row [4].ToString ().Trim ().Split (';').Length >= i) {  			radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  			radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  			if (i == 0) {  				radioButton.Checked = true;  			}  		}  		if (myPlaceHolder.FindControl (radioButton.ID) == null)  			myPlaceHolder.Controls.Add (radioButton);  		i++;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  	if (!strItem.Equals ("")) {  		RadioButton radioButton = new RadioButton ();  		radioButton.GroupName = "RadioGroup" + rows.ToString ();  		if (row [4].ToString ().Trim ().Split (';').Length >= i) {  			radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  			radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  			if (i == 0) {  				radioButton.Checked = true;  			}  		}  		if (myPlaceHolder.FindControl (radioButton.ID) == null)  			myPlaceHolder.Controls.Add (radioButton);  		i++;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  	if (!strItem.Equals ("")) {  		RadioButton radioButton = new RadioButton ();  		radioButton.GroupName = "RadioGroup" + rows.ToString ();  		if (row [4].ToString ().Trim ().Split (';').Length >= i) {  			radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  			radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  			if (i == 0) {  				radioButton.Checked = true;  			}  		}  		if (myPlaceHolder.FindControl (radioButton.ID) == null)  			myPlaceHolder.Controls.Add (radioButton);  		i++;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (string strItem in row [2].ToString ().Trim ().Split (';')) {  	if (!strItem.Equals ("")) {  		RadioButton radioButton = new RadioButton ();  		radioButton.GroupName = "RadioGroup" + rows.ToString ();  		if (row [4].ToString ().Trim ().Split (';').Length >= i) {  			radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  			radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  			if (i == 0) {  				radioButton.Checked = true;  			}  		}  		if (myPlaceHolder.FindControl (radioButton.ID) == null)  			myPlaceHolder.Controls.Add (radioButton);  		i++;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!strItem.Equals ("")) {  	RadioButton radioButton = new RadioButton ();  	radioButton.GroupName = "RadioGroup" + rows.ToString ();  	if (row [4].ToString ().Trim ().Split (';').Length >= i) {  		radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  		radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  		if (i == 0) {  			radioButton.Checked = true;  		}  	}  	if (myPlaceHolder.FindControl (radioButton.ID) == null)  		myPlaceHolder.Controls.Add (radioButton);  	i++;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!strItem.Equals ("")) {  	RadioButton radioButton = new RadioButton ();  	radioButton.GroupName = "RadioGroup" + rows.ToString ();  	if (row [4].ToString ().Trim ().Split (';').Length >= i) {  		radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  		radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  		if (i == 0) {  			radioButton.Checked = true;  		}  	}  	if (myPlaceHolder.FindControl (radioButton.ID) == null)  		myPlaceHolder.Controls.Add (radioButton);  	i++;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!strItem.Equals ("")) {  	RadioButton radioButton = new RadioButton ();  	radioButton.GroupName = "RadioGroup" + rows.ToString ();  	if (row [4].ToString ().Trim ().Split (';').Length >= i) {  		radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  		radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  		if (i == 0) {  			radioButton.Checked = true;  		}  	}  	if (myPlaceHolder.FindControl (radioButton.ID) == null)  		myPlaceHolder.Controls.Add (radioButton);  	i++;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (row [4].ToString ().Trim ().Split (';').Length >= i) {  	radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  	radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  	if (i == 0) {  		radioButton.Checked = true;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (row [4].ToString ().Trim ().Split (';').Length >= i) {  	radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  	radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  	if (i == 0) {  		radioButton.Checked = true;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (row [4].ToString ().Trim ().Split (';').Length >= i) {  	radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  	radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  	if (i == 0) {  		radioButton.Checked = true;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: radioButton.Text = row [4].ToString ().Trim ().Split (';') [i];  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: radioButton.ID = row [2].ToString ().Trim ().Split (';') [i];  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: lbl.ID = "lbl" + row [2].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: lbl.Text = row [3].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  	if (!strItem.Equals ("")) {  		CheckBox checkBox = new CheckBox ();  		if (row [4].ToString ().Trim ().Split (';').Length >= i) {  			checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  			checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  		}  		if (myPlaceHolder.FindControl (checkBox.ID) == null)  			myPlaceHolder.Controls.Add (checkBox);  		i++;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  	if (!strItem.Equals ("")) {  		CheckBox checkBox = new CheckBox ();  		if (row [4].ToString ().Trim ().Split (';').Length >= i) {  			checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  			checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  		}  		if (myPlaceHolder.FindControl (checkBox.ID) == null)  			myPlaceHolder.Controls.Add (checkBox);  		i++;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  	if (!strItem.Equals ("")) {  		CheckBox checkBox = new CheckBox ();  		if (row [4].ToString ().Trim ().Split (';').Length >= i) {  			checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  			checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  		}  		if (myPlaceHolder.FindControl (checkBox.ID) == null)  			myPlaceHolder.Controls.Add (checkBox);  		i++;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  	if (!strItem.Equals ("")) {  		CheckBox checkBox = new CheckBox ();  		if (row [4].ToString ().Trim ().Split (';').Length >= i) {  			checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  			checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  		}  		if (myPlaceHolder.FindControl (checkBox.ID) == null)  			myPlaceHolder.Controls.Add (checkBox);  		i++;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!strItem.Equals ("")) {  	CheckBox checkBox = new CheckBox ();  	if (row [4].ToString ().Trim ().Split (';').Length >= i) {  		checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  		checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  	}  	if (myPlaceHolder.FindControl (checkBox.ID) == null)  		myPlaceHolder.Controls.Add (checkBox);  	i++;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!strItem.Equals ("")) {  	CheckBox checkBox = new CheckBox ();  	if (row [4].ToString ().Trim ().Split (';').Length >= i) {  		checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  		checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  	}  	if (myPlaceHolder.FindControl (checkBox.ID) == null)  		myPlaceHolder.Controls.Add (checkBox);  	i++;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (!strItem.Equals ("")) {  	CheckBox checkBox = new CheckBox ();  	if (row [4].ToString ().Trim ().Split (';').Length >= i) {  		checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  		checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  	}  	if (myPlaceHolder.FindControl (checkBox.ID) == null)  		myPlaceHolder.Controls.Add (checkBox);  	i++;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (row [4].ToString ().Trim ().Split (';').Length >= i) {  	checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  	checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (row [4].ToString ().Trim ().Split (';').Length >= i) {  	checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  	checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: if (row [4].ToString ().Trim ().Split (';').Length >= i) {  	checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  	checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: checkBox.Text = row [4].ToString ().Trim ().Split (';') [i];  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: checkBox.ID = row [2].ToString ().Trim ().Split (';') [i];  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: lbl.ID = "lbl" + row [2].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: lbl.Text = row [3].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: dropdownList.ID = row [2].ToString ().Trim ();  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,View,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\View.ascx.cs,InitForm,The following statement contains a magic number: foreach (string strItem in row [4].ToString ().Trim ().Split (';')) {  	if (!strItem.Equals ("")) {  		dropdownList.Items.Add (strItem);  	}  }  
Missing Default,Aspose.DotNetNuke.Modules.AsposeDynamicFormGeneratorExcel,Edit,F:\newReposMay17\asposecells_Aspose_Cells_NET\Plugins\DNN\Aspose.DNN.DynamicFormBuilderExcel\Edit.ascx.cs,GetSaveFormat,The following switch statement is missing a default case: switch (format) {  case "xlsx":  	saveOption = new XlsSaveOptions (SaveFormat.Xlsx);  	break;  case "xlsb":  	saveOption = new XlsSaveOptions (SaveFormat.Xlsb);  	break;  case "xls":  	saveOption = new XlsSaveOptions (SaveFormat.Excel97To2003);  	break;  case "txt":  	saveOption = new XlsSaveOptions (SaveFormat.TabDelimited);  	break;  case "csv":  	saveOption = new XlsSaveOptions (SaveFormat.CSV);  	break;  case "ods":  	saveOption = new XlsSaveOptions (SaveFormat.ODS);  	break;  }  
