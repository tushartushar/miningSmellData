Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PdbTasks.Indexer,GenericIndexerHost,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\GenericIndexerHost.cs,WriteIndexingFile,Cyclomatic complexity of the method is 11
Complex Method,PdbTasks.Indexer,Subversion,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\Subversion.cs,ExtractInfo,Cyclomatic complexity of the method is 8
Complex Method,PdbTasks.Indexer,Subversion,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\Subversion.cs,GetStatus,Cyclomatic complexity of the method is 10
Long Statement,PdbTasks,PdbUploadToSymbolServer,C:\repos\akurdyukov_pdbtasks\PdbTasks\PdbUploadToSymbolServer.cs,Execute,The length of the statement  "	string arguments = String.Format ("add /f \"{0}\\*.*\" /s \"{1}\" /t \"{2}\" /v \"{3}\" /c \"{4}\""' tempDir' SymbolServer' ProductName' Version' Comment); " is 155.
Long Statement,PdbTasks,PdbUploadToSymbolServer,C:\repos\akurdyukov_pdbtasks\PdbTasks\PdbUploadToSymbolServer.cs,Execute,The length of the statement  "		Log.LogError ("Error: Unable to store PDB files ({0} exit code is {1}):\r\n{2}\r\n{3}\r\nArguments were: {4}"' symStoreTool' symstore.ExitCode' errorData' outputData' arguments); " is 178.
Long Statement,PdbTasks.Indexer,GenericIndexerHost,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\GenericIndexerHost.cs,WriteHeader,The length of the statement  "	sr.WriteLine ("SRCSRVCMD=cmd /c \"IF %CopyLocal%==TRUE (ECHO F|xcopy \"{0}\\%CachePath%\\%Revision%\\%fnfile%(%FilePath%)\" %SRCSRVTRG% /Q /Y /Z) ELSE ({1})\""' BackupLocation' extractCmd); " is 189.
Long Statement,PdbTasks.Indexer,GenericIndexerHost,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\GenericIndexerHost.cs,GetPDBSourceNames,The length of the statement  "	var srctool = _libraryManager.PrepareToRunTool (Path.Combine ("srcsrv"' "srctool.exe")' String.Format ("\"{0}\" -r"' pdbFile)); " is 127.
Long Statement,PdbTasks.Indexer,GenericIndexerHost,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\GenericIndexerHost.cs,UpdatePDB,The length of the statement  "		var pdbstr = _libraryManager.PrepareToRunTool (Path.Combine ("srcsrv"' "pdbstr.exe")' String.Format ("-w -p:\"{0}\" -s:srcsrv -i:\"{1}\""' pdbFile' tempFile)); " is 159.
Long Statement,PdbTasks.Indexer,GenericIndexerHost,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\GenericIndexerHost.cs,MakeLocalBackup,The length of the statement  "		string destinationFolder = String.Format ("{0}\\{1}\\{2}"' BackupLocation' commandArgs ["CachePath"]' commandArgs ["Revision"]); " is 128.
Long Statement,PdbTasks.Indexer,Subversion,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\Subversion.cs,IndexExternals,The length of the statement  "	var externals = RunSubversion (String.Format ("propget svn:externals \"{0}\" --recursive{1}"' folderPath' _commandCreds)); " is 122.
Magic Number,PdbTasks,DebuggingToolsForWindowsLibraryManager,C:\repos\akurdyukov_pdbtasks\PdbTasks\DebuggingToolsForWindowsLibraryManager.cs,DebuggingToolsForWindowsLibraryManager,The following statement contains a magic number: if (programFiles.EndsWith ("(x86)") && Environment.Is64BitOperatingSystem) {  	programFiles = programFiles.Substring (0' programFiles.Length - 6);  }  
Magic Number,PdbTasks,DebuggingToolsForWindowsLibraryManager,C:\repos\akurdyukov_pdbtasks\PdbTasks\DebuggingToolsForWindowsLibraryManager.cs,DebuggingToolsForWindowsLibraryManager,The following statement contains a magic number: programFiles = programFiles.Substring (0' programFiles.Length - 6);  
Magic Number,PdbTasks.Indexer,GenericIndexerHost,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\GenericIndexerHost.cs,AddFile,The following statement contains a magic number: lock (_sync) {  	if (!_fileCommands.ContainsFile (filePath)) {  		if (status != FileStatus.CheckedIn && UseLocalBackup) {  			//Store a reference to this file so we can copy it later if necessary  			var fi = new FileInfo (filePath);  			var lf = new LocalFile {  				Timestamp = (int)(fi.LastWriteTimeUtc - new DateTime (1970' 1' 1)).TotalSeconds'  				FilePath = filePath  			};  			_localFiles.Add (lf);  			//Fill arguments for local backup  			args ["CopyLocal"] = "TRUE";  			args ["FilePath"] = filePath;  			args ["Revision"] = lf.Timestamp.ToString (CultureInfo.InvariantCulture);  		}  		_fileCommands.Add (filePath' args);  		_logger.LogMessage ("Adding file {0}"' filePath);  	}  }  
Magic Number,PdbTasks.Indexer,GenericIndexerHost,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\GenericIndexerHost.cs,AddFile,The following statement contains a magic number: if (!_fileCommands.ContainsFile (filePath)) {  	if (status != FileStatus.CheckedIn && UseLocalBackup) {  		//Store a reference to this file so we can copy it later if necessary  		var fi = new FileInfo (filePath);  		var lf = new LocalFile {  			Timestamp = (int)(fi.LastWriteTimeUtc - new DateTime (1970' 1' 1)).TotalSeconds'  			FilePath = filePath  		};  		_localFiles.Add (lf);  		//Fill arguments for local backup  		args ["CopyLocal"] = "TRUE";  		args ["FilePath"] = filePath;  		args ["Revision"] = lf.Timestamp.ToString (CultureInfo.InvariantCulture);  	}  	_fileCommands.Add (filePath' args);  	_logger.LogMessage ("Adding file {0}"' filePath);  }  
Magic Number,PdbTasks.Indexer,GenericIndexerHost,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\GenericIndexerHost.cs,AddFile,The following statement contains a magic number: if (status != FileStatus.CheckedIn && UseLocalBackup) {  	//Store a reference to this file so we can copy it later if necessary  	var fi = new FileInfo (filePath);  	var lf = new LocalFile {  		Timestamp = (int)(fi.LastWriteTimeUtc - new DateTime (1970' 1' 1)).TotalSeconds'  		FilePath = filePath  	};  	_localFiles.Add (lf);  	//Fill arguments for local backup  	args ["CopyLocal"] = "TRUE";  	args ["FilePath"] = filePath;  	args ["Revision"] = lf.Timestamp.ToString (CultureInfo.InvariantCulture);  }  
Magic Number,PdbTasks.Indexer,Subversion,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\Subversion.cs,IndexExternals,The following statement contains a magic number: foreach (string external in externals) {  	int index = external.LastIndexOf (" - "' StringComparison.InvariantCulture);  	if (index != -1) {  		var line = external.Remove (index' 3);  		line = line.Insert (index' "\\");  		index = line.LastIndexOf (' ');  		line = line.Substring (0' index);  		// Line should now contain the path to the folder that is external  		IndexFolder (line);  	}  }  
Magic Number,PdbTasks.Indexer,Subversion,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\Subversion.cs,IndexExternals,The following statement contains a magic number: if (index != -1) {  	var line = external.Remove (index' 3);  	line = line.Insert (index' "\\");  	index = line.LastIndexOf (' ');  	line = line.Substring (0' index);  	// Line should now contain the path to the folder that is external  	IndexFolder (line);  }  
Magic Number,PdbTasks.Indexer,Subversion,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\Subversion.cs,IndexFolder,The following statement contains a magic number: foreach (string statusLine in statuses) {  	char status = statusLine [0];  	string filePath = statusLine.Substring (7);  	if (status == 'M') {  		for (int i = tempInfoList.Count - 1; i >= 0; i--) {  			if (tempInfoList [i].FullPath.Equals (filePath))  				tempInfoList [i].Status = FileStatus.Modified;  		}  	}  }  
Magic Number,PdbTasks.Indexer,Subversion,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\Subversion.cs,GetKeyValue,The following statement contains a magic number: if (index != -1 && line.Length > index + 2) {  	key = line.Substring (0' index).ToUpper ();  	value = line.Substring (index + 2);  }  
Magic Number,PdbTasks.Indexer,Subversion,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\Subversion.cs,GetKeyValue,The following statement contains a magic number: if (index != -1 && line.Length > index + 2) {  	key = line.Substring (0' index).ToUpper ();  	value = line.Substring (index + 2);  }  
Magic Number,PdbTasks.Indexer,Subversion,C:\repos\akurdyukov_pdbtasks\PdbTasks\Indexer\Subversion.cs,GetKeyValue,The following statement contains a magic number: value = line.Substring (index + 2);  
