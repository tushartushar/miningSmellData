Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Collections.Concurrent,ConcurrentStack,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\ConcurrentStack.cs,TryPopRange,Cyclomatic complexity of the method is 9
Complex Method,System.Collections,Hashtable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\Hashtable.cs,PutImpl,Cyclomatic complexity of the method is 11
Complex Method,System.Linq.Expressions,BinaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\BinaryExpression.cs,EmitLogicalBinary,Cyclomatic complexity of the method is 11
Complex Method,System.Linq.Expressions,BinaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\BinaryExpression.cs,EmitBinaryOperator,Cyclomatic complexity of the method is 74
Complex Method,System.Linq.Expressions,BinaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\BinaryExpression.cs,EmitLiftedRelationalBinary,Cyclomatic complexity of the method is 18
Complex Method,System.Linq.Expressions,BinaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\BinaryExpression.cs,EmitLiftedUserDefinedOperator,Cyclomatic complexity of the method is 14
Complex Method,System.Linq.Expressions,BinaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\BinaryExpression.cs,EmitUserDefinedOperator,Cyclomatic complexity of the method is 17
Complex Method,System.Linq.Expressions,BinaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\BinaryExpression.cs,Emit,Cyclomatic complexity of the method is 33
Complex Method,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,Cyclomatic complexity of the method is 36
Complex Method,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,BinaryCoreCheck,Cyclomatic complexity of the method is 16
Complex Method,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeBoolBinary,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeBinary,Cyclomatic complexity of the method is 24
Complex Method,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetActionType,Cyclomatic complexity of the method is 14
Complex Method,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetFuncType,Cyclomatic complexity of the method is 17
Complex Method,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,CheckLambda,Cyclomatic complexity of the method is 9
Complex Method,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,ListInit,Cyclomatic complexity of the method is 9
Complex Method,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeUnary,Cyclomatic complexity of the method is 9
Complex Method,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,New,Cyclomatic complexity of the method is 18
Complex Method,System.Linq.Expressions,ExpressionPrinter,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ExpressionPrinter.cs,VisitUnary,Cyclomatic complexity of the method is 19
Complex Method,System.Linq.Expressions,ExpressionPrinter,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ExpressionPrinter.cs,OperatorToString,Cyclomatic complexity of the method is 24
Complex Method,System.Linq.Expressions,ExpressionPrinter,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ExpressionPrinter.cs,VisitBinary,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Expressions,ExpressionPrinter,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ExpressionPrinter.cs,VisitNewArray,Cyclomatic complexity of the method is 9
Complex Method,System.Linq.Expressions,ExpressionTransformer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ExpressionTransformer.cs,Visit,Cyclomatic complexity of the method is 48
Complex Method,System.Linq.Expressions,ExpressionVisitor,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 76
Complex Method,System.Linq.Expressions,ExpressionVisitor,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ExpressionVisitor.cs,VisitBinding,Cyclomatic complexity of the method is 11
Complex Method,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitUnaryOperator,Cyclomatic complexity of the method is 15
Complex Method,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitPrimitiveConversion,Cyclomatic complexity of the method is 26
Complex Method,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,Emit,Cyclomatic complexity of the method is 17
Complex Method,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,CreateGroupByIterator,Cyclomatic complexity of the method is 8
Complex Method,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,CreateGroupByIterator,Cyclomatic complexity of the method is 8
Complex Method,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,Max,Cyclomatic complexity of the method is 9
Complex Method,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,Min,Cyclomatic complexity of the method is 9
Complex Method,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,Cyclomatic complexity of the method is 8
Complex Method,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,Invoke,Cyclomatic complexity of the method is 11
Complex Method,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,Finish,Cyclomatic complexity of the method is 10
Complex Method,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,WhenAnyCore,Cyclomatic complexity of the method is 8
Complex Method,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,WhenAnyCore,Cyclomatic complexity of the method is 8
Complex Method,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,CheckContinueArguments,Cyclomatic complexity of the method is 8
Complex Method,System.Threading,CancellationTokenSource,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading\CancellationTokenSource.cs,Cancel,Cyclomatic complexity of the method is 8
Complex Method,System.Xml.Linq,XAttribute,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XAttribute.cs,ToString,Cyclomatic complexity of the method is 24
Complex Method,System.Xml.Linq,XDocument,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XDocument.cs,VerifyAddedNode,Cyclomatic complexity of the method is 10
Complex Method,System.Xml.Linq,XElement,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XElement.cs,WriteTo,Cyclomatic complexity of the method is 9
Complex Method,System.Xml.Linq,XName,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XName.cs,ExpandName,Cyclomatic complexity of the method is 8
Complex Method,System.Xml.Linq,XNode,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNode.cs,ReadFrom,Cyclomatic complexity of the method is 25
Complex Method,System.Xml.Linq,XNodeDocumentOrderComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeDocumentOrderComparer.cs,CompareCore,Cyclomatic complexity of the method is 27
Complex Method,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,Equals,Cyclomatic complexity of the method is 28
Complex Method,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,Cyclomatic complexity of the method is 31
Complex Method,System.Xml.Linq,XNodeNavigator,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeNavigator.cs,GetInnerText,Cyclomatic complexity of the method is 11
Complex Method,System.Xml.Linq,XNodeNavigator,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeNavigator.cs,MoveToNextNamespace,Cyclomatic complexity of the method is 8
Complex Method,System.Xml.Linq,XNodeReader,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeReader.cs,GetName,Cyclomatic complexity of the method is 11
Complex Method,System.Xml.Linq,XNodeReader,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeReader.cs,MoveToAttribute,Cyclomatic complexity of the method is 8
Complex Method,System.Xml.Linq,XNodeReader,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeReader.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,System.Xml.Linq,XNodeWriter,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeWriter.cs,WriteDocType,Cyclomatic complexity of the method is 10
Complex Method,System.Xml.Linq,XUtil,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XUtil.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,System.Xml.Linq,XUtil,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XUtil.cs,ExpandArray,Cyclomatic complexity of the method is 8
Long Parameter List,System,Tuple,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\Tuple.cs,Create,The method has 8 parameters.
Long Parameter List,System,Tuple,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\Tuple.cs,Create,The method has 7 parameters.
Long Parameter List,System,Tuple,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\Tuple.cs,Create,The method has 6 parameters.
Long Parameter List,System,Tuple,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\Tuple.cs,Create,The method has 5 parameters.
Long Parameter List,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,InsertInternal,The method has 5 parameters.
Long Parameter List,System.Linq.Expressions,BinaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\BinaryExpression.cs,BinaryExpression,The method has 5 parameters.
Long Parameter List,System.Linq.Expressions,BinaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\BinaryExpression.cs,BinaryExpression,The method has 8 parameters.
Long Parameter List,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The method has 5 parameters.
Long Parameter List,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeBoolBinary,The method has 5 parameters.
Long Parameter List,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeBinary,The method has 5 parameters.
Long Parameter List,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeBinary,The method has 6 parameters.
Long Parameter List,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,TryGetMethod,The method has 5 parameters.
Long Parameter List,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,UnaryExpression,The method has 5 parameters.
Long Parameter List,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitPrimitiveConversion,The method has 6 parameters.
Long Parameter List,System.Linq,Check,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Check.cs,JoinSelectors,The method has 5 parameters.
Long Parameter List,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,GroupBy,The method has 5 parameters.
Long Parameter List,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,CreateGroupByIterator,The method has 5 parameters.
Long Parameter List,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,GroupJoin,The method has 5 parameters.
Long Parameter List,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,GroupJoin,The method has 6 parameters.
Long Parameter List,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,CreateGroupJoinIterator,The method has 6 parameters.
Long Parameter List,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,Join,The method has 6 parameters.
Long Parameter List,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,CreateJoinIterator,The method has 6 parameters.
Long Parameter List,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,Join,The method has 5 parameters.
Long Parameter List,System.Linq,OrderedSequence,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\OrderedSequence.cs,OrderedSequence,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The method has 8 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The method has 8 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 7 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 7 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 7 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 8 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 8 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 7 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 7 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The method has 8 parameters.
Long Parameter List,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,Task,The method has 8 parameters.
Long Parameter List,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAny,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAny,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAny,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAny,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAll,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAll,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAll,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAll,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 7 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 8 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 5 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 6 parameters.
Long Parameter List,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,FromAsync,The method has 7 parameters.
Long Parameter List,System.Xml.Linq,XElement,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XElement.cs,CreateDummyNamespace,The method has 5 parameters.
Long Statement,System,Tuple,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\Tuple.cs,Create,The length of the statement  "	return new Tuple<T1' T2' T3' T4' T5' T6' T7' Tuple<T8>> (item1' item2' item3' item4' item5' item6' item7' new Tuple<T8> (item8)); " is 129.
Long Statement,System.Collections.Concurrent.Partitioners,EnumerablePartitioner,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent.Partitioners\EnumerablePartitioner.cs,GetOrderablePartitions,The length of the statement  "		enumerators [i] = isSimple ? GetPartitionEnumeratorSimple (src' state' i == enumerators.Length - 1) : GetPartitionEnumerator (src' state); " is 138.
Long Statement,System.Collections.Concurrent.Partitioners,UserRangePartitioner,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent.Partitioners\UserRangePartitioner.cs,GetEnumerator,The length of the statement  "		yield return new KeyValuePair<long' Tuple<int' int>> (index' Tuple.Create (sliceStart' Math.Min (end' sliceStart + rangeSize))); " is 128.
Long Statement,System.Collections.Concurrent.Partitioners,UserLongRangePartitioner,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent.Partitioners\UserRangePartitioner.cs,GetEnumerator,The length of the statement  "		yield return new KeyValuePair<long' Tuple<long' long>> (index' Tuple.Create (sliceStart' Math.Min (end' sliceStart + rangeSize))); " is 130.
Long Statement,System.Collections.Concurrent,ConcurrentDictionary,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\ConcurrentDictionary.cs,AddOrUpdate,The length of the statement  "	return internalDictionary.InsertOrUpdate (Hash (key)' key' () => Make (key' addValueFactory (key))' e => Make (key' updateValueFactory (key' e.Value))).Value; " is 158.
Long Statement,System.Collections.Concurrent,ConcurrentDictionary,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\ConcurrentDictionary.cs,TryUpdate,The length of the statement  "	return internalDictionary.CompareExchange (Hash (key)' key' Make (key' newValue)' e => e.Value.Equals (comparisonValue)); " is 121.
Long Statement,System.Collections.Concurrent,ConcurrentDictionary,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\ConcurrentDictionary.cs,GetOrAdd,The length of the statement  "	return internalDictionary.InsertOrGet (Hash (key)' key' Make (key' default(TValue))' () => Make (key' valueFactory (key))).Value; " is 129.
Long Statement,System.Collections.Concurrent,ConcurrentOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\ConcurrentOrderedList.cs,CopyTo,The length of the statement  "		throw new ArgumentException ("array"' "The number of elements is greater than the available space from startIndex to the end of the destination array."); " is 153.
Long Statement,System.Collections.Concurrent,ConcurrentQueue,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\ConcurrentQueue.cs,Enqueue,The length of the statement  "	// At this point we added correctly our node' now we have to update tail. If it fails then it will be done by another thread " is 124.
Long Statement,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,GetParent,The length of the statement  "	var pos = (tt = v >> 16) > 0 ? (t = tt >> 8) > 0 ? 24 + logTable [t] : 16 + logTable [tt] : (t = v >> 8) > 0 ? 8 + logTable [t] : logTable [v]; " is 143.
Long Statement,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,ComputeDummyKey,The length of the statement  "	return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1; " is 205.
Long Statement,System.Collections.Generic,HashSet,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Generic\HashSet.cs,Init,The length of the statement  "	/* Modify capacity so 'capacity' elements can be added without resizing */capacity = (int)(capacity / DEFAULT_LOAD_FACTOR) + 1; " is 127.
Long Statement,System.Collections.Generic,HashSet,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Generic\HashSet.cs,SlotsContainsAt,The length of the statement  "		if (link.HashCode == hash && ((hash == HASH_FLAG && (item == null || null == slots [current])) ? (item == null && null == slots [current]) : comparer.Equals (item' slots [current]))) " is 182.
Long Statement,System.Collections.Generic,HashSet,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Generic\HashSet.cs,Remove,The length of the statement  "		if (link.HashCode == hashCode && ((hashCode == HASH_FLAG && (item == null || null == slots [current])) ? (item == null && null == slots [current]) : comparer.Equals (slots [current]' item))) " is 190.
Long Statement,System.Linq.Expressions,BinaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\BinaryExpression.cs,EmitBinaryOperator,The length of the statement  "		throw new InvalidOperationException (string.Format ("Internal error: BinaryExpression contains non-Binary nodetype {0}"' NodeType)); " is 132.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,UnaryCoreCheck,The length of the statement  "	throw new InvalidOperationException (string.Format ("Operation {0} not defined for {1}"' oper_name != null ? oper_name.Substring (3) : "is"' expression.Type)); " is 159.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,BinaryCoreCheck,The length of the statement  "		throw new InvalidOperationException (String.Format ("Operation {0} not defined for {1} and {2}"' oper_name != null ? oper_name.Substring (3) : "is"' ltype' rtype)); " is 164.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeSimpleBinary,The length of the statement  "		else if (left.Type.IsNullable () && right.Type.IsNullable () && left.Type.GetNotNullableType () == lp.ParameterType && right.Type.GetNotNullableType () == rp.ParameterType && !method.ReturnType.IsNullable ()) { " is 210.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,IsAssignableToOperatorParameter,The length of the statement  "	if ((!expression.Type.IsNullable () && !parameter.ParameterType.IsNullable ()) && IsAssignableToParameterType (expression.Type' parameter)) " is 139.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeSimpleUnary,The length of the statement  "		else if (expression.Type.IsNullable () && expression.Type.GetNotNullableType () == parameter.ParameterType && !method.ReturnType.IsNullable ()) { " is 145.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeBoolBinary,The length of the statement  "		else if (left.Type.IsNullable () && right.Type.IsNullable () && left.Type.GetNotNullableType () == lp.ParameterType && right.Type.GetNotNullableType () == rp.ParameterType) { " is 174.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,SubtractChecked,The length of the statement  "			throw new InvalidOperationException (String.Format ("SubtractChecked not defined for {0} and {1}"' left.Type' right.Type)); " is 123.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,Convert,The length of the statement  "	return new UnaryExpression (ExpressionType.Convert' expression' type' method' IsConvertNodeLifted (method' expression' type)); " is 126.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,ConvertChecked,The length of the statement  "	return new UnaryExpression (ExpressionType.ConvertChecked' expression' type' method' IsConvertNodeLifted (method' expression' type)); " is 133.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,CheckLambda,The length of the statement  "		throw new ArgumentException (string.Format ("Different number of arguments in delegate {0}"' delegateType)' "delegateType"); " is 124.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,CheckLambda,The length of the statement  "			throw new ArgumentException (String.Format ("Can not assign a {0} to a {1}"' invoke_parameters [i].ParameterType' parameter.Type)); " is 131.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,ListBind,The length of the statement  "	member.OnFieldOrProperty (field => CheckIsAssignableToIEnumerable (field.FieldType)' prop => CheckIsAssignableToIEnumerable (prop.PropertyType)); " is 145.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,NewArrayInit,The length of the statement  "			throw new InvalidOperationException (string.Format ("{0} IsAssignableTo {1}' expression [ {2} ] : {3}"' expression.Type' type' expression.NodeType' expression)); " is 161.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,PropertyOrField,The length of the statement  "	throw new ArgumentException (string.Format ("No field or property named {0} on {1}"' propertyOrFieldName' expression.Type)); " is 124.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,IsInt,The length of the statement  "	return t == typeof(byte) || t == typeof(sbyte) || t == typeof(short) || t == typeof(ushort) || t == typeof(int) || t == typeof(uint) || t == typeof(long) || t == typeof(ulong); " is 176.
Long Statement,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,Emit,The length of the statement  "	throw new NotImplementedException (String.Format ("Emit method is not implemented in expression type {0}"' GetType ())); " is 120.
Long Statement,System.Linq.Expressions,Extensions,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Extensions.cs,IsAssignableTo,The length of the statement  "	return type.IsAssignableFrom (self) || ArrayTypeAreAssignable (self' type) || ArrayTypeIsAssignableToInterface (self' type); " is 124.
Long Statement,System.Linq.Expressions,Extensions,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Extensions.cs,ArrayTypeIsAssignableToInterface,The length of the statement  "	if (!(candidate.IsGenericInstanceOf (typeof(IList<>)) || candidate.IsGenericInstanceOf (typeof(ICollection<>)) || candidate.IsGenericInstanceOf (typeof(IEnumerable<>)))) " is 169.
Long Statement,System.Linq.Expressions,MemberAssignment,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\MemberAssignment.cs,Emit,The length of the statement  "	this.Member.OnFieldOrProperty (field => EmitFieldAssignment (ec' field' local)' prop => EmitPropertyAssignment (ec' prop' local)); " is 130.
Long Statement,System.Linq.Expressions,MemberBinding,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\MemberBinding.cs,EmitLoadMember,The length of the statement  "	return member.OnFieldOrProperty<LocalBuilder> (field => EmitLoadField (ec' field)' prop => EmitLoadProperty (ec' prop)); " is 120.
Long Statement,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitPrimitiveConversion,The length of the statement  "		EmitPrimitiveConversion (ec' is_unsigned' OpCodes.Conv_I1' OpCodes.Conv_U1' OpCodes.Conv_Ovf_I1' OpCodes.Conv_Ovf_I1_Un); " is 121.
Long Statement,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitPrimitiveConversion,The length of the statement  "		EmitPrimitiveConversion (ec' is_unsigned' OpCodes.Conv_I1' OpCodes.Conv_U1' OpCodes.Conv_Ovf_U1' OpCodes.Conv_Ovf_U1_Un); " is 121.
Long Statement,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitPrimitiveConversion,The length of the statement  "		EmitPrimitiveConversion (ec' is_unsigned' OpCodes.Conv_I2' OpCodes.Conv_U2' OpCodes.Conv_Ovf_I2' OpCodes.Conv_Ovf_I2_Un); " is 121.
Long Statement,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitPrimitiveConversion,The length of the statement  "		EmitPrimitiveConversion (ec' is_unsigned' OpCodes.Conv_I2' OpCodes.Conv_U2' OpCodes.Conv_Ovf_U2' OpCodes.Conv_Ovf_U2_Un); " is 121.
Long Statement,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitPrimitiveConversion,The length of the statement  "		EmitPrimitiveConversion (ec' is_unsigned' OpCodes.Conv_I4' OpCodes.Conv_U4' OpCodes.Conv_Ovf_I4' OpCodes.Conv_Ovf_I4_Un); " is 121.
Long Statement,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitPrimitiveConversion,The length of the statement  "		EmitPrimitiveConversion (ec' is_unsigned' OpCodes.Conv_I4' OpCodes.Conv_U4' OpCodes.Conv_Ovf_U4' OpCodes.Conv_Ovf_U4_Un); " is 121.
Long Statement,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitPrimitiveConversion,The length of the statement  "		EmitPrimitiveConversion (ec' is_unsigned' OpCodes.Conv_I8' OpCodes.Conv_U8' OpCodes.Conv_Ovf_I8' OpCodes.Conv_Ovf_I8_Un); " is 121.
Long Statement,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitPrimitiveConversion,The length of the statement  "		EmitPrimitiveConversion (ec' is_unsigned' OpCodes.Conv_I8' OpCodes.Conv_U8' OpCodes.Conv_Ovf_U8' OpCodes.Conv_Ovf_U8_Un); " is 121.
Long Statement,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,CreateGroupByIterator,The length of the statement  "	IEnumerable<IGrouping<TKey' TElement>> groups = GroupBy<TSource' TKey' TElement> (source' keySelector' elementSelector' comparer); " is 130.
Long Statement,System.Linq,OrderedEnumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\OrderedEnumerable.cs,CreateOrderedEnumerable,The length of the statement  "	return new OrderedSequence<TElement' TKey> (this' source' selector' comparer' descending ? SortDirection.Descending : SortDirection.Ascending); " is 143.
Long Statement,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The length of the statement  "	int num = Math.Min (GetBestWorkerNumber (options.TaskScheduler)' options != null && options.MaxDegreeOfParallelism != -1 ? options.MaxDegreeOfParallelism : int.MaxValue); " is 170.
Long Statement,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The length of the statement  "	return ForEach<TSource' TLocal> ((Partitioner<TSource>)Partitioner.Create (source)' ParallelOptions.Default' localInit' body' localFinally); " is 140.
Long Statement,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,ForEach,The length of the statement  "	return ForEach<KeyValuePair<long' TSource>' TLocal> (source.GetOrderablePartitions' parallelOptions' localInit' (e' s' l) => body (e.Value' s' e.Key' l)' localFinally); " is 168.
Long Statement,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,Invoke,The length of the statement  "		ts [i] = Task.Factory.StartNew (actions [i]' parallelOptions.CancellationToken' TaskCreationOptions.None' parallelOptions.TaskScheduler); " is 137.
Long Statement,System.Threading.Tasks,ParallelLoopState,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\ParallelLoopState.cs,Break,The length of the statement  "		throw new InvalidOperationException ("The Stop method was previously called. Break and Stop may not be used in combination by iterations of the same loop."); " is 157.
Long Statement,System.Threading.Tasks,ParallelLoopState,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\ParallelLoopState.cs,Stop,The length of the statement  "		throw new InvalidOperationException ("The Break method was previously called. Break and Stop may not be used in combination by iterations of the same loop."); " is 158.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	var continuation = new Task (invoker' null' cancellationToken' GetCreationOptions (continuationOptions)' null' this' lazyCancellation); " is 135.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	return ContinueWith<TResult> (continuationFunction' CancellationToken.None' continuationOptions' TaskScheduler.Current); " is 120.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	return ContinueWith<TResult> (continuationFunction' cancellationToken' TaskContinuationOptions.None' TaskScheduler.Current); " is 124.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	return ContinueWith<TResult> (TaskActionInvoker.Create (continuationFunction)' cancellationToken' continuationOptions' scheduler); " is 130.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	var continuation = new Task<TResult> (invoker' null' cancellationToken' GetCreationOptions (continuationOptions)' parent' this' lazyCancellation); " is 146.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWithCore,The length of the statement  "	const TaskContinuationOptions wrongRan = TaskContinuationOptions.NotOnRanToCompletion | TaskContinuationOptions.OnlyOnRanToCompletion; " is 134.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWithCore,The length of the statement  "	const TaskContinuationOptions wrongCanceled = TaskContinuationOptions.NotOnCanceled | TaskContinuationOptions.OnlyOnCanceled; " is 125.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWithCore,The length of the statement  "	const TaskContinuationOptions wrongFaulted = TaskContinuationOptions.NotOnFaulted | TaskContinuationOptions.OnlyOnFaulted; " is 122.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWithCore,The length of the statement  "	if (((options & wrongRan) == wrongRan) || ((options & wrongCanceled) == wrongCanceled) || ((options & wrongFaulted) == wrongFaulted)) " is 133.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,Schedule,The length of the statement  "	if (scheduler != TaskScheduler.Current || childWorkAdder == null || HasFlag (creationOptions' TaskCreationOptions.PreferFairness)) { " is 132.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ThreadStart,The length of the statement  "	TaskScheduler.Current = HasFlag (creationOptions' TaskCreationOptions.HideScheduler) ? TaskScheduler.Default : scheduler; " is 121.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,Wait,The length of the statement  "		if (Status == TaskStatus.WaitingToRun && millisecondsTimeout == Timeout.Infinite && scheduler != null && !cancellationToken.CanBeCanceled) " is 138.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	Task continuation = new Task (TaskActionInvoker.Create (continuationAction)' state' cancellationToken' GetCreationOptions (continuationOptions)' parent' this); " is 159.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	return ContinueWith (continuationAction' state' CancellationToken.None' TaskContinuationOptions.None' TaskScheduler.Current); " is 125.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	return ContinueWith (continuationAction' state' cancellationToken' TaskContinuationOptions.None' TaskScheduler.Current); " is 120.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	return ContinueWith<TResult> (continuationFunction' state' CancellationToken.None' TaskContinuationOptions.None' TaskScheduler.Current); " is 136.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	return ContinueWith<TResult> (continuationFunction' state' CancellationToken.None' continuationOptions' TaskScheduler.Current); " is 127.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	return ContinueWith<TResult> (continuationFunction' state' cancellationToken' TaskContinuationOptions.None' TaskScheduler.Current); " is 131.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	return ContinueWith<TResult> (continuationFunction' state' CancellationToken.None' TaskContinuationOptions.None' scheduler); " is 124.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,ContinueWith,The length of the statement  "	var t = new Task<TResult> (TaskActionInvoker.Create (continuationFunction)' state' cancellationToken' GetCreationOptions (continuationOptions)' parent' this); " is 158.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,Delay,The length of the statement  "	var task = new Task (TaskActionInvoker.Delay' millisecondsDelay' cancellationToken' TaskCreationOptions.None' null' TaskConstants.Finished); " is 140.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,Run,The length of the statement  "	return TaskExtensionsImpl.Unwrap (Task.Factory.StartNew (function' cancellationToken' TaskCreationOptions.DenyChildAttach' TaskScheduler.Default)); " is 147.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,Run,The length of the statement  "	return TaskExtensionsImpl.Unwrap (Task.Factory.StartNew (function' cancellationToken' TaskCreationOptions.DenyChildAttach' TaskScheduler.Default)); " is 147.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,WhenAllCore,The length of the statement  "	var task = new Task<TResult[]> (TaskActionInvoker.Empty' null' CancellationToken.None' TaskCreationOptions.None' null' TaskConstants.Finished); " is 143.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,WhenAnyCore,The length of the statement  "	var task = new Task<Task<TResult>> (TaskActionInvoker.Empty' null' CancellationToken.None' TaskCreationOptions.None' null' TaskConstants.Finished); " is 147.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,WhenAllCore,The length of the statement  "	var task = new Task (TaskActionInvoker.Empty' null' CancellationToken.None' TaskCreationOptions.None' null' TaskConstants.Finished); " is 132.
Long Statement,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,WhenAnyCore,The length of the statement  "	var task = new Task<Task> (TaskActionInvoker.Empty' null' CancellationToken.None' TaskCreationOptions.None' null' TaskConstants.Finished); " is 138.
Long Statement,System.Threading.Tasks,TaskCompletionQueue,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskCompletionQueue.cs,Remove,The length of the statement  "	if (temp != null && temp == continuation && Interlocked.CompareExchange (ref single' null' continuation) == continuation) " is 121.
Long Statement,System.Threading.Tasks,TaskCompletionSource,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskCompletionSource.cs,ThrowInvalidException,The length of the statement  "	throw new InvalidOperationException ("The underlying Task is already in one of the three final states: RanToCompletion' Faulted' or Canceled."); " is 144.
Long Statement,System.Threading.Tasks,TaskContinuation,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskContinuation.cs,ContinuationStatusCheck,The length of the statement  "		kind &= ~(TaskContinuationOptions.PreferFairness | TaskContinuationOptions.LongRunning | TaskContinuationOptions.AttachedToParent | TaskContinuationOptions.ExecuteSynchronously); " is 178.
Long Statement,System.Threading.Tasks,TaskExtensionsImpl,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskExtensionsImpl.cs,Unwrap,The length of the statement  "	task.ContinueWith ((t' arg) => Cont (t' (TaskCompletionSource<TResult>)arg)' src' CancellationToken.None' options' TaskScheduler.Current); " is 138.
Long Statement,System.Threading.Tasks,TaskExtensionsImpl,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskExtensionsImpl.cs,Unwrap,The length of the statement  "	task.ContinueWith ((t' arg) => Cont (t' (TaskCompletionSource<object>)arg)' src' CancellationToken.None' options' TaskScheduler.Current); " is 137.
Long Statement,System.Threading.Tasks,TaskExtensionsImpl,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskExtensionsImpl.cs,Cont,The length of the statement  "		source.Result.ContinueWith ((t' arg) => SetResult (t' (TaskCompletionSource<object>)arg)' dest' CancellationToken.None' options' TaskScheduler.Current); " is 152.
Long Statement,System.Threading.Tasks,TaskExtensionsImpl,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskExtensionsImpl.cs,Cont,The length of the statement  "		source.Result.ContinueWith ((t' arg) => SetResult (t' (TaskCompletionSource<TResult>)arg)' dest' CancellationToken.None' options' TaskScheduler.Current); " is 153.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,CheckContinuationOptions,The length of the statement  "	if ((continuationOptions & (TaskContinuationOptions.OnlyOnRanToCompletion | TaskContinuationOptions.NotOnRanToCompletion)) != 0) " is 128.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,CheckContinuationOptions,The length of the statement  "	const TaskContinuationOptions long_running = TaskContinuationOptions.LongRunning | TaskContinuationOptions.ExecuteSynchronously; " is 128.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAny,The length of the statement  "	var cont = Task.WhenAnyCore (tasks).ContinueWith (TaskActionInvoker.CreateSelected (continuationAction)' cancellationToken' continuationOptions' scheduler); " is 156.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAny,The length of the statement  "	return ContinueWhenAny ((Task[])tasks' o => continuationAction ((Task<TAntecedentResult>)o)' cancellationToken' continuationOptions' scheduler); " is 144.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAny,The length of the statement  "	var cont = Task.WhenAnyCore (tasks).ContinueWith<TResult> (TaskActionInvoker.Create (continuationFunction' tasks)' cancellationToken' continuationOptions' scheduler); " is 166.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAny,The length of the statement  "	return ContinueWhenAny<TResult> ((Task[])tasks' t => continuationFunction ((Task<TAntecedentResult>)t)' cancellationToken' continuationOptions' scheduler); " is 155.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAll,The length of the statement  "	var cont = Task.WhenAllCore (tasks).ContinueWith (TaskActionInvoker.Create (continuationAction' tasks)' cancellationToken' continuationOptions' scheduler); " is 155.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAll,The length of the statement  "	return ContinueWhenAll ((Task[])tasks' o => continuationAction (tasks)' cancellationToken' continuationOptions' scheduler); " is 123.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAll,The length of the statement  "	var cont = Task.WhenAllCore (tasks).ContinueWith<TResult> (TaskActionInvoker.Create (continuationFunction' tasks)' cancellationToken' continuationOptions' scheduler); " is 166.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAll,The length of the statement  "	return ContinueWhenAll<TAntecedentResult' TResult> (tasks' continuationFunction' cancellationToken' continuationOptions' GetScheduler ()); " is 138.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAll,The length of the statement  "	return ContinueWhenAll<TAntecedentResult' TResult> (tasks' continuationFunction' cancellationToken' continuationOptions' GetScheduler ()); " is 138.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAll,The length of the statement  "	return ContinueWhenAll<TAntecedentResult' TResult> (tasks' continuationFunction' cancellationToken' continuationOptions' GetScheduler ()); " is 138.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,ContinueWhenAll,The length of the statement  "	return ContinueWhenAll<TResult> ((Task[])tasks' o => continuationFunction (tasks)' cancellationToken' continuationOptions' scheduler); " is 134.
Long Statement,System.Threading.Tasks,TaskFactory,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskFactory.cs,CheckContinueArguments,The length of the statement  "	const TaskContinuationOptions notAllowedOptions = TaskContinuationOptions.NotOnRanToCompletion | TaskContinuationOptions.NotOnFaulted | TaskContinuationOptions.NotOnCanceled | TaskContinuationOptions.OnlyOnRanToCompletion | TaskContinuationOptions.OnlyOnFaulted | TaskContinuationOptions.OnlyOnCanceled; " is 303.
Long Statement,System.Threading.Tasks,TaskScheduler,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskScheduler.cs,FromCurrentSynchronizationContext,The length of the statement  "		throw new InvalidOperationException ("The current SynchronizationContext is null and cannot be used as a TaskScheduler"); " is 121.
Long Statement,System.Threading.Tasks,TaskScheduler,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\TaskScheduler.cs,RunInline,The length of the statement  "		throw new InvalidOperationException ("The TryExecuteTaskInline call to the underlying scheduler succeeded' but the task body was not invoked"); " is 143.
Long Statement,System.Xml.Linq,XContainer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XContainer.cs,ReplaceNodes,The length of the statement  "	// First' it creates a snapshot copy' then removes the contents' and then adds the copy. http://msdn.microsoft.com/en-us/library/system.xml.linq.xcontainer.replacenodes.aspx " is 173.
Long Statement,System.Xml.Linq,XDeclaration,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XDeclaration.cs,ToString,The length of the statement  "	return String.Concat ("<?xml"' version != null ? " version=\"" : null' version != null ? version : null' version != null ? "\"" : null' encoding != null ? " encoding=\"" : null' encoding != null ? encoding : null' encoding != null ? "\"" : null' standalone != null ? " standalone=\"" : null' standalone != null ? standalone : null' standalone != null ? "\"" : null' "?>"); " is 372.
Long Statement,System.Xml.Linq,XDocument,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XDocument.cs,ReadContent,The length of the statement  "		Declaration = new XDeclaration (reader.GetAttribute ("version")' reader.GetAttribute ("encoding")' reader.GetAttribute ("standalone")); " is 135.
Long Statement,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,Equals,The length of the statement  "		return d1.Name == d2.Name && d1.PublicId == d2.PublicId && d1.SystemId == d2.SystemId && d1.InternalSubset == d2.InternalSubset; " is 128.
Long Statement,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The length of the statement  "		h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4); " is 156.
Long Statement,System.Xml.Linq,XNodeWriter,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeWriter.cs,FillXmlns,The length of the statement  "			el.SetAttributeValue (prefix == String.Empty ? XNamespace.None.GetName ("xmlns") : XNamespace.Xmlns.GetName (prefix)' xns.NamespaceName); " is 137.
Complex Conditional,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,ListSearch,The conditional expression  "tNext.Marked || t.Key < key || (tNext.Key == key && !comparer.Equals (subKey' t.SubKey))"  is complex.
Complex Conditional,System.Collections.Generic,HashSet,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Generic\HashSet.cs,SlotsContainsAt,The conditional expression  "link.HashCode == hash && ((hash == HASH_FLAG && (item == null || null == slots [current])) ? (item == null && null == slots [current]) : comparer.Equals (item' slots [current]))"  is complex.
Complex Conditional,System.Collections.Generic,HashSet,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Generic\HashSet.cs,Remove,The conditional expression  "link.HashCode == hashCode && ((hashCode == HASH_FLAG && (item == null || null == slots [current])) ? (item == null && null == slots [current]) : comparer.Equals (slots [current]' item))"  is complex.
Complex Conditional,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeSimpleBinary,The conditional expression  "left.Type.IsNullable () && right.Type.IsNullable () && left.Type.GetNotNullableType () == lp.ParameterType && right.Type.GetNotNullableType () == rp.ParameterType && !method.ReturnType.IsNullable ()"  is complex.
Complex Conditional,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeBoolBinary,The conditional expression  "left.Type.IsNullable () && right.Type.IsNullable () && left.Type.GetNotNullableType () == lp.ParameterType && right.Type.GetNotNullableType () == rp.ParameterType"  is complex.
Complex Conditional,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,Finish,The conditional expression  "parent != null && HasFlag (creationOptions' TaskCreationOptions.AttachedToParent) &&   #if NET_4_5  !HasFlag (parent.CreationOptions' TaskCreationOptions.DenyChildAttach) &&   #endif  status != TaskStatus.WaitingForChildrenToComplete"  is complex.
Complex Conditional,System.Threading.Tasks,Task,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Task.cs,Wait,The conditional expression  "Status == TaskStatus.WaitingToRun && millisecondsTimeout == Timeout.Infinite && scheduler != null && !cancellationToken.CanBeCanceled"  is complex.
Complex Conditional,System.Xml.Linq,XElement,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XElement.cs,GetNamespaceOfPrefix,The conditional expression  "a.IsNamespaceDeclaration && (prefix.Length == 0 && a.Name.LocalName == "xmlns" || a.Name.LocalName == prefix)"  is complex.
Complex Conditional,System.Xml.Linq,XElement,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XElement.cs,SetValue,The conditional expression  "value is XAttribute || value is XDocument || value is XDeclaration || value is XDocumentType"  is complex.
Complex Conditional,System.Xml.Linq,XElement,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XElement.cs,OnAddingObject,The conditional expression  "o is XDocument || o is XDocumentType || o is XDeclaration || (rejectAttribute && o is XAttribute)"  is complex.
Complex Conditional,System.Xml.Linq,XText,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XText.cs,WriteTo,The conditional expression  "Value.Length > 0 && Value.All (c => c == ' ' || c == '\t' || c == '\r' || c == '\n')"  is complex.
Empty Catch Block,System.Collections,Hashtable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\Hashtable.cs,OnDeserialization,The method has an empty catch block.
Empty Catch Block,System.Collections,Hashtable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\Hashtable.cs,OnDeserialization,The method has an empty catch block.
Empty Catch Block,System.Threading,CancellationTokenSource,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading\CancellationTokenSource.cs,SafeLinkedCancel,The method has an empty catch block.
Magic Number,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,InsertInternal,The following statement contains a magic number: if (Interlocked.Increment (ref count) / csize > MaxLoad && (csize & 0x40000000) == 0)  	Interlocked.CompareExchange (ref size' 2 * csize' csize);  
Magic Number,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,InsertInternal,The following statement contains a magic number: Interlocked.CompareExchange (ref size' 2 * csize' csize);  
Magic Number,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,CheckSegment,The following statement contains a magic number: try {  	slim.EnterWriteLock ();  	while (segment >= buckets.Length)  		Array.Resize (ref buckets' buckets.Length * 2);  }  finally {  	slim.ExitWriteLock ();  }  
Magic Number,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,CheckSegment,The following statement contains a magic number: while (segment >= buckets.Length)  	Array.Resize (ref buckets' buckets.Length * 2);  
Magic Number,System.Collections.Concurrent,SplitOrderedList,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections.Concurent\SplitOrderedList.cs,CheckSegment,The following statement contains a magic number: Array.Resize (ref buckets' buckets.Length * 2);  
Magic Number,System.Collections,HashPrimeNumbers,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\HashPrimeNumbers.cs,TestPrime,The following statement contains a magic number: if ((x & 1) != 0) {  	int top = (int)Math.Sqrt (x);  	for (int n = 3; n < top; n += 2) {  		if ((x % n) == 0)  			return false;  	}  	return true;  }  
Magic Number,System.Collections,HashPrimeNumbers,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\HashPrimeNumbers.cs,TestPrime,The following statement contains a magic number: if ((x & 1) != 0) {  	int top = (int)Math.Sqrt (x);  	for (int n = 3; n < top; n += 2) {  		if ((x % n) == 0)  			return false;  	}  	return true;  }  
Magic Number,System.Collections,HashPrimeNumbers,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\HashPrimeNumbers.cs,TestPrime,The following statement contains a magic number: for (int n = 3; n < top; n += 2) {  	if ((x % n) == 0)  		return false;  }  
Magic Number,System.Collections,HashPrimeNumbers,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\HashPrimeNumbers.cs,TestPrime,The following statement contains a magic number: for (int n = 3; n < top; n += 2) {  	if ((x % n) == 0)  		return false;  }  
Magic Number,System.Collections,HashPrimeNumbers,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\HashPrimeNumbers.cs,TestPrime,The following statement contains a magic number: n += 2
Magic Number,System.Collections,HashPrimeNumbers,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\HashPrimeNumbers.cs,TestPrime,The following statement contains a magic number: return (x == 2);  
Magic Number,System.Collections,HashPrimeNumbers,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\HashPrimeNumbers.cs,CalcPrime,The following statement contains a magic number: for (int i = (x & (~1)) - 1; i < Int32.MaxValue; i += 2) {  	if (TestPrime (i))  		return i;  }  
Magic Number,System.Collections,HashPrimeNumbers,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\HashPrimeNumbers.cs,CalcPrime,The following statement contains a magic number: i += 2
Magic Number,System.Collections,Hashtable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\Hashtable.cs,Rehash,The following statement contains a magic number: for (int i = 0; i < oldSize; i++) {  	Slot s = table [i];  	if (s.key != null) {  		int h = hashes [i] & Int32.MaxValue;  		uint spot = (uint)h;  		uint step = ((uint)(h >> 5) + 1) % (newSize - 1) + 1;  		for (uint j = spot % newSize; ; spot += step' j = spot % newSize) {  			// No check for KeyMarker.Removed here'  			// because the table is just allocated.  			if (newTable [j].key == null) {  				newTable [j].key = s.key;  				newTable [j].value = s.value;  				newHashes [j] |= h;  				break;  			}  			else {  				newHashes [j] |= CHAIN_MARKER;  			}  		}  	}  }  
Magic Number,System.Collections,Hashtable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Collections\Hashtable.cs,Rehash,The following statement contains a magic number: if (s.key != null) {  	int h = hashes [i] & Int32.MaxValue;  	uint spot = (uint)h;  	uint step = ((uint)(h >> 5) + 1) % (newSize - 1) + 1;  	for (uint j = spot % newSize; ; spot += step' j = spot % newSize) {  		// No check for KeyMarker.Removed here'  		// because the table is just allocated.  		if (newTable [j].key == null) {  			newTable [j].key = s.key;  			newTable [j].value = s.value;  			newHashes [j] |= h;  			break;  		}  		else {  			newHashes [j] |= CHAIN_MARKER;  		}  	}  }  
Magic Number,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  	ig.Emit (OpCodes.Ldc_I4' (int)((byte)value));  	return;  case TypeCode.SByte:  	ig.Emit (OpCodes.Ldc_I4' (int)((sbyte)value));  	return;  case TypeCode.Int16:  	ig.Emit (OpCodes.Ldc_I4' (int)((short)value));  	return;  case TypeCode.UInt16:  	ig.Emit (OpCodes.Ldc_I4' (int)((ushort)value));  	return;  case TypeCode.Int32:  	ig.Emit (OpCodes.Ldc_I4' (int)value);  	return;  case TypeCode.UInt32:  	ig.Emit (OpCodes.Ldc_I4' unchecked((int)((uint)Value)));  	return;  case TypeCode.Int64:  	ig.Emit (OpCodes.Ldc_I8' (long)value);  	return;  case TypeCode.UInt64:  	ig.Emit (OpCodes.Ldc_I8' unchecked((long)((ulong)value)));  	return;  case TypeCode.Boolean:  	if ((bool)Value)  		ig.Emit (OpCodes.Ldc_I4_1);  	else  		ec.ig.Emit (OpCodes.Ldc_I4_0);  	return;  case TypeCode.Char:  	ig.Emit (OpCodes.Ldc_I4' (int)((char)value));  	return;  case TypeCode.Single:  	ig.Emit (OpCodes.Ldc_R4' (float)value);  	return;  case TypeCode.Double:  	ig.Emit (OpCodes.Ldc_R8' (double)value);  	return;  case TypeCode.Decimal: {  	Decimal v = (decimal)value;  	int[] words = Decimal.GetBits (v);  	int power = (words [3] >> 16) & 0xff;  	Type ti = typeof(int);  	if (power == 0 && v <= int.MaxValue && v >= int.MinValue) {  		ig.Emit (OpCodes.Ldc_I4' (int)v);  		ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[1] {  			ti  		}));  		return;  	}  	ig.Emit (OpCodes.Ldc_I4' words [0]);  	ig.Emit (OpCodes.Ldc_I4' words [1]);  	ig.Emit (OpCodes.Ldc_I4' words [2]);  	// sign  	ig.Emit (OpCodes.Ldc_I4' words [3] >> 31);  	// power  	ig.Emit (OpCodes.Ldc_I4' power);  	ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[5] {  		ti'  		ti'  		ti'  		typeof(bool)'  		typeof(byte)  	}));  	return;  }  case TypeCode.DateTime: {  	var date = (DateTime)value;  	var local = ig.DeclareLocal (typeof(DateTime));  	ig.Emit (OpCodes.Ldloca' local);  	ig.Emit (OpCodes.Ldc_I8' date.Ticks);  	ig.Emit (OpCodes.Ldc_I4' (int)date.Kind);  	ig.Emit (OpCodes.Call' typeof(DateTime).GetConstructor (new[] {  		typeof(long)'  		typeof(DateTimeKind)  	}));  	ig.Emit (OpCodes.Ldloc' local);  	return;  }  case TypeCode.DBNull:  	ig.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"' BindingFlags.Public | BindingFlags.Static));  	return;  case TypeCode.String:  	EmitIfNotNull (ec' c => c.ig.Emit (OpCodes.Ldstr' (string)value));  	return;  case TypeCode.Object:  	EmitIfNotNull (ec' c => c.EmitReadGlobal (value));  	return;  }  
Magic Number,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  	ig.Emit (OpCodes.Ldc_I4' (int)((byte)value));  	return;  case TypeCode.SByte:  	ig.Emit (OpCodes.Ldc_I4' (int)((sbyte)value));  	return;  case TypeCode.Int16:  	ig.Emit (OpCodes.Ldc_I4' (int)((short)value));  	return;  case TypeCode.UInt16:  	ig.Emit (OpCodes.Ldc_I4' (int)((ushort)value));  	return;  case TypeCode.Int32:  	ig.Emit (OpCodes.Ldc_I4' (int)value);  	return;  case TypeCode.UInt32:  	ig.Emit (OpCodes.Ldc_I4' unchecked((int)((uint)Value)));  	return;  case TypeCode.Int64:  	ig.Emit (OpCodes.Ldc_I8' (long)value);  	return;  case TypeCode.UInt64:  	ig.Emit (OpCodes.Ldc_I8' unchecked((long)((ulong)value)));  	return;  case TypeCode.Boolean:  	if ((bool)Value)  		ig.Emit (OpCodes.Ldc_I4_1);  	else  		ec.ig.Emit (OpCodes.Ldc_I4_0);  	return;  case TypeCode.Char:  	ig.Emit (OpCodes.Ldc_I4' (int)((char)value));  	return;  case TypeCode.Single:  	ig.Emit (OpCodes.Ldc_R4' (float)value);  	return;  case TypeCode.Double:  	ig.Emit (OpCodes.Ldc_R8' (double)value);  	return;  case TypeCode.Decimal: {  	Decimal v = (decimal)value;  	int[] words = Decimal.GetBits (v);  	int power = (words [3] >> 16) & 0xff;  	Type ti = typeof(int);  	if (power == 0 && v <= int.MaxValue && v >= int.MinValue) {  		ig.Emit (OpCodes.Ldc_I4' (int)v);  		ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[1] {  			ti  		}));  		return;  	}  	ig.Emit (OpCodes.Ldc_I4' words [0]);  	ig.Emit (OpCodes.Ldc_I4' words [1]);  	ig.Emit (OpCodes.Ldc_I4' words [2]);  	// sign  	ig.Emit (OpCodes.Ldc_I4' words [3] >> 31);  	// power  	ig.Emit (OpCodes.Ldc_I4' power);  	ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[5] {  		ti'  		ti'  		ti'  		typeof(bool)'  		typeof(byte)  	}));  	return;  }  case TypeCode.DateTime: {  	var date = (DateTime)value;  	var local = ig.DeclareLocal (typeof(DateTime));  	ig.Emit (OpCodes.Ldloca' local);  	ig.Emit (OpCodes.Ldc_I8' date.Ticks);  	ig.Emit (OpCodes.Ldc_I4' (int)date.Kind);  	ig.Emit (OpCodes.Call' typeof(DateTime).GetConstructor (new[] {  		typeof(long)'  		typeof(DateTimeKind)  	}));  	ig.Emit (OpCodes.Ldloc' local);  	return;  }  case TypeCode.DBNull:  	ig.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"' BindingFlags.Public | BindingFlags.Static));  	return;  case TypeCode.String:  	EmitIfNotNull (ec' c => c.ig.Emit (OpCodes.Ldstr' (string)value));  	return;  case TypeCode.Object:  	EmitIfNotNull (ec' c => c.EmitReadGlobal (value));  	return;  }  
Magic Number,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  	ig.Emit (OpCodes.Ldc_I4' (int)((byte)value));  	return;  case TypeCode.SByte:  	ig.Emit (OpCodes.Ldc_I4' (int)((sbyte)value));  	return;  case TypeCode.Int16:  	ig.Emit (OpCodes.Ldc_I4' (int)((short)value));  	return;  case TypeCode.UInt16:  	ig.Emit (OpCodes.Ldc_I4' (int)((ushort)value));  	return;  case TypeCode.Int32:  	ig.Emit (OpCodes.Ldc_I4' (int)value);  	return;  case TypeCode.UInt32:  	ig.Emit (OpCodes.Ldc_I4' unchecked((int)((uint)Value)));  	return;  case TypeCode.Int64:  	ig.Emit (OpCodes.Ldc_I8' (long)value);  	return;  case TypeCode.UInt64:  	ig.Emit (OpCodes.Ldc_I8' unchecked((long)((ulong)value)));  	return;  case TypeCode.Boolean:  	if ((bool)Value)  		ig.Emit (OpCodes.Ldc_I4_1);  	else  		ec.ig.Emit (OpCodes.Ldc_I4_0);  	return;  case TypeCode.Char:  	ig.Emit (OpCodes.Ldc_I4' (int)((char)value));  	return;  case TypeCode.Single:  	ig.Emit (OpCodes.Ldc_R4' (float)value);  	return;  case TypeCode.Double:  	ig.Emit (OpCodes.Ldc_R8' (double)value);  	return;  case TypeCode.Decimal: {  	Decimal v = (decimal)value;  	int[] words = Decimal.GetBits (v);  	int power = (words [3] >> 16) & 0xff;  	Type ti = typeof(int);  	if (power == 0 && v <= int.MaxValue && v >= int.MinValue) {  		ig.Emit (OpCodes.Ldc_I4' (int)v);  		ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[1] {  			ti  		}));  		return;  	}  	ig.Emit (OpCodes.Ldc_I4' words [0]);  	ig.Emit (OpCodes.Ldc_I4' words [1]);  	ig.Emit (OpCodes.Ldc_I4' words [2]);  	// sign  	ig.Emit (OpCodes.Ldc_I4' words [3] >> 31);  	// power  	ig.Emit (OpCodes.Ldc_I4' power);  	ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[5] {  		ti'  		ti'  		ti'  		typeof(bool)'  		typeof(byte)  	}));  	return;  }  case TypeCode.DateTime: {  	var date = (DateTime)value;  	var local = ig.DeclareLocal (typeof(DateTime));  	ig.Emit (OpCodes.Ldloca' local);  	ig.Emit (OpCodes.Ldc_I8' date.Ticks);  	ig.Emit (OpCodes.Ldc_I4' (int)date.Kind);  	ig.Emit (OpCodes.Call' typeof(DateTime).GetConstructor (new[] {  		typeof(long)'  		typeof(DateTimeKind)  	}));  	ig.Emit (OpCodes.Ldloc' local);  	return;  }  case TypeCode.DBNull:  	ig.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"' BindingFlags.Public | BindingFlags.Static));  	return;  case TypeCode.String:  	EmitIfNotNull (ec' c => c.ig.Emit (OpCodes.Ldstr' (string)value));  	return;  case TypeCode.Object:  	EmitIfNotNull (ec' c => c.EmitReadGlobal (value));  	return;  }  
Magic Number,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  	ig.Emit (OpCodes.Ldc_I4' (int)((byte)value));  	return;  case TypeCode.SByte:  	ig.Emit (OpCodes.Ldc_I4' (int)((sbyte)value));  	return;  case TypeCode.Int16:  	ig.Emit (OpCodes.Ldc_I4' (int)((short)value));  	return;  case TypeCode.UInt16:  	ig.Emit (OpCodes.Ldc_I4' (int)((ushort)value));  	return;  case TypeCode.Int32:  	ig.Emit (OpCodes.Ldc_I4' (int)value);  	return;  case TypeCode.UInt32:  	ig.Emit (OpCodes.Ldc_I4' unchecked((int)((uint)Value)));  	return;  case TypeCode.Int64:  	ig.Emit (OpCodes.Ldc_I8' (long)value);  	return;  case TypeCode.UInt64:  	ig.Emit (OpCodes.Ldc_I8' unchecked((long)((ulong)value)));  	return;  case TypeCode.Boolean:  	if ((bool)Value)  		ig.Emit (OpCodes.Ldc_I4_1);  	else  		ec.ig.Emit (OpCodes.Ldc_I4_0);  	return;  case TypeCode.Char:  	ig.Emit (OpCodes.Ldc_I4' (int)((char)value));  	return;  case TypeCode.Single:  	ig.Emit (OpCodes.Ldc_R4' (float)value);  	return;  case TypeCode.Double:  	ig.Emit (OpCodes.Ldc_R8' (double)value);  	return;  case TypeCode.Decimal: {  	Decimal v = (decimal)value;  	int[] words = Decimal.GetBits (v);  	int power = (words [3] >> 16) & 0xff;  	Type ti = typeof(int);  	if (power == 0 && v <= int.MaxValue && v >= int.MinValue) {  		ig.Emit (OpCodes.Ldc_I4' (int)v);  		ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[1] {  			ti  		}));  		return;  	}  	ig.Emit (OpCodes.Ldc_I4' words [0]);  	ig.Emit (OpCodes.Ldc_I4' words [1]);  	ig.Emit (OpCodes.Ldc_I4' words [2]);  	// sign  	ig.Emit (OpCodes.Ldc_I4' words [3] >> 31);  	// power  	ig.Emit (OpCodes.Ldc_I4' power);  	ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[5] {  		ti'  		ti'  		ti'  		typeof(bool)'  		typeof(byte)  	}));  	return;  }  case TypeCode.DateTime: {  	var date = (DateTime)value;  	var local = ig.DeclareLocal (typeof(DateTime));  	ig.Emit (OpCodes.Ldloca' local);  	ig.Emit (OpCodes.Ldc_I8' date.Ticks);  	ig.Emit (OpCodes.Ldc_I4' (int)date.Kind);  	ig.Emit (OpCodes.Call' typeof(DateTime).GetConstructor (new[] {  		typeof(long)'  		typeof(DateTimeKind)  	}));  	ig.Emit (OpCodes.Ldloc' local);  	return;  }  case TypeCode.DBNull:  	ig.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"' BindingFlags.Public | BindingFlags.Static));  	return;  case TypeCode.String:  	EmitIfNotNull (ec' c => c.ig.Emit (OpCodes.Ldstr' (string)value));  	return;  case TypeCode.Object:  	EmitIfNotNull (ec' c => c.EmitReadGlobal (value));  	return;  }  
Magic Number,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  	ig.Emit (OpCodes.Ldc_I4' (int)((byte)value));  	return;  case TypeCode.SByte:  	ig.Emit (OpCodes.Ldc_I4' (int)((sbyte)value));  	return;  case TypeCode.Int16:  	ig.Emit (OpCodes.Ldc_I4' (int)((short)value));  	return;  case TypeCode.UInt16:  	ig.Emit (OpCodes.Ldc_I4' (int)((ushort)value));  	return;  case TypeCode.Int32:  	ig.Emit (OpCodes.Ldc_I4' (int)value);  	return;  case TypeCode.UInt32:  	ig.Emit (OpCodes.Ldc_I4' unchecked((int)((uint)Value)));  	return;  case TypeCode.Int64:  	ig.Emit (OpCodes.Ldc_I8' (long)value);  	return;  case TypeCode.UInt64:  	ig.Emit (OpCodes.Ldc_I8' unchecked((long)((ulong)value)));  	return;  case TypeCode.Boolean:  	if ((bool)Value)  		ig.Emit (OpCodes.Ldc_I4_1);  	else  		ec.ig.Emit (OpCodes.Ldc_I4_0);  	return;  case TypeCode.Char:  	ig.Emit (OpCodes.Ldc_I4' (int)((char)value));  	return;  case TypeCode.Single:  	ig.Emit (OpCodes.Ldc_R4' (float)value);  	return;  case TypeCode.Double:  	ig.Emit (OpCodes.Ldc_R8' (double)value);  	return;  case TypeCode.Decimal: {  	Decimal v = (decimal)value;  	int[] words = Decimal.GetBits (v);  	int power = (words [3] >> 16) & 0xff;  	Type ti = typeof(int);  	if (power == 0 && v <= int.MaxValue && v >= int.MinValue) {  		ig.Emit (OpCodes.Ldc_I4' (int)v);  		ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[1] {  			ti  		}));  		return;  	}  	ig.Emit (OpCodes.Ldc_I4' words [0]);  	ig.Emit (OpCodes.Ldc_I4' words [1]);  	ig.Emit (OpCodes.Ldc_I4' words [2]);  	// sign  	ig.Emit (OpCodes.Ldc_I4' words [3] >> 31);  	// power  	ig.Emit (OpCodes.Ldc_I4' power);  	ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[5] {  		ti'  		ti'  		ti'  		typeof(bool)'  		typeof(byte)  	}));  	return;  }  case TypeCode.DateTime: {  	var date = (DateTime)value;  	var local = ig.DeclareLocal (typeof(DateTime));  	ig.Emit (OpCodes.Ldloca' local);  	ig.Emit (OpCodes.Ldc_I8' date.Ticks);  	ig.Emit (OpCodes.Ldc_I4' (int)date.Kind);  	ig.Emit (OpCodes.Call' typeof(DateTime).GetConstructor (new[] {  		typeof(long)'  		typeof(DateTimeKind)  	}));  	ig.Emit (OpCodes.Ldloc' local);  	return;  }  case TypeCode.DBNull:  	ig.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"' BindingFlags.Public | BindingFlags.Static));  	return;  case TypeCode.String:  	EmitIfNotNull (ec' c => c.ig.Emit (OpCodes.Ldstr' (string)value));  	return;  case TypeCode.Object:  	EmitIfNotNull (ec' c => c.EmitReadGlobal (value));  	return;  }  
Magic Number,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  	ig.Emit (OpCodes.Ldc_I4' (int)((byte)value));  	return;  case TypeCode.SByte:  	ig.Emit (OpCodes.Ldc_I4' (int)((sbyte)value));  	return;  case TypeCode.Int16:  	ig.Emit (OpCodes.Ldc_I4' (int)((short)value));  	return;  case TypeCode.UInt16:  	ig.Emit (OpCodes.Ldc_I4' (int)((ushort)value));  	return;  case TypeCode.Int32:  	ig.Emit (OpCodes.Ldc_I4' (int)value);  	return;  case TypeCode.UInt32:  	ig.Emit (OpCodes.Ldc_I4' unchecked((int)((uint)Value)));  	return;  case TypeCode.Int64:  	ig.Emit (OpCodes.Ldc_I8' (long)value);  	return;  case TypeCode.UInt64:  	ig.Emit (OpCodes.Ldc_I8' unchecked((long)((ulong)value)));  	return;  case TypeCode.Boolean:  	if ((bool)Value)  		ig.Emit (OpCodes.Ldc_I4_1);  	else  		ec.ig.Emit (OpCodes.Ldc_I4_0);  	return;  case TypeCode.Char:  	ig.Emit (OpCodes.Ldc_I4' (int)((char)value));  	return;  case TypeCode.Single:  	ig.Emit (OpCodes.Ldc_R4' (float)value);  	return;  case TypeCode.Double:  	ig.Emit (OpCodes.Ldc_R8' (double)value);  	return;  case TypeCode.Decimal: {  	Decimal v = (decimal)value;  	int[] words = Decimal.GetBits (v);  	int power = (words [3] >> 16) & 0xff;  	Type ti = typeof(int);  	if (power == 0 && v <= int.MaxValue && v >= int.MinValue) {  		ig.Emit (OpCodes.Ldc_I4' (int)v);  		ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[1] {  			ti  		}));  		return;  	}  	ig.Emit (OpCodes.Ldc_I4' words [0]);  	ig.Emit (OpCodes.Ldc_I4' words [1]);  	ig.Emit (OpCodes.Ldc_I4' words [2]);  	// sign  	ig.Emit (OpCodes.Ldc_I4' words [3] >> 31);  	// power  	ig.Emit (OpCodes.Ldc_I4' power);  	ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[5] {  		ti'  		ti'  		ti'  		typeof(bool)'  		typeof(byte)  	}));  	return;  }  case TypeCode.DateTime: {  	var date = (DateTime)value;  	var local = ig.DeclareLocal (typeof(DateTime));  	ig.Emit (OpCodes.Ldloca' local);  	ig.Emit (OpCodes.Ldc_I8' date.Ticks);  	ig.Emit (OpCodes.Ldc_I4' (int)date.Kind);  	ig.Emit (OpCodes.Call' typeof(DateTime).GetConstructor (new[] {  		typeof(long)'  		typeof(DateTimeKind)  	}));  	ig.Emit (OpCodes.Ldloc' local);  	return;  }  case TypeCode.DBNull:  	ig.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"' BindingFlags.Public | BindingFlags.Static));  	return;  case TypeCode.String:  	EmitIfNotNull (ec' c => c.ig.Emit (OpCodes.Ldstr' (string)value));  	return;  case TypeCode.Object:  	EmitIfNotNull (ec' c => c.EmitReadGlobal (value));  	return;  }  
Magic Number,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The following statement contains a magic number: ig.Emit (OpCodes.Ldc_I4' words [2]);  
Magic Number,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The following statement contains a magic number: ig.Emit (OpCodes.Ldc_I4' words [3] >> 31);  
Magic Number,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The following statement contains a magic number: ig.Emit (OpCodes.Ldc_I4' words [3] >> 31);  
Magic Number,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The following statement contains a magic number: ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[5] {  	ti'  	ti'  	ti'  	typeof(bool)'  	typeof(byte)  }));  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,UnaryCoreCheck,The following statement contains a magic number: throw new InvalidOperationException (string.Format ("Operation {0} not defined for {1}"' oper_name != null ? oper_name.Substring (3) : "is"' expression.Type));  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetBinaryOperator,The following statement contains a magic number: foreach (var method in methods) {  	if (method.Name != oper_name)  		continue;  	var parameters = method.GetParameters ();  	if (parameters.Length != 2)  		continue;  	if (method.IsGenericMethod)  		continue;  	if (!IsAssignableToParameterType (left.Type' parameters [0]))  		continue;  	if (!IsAssignableToParameterType (right.Type' parameters [1]))  		continue;  	// Method has papers in order.  	return method;  }  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetBinaryOperator,The following statement contains a magic number: if (parameters.Length != 2)  	continue;  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,BinaryCoreCheck,The following statement contains a magic number: if (method != null) {  	if (method.ReturnType == typeof(void))  		throw new ArgumentException ("Specified method must return a value"' "method");  	if (!method.IsStatic)  		throw new ArgumentException ("Method must be static"' "method");  	var parameters = method.GetParameters ();  	if (parameters.Length != 2)  		throw new ArgumentException ("Must have only two parameters"' "method");  	if (!IsAssignableToParameterType (left.Type' parameters [0]))  		throw new InvalidOperationException ("left-side argument type does not match left expression type");  	if (!IsAssignableToParameterType (right.Type' parameters [1]))  		throw new InvalidOperationException ("right-side argument type does not match right expression type");  	return method;  }  else {  	Type ltype = left.Type;  	Type rtype = right.Type;  	Type ultype = ltype.GetNotNullableType ();  	Type urtype = rtype.GetNotNullableType ();  	if (oper_name == "op_BitwiseOr" || oper_name == "op_BitwiseAnd") {  		if (ultype == typeof(bool)) {  			if (ultype == urtype && ltype == rtype)  				return null;  		}  	}  	// Use IsNumber to avoid expensive reflection.  	if (IsNumber (ultype)) {  		if (ultype == urtype && ltype == rtype)  			return null;  		if (oper_name != null) {  			method = GetBinaryOperator (oper_name' urtype' left' right);  			if (method != null)  				return method;  		}  	}  	if (oper_name != null) {  		method = GetBinaryOperator (oper_name' ultype' left' right);  		if (method != null)  			return method;  	}  	if (oper_name == "op_Equality" || oper_name == "op_Inequality") {  		//  		// == and != allow reference types without operators defined.  		//  		if (!ltype.IsValueType && !rtype.IsValueType)  			return null;  		if (ltype == rtype && ultype.IsEnum)  			return null;  		if (ltype == rtype && ultype == typeof(bool))  			return null;  	}  	if (oper_name == "op_LeftShift" || oper_name == "op_RightShift") {  		if (IsInt (ultype) && urtype == typeof(int))  			return null;  	}  	throw new InvalidOperationException (String.Format ("Operation {0} not defined for {1} and {2}"' oper_name != null ? oper_name.Substring (3) : "is"' ltype' rtype));  }  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,BinaryCoreCheck,The following statement contains a magic number: if (method != null) {  	if (method.ReturnType == typeof(void))  		throw new ArgumentException ("Specified method must return a value"' "method");  	if (!method.IsStatic)  		throw new ArgumentException ("Method must be static"' "method");  	var parameters = method.GetParameters ();  	if (parameters.Length != 2)  		throw new ArgumentException ("Must have only two parameters"' "method");  	if (!IsAssignableToParameterType (left.Type' parameters [0]))  		throw new InvalidOperationException ("left-side argument type does not match left expression type");  	if (!IsAssignableToParameterType (right.Type' parameters [1]))  		throw new InvalidOperationException ("right-side argument type does not match right expression type");  	return method;  }  else {  	Type ltype = left.Type;  	Type rtype = right.Type;  	Type ultype = ltype.GetNotNullableType ();  	Type urtype = rtype.GetNotNullableType ();  	if (oper_name == "op_BitwiseOr" || oper_name == "op_BitwiseAnd") {  		if (ultype == typeof(bool)) {  			if (ultype == urtype && ltype == rtype)  				return null;  		}  	}  	// Use IsNumber to avoid expensive reflection.  	if (IsNumber (ultype)) {  		if (ultype == urtype && ltype == rtype)  			return null;  		if (oper_name != null) {  			method = GetBinaryOperator (oper_name' urtype' left' right);  			if (method != null)  				return method;  		}  	}  	if (oper_name != null) {  		method = GetBinaryOperator (oper_name' ultype' left' right);  		if (method != null)  			return method;  	}  	if (oper_name == "op_Equality" || oper_name == "op_Inequality") {  		//  		// == and != allow reference types without operators defined.  		//  		if (!ltype.IsValueType && !rtype.IsValueType)  			return null;  		if (ltype == rtype && ultype.IsEnum)  			return null;  		if (ltype == rtype && ultype == typeof(bool))  			return null;  	}  	if (oper_name == "op_LeftShift" || oper_name == "op_RightShift") {  		if (IsInt (ultype) && urtype == typeof(int))  			return null;  	}  	throw new InvalidOperationException (String.Format ("Operation {0} not defined for {1} and {2}"' oper_name != null ? oper_name.Substring (3) : "is"' ltype' rtype));  }  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,BinaryCoreCheck,The following statement contains a magic number: if (parameters.Length != 2)  	throw new ArgumentException ("Must have only two parameters"' "method");  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,BinaryCoreCheck,The following statement contains a magic number: throw new InvalidOperationException (String.Format ("Operation {0} not defined for {1} and {2}"' oper_name != null ? oper_name.Substring (3) : "is"' ltype' rtype));  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetActionType,The following statement contains a magic number: if (typeArgs.Length > 4)  	throw new ArgumentException ("No Action type of this arity");  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetActionType,The following statement contains a magic number: switch (typeArgs.Length) {  case 1:  	action = typeof(Action<>);  	break;  case 2:  	action = typeof(Action<' >);  	break;  case 3:  	action = typeof(Action<' ' >);  	break;  case 4:  	action = typeof(Action<' ' ' >);  	break;  }  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetActionType,The following statement contains a magic number: switch (typeArgs.Length) {  case 1:  	action = typeof(Action<>);  	break;  case 2:  	action = typeof(Action<' >);  	break;  case 3:  	action = typeof(Action<' ' >);  	break;  case 4:  	action = typeof(Action<' ' ' >);  	break;  }  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetActionType,The following statement contains a magic number: switch (typeArgs.Length) {  case 1:  	action = typeof(Action<>);  	break;  case 2:  	action = typeof(Action<' >);  	break;  case 3:  	action = typeof(Action<' ' >);  	break;  case 4:  	action = typeof(Action<' ' ' >);  	break;  }  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetFuncType,The following statement contains a magic number: if (typeArgs.Length < 1 || typeArgs.Length > 5)  	throw new ArgumentException ("No Func type of this arity");  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetFuncType,The following statement contains a magic number: switch (typeArgs.Length) {  case 1:  	func = typeof(Func<>);  	break;  case 2:  	func = typeof(Func<' >);  	break;  case 3:  	func = typeof(Func<' ' >);  	break;  case 4:  	func = typeof(Func<' ' ' >);  	break;  case 5:  	func = typeof(Func<' ' ' ' >);  	break;  }  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetFuncType,The following statement contains a magic number: switch (typeArgs.Length) {  case 1:  	func = typeof(Func<>);  	break;  case 2:  	func = typeof(Func<' >);  	break;  case 3:  	func = typeof(Func<' ' >);  	break;  case 4:  	func = typeof(Func<' ' ' >);  	break;  case 5:  	func = typeof(Func<' ' ' ' >);  	break;  }  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetFuncType,The following statement contains a magic number: switch (typeArgs.Length) {  case 1:  	func = typeof(Func<>);  	break;  case 2:  	func = typeof(Func<' >);  	break;  case 3:  	func = typeof(Func<' ' >);  	break;  case 4:  	func = typeof(Func<' ' ' >);  	break;  case 5:  	func = typeof(Func<' ' ' ' >);  	break;  }  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetFuncType,The following statement contains a magic number: switch (typeArgs.Length) {  case 1:  	func = typeof(Func<>);  	break;  case 2:  	func = typeof(Func<' >);  	break;  case 3:  	func = typeof(Func<' ' >);  	break;  case 4:  	func = typeof(Func<' ' ' >);  	break;  case 5:  	func = typeof(Func<' ' ' ' >);  	break;  }  
Magic Number,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,Lambda,The following statement contains a magic number: if (parameters.Length > 4)  	throw new ArgumentException ("Too many parameters");  
Magic Number,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,ToArray,The following statement contains a magic number: foreach (var element in source) {  	if (pos == array.Length) {  		if (pos == 0)  			array = new TSource[4];  		else  			Array.Resize (ref array' pos * 2);  	}  	array [pos++] = element;  }  
Magic Number,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,ToArray,The following statement contains a magic number: foreach (var element in source) {  	if (pos == array.Length) {  		if (pos == 0)  			array = new TSource[4];  		else  			Array.Resize (ref array' pos * 2);  	}  	array [pos++] = element;  }  
Magic Number,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,ToArray,The following statement contains a magic number: if (pos == array.Length) {  	if (pos == 0)  		array = new TSource[4];  	else  		Array.Resize (ref array' pos * 2);  }  
Magic Number,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,ToArray,The following statement contains a magic number: if (pos == array.Length) {  	if (pos == 0)  		array = new TSource[4];  	else  		Array.Resize (ref array' pos * 2);  }  
Magic Number,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,ToArray,The following statement contains a magic number: if (pos == 0)  	array = new TSource[4];  else  	Array.Resize (ref array' pos * 2);  
Magic Number,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,ToArray,The following statement contains a magic number: if (pos == 0)  	array = new TSource[4];  else  	Array.Resize (ref array' pos * 2);  
Magic Number,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,ToArray,The following statement contains a magic number: array = new TSource[4];  
Magic Number,System.Linq,Enumerable,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq\Enumerable.cs,ToArray,The following statement contains a magic number: Array.Resize (ref array' pos * 2);  
Magic Number,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,GetBestWorkerNumber,The following statement contains a magic number: if ((step = (to - from) / num) < 5) {  	step = 5;  	num = (to - from) / 5;  	if (num < 1)  		num = 1;  }  
Magic Number,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,GetBestWorkerNumber,The following statement contains a magic number: if ((step = (to - from) / num) < 5) {  	step = 5;  	num = (to - from) / 5;  	if (num < 1)  		num = 1;  }  
Magic Number,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,GetBestWorkerNumber,The following statement contains a magic number: if ((step = (to - from) / num) < 5) {  	step = 5;  	num = (to - from) / 5;  	if (num < 1)  		num = 1;  }  
Magic Number,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,GetBestWorkerNumber,The following statement contains a magic number: step = 5;  
Magic Number,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,GetBestWorkerNumber,The following statement contains a magic number: num = (to - from) / 5;  
Magic Number,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The following statement contains a magic number: try {  	for (int i = index; i < stopIndex;) {  		if (infos.IsStopped)  			return;  		token.ThrowIfCancellationRequested ();  		if (i >= stopIndex - range.V64.Stolen)  			break;  		if (infos.LowestBreakIteration != null && infos.LowestBreakIteration > i)  			return;  		state.CurrentIteration = i;  		local = body (i' state' local);  		if (i + 1 >= stopIndex - range.V64.Stolen)  			break;  		range.V64.Actual = ++i;  	}  	bool sixtyfour = false;  	//Environment.Is64BitProcess;  	// Try toExclusive steal fromInclusive our right neighbor (cyclic)  	int len = num + localWorker;  	for (int sIndex = localWorker + 1; sIndex < len; ++sIndex) {  		int extWorker = sIndex % num;  		range = ranges [extWorker];  		stopIndex = extWorker + 1 == num ? toExclusive : Math.Min (toExclusive' fromInclusive + (extWorker + 1) * step);  		int stolen = -1;  		do {  			do {  				long old;  				StealValue64 val = new StealValue64 ();  				old = sixtyfour ? range.V64.Value : Interlocked.CompareExchange (ref range.V64.Value' 0' 0);  				val.Value = old;  				if (val.Actual >= stopIndex - val.Stolen - 2)  					goto next;  				stolen = (val.Stolen += 1);  				if (Interlocked.CompareExchange (ref range.V64.Value' val.Value' old) == old)  					break;  			}  			while (true);  			stolen = stopIndex - stolen;  			if (stolen > range.V64.Actual)  				local = body (stolen' state' local);  			else  				break;  		}  		while (true);  		next:  		continue;  	}  }  finally {  	localFinally (local);  }  
Magic Number,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The following statement contains a magic number: for (int sIndex = localWorker + 1; sIndex < len; ++sIndex) {  	int extWorker = sIndex % num;  	range = ranges [extWorker];  	stopIndex = extWorker + 1 == num ? toExclusive : Math.Min (toExclusive' fromInclusive + (extWorker + 1) * step);  	int stolen = -1;  	do {  		do {  			long old;  			StealValue64 val = new StealValue64 ();  			old = sixtyfour ? range.V64.Value : Interlocked.CompareExchange (ref range.V64.Value' 0' 0);  			val.Value = old;  			if (val.Actual >= stopIndex - val.Stolen - 2)  				goto next;  			stolen = (val.Stolen += 1);  			if (Interlocked.CompareExchange (ref range.V64.Value' val.Value' old) == old)  				break;  		}  		while (true);  		stolen = stopIndex - stolen;  		if (stolen > range.V64.Actual)  			local = body (stolen' state' local);  		else  			break;  	}  	while (true);  	next:  	continue;  }  
Magic Number,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The following statement contains a magic number: do {  	do {  		long old;  		StealValue64 val = new StealValue64 ();  		old = sixtyfour ? range.V64.Value : Interlocked.CompareExchange (ref range.V64.Value' 0' 0);  		val.Value = old;  		if (val.Actual >= stopIndex - val.Stolen - 2)  			goto next;  		stolen = (val.Stolen += 1);  		if (Interlocked.CompareExchange (ref range.V64.Value' val.Value' old) == old)  			break;  	}  	while (true);  	stolen = stopIndex - stolen;  	if (stolen > range.V64.Actual)  		local = body (stolen' state' local);  	else  		break;  }  while (true);  
Magic Number,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The following statement contains a magic number: do {  	long old;  	StealValue64 val = new StealValue64 ();  	old = sixtyfour ? range.V64.Value : Interlocked.CompareExchange (ref range.V64.Value' 0' 0);  	val.Value = old;  	if (val.Actual >= stopIndex - val.Stolen - 2)  		goto next;  	stolen = (val.Stolen += 1);  	if (Interlocked.CompareExchange (ref range.V64.Value' val.Value' old) == old)  		break;  }  while (true);  
Magic Number,System.Threading.Tasks,Parallel,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading.Tasks\Parallel.cs,For,The following statement contains a magic number: if (val.Actual >= stopIndex - val.Stolen - 2)  	goto next;  
Magic Number,System.Threading,ManualResetEventSlim,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Threading\ManualResetEventSlim.cs,ManualResetEventSlim,The following statement contains a magic number: if (spinCount < 0 || spinCount > 2047)  	throw new ArgumentOutOfRangeException ("spinCount");  
Magic Number,System.Xml.Linq,XCData,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XCData.cs,WriteTo,The following statement contains a magic number: for (int i = 0; i < Value.Length - 2; i++) {  	if (Value [i] == ']' && Value [i + 1] == ']' && Value [i + 2] == '>') {  		if (sb == null)  			sb = new StringBuilder ();  		sb.Append (Value' start' i - start);  		sb.Append ("]]&gt;");  		start = i + 3;  	}  }  
Magic Number,System.Xml.Linq,XCData,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XCData.cs,WriteTo,The following statement contains a magic number: for (int i = 0; i < Value.Length - 2; i++) {  	if (Value [i] == ']' && Value [i + 1] == ']' && Value [i + 2] == '>') {  		if (sb == null)  			sb = new StringBuilder ();  		sb.Append (Value' start' i - start);  		sb.Append ("]]&gt;");  		start = i + 3;  	}  }  
Magic Number,System.Xml.Linq,XCData,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XCData.cs,WriteTo,The following statement contains a magic number: for (int i = 0; i < Value.Length - 2; i++) {  	if (Value [i] == ']' && Value [i + 1] == ']' && Value [i + 2] == '>') {  		if (sb == null)  			sb = new StringBuilder ();  		sb.Append (Value' start' i - start);  		sb.Append ("]]&gt;");  		start = i + 3;  	}  }  
Magic Number,System.Xml.Linq,XCData,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XCData.cs,WriteTo,The following statement contains a magic number: if (Value [i] == ']' && Value [i + 1] == ']' && Value [i + 2] == '>') {  	if (sb == null)  		sb = new StringBuilder ();  	sb.Append (Value' start' i - start);  	sb.Append ("]]&gt;");  	start = i + 3;  }  
Magic Number,System.Xml.Linq,XCData,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XCData.cs,WriteTo,The following statement contains a magic number: if (Value [i] == ']' && Value [i + 1] == ']' && Value [i + 2] == '>') {  	if (sb == null)  		sb = new StringBuilder ();  	sb.Append (Value' start' i - start);  	sb.Append ("]]&gt;");  	start = i + 3;  }  
Magic Number,System.Xml.Linq,XCData,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XCData.cs,WriteTo,The following statement contains a magic number: start = i + 3;  
Magic Number,System.Xml.Linq,XName,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XName.cs,ExpandName,The following statement contains a magic number: if (expandedName [0] == '{') {  	for (int i = 1; i < expandedName.Length; i++) {  		if (expandedName [i] == '}')  			ns = expandedName.Substring (1' i - 1);  	}  	if (String.IsNullOrEmpty (ns))  		// {}foo is invalid  		throw ErrorInvalidExpandedName ();  	if (expandedName.Length == ns.Length + 2)  		// {foo} is invalid  		throw ErrorInvalidExpandedName ();  	local = expandedName.Substring (ns.Length + 2);  }  else {  	local = expandedName;  	ns = String.Empty;  }  
Magic Number,System.Xml.Linq,XName,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XName.cs,ExpandName,The following statement contains a magic number: if (expandedName [0] == '{') {  	for (int i = 1; i < expandedName.Length; i++) {  		if (expandedName [i] == '}')  			ns = expandedName.Substring (1' i - 1);  	}  	if (String.IsNullOrEmpty (ns))  		// {}foo is invalid  		throw ErrorInvalidExpandedName ();  	if (expandedName.Length == ns.Length + 2)  		// {foo} is invalid  		throw ErrorInvalidExpandedName ();  	local = expandedName.Substring (ns.Length + 2);  }  else {  	local = expandedName;  	ns = String.Empty;  }  
Magic Number,System.Xml.Linq,XName,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XName.cs,ExpandName,The following statement contains a magic number: if (expandedName.Length == ns.Length + 2)  	// {foo} is invalid  	throw ErrorInvalidExpandedName ();  
Magic Number,System.Xml.Linq,XName,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XName.cs,ExpandName,The following statement contains a magic number: local = expandedName.Substring (ns.Length + 2);  
Magic Number,System.Xml.Linq,XNodeDocumentOrderComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeDocumentOrderComparer.cs,Compare,The following statement contains a magic number: switch (CompareCore (x' y)) {  case CompareResult.Same:  	return 0;  case CompareResult.Random:  	return DateTime.Now.Ticks % 2 == 1 ? 1 : -1;  case CompareResult.Parent:  case CompareResult.Ancestor:  case CompareResult.Preceding:  	return 1;  default:  	return -1;  }  
Magic Number,System.Xml.Linq,XNodeDocumentOrderComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeDocumentOrderComparer.cs,Compare,The following statement contains a magic number: return DateTime.Now.Ticks % 2 == 1 ? 1 : -1;  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (d.Version.GetHashCode () << 7) ^ (d.Encoding.GetHashCode () << 6) ^ d.Standalone.GetHashCode ();  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (d.Version.GetHashCode () << 7) ^ (d.Encoding.GetHashCode () << 6) ^ d.Standalone.GetHashCode ();  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: switch (obj.NodeType) {  case XmlNodeType.Document:  	XDocument doc = (XDocument)obj;  	h = h ^ GetHashCode (doc.Declaration);  	foreach (XNode n in doc.Nodes ())  		h = h ^ (n.GetHashCode () << 5);  	break;  case XmlNodeType.Element:  	XElement el = (XElement)obj;  	h = h ^ (el.Name.GetHashCode () << 3);  	foreach (XAttribute a in el.Attributes ())  		h = h ^ (a.GetHashCode () << 7);  	foreach (XNode n in el.Nodes ())  		h = h ^ (n.GetHashCode () << 6);  	break;  case XmlNodeType.Comment:  	h = h ^ ((XComment)obj).Value.GetHashCode ();  	break;  case XmlNodeType.ProcessingInstruction:  	XPI pi = (XPI)obj;  	h = h ^ ((pi.Target.GetHashCode () << 6) + pi.Data.GetHashCode ());  	break;  case XmlNodeType.DocumentType:  	XDocumentType dtd = (XDocumentType)obj;  	h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  	break;  case XmlNodeType.Text:  	h = h ^ (((XText)obj).GetHashCode ());  	break;  }  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: switch (obj.NodeType) {  case XmlNodeType.Document:  	XDocument doc = (XDocument)obj;  	h = h ^ GetHashCode (doc.Declaration);  	foreach (XNode n in doc.Nodes ())  		h = h ^ (n.GetHashCode () << 5);  	break;  case XmlNodeType.Element:  	XElement el = (XElement)obj;  	h = h ^ (el.Name.GetHashCode () << 3);  	foreach (XAttribute a in el.Attributes ())  		h = h ^ (a.GetHashCode () << 7);  	foreach (XNode n in el.Nodes ())  		h = h ^ (n.GetHashCode () << 6);  	break;  case XmlNodeType.Comment:  	h = h ^ ((XComment)obj).Value.GetHashCode ();  	break;  case XmlNodeType.ProcessingInstruction:  	XPI pi = (XPI)obj;  	h = h ^ ((pi.Target.GetHashCode () << 6) + pi.Data.GetHashCode ());  	break;  case XmlNodeType.DocumentType:  	XDocumentType dtd = (XDocumentType)obj;  	h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  	break;  case XmlNodeType.Text:  	h = h ^ (((XText)obj).GetHashCode ());  	break;  }  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: switch (obj.NodeType) {  case XmlNodeType.Document:  	XDocument doc = (XDocument)obj;  	h = h ^ GetHashCode (doc.Declaration);  	foreach (XNode n in doc.Nodes ())  		h = h ^ (n.GetHashCode () << 5);  	break;  case XmlNodeType.Element:  	XElement el = (XElement)obj;  	h = h ^ (el.Name.GetHashCode () << 3);  	foreach (XAttribute a in el.Attributes ())  		h = h ^ (a.GetHashCode () << 7);  	foreach (XNode n in el.Nodes ())  		h = h ^ (n.GetHashCode () << 6);  	break;  case XmlNodeType.Comment:  	h = h ^ ((XComment)obj).Value.GetHashCode ();  	break;  case XmlNodeType.ProcessingInstruction:  	XPI pi = (XPI)obj;  	h = h ^ ((pi.Target.GetHashCode () << 6) + pi.Data.GetHashCode ());  	break;  case XmlNodeType.DocumentType:  	XDocumentType dtd = (XDocumentType)obj;  	h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  	break;  case XmlNodeType.Text:  	h = h ^ (((XText)obj).GetHashCode ());  	break;  }  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: switch (obj.NodeType) {  case XmlNodeType.Document:  	XDocument doc = (XDocument)obj;  	h = h ^ GetHashCode (doc.Declaration);  	foreach (XNode n in doc.Nodes ())  		h = h ^ (n.GetHashCode () << 5);  	break;  case XmlNodeType.Element:  	XElement el = (XElement)obj;  	h = h ^ (el.Name.GetHashCode () << 3);  	foreach (XAttribute a in el.Attributes ())  		h = h ^ (a.GetHashCode () << 7);  	foreach (XNode n in el.Nodes ())  		h = h ^ (n.GetHashCode () << 6);  	break;  case XmlNodeType.Comment:  	h = h ^ ((XComment)obj).Value.GetHashCode ();  	break;  case XmlNodeType.ProcessingInstruction:  	XPI pi = (XPI)obj;  	h = h ^ ((pi.Target.GetHashCode () << 6) + pi.Data.GetHashCode ());  	break;  case XmlNodeType.DocumentType:  	XDocumentType dtd = (XDocumentType)obj;  	h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  	break;  case XmlNodeType.Text:  	h = h ^ (((XText)obj).GetHashCode ());  	break;  }  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: switch (obj.NodeType) {  case XmlNodeType.Document:  	XDocument doc = (XDocument)obj;  	h = h ^ GetHashCode (doc.Declaration);  	foreach (XNode n in doc.Nodes ())  		h = h ^ (n.GetHashCode () << 5);  	break;  case XmlNodeType.Element:  	XElement el = (XElement)obj;  	h = h ^ (el.Name.GetHashCode () << 3);  	foreach (XAttribute a in el.Attributes ())  		h = h ^ (a.GetHashCode () << 7);  	foreach (XNode n in el.Nodes ())  		h = h ^ (n.GetHashCode () << 6);  	break;  case XmlNodeType.Comment:  	h = h ^ ((XComment)obj).Value.GetHashCode ();  	break;  case XmlNodeType.ProcessingInstruction:  	XPI pi = (XPI)obj;  	h = h ^ ((pi.Target.GetHashCode () << 6) + pi.Data.GetHashCode ());  	break;  case XmlNodeType.DocumentType:  	XDocumentType dtd = (XDocumentType)obj;  	h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  	break;  case XmlNodeType.Text:  	h = h ^ (((XText)obj).GetHashCode ());  	break;  }  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: switch (obj.NodeType) {  case XmlNodeType.Document:  	XDocument doc = (XDocument)obj;  	h = h ^ GetHashCode (doc.Declaration);  	foreach (XNode n in doc.Nodes ())  		h = h ^ (n.GetHashCode () << 5);  	break;  case XmlNodeType.Element:  	XElement el = (XElement)obj;  	h = h ^ (el.Name.GetHashCode () << 3);  	foreach (XAttribute a in el.Attributes ())  		h = h ^ (a.GetHashCode () << 7);  	foreach (XNode n in el.Nodes ())  		h = h ^ (n.GetHashCode () << 6);  	break;  case XmlNodeType.Comment:  	h = h ^ ((XComment)obj).Value.GetHashCode ();  	break;  case XmlNodeType.ProcessingInstruction:  	XPI pi = (XPI)obj;  	h = h ^ ((pi.Target.GetHashCode () << 6) + pi.Data.GetHashCode ());  	break;  case XmlNodeType.DocumentType:  	XDocumentType dtd = (XDocumentType)obj;  	h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  	break;  case XmlNodeType.Text:  	h = h ^ (((XText)obj).GetHashCode ());  	break;  }  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: switch (obj.NodeType) {  case XmlNodeType.Document:  	XDocument doc = (XDocument)obj;  	h = h ^ GetHashCode (doc.Declaration);  	foreach (XNode n in doc.Nodes ())  		h = h ^ (n.GetHashCode () << 5);  	break;  case XmlNodeType.Element:  	XElement el = (XElement)obj;  	h = h ^ (el.Name.GetHashCode () << 3);  	foreach (XAttribute a in el.Attributes ())  		h = h ^ (a.GetHashCode () << 7);  	foreach (XNode n in el.Nodes ())  		h = h ^ (n.GetHashCode () << 6);  	break;  case XmlNodeType.Comment:  	h = h ^ ((XComment)obj).Value.GetHashCode ();  	break;  case XmlNodeType.ProcessingInstruction:  	XPI pi = (XPI)obj;  	h = h ^ ((pi.Target.GetHashCode () << 6) + pi.Data.GetHashCode ());  	break;  case XmlNodeType.DocumentType:  	XDocumentType dtd = (XDocumentType)obj;  	h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  	break;  case XmlNodeType.Text:  	h = h ^ (((XText)obj).GetHashCode ());  	break;  }  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: switch (obj.NodeType) {  case XmlNodeType.Document:  	XDocument doc = (XDocument)obj;  	h = h ^ GetHashCode (doc.Declaration);  	foreach (XNode n in doc.Nodes ())  		h = h ^ (n.GetHashCode () << 5);  	break;  case XmlNodeType.Element:  	XElement el = (XElement)obj;  	h = h ^ (el.Name.GetHashCode () << 3);  	foreach (XAttribute a in el.Attributes ())  		h = h ^ (a.GetHashCode () << 7);  	foreach (XNode n in el.Nodes ())  		h = h ^ (n.GetHashCode () << 6);  	break;  case XmlNodeType.Comment:  	h = h ^ ((XComment)obj).Value.GetHashCode ();  	break;  case XmlNodeType.ProcessingInstruction:  	XPI pi = (XPI)obj;  	h = h ^ ((pi.Target.GetHashCode () << 6) + pi.Data.GetHashCode ());  	break;  case XmlNodeType.DocumentType:  	XDocumentType dtd = (XDocumentType)obj;  	h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  	break;  case XmlNodeType.Text:  	h = h ^ (((XText)obj).GetHashCode ());  	break;  }  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: switch (obj.NodeType) {  case XmlNodeType.Document:  	XDocument doc = (XDocument)obj;  	h = h ^ GetHashCode (doc.Declaration);  	foreach (XNode n in doc.Nodes ())  		h = h ^ (n.GetHashCode () << 5);  	break;  case XmlNodeType.Element:  	XElement el = (XElement)obj;  	h = h ^ (el.Name.GetHashCode () << 3);  	foreach (XAttribute a in el.Attributes ())  		h = h ^ (a.GetHashCode () << 7);  	foreach (XNode n in el.Nodes ())  		h = h ^ (n.GetHashCode () << 6);  	break;  case XmlNodeType.Comment:  	h = h ^ ((XComment)obj).Value.GetHashCode ();  	break;  case XmlNodeType.ProcessingInstruction:  	XPI pi = (XPI)obj;  	h = h ^ ((pi.Target.GetHashCode () << 6) + pi.Data.GetHashCode ());  	break;  case XmlNodeType.DocumentType:  	XDocumentType dtd = (XDocumentType)obj;  	h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  	break;  case XmlNodeType.Text:  	h = h ^ (((XText)obj).GetHashCode ());  	break;  }  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: foreach (XNode n in doc.Nodes ())  	h = h ^ (n.GetHashCode () << 5);  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: h = h ^ (n.GetHashCode () << 5);  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: h = h ^ (el.Name.GetHashCode () << 3);  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: foreach (XAttribute a in el.Attributes ())  	h = h ^ (a.GetHashCode () << 7);  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: h = h ^ (a.GetHashCode () << 7);  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: foreach (XNode n in el.Nodes ())  	h = h ^ (n.GetHashCode () << 6);  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: h = h ^ (n.GetHashCode () << 6);  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: h = h ^ ((pi.Target.GetHashCode () << 6) + pi.Data.GetHashCode ());  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  
Magic Number,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following statement contains a magic number: h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  
Missing Default,System.Linq.Expressions,BinaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\BinaryExpression.cs,EmitLogicalBinary,The following switch statement is missing a default case: switch (NodeType) {  case ExpressionType.And:  case ExpressionType.Or:  	if (!IsLifted)  		EmitLogical (ec);  	else if (Type == typeof(bool?))  		EmitLiftedLogical (ec);  	else  		EmitLiftedArithmeticBinary (ec);  	break;  case ExpressionType.AndAlso:  case ExpressionType.OrElse:  	if (!IsLifted)  		EmitLogicalShortCircuit (ec);  	else  		EmitLiftedLogicalShortCircuit (ec);  	break;  }  
Missing Default,System.Linq.Expressions,ConstantExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ConstantExpression.cs,EmitConstant,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  	ig.Emit (OpCodes.Ldc_I4' (int)((byte)value));  	return;  case TypeCode.SByte:  	ig.Emit (OpCodes.Ldc_I4' (int)((sbyte)value));  	return;  case TypeCode.Int16:  	ig.Emit (OpCodes.Ldc_I4' (int)((short)value));  	return;  case TypeCode.UInt16:  	ig.Emit (OpCodes.Ldc_I4' (int)((ushort)value));  	return;  case TypeCode.Int32:  	ig.Emit (OpCodes.Ldc_I4' (int)value);  	return;  case TypeCode.UInt32:  	ig.Emit (OpCodes.Ldc_I4' unchecked((int)((uint)Value)));  	return;  case TypeCode.Int64:  	ig.Emit (OpCodes.Ldc_I8' (long)value);  	return;  case TypeCode.UInt64:  	ig.Emit (OpCodes.Ldc_I8' unchecked((long)((ulong)value)));  	return;  case TypeCode.Boolean:  	if ((bool)Value)  		ig.Emit (OpCodes.Ldc_I4_1);  	else  		ec.ig.Emit (OpCodes.Ldc_I4_0);  	return;  case TypeCode.Char:  	ig.Emit (OpCodes.Ldc_I4' (int)((char)value));  	return;  case TypeCode.Single:  	ig.Emit (OpCodes.Ldc_R4' (float)value);  	return;  case TypeCode.Double:  	ig.Emit (OpCodes.Ldc_R8' (double)value);  	return;  case TypeCode.Decimal: {  	Decimal v = (decimal)value;  	int[] words = Decimal.GetBits (v);  	int power = (words [3] >> 16) & 0xff;  	Type ti = typeof(int);  	if (power == 0 && v <= int.MaxValue && v >= int.MinValue) {  		ig.Emit (OpCodes.Ldc_I4' (int)v);  		ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[1] {  			ti  		}));  		return;  	}  	ig.Emit (OpCodes.Ldc_I4' words [0]);  	ig.Emit (OpCodes.Ldc_I4' words [1]);  	ig.Emit (OpCodes.Ldc_I4' words [2]);  	// sign  	ig.Emit (OpCodes.Ldc_I4' words [3] >> 31);  	// power  	ig.Emit (OpCodes.Ldc_I4' power);  	ig.Emit (OpCodes.Newobj' typeof(Decimal).GetConstructor (new Type[5] {  		ti'  		ti'  		ti'  		typeof(bool)'  		typeof(byte)  	}));  	return;  }  case TypeCode.DateTime: {  	var date = (DateTime)value;  	var local = ig.DeclareLocal (typeof(DateTime));  	ig.Emit (OpCodes.Ldloca' local);  	ig.Emit (OpCodes.Ldc_I8' date.Ticks);  	ig.Emit (OpCodes.Ldc_I4' (int)date.Kind);  	ig.Emit (OpCodes.Call' typeof(DateTime).GetConstructor (new[] {  		typeof(long)'  		typeof(DateTimeKind)  	}));  	ig.Emit (OpCodes.Ldloc' local);  	return;  }  case TypeCode.DBNull:  	ig.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"' BindingFlags.Public | BindingFlags.Static));  	return;  case TypeCode.String:  	EmitIfNotNull (ec' c => c.ig.Emit (OpCodes.Ldstr' (string)value));  	return;  case TypeCode.Object:  	EmitIfNotNull (ec' c => c.EmitReadGlobal (value));  	return;  }  
Missing Default,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeBinary,The following switch statement is missing a default case: switch (binaryType) {  case ExpressionType.Add:  	return Add (left' right' method);  case ExpressionType.AddChecked:  	return AddChecked (left' right' method);  case ExpressionType.AndAlso:  	return AndAlso (left' right);  case ExpressionType.ArrayIndex:  	return ArrayIndex (left' right);  case ExpressionType.Coalesce:  	return Coalesce (left' right' conversion);  case ExpressionType.Divide:  	return Divide (left' right' method);  case ExpressionType.Equal:  	return Equal (left' right' liftToNull' method);  case ExpressionType.ExclusiveOr:  	return ExclusiveOr (left' right' method);  case ExpressionType.GreaterThan:  	return GreaterThan (left' right' liftToNull' method);  case ExpressionType.GreaterThanOrEqual:  	return GreaterThanOrEqual (left' right' liftToNull' method);  case ExpressionType.LeftShift:  	return LeftShift (left' right' method);  case ExpressionType.LessThan:  	return LessThan (left' right' liftToNull' method);  case ExpressionType.LessThanOrEqual:  	return LessThanOrEqual (left' right' liftToNull' method);  case ExpressionType.Modulo:  	return Modulo (left' right' method);  case ExpressionType.Multiply:  	return Multiply (left' right' method);  case ExpressionType.MultiplyChecked:  	return MultiplyChecked (left' right' method);  case ExpressionType.NotEqual:  	return NotEqual (left' right' liftToNull' method);  case ExpressionType.OrElse:  	return OrElse (left' right);  case ExpressionType.Power:  	return Power (left' right' method);  case ExpressionType.RightShift:  	return RightShift (left' right' method);  case ExpressionType.Subtract:  	return Subtract (left' right' method);  case ExpressionType.SubtractChecked:  	return SubtractChecked (left' right' method);  case ExpressionType.And:  	return And (left' right' method);  case ExpressionType.Or:  	return Or (left' right' method);  }  
Missing Default,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetActionType,The following switch statement is missing a default case: switch (typeArgs.Length) {  case 1:  	action = typeof(Action<>);  	break;  case 2:  	action = typeof(Action<' >);  	break;  case 3:  	action = typeof(Action<' ' >);  	break;  case 4:  	action = typeof(Action<' ' ' >);  	break;  }  
Missing Default,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,GetFuncType,The following switch statement is missing a default case: switch (typeArgs.Length) {  case 1:  	func = typeof(Func<>);  	break;  case 2:  	func = typeof(Func<' >);  	break;  case 3:  	func = typeof(Func<' ' >);  	break;  case 4:  	func = typeof(Func<' ' ' >);  	break;  case 5:  	func = typeof(Func<' ' ' ' >);  	break;  }  
Missing Default,System.Linq.Expressions,Expression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\Expression.cs,MakeUnary,The following switch statement is missing a default case: switch (unaryType) {  case ExpressionType.ArrayLength:  	return ArrayLength (operand);  case ExpressionType.Convert:  	return Convert (operand' type' method);  case ExpressionType.ConvertChecked:  	return ConvertChecked (operand' type' method);  case ExpressionType.Negate:  	return Negate (operand' method);  case ExpressionType.NegateChecked:  	return NegateChecked (operand' method);  case ExpressionType.Not:  	return Not (operand' method);  case ExpressionType.Quote:  	return Quote (operand);  case ExpressionType.TypeAs:  	return TypeAs (operand' type);  case ExpressionType.UnaryPlus:  	return UnaryPlus (operand' method);  }  
Missing Default,System.Linq.Expressions,ExpressionPrinter,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ExpressionPrinter.cs,VisitUnary,The following switch statement is missing a default case: switch (unary.NodeType) {  case ExpressionType.ArrayLength:  case ExpressionType.Convert:  case ExpressionType.ConvertChecked:  case ExpressionType.Not:  	Print ("{0}("' unary.NodeType);  	Visit (unary.Operand);  	Print (")");  	return;  case ExpressionType.Negate:  	Print ("-");  	Visit (unary.Operand);  	return;  case ExpressionType.Quote:  	Visit (unary.Operand);  	return;  case ExpressionType.TypeAs:  	Print ("(");  	Visit (unary.Operand);  	Print (" As {0})"' unary.Type.Name);  	return;  case ExpressionType.UnaryPlus:  	Print ("+");  	Visit (unary.Operand);  	return;  }  
Missing Default,System.Linq.Expressions,ExpressionPrinter,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ExpressionPrinter.cs,VisitTypeIs,The following switch statement is missing a default case: switch (type.NodeType) {  case ExpressionType.TypeIs:  	Print ("(");  	Visit (type.Expression);  	Print (" Is {0})"' type.TypeOperand.Name);  	return;  }  
Missing Default,System.Linq.Expressions,ExpressionPrinter,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\ExpressionPrinter.cs,VisitNewArray,The following switch statement is missing a default case: switch (newArray.NodeType) {  case ExpressionType.NewArrayBounds:  	Print (newArray.Type);  	Print ("(");  	VisitExpressionList (newArray.Expressions);  	Print (")");  	return;  case ExpressionType.NewArrayInit:  	Print ("[] {");  	VisitExpressionList (newArray.Expressions);  	Print ("}");  	return;  }  
Missing Default,System.Linq.Expressions,UnaryExpression,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Linq.Expressions\UnaryExpression.cs,EmitUnaryOperator,The following switch statement is missing a default case: switch (NodeType) {  case ExpressionType.Not:  	if (operand.Type.GetNotNullableType () == typeof(bool)) {  		ig.Emit (OpCodes.Ldc_I4_0);  		ig.Emit (OpCodes.Ceq);  	}  	else  		ig.Emit (OpCodes.Not);  	break;  case ExpressionType.Negate:  	ig.Emit (OpCodes.Neg);  	break;  case ExpressionType.NegateChecked:  	ig.Emit (OpCodes.Ldc_I4_M1);  	ig.Emit (IsUnsigned (operand.Type) ? OpCodes.Mul_Ovf_Un : OpCodes.Mul_Ovf);  	break;  case ExpressionType.Convert:  case ExpressionType.ConvertChecked:  	// Called when converting from nullable from nullable  	EmitPrimitiveConversion (ec' operand.Type.GetNotNullableType ()' Type.GetNotNullableType ());  	break;  }  
Missing Default,System.Xml.Linq,XAttribute,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XAttribute.cs,ToString,The following switch statement is missing a default case: switch (value [idx]) {  case '&':  	sb.Append ("&amp;");  	break;  case '<':  	sb.Append ("&lt;");  	break;  case '>':  	sb.Append ("&gt;");  	break;  case '"':  	sb.Append ("&quot;");  	break;  case '\r':  	sb.Append ("&#xD;");  	break;  case '\n':  	sb.Append ("&#xA;");  	break;  case '\t':  	sb.Append ("&#x9;");  	break;  }  
Missing Default,System.Xml.Linq,XNodeDocumentOrderComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeDocumentOrderComparer.cs,CompareCore,The following switch statement is missing a default case: switch (rev) {  case CompareResult.Parent:  	return CompareResult.Child;  case CompareResult.Child:  	return CompareResult.Parent;  case CompareResult.Ancestor:  	return CompareResult.Descendant;  case CompareResult.Descendant:  	return CompareResult.Ancestor;  case CompareResult.Following:  	return CompareResult.Preceding;  case CompareResult.Preceding:  	return CompareResult.Following;  case CompareResult.Same:  case CompareResult.Random:  	return rev;  }  
Missing Default,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,Equals,The following switch statement is missing a default case: switch (x.NodeType) {  case XmlNodeType.Document:  	XDocument doc1 = (XDocument)x;  	XDocument doc2 = (XDocument)y;  	if (!Equals (doc1.Declaration' doc2.Declaration))  		return false;  	IEnumerator<XNode> id2 = doc2.Nodes ().GetEnumerator ();  	foreach (XNode n in doc1.Nodes ()) {  		if (!id2.MoveNext ())  			return false;  		if (!Equals (n' id2.Current))  			return false;  	}  	return !id2.MoveNext ();  case XmlNodeType.Element:  	XElement e1 = (XElement)x;  	XElement e2 = (XElement)y;  	if (e1.Name != e2.Name)  		return false;  	IEnumerator<XAttribute> ia2 = e2.Attributes ().GetEnumerator ();  	foreach (XAttribute n in e1.Attributes ()) {  		if (!ia2.MoveNext ())  			return false;  		if (!Equals (n' ia2.Current))  			return false;  	}  	if (ia2.MoveNext ())  		return false;  	IEnumerator<XNode> ie2 = e2.Nodes ().GetEnumerator ();  	foreach (XNode n in e1.Nodes ()) {  		if (!ie2.MoveNext ())  			return false;  		if (!Equals (n' ie2.Current))  			return false;  	}  	return !ie2.MoveNext ();  case XmlNodeType.Comment:  	XComment c1 = (XComment)x;  	XComment c2 = (XComment)y;  	return c1.Value == c2.Value;  case XmlNodeType.ProcessingInstruction:  	XPI p1 = (XPI)x;  	XPI p2 = (XPI)y;  	return p1.Target == p2.Target && p1.Data == p2.Data;  case XmlNodeType.DocumentType:  	XDocumentType d1 = (XDocumentType)x;  	XDocumentType d2 = (XDocumentType)y;  	return d1.Name == d2.Name && d1.PublicId == d2.PublicId && d1.SystemId == d2.SystemId && d1.InternalSubset == d2.InternalSubset;  case XmlNodeType.Text:  	return ((XText)x).Value == ((XText)y).Value;  }  
Missing Default,System.Xml.Linq,XNodeEqualityComparer,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeEqualityComparer.cs,GetHashCode,The following switch statement is missing a default case: switch (obj.NodeType) {  case XmlNodeType.Document:  	XDocument doc = (XDocument)obj;  	h = h ^ GetHashCode (doc.Declaration);  	foreach (XNode n in doc.Nodes ())  		h = h ^ (n.GetHashCode () << 5);  	break;  case XmlNodeType.Element:  	XElement el = (XElement)obj;  	h = h ^ (el.Name.GetHashCode () << 3);  	foreach (XAttribute a in el.Attributes ())  		h = h ^ (a.GetHashCode () << 7);  	foreach (XNode n in el.Nodes ())  		h = h ^ (n.GetHashCode () << 6);  	break;  case XmlNodeType.Comment:  	h = h ^ ((XComment)obj).Value.GetHashCode ();  	break;  case XmlNodeType.ProcessingInstruction:  	XPI pi = (XPI)obj;  	h = h ^ ((pi.Target.GetHashCode () << 6) + pi.Data.GetHashCode ());  	break;  case XmlNodeType.DocumentType:  	XDocumentType dtd = (XDocumentType)obj;  	h = h ^ (dtd.Name.GetHashCode () << 7) ^ (dtd.PublicId.GetHashCode () << 6) ^ (dtd.SystemId.GetHashCode () << 5) ^ (dtd.InternalSubset.GetHashCode () << 4);  	break;  case XmlNodeType.Text:  	h = h ^ (((XText)obj).GetHashCode ());  	break;  }  
Missing Default,System.Xml.Linq,XNodeNavigator,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeNavigator.cs,GetInnerText,The following switch statement is missing a default case: switch (n.NodeType) {  case XmlNodeType.Element:  	foreach (XNode c in ((XElement)n).Nodes ())  		GetInnerText (c' ref sb);  	break;  case XmlNodeType.Text:  case XmlNodeType.CDATA:  	if (sb == null)  		sb = new StringBuilder ();  	sb.Append (((XText)n).Value);  	break;  }  
Missing Default,System.Xml.Linq,XNodeReader,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeReader.cs,GetName,The following switch statement is missing a default case: switch (node.NodeType) {  case XmlNodeType.Element:  	XAttribute a = GetXAttribute (attr);  	return a.Name;  case XmlNodeType.DocumentType:  	if (attr == 0)  		return ((XDocumentType)node).PublicId != null ? "PUBLIC" : "SYSTEM";  	return "SYSTEM";  case XmlNodeType.Document:  	XDeclaration xd = ((XDocument)node).Declaration;  	switch (attr) {  	case 0:  		return xd.Version != null ? "version" : xd.Encoding != null ? "encoding" : "standalone";  	case 1:  		return xd.Version != null ? (xd.Encoding != null ? "encoding" : "standalone") : "standalone";  	}  	return "standalone";  }  
Missing Default,System.Xml.Linq,XNodeReader,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeReader.cs,GetName,The following switch statement is missing a default case: switch (attr) {  case 0:  	return xd.Version != null ? "version" : xd.Encoding != null ? "encoding" : "standalone";  case 1:  	return xd.Version != null ? (xd.Encoding != null ? "encoding" : "standalone") : "standalone";  }  
Missing Default,System.Xml.Linq,XNodeReader,C:\repos\mtysgithub_LAN_Communication_Framework\MonoLib\System.Xml.Linq\XNodeReader.cs,GetName,The following switch statement is missing a default case: switch (node.NodeType) {  case XmlNodeType.Document:  	return "xml";  // xmldecl  case XmlNodeType.Element:  	return ((XElement)node).Name;  case XmlNodeType.ProcessingInstruction:  	return ((XPI)node).Target;  case XmlNodeType.DocumentType:  	return ((XDocumentType)node).Name;  }  
