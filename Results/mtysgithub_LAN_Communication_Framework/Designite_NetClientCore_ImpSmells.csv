Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Hik.Communication.Scs.Client,ScsClientBase,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Client\ScsClientBase.cs,PingTimer_Elapsed,The length of the statement  "		if (_communicationChannel.LastReceivedMessageTime > lastMinute || _communicationChannel.LastSentMessageTime > lastMinute) { " is 123.
Long Statement,Hik.Communication.Scs.Client.Tcp,ScsTcpClient,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Client\Tcp\ScsTcpClient.cs,CreateCommunicationChannel,The length of the statement  "	return new TcpCommunicationChannel (TcpHelper.ConnectToServer (new IPEndPoint (IPAddress.Parse (_serverEndPoint.IpAddress)' _serverEndPoint.TcpPort)' ConnectTimeout)); " is 167.
Long Statement,Hik.Communication.Scs.Communication.Channels.Tcp,TcpCommunicationChannel,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Channels\Tcp\TcpCommunicationChannel.cs,SendMessageInternal,The length of the statement  "				throw new CommunicationException ("Message could not be sent via TCP socket. Only " + totalSent + " bytes of " + messageBytes.Length + " bytes are sent."); " is 155.
Long Statement,Hik.Communication.Scs.Communication.Messages,ScsPingMessage,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Messages\PingMessage.cs,ToString,The length of the statement  "	return string.IsNullOrEmpty (RepliedMessageId) ? string.Format ("ScsPingMessage [{0}]"' MessageId) : string.Format ("ScsPingMessage [{0}] Replied To [{1}]"' MessageId' RepliedMessageId); " is 186.
Long Statement,Hik.Communication.Scs.Communication.Messages,ScsMessage,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Messages\ScsMessage.cs,ToString,The length of the statement  "	return string.IsNullOrEmpty (RepliedMessageId) ? string.Format ("ScsMessage [{0}]"' MessageId) : string.Format ("ScsMessage [{0}] Replied To [{1}]"' MessageId' RepliedMessageId); " is 178.
Long Statement,Hik.Communication.Scs.Communication.Messages,ScsRawDataMessage,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Messages\ScsRawDataMessage.cs,ToString,The length of the statement  "	return string.IsNullOrEmpty (RepliedMessageId) ? string.Format ("ScsRawDataMessage [{0}]: {1} bytes"' MessageId' messageLength) : string.Format ("ScsRawDataMessage [{0}] Replied To [{1}]: {2} bytes"' MessageId' RepliedMessageId' messageLength); " is 244.
Long Statement,Hik.Communication.Scs.Communication.Messages,ScsTextMessage,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Messages\ScsTextMessage.cs,ToString,The length of the statement  "	return string.IsNullOrEmpty (RepliedMessageId) ? string.Format ("ScsTextMessage [{0}]: {1}"' MessageId' Text) : string.Format ("ScsTextMessage [{0}] Replied To [{1}]: {2}"' MessageId' RepliedMessageId' Text); " is 208.
Long Statement,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,GetBytes,The length of the statement  "		throw new CommunicationException ("Message is too big (" + messageLength + " bytes). Max allowed length is " + MaxMessageLength + " bytes."); " is 141.
Long Statement,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The length of the statement  "		throw new Exception ("Message is too big (" + messageLength + " bytes). Max allowed length is " + MaxMessageLength + " bytes."); " is 128.
Empty Catch Block,Hik.Communication.Scs.Client,ClientReConnecter,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Client\ClientReConnecter.cs,ReconnectTimer_Elapsed,The method has an empty catch block.
Empty Catch Block,Hik.Communication.Scs.Client,ScsClientBase,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Client\ScsClientBase.cs,PingTimer_Elapsed,The method has an empty catch block.
Empty Catch Block,Hik.Communication.Scs.Communication.Channels.Tcp,TcpCommunicationChannel,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Channels\Tcp\TcpCommunicationChannel.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,Hik.Communication.Scs.Communication.Channels.Tcp,TcpConnectionListener,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Channels\Tcp\TcpConnectionListener.cs,StopSocket,The method has an empty catch block.
Empty Catch Block,Hik.Communication.Scs.Communication.Channels.Tcp,TcpConnectionListener,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Channels\Tcp\TcpConnectionListener.cs,DoListenAsThread,The method has an empty catch block.
Empty Catch Block,Hik.Threading,SequentialItemProcessor,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Threading\SequentialItemProcessor.cs,Stop,The method has an empty catch block.
Empty Catch Block,Hik.Threading,Timer,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Threading\Timer.cs,TimerCallBack,The method has an empty catch block.
Magic Number,Hik.Communication.Scs.Client,ClientReConnecter,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Client\ClientReConnecter.cs,ClientReConnecter,The following statement contains a magic number: _reconnectTimer = new Timer (20000);  
Magic Number,Hik.Communication.Scs.Client,ScsClientBase,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Client\ScsClientBase.cs,ScsClientBase,The following statement contains a magic number: _pingTimer = new Timer (30000);  
Magic Number,Hik.Communication.Scs.Client.Tcp,TcpHelper,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Client\Tcp\TcpHelper.cs,ConnectToServer,The following statement contains a magic number: try {  	socket.Blocking = true;  	socket.Connect (endPoint);  	socket.Blocking = true;  	return socket;  }  //catch (SocketException socketException)  catch (Exception socketException) {  	if (null != (socketException as SocketException)) {  		if (((SocketException)socketException).ErrorCode != 10035) {  			socket.Close ();  			throw;  		}  	}  	if (!socket.Poll (timeoutMs * 1000' SelectMode.SelectWrite)) {  		socket.Close ();  		throw new TimeoutException ("The host failed to connect. Timeout occured.");  	}  	socket.Blocking = true;  	return socket;  }  
Magic Number,Hik.Communication.Scs.Client.Tcp,TcpHelper,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Client\Tcp\TcpHelper.cs,ConnectToServer,The following statement contains a magic number: try {  	socket.Blocking = true;  	socket.Connect (endPoint);  	socket.Blocking = true;  	return socket;  }  //catch (SocketException socketException)  catch (Exception socketException) {  	if (null != (socketException as SocketException)) {  		if (((SocketException)socketException).ErrorCode != 10035) {  			socket.Close ();  			throw;  		}  	}  	if (!socket.Poll (timeoutMs * 1000' SelectMode.SelectWrite)) {  		socket.Close ();  		throw new TimeoutException ("The host failed to connect. Timeout occured.");  	}  	socket.Blocking = true;  	return socket;  }  
Magic Number,Hik.Communication.Scs.Client.Tcp,TcpHelper,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Client\Tcp\TcpHelper.cs,ConnectToServer,The following statement contains a magic number: if (null != (socketException as SocketException)) {  	if (((SocketException)socketException).ErrorCode != 10035) {  		socket.Close ();  		throw;  	}  }  
Magic Number,Hik.Communication.Scs.Client.Tcp,TcpHelper,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Client\Tcp\TcpHelper.cs,ConnectToServer,The following statement contains a magic number: if (((SocketException)socketException).ErrorCode != 10035) {  	socket.Close ();  	throw;  }  
Magic Number,Hik.Communication.Scs.Client.Tcp,TcpHelper,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Client\Tcp\TcpHelper.cs,ConnectToServer,The following statement contains a magic number: if (!socket.Poll (timeoutMs * 1000' SelectMode.SelectWrite)) {  	socket.Close ();  	throw new TimeoutException ("The host failed to connect. Timeout occured.");  }  
Magic Number,Hik.Communication.Scs.Communication.Channels.Tcp,TcpConnectionListener,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Channels\Tcp\TcpConnectionListener.cs,DoListenAsThread,The following statement contains a magic number: while (_running) {  	try {  		var clientSocket = _listenerSocket.AcceptSocket ();  		if (clientSocket.Connected) {  			OnCommunicationChannelConnected (new TcpCommunicationChannel (clientSocket));  		}  	}  	catch {  		//Disconnect' wait for a while and connect again.  		StopSocket ();  		Thread.Sleep (1000);  		if (!_running) {  			return;  		}  		try {  			StartSocket ();  		}  		catch {  		}  	}  }  
Magic Number,Hik.Communication.Scs.Communication.Channels.Tcp,TcpConnectionListener,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Channels\Tcp\TcpConnectionListener.cs,DoListenAsThread,The following statement contains a magic number: try {  	var clientSocket = _listenerSocket.AcceptSocket ();  	if (clientSocket.Connected) {  		OnCommunicationChannelConnected (new TcpCommunicationChannel (clientSocket));  	}  }  catch {  	//Disconnect' wait for a while and connect again.  	StopSocket ();  	Thread.Sleep (1000);  	if (!_running) {  		return;  	}  	try {  		StartSocket ();  	}  	catch {  	}  }  
Magic Number,Hik.Communication.Scs.Communication.Channels.Tcp,TcpConnectionListener,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Channels\Tcp\TcpConnectionListener.cs,DoListenAsThread,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Hik.Communication.Scs.Communication.EndPoints,ScsEndPoint,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\EndPoints\ScsEndPoint.cs,CreateEndPoint,The following statement contains a magic number: if (splittedEndPoint.Length != 2) {  	throw new ApplicationException (endPointAddress + " is not a valid endpoint address.");  }  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,GetBytes,The following statement contains a magic number: Array.Copy (serializedMessage' 0' bytes' 4' messageLength);  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (_receiveMemoryStream.Length < 4) {  	return false;  }  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (messageLength == 0) {  	//if no more bytes' return immediately  	if (_receiveMemoryStream.Length == 4) {  		_receiveMemoryStream = new MemoryStream ();  		//Clear the stream  		return false;  	}  	//Create a new memory stream from current except first 4-bytes.  	var bytes = _receiveMemoryStream.ToArray ();  	_receiveMemoryStream = new MemoryStream ();  	_receiveMemoryStream.Write (bytes' 4' bytes.Length - 4);  	return true;  }  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (messageLength == 0) {  	//if no more bytes' return immediately  	if (_receiveMemoryStream.Length == 4) {  		_receiveMemoryStream = new MemoryStream ();  		//Clear the stream  		return false;  	}  	//Create a new memory stream from current except first 4-bytes.  	var bytes = _receiveMemoryStream.ToArray ();  	_receiveMemoryStream = new MemoryStream ();  	_receiveMemoryStream.Write (bytes' 4' bytes.Length - 4);  	return true;  }  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (messageLength == 0) {  	//if no more bytes' return immediately  	if (_receiveMemoryStream.Length == 4) {  		_receiveMemoryStream = new MemoryStream ();  		//Clear the stream  		return false;  	}  	//Create a new memory stream from current except first 4-bytes.  	var bytes = _receiveMemoryStream.ToArray ();  	_receiveMemoryStream = new MemoryStream ();  	_receiveMemoryStream.Write (bytes' 4' bytes.Length - 4);  	return true;  }  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (_receiveMemoryStream.Length == 4) {  	_receiveMemoryStream = new MemoryStream ();  	//Clear the stream  	return false;  }  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: _receiveMemoryStream.Write (bytes' 4' bytes.Length - 4);  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: _receiveMemoryStream.Write (bytes' 4' bytes.Length - 4);  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (_receiveMemoryStream.Length < (4 + messageLength)) {  	_receiveMemoryStream.Position = _receiveMemoryStream.Length;  	return false;  }  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: return (remainingBytes.Length > 4);  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,WriteInt32,The following statement contains a magic number: buffer [startIndex] = (byte)((number >> 24) & 0xFF);  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,WriteInt32,The following statement contains a magic number: buffer [startIndex + 1] = (byte)((number >> 16) & 0xFF);  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,WriteInt32,The following statement contains a magic number: buffer [startIndex + 2] = (byte)((number >> 8) & 0xFF);  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,WriteInt32,The following statement contains a magic number: buffer [startIndex + 2] = (byte)((number >> 8) & 0xFF);  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,WriteInt32,The following statement contains a magic number: buffer [startIndex + 3] = (byte)((number) & 0xFF);  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadInt32,The following statement contains a magic number: return ((buffer [0] << 24) | (buffer [1] << 16) | (buffer [2] << 8) | (buffer [3]));  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadInt32,The following statement contains a magic number: return ((buffer [0] << 24) | (buffer [1] << 16) | (buffer [2] << 8) | (buffer [3]));  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadInt32,The following statement contains a magic number: return ((buffer [0] << 24) | (buffer [1] << 16) | (buffer [2] << 8) | (buffer [3]));  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadInt32,The following statement contains a magic number: return ((buffer [0] << 24) | (buffer [1] << 16) | (buffer [2] << 8) | (buffer [3]));  
Magic Number,Hik.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadInt32,The following statement contains a magic number: return ((buffer [0] << 24) | (buffer [1] << 16) | (buffer [2] << 8) | (buffer [3]));  
Missing Default,Hik.Communication.Scs.Communication.Messengers,RequestReplyMessenger,C:\repos\mtysgithub_LAN_Communication_Framework\NetClientCore\code\net\scs\Communication\scs\Communication\Messengers\RequestReplyMessenger.cs,SendMessageAndWaitForResponse,The following switch statement is missing a default case: switch (waitingMessage.State) {  case WaitingMessageStates.WaitingForResponse:  	throw new TimeoutException ("Timeout occured. Can not received response.");  case WaitingMessageStates.Cancelled:  	throw new CommunicationException ("Disconnected before response received.");  }  
