Implementation smell,Namespace,Class,File,Method,Description
Long Method,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The method has 565 lines of code.
Long Method,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The method has 260 lines of code.
Complex Method,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,Cyclomatic complexity of the method is 12
Complex Method,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,Cyclomatic complexity of the method is 18
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,SetupDiEnumDeviceInterfaces,The method has 5 parameters. Parameters: DeviceInfoSet' DeviceInfoData' InterfaceClassGuid' MemberIndex' DeviceInterfaceData
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters. Parameters: DeviceInfoSet' DeviceInterfaceData' DeviceInterfaceDetailData' DeviceInterfaceDetailDataSize' RequiredSize' DeviceInfoData
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters. Parameters: DeviceInfoSet' DeviceInterfaceData' DeviceInterfaceDetailData' DeviceInterfaceDetailDataSize' RequiredSize' DeviceInfoData
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,CreateFile,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' lpSecurityAttributes' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,WinUsb_ControlTransfer,The method has 6 parameters. Parameters: InterfaceHandle' SetupPacket' Buffer' BufferLength' LengthTransferred' Overlapped
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,WinUsb_ReadPipe,The method has 6 parameters. Parameters: InterfaceHandle' PipeID' Buffer' BufferLength' LengthTransferred' Overlapped
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,WinUsb_WritePipe,The method has 6 parameters. Parameters: InterfaceHandle' PipeID' Buffer' BufferLength' LengthTransferred' Overlapped
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,DeviceIoControl,The method has 8 parameters. Parameters: DeviceHandle' IoControlCode' InBuffer' InBufferSize' OutBuffer' OutBufferSize' BytesReturned' Overlapped
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,SetupDiOpenDeviceInfo,The method has 5 parameters. Parameters: DeviceInfoSet' DeviceInstanceId' hwndParent' Flags' DeviceInfoData
Long Identifier,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,RegisterNotify,The length of the parameter devBroadcastDeviceInterfaceBuffer is 33.
Long Identifier,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,,The length of the parameter DEVICE_NOTIFY_ALL_INTERFACE_CLASSES is 35.
Long Statement,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The length of the statement  "                if (joystick.Information.ProductGuid.ToString() == "028e045e-0000-0000-0000-504944564944") //If its an emulated controller skip it " is 130.
Long Statement,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The length of the statement  "                if (joystick.Capabilities.ButtonCount < 1 && joystick.Capabilities.AxesCount < 1) //Skip if it doesn't have any button and axes " is 127.
Long Statement,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The length of the statement  "                    else if (devices[i] != null && devices[i].joystick.Information.InstanceGuid == deviceInstance.InstanceGuid) //If the device is already initialized skip it " is 154.
Long Statement,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Report,The length of the statement  "                bool result = DeviceIoControl(m_FileHandle' 0x2A400C' Input' Input.Length' Output' Output.Length' ref Transfered' IntPtr.Zero) && Transfered > 0; " is 145.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(XOut)); " is 124.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelA.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelB.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelX.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelY.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelUp.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelDown.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 157.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelLeft.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 157.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelRight.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 158.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelRT.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelLT.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelRB.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelLB.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelBack.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 157.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelStart.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 158.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelHome.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 157.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelRA.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelLA.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelLX.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelRX.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelLY.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The length of the statement  "            this.labelRY.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,RegisterNotify,The length of the statement  "                Handle = RegisterDeviceNotification(Form' devBroadcastDeviceInterfaceBuffer' Window ? DEVICE_NOTIFY_WINDOW_HANDLE : DEVICE_NOTIFY_SERVICE_HANDLE); " is 146.
Long Statement,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The length of the statement  "                        if (SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) " is 130.
Long Statement,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The length of the statement  "                            IntPtr pDevicePathName = new IntPtr(IntPtr.Size == 4 ? detailDataBuffer.ToInt32() + 4 : detailDataBuffer.ToInt64() + 4); " is 120.
Long Statement,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,GetDeviceHandle,The length of the statement  "            m_FileHandle = CreateFile(Path' (GENERIC_WRITE | GENERIC_READ)' FILE_SHARE_READ | FILE_SHARE_WRITE' IntPtr.Zero' OPEN_EXISTING' FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED' 0); " is 177.
Long Statement,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(XOut)); " is 124.
Empty Catch Block,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,WndProc,The method has an empty catch block.
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,ControllerDevice,The following statement contains a magic number: for (int i = 0; i < 42; i++)              {                  mapping[i] = 255; //Changed default mapping to blank              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,ControllerDevice,The following statement contains a magic number: for (int i = 0; i < 42; i++)              {                  mapping[i] = 255; //Changed default mapping to blank              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: bool[] b = new bool[4];
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Button,The following statement contains a magic number: int i = (int)toByte(buttons[num]) * 255;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType)              {                  case 0: //Normal                      return (byte)(p / 256);                  case 1: //Inverted                      return (byte)((65535 - p) / 256);                  case 2: //Half                      int m = (p - 32767) / 129;                      if (m < 0)                      {                          m = 0;                      }                      return (byte)m;                  case 3: //Inverted Half                      m = (p - 32767) / 129;                      if (-m < 0)                      {                          m = 0;                      }                      return (byte)-m;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType)              {                  case 0: //Normal                      return (byte)(p / 256);                  case 1: //Inverted                      return (byte)((65535 - p) / 256);                  case 2: //Half                      int m = (p - 32767) / 129;                      if (m < 0)                      {                          m = 0;                      }                      return (byte)m;                  case 3: //Inverted Half                      m = (p - 32767) / 129;                      if (-m < 0)                      {                          m = 0;                      }                      return (byte)-m;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType)              {                  case 0: //Normal                      return (byte)(p / 256);                  case 1: //Inverted                      return (byte)((65535 - p) / 256);                  case 2: //Half                      int m = (p - 32767) / 129;                      if (m < 0)                      {                          m = 0;                      }                      return (byte)m;                  case 3: //Inverted Half                      m = (p - 32767) / 129;                      if (-m < 0)                      {                          m = 0;                      }                      return (byte)-m;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType)              {                  case 0: //Normal                      return (byte)(p / 256);                  case 1: //Inverted                      return (byte)((65535 - p) / 256);                  case 2: //Half                      int m = (p - 32767) / 129;                      if (m < 0)                      {                          m = 0;                      }                      return (byte)m;                  case 3: //Inverted Half                      m = (p - 32767) / 129;                      if (-m < 0)                      {                          m = 0;                      }                      return (byte)-m;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType)              {                  case 0: //Normal                      return (byte)(p / 256);                  case 1: //Inverted                      return (byte)((65535 - p) / 256);                  case 2: //Half                      int m = (p - 32767) / 129;                      if (m < 0)                      {                          m = 0;                      }                      return (byte)m;                  case 3: //Inverted Half                      m = (p - 32767) / 129;                      if (-m < 0)                      {                          m = 0;                      }                      return (byte)-m;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType)              {                  case 0: //Normal                      return (byte)(p / 256);                  case 1: //Inverted                      return (byte)((65535 - p) / 256);                  case 2: //Half                      int m = (p - 32767) / 129;                      if (m < 0)                      {                          m = 0;                      }                      return (byte)m;                  case 3: //Inverted Half                      m = (p - 32767) / 129;                      if (-m < 0)                      {                          m = 0;                      }                      return (byte)-m;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType)              {                  case 0: //Normal                      return (byte)(p / 256);                  case 1: //Inverted                      return (byte)((65535 - p) / 256);                  case 2: //Half                      int m = (p - 32767) / 129;                      if (m < 0)                      {                          m = 0;                      }                      return (byte)m;                  case 3: //Inverted Half                      m = (p - 32767) / 129;                      if (-m < 0)                      {                          m = 0;                      }                      return (byte)-m;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType)              {                  case 0: //Normal                      return (byte)(p / 256);                  case 1: //Inverted                      return (byte)((65535 - p) / 256);                  case 2: //Half                      int m = (p - 32767) / 129;                      if (m < 0)                      {                          m = 0;                      }                      return (byte)m;                  case 3: //Inverted Half                      m = (p - 32767) / 129;                      if (-m < 0)                      {                          m = 0;                      }                      return (byte)-m;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType)              {                  case 0: //Normal                      return (byte)(p / 256);                  case 1: //Inverted                      return (byte)((65535 - p) / 256);                  case 2: //Half                      int m = (p - 32767) / 129;                      if (m < 0)                      {                          m = 0;                      }                      return (byte)m;                  case 3: //Inverted Half                      m = (p - 32767) / 129;                      if (-m < 0)                      {                          m = 0;                      }                      return (byte)-m;              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,DPad,The following statement contains a magic number: int i = (int)toByte(getPov(num)[subType]) * 255;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: byte[] output = new byte[21];
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++)              {                  if (mapping[i * 2] == 255)                  {                      continue;                  }                  byte subtype = (byte)(mapping[i * 2] & 0x0F);                  byte type = (byte)((mapping[i * 2] & 0xF0) >> 4);                  byte num = mapping[(i * 2) + 1];                  output[i] = funcArray[type](subtype' num);              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++)              {                  if (mapping[i * 2] == 255)                  {                      continue;                  }                  byte subtype = (byte)(mapping[i * 2] & 0x0F);                  byte type = (byte)((mapping[i * 2] & 0xF0) >> 4);                  byte num = mapping[(i * 2) + 1];                  output[i] = funcArray[type](subtype' num);              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++)              {                  if (mapping[i * 2] == 255)                  {                      continue;                  }                  byte subtype = (byte)(mapping[i * 2] & 0x0F);                  byte type = (byte)((mapping[i * 2] & 0xF0) >> 4);                  byte num = mapping[(i * 2) + 1];                  output[i] = funcArray[type](subtype' num);              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++)              {                  if (mapping[i * 2] == 255)                  {                      continue;                  }                  byte subtype = (byte)(mapping[i * 2] & 0x0F);                  byte type = (byte)((mapping[i * 2] & 0xF0) >> 4);                  byte num = mapping[(i * 2) + 1];                  output[i] = funcArray[type](subtype' num);              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++)              {                  if (mapping[i * 2] == 255)                  {                      continue;                  }                  byte subtype = (byte)(mapping[i * 2] & 0x0F);                  byte type = (byte)((mapping[i * 2] & 0xF0) >> 4);                  byte num = mapping[(i * 2) + 1];                  output[i] = funcArray[type](subtype' num);              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++)              {                  if (mapping[i * 2] == 255)                  {                      continue;                  }                  byte subtype = (byte)(mapping[i * 2] & 0x0F);                  byte type = (byte)((mapping[i * 2] & 0xF0) >> 4);                  byte num = mapping[(i * 2) + 1];                  output[i] = funcArray[type](subtype' num);              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++)              {                  if (mapping[i * 2] == 255)                  {                      continue;                  }                  byte subtype = (byte)(mapping[i * 2] & 0x0F);                  byte type = (byte)((mapping[i * 2] & 0xF0) >> 4);                  byte num = mapping[(i * 2) + 1];                  output[i] = funcArray[type](subtype' num);              }
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.X = output[2] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.Y = output[3] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.DpadUp = output[4] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.DpadDown = output[5] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.DpadLeft = output[6] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.DpadRight = output[7] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.L2 = output[9];
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.R2 = output[8];
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.L1 = output[10] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.R1 = output[11] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.L3 = output[12] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.R3 = output[13] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.Home = output[14] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.Start = output[15] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.Back = output[16] != 0;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.LY = output[17];
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.LX = output[18];
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.RY = output[19];
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.RX = output[20];
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: byte[] Report = new byte[64];
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[2] = 0x05;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[3] = 0x12;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[10] = (byte)(                  ((cOutput.Back ? 1 : 0) << 0) |                  ((cOutput.L3 ? 1 : 0) << 1) |                  ((cOutput.R3 ? 1 : 0) << 2) |                  ((cOutput.Start ? 1 : 0) << 3) |                  ((cOutput.DpadUp ? 1 : 0) << 4) |                  ((cOutput.DpadRight ? 1 : 0) << 5) |                  ((cOutput.DpadDown ? 1 : 0) << 6) |                  ((cOutput.DpadLeft ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[10] = (byte)(                  ((cOutput.Back ? 1 : 0) << 0) |                  ((cOutput.L3 ? 1 : 0) << 1) |                  ((cOutput.R3 ? 1 : 0) << 2) |                  ((cOutput.Start ? 1 : 0) << 3) |                  ((cOutput.DpadUp ? 1 : 0) << 4) |                  ((cOutput.DpadRight ? 1 : 0) << 5) |                  ((cOutput.DpadDown ? 1 : 0) << 6) |                  ((cOutput.DpadLeft ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[10] = (byte)(                  ((cOutput.Back ? 1 : 0) << 0) |                  ((cOutput.L3 ? 1 : 0) << 1) |                  ((cOutput.R3 ? 1 : 0) << 2) |                  ((cOutput.Start ? 1 : 0) << 3) |                  ((cOutput.DpadUp ? 1 : 0) << 4) |                  ((cOutput.DpadRight ? 1 : 0) << 5) |                  ((cOutput.DpadDown ? 1 : 0) << 6) |                  ((cOutput.DpadLeft ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[10] = (byte)(                  ((cOutput.Back ? 1 : 0) << 0) |                  ((cOutput.L3 ? 1 : 0) << 1) |                  ((cOutput.R3 ? 1 : 0) << 2) |                  ((cOutput.Start ? 1 : 0) << 3) |                  ((cOutput.DpadUp ? 1 : 0) << 4) |                  ((cOutput.DpadRight ? 1 : 0) << 5) |                  ((cOutput.DpadDown ? 1 : 0) << 6) |                  ((cOutput.DpadLeft ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[10] = (byte)(                  ((cOutput.Back ? 1 : 0) << 0) |                  ((cOutput.L3 ? 1 : 0) << 1) |                  ((cOutput.R3 ? 1 : 0) << 2) |                  ((cOutput.Start ? 1 : 0) << 3) |                  ((cOutput.DpadUp ? 1 : 0) << 4) |                  ((cOutput.DpadRight ? 1 : 0) << 5) |                  ((cOutput.DpadDown ? 1 : 0) << 6) |                  ((cOutput.DpadLeft ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[10] = (byte)(                  ((cOutput.Back ? 1 : 0) << 0) |                  ((cOutput.L3 ? 1 : 0) << 1) |                  ((cOutput.R3 ? 1 : 0) << 2) |                  ((cOutput.Start ? 1 : 0) << 3) |                  ((cOutput.DpadUp ? 1 : 0) << 4) |                  ((cOutput.DpadRight ? 1 : 0) << 5) |                  ((cOutput.DpadDown ? 1 : 0) << 6) |                  ((cOutput.DpadLeft ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[10] = (byte)(                  ((cOutput.Back ? 1 : 0) << 0) |                  ((cOutput.L3 ? 1 : 0) << 1) |                  ((cOutput.R3 ? 1 : 0) << 2) |                  ((cOutput.Start ? 1 : 0) << 3) |                  ((cOutput.DpadUp ? 1 : 0) << 4) |                  ((cOutput.DpadRight ? 1 : 0) << 5) |                  ((cOutput.DpadDown ? 1 : 0) << 6) |                  ((cOutput.DpadLeft ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[11] = (byte)(                  ((cOutput.L1 ? 1 : 0) << 2) |                  ((cOutput.R1 ? 1 : 0) << 3) |                  ((cOutput.Y ? 1 : 0) << 4) |                  ((cOutput.B ? 1 : 0) << 5) |                  ((cOutput.A ? 1 : 0) << 6) |                  ((cOutput.X ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[11] = (byte)(                  ((cOutput.L1 ? 1 : 0) << 2) |                  ((cOutput.R1 ? 1 : 0) << 3) |                  ((cOutput.Y ? 1 : 0) << 4) |                  ((cOutput.B ? 1 : 0) << 5) |                  ((cOutput.A ? 1 : 0) << 6) |                  ((cOutput.X ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[11] = (byte)(                  ((cOutput.L1 ? 1 : 0) << 2) |                  ((cOutput.R1 ? 1 : 0) << 3) |                  ((cOutput.Y ? 1 : 0) << 4) |                  ((cOutput.B ? 1 : 0) << 5) |                  ((cOutput.A ? 1 : 0) << 6) |                  ((cOutput.X ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[11] = (byte)(                  ((cOutput.L1 ? 1 : 0) << 2) |                  ((cOutput.R1 ? 1 : 0) << 3) |                  ((cOutput.Y ? 1 : 0) << 4) |                  ((cOutput.B ? 1 : 0) << 5) |                  ((cOutput.A ? 1 : 0) << 6) |                  ((cOutput.X ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[11] = (byte)(                  ((cOutput.L1 ? 1 : 0) << 2) |                  ((cOutput.R1 ? 1 : 0) << 3) |                  ((cOutput.Y ? 1 : 0) << 4) |                  ((cOutput.B ? 1 : 0) << 5) |                  ((cOutput.A ? 1 : 0) << 6) |                  ((cOutput.X ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[11] = (byte)(                  ((cOutput.L1 ? 1 : 0) << 2) |                  ((cOutput.R1 ? 1 : 0) << 3) |                  ((cOutput.Y ? 1 : 0) << 4) |                  ((cOutput.B ? 1 : 0) << 5) |                  ((cOutput.A ? 1 : 0) << 6) |                  ((cOutput.X ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[11] = (byte)(                  ((cOutput.L1 ? 1 : 0) << 2) |                  ((cOutput.R1 ? 1 : 0) << 3) |                  ((cOutput.Y ? 1 : 0) << 4) |                  ((cOutput.B ? 1 : 0) << 5) |                  ((cOutput.A ? 1 : 0) << 6) |                  ((cOutput.X ? 1 : 0) << 7));
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[12] = (byte)(cOutput.Home ? 0xFF : 0x00);
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[14] = cOutput.LX;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[15] = cOutput.LY;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[16] = cOutput.RX;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[17] = cOutput.RY;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[26] = cOutput.R2;
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report[27] = cOutput.L2;
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,ControllerManager,The following statement contains a magic number: devices = new ControllerDevice[4];
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,ControllerManager,The following statement contains a magic number: ds4locks[2] = new object();
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,ControllerManager,The following statement contains a magic number: ds4locks[3] = new object();
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,changeExclusive,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  if (devices[i] != null)                  {                      if (isExclusive)                      {                          devices[i].joystick.Unacquire();                          devices[i].joystick.SetCooperativeLevel(handle' CooperativeLevel.Exclusive | CooperativeLevel.Background);                          devices[i].joystick.Acquire();                      }                      else                      {                          devices[i].joystick.Unacquire();                          devices[i].joystick.SetCooperativeLevel(handle' CooperativeLevel.Nonexclusive | CooperativeLevel.Background);                          devices[i].joystick.Acquire();                      }                  }              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Scale,The following statement contains a magic number: if (Value == -128) Value = -127;
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Scale,The following statement contains a magic number: if (Value == -128) Value = -127;
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Start,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  if (devices[i] != null && devices[i].enabled)                  {                      running = true;                      processingData[i] = new ContData();                      Console.WriteLine("Plug " + i);                      Plugin(i + 1);                      int t = i;                      workers[i] = new Thread(() =>                      { ProcessData(t); });                      workers[i].Start();                  }              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The following statement contains a magic number: for (int i = 0; i < 4; i++) //Remove disconnected controllers              {                  if (devices[i] != null && !directInput.IsDeviceAttached(devices[i].joystick.Information.InstanceGuid))                  {                      Console.WriteLine(devices[i].joystick.Properties.InstanceName + " Removed");                      devices[i] = null;                      workers[i].Abort();                      workers[i] = null;                      Unplug(i + 1);                  }              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The following statement contains a magic number: foreach (var deviceInstance in directInput.GetDevices(DeviceClass.GameController' DeviceEnumerationFlags.AttachedOnly))              {                  Joystick joystick = new Joystick(directInput' deviceInstance.InstanceGuid);                    if (joystick.Information.ProductGuid.ToString() == "028e045e-0000-0000-0000-504944564944") //If its an emulated controller skip it                      continue;                    if (joystick.Capabilities.ButtonCount < 1 && joystick.Capabilities.AxesCount < 1) //Skip if it doesn't have any button and axes                      continue;                    int spot = -1;                  for (int i = 0; i < 4; i++)                  {                      if (devices[i] == null)                      {                          if (spot == -1)                          {                              spot = i;                              Console.WriteLine("Open Spot " + i.ToString());                          }                      }                      else if (devices[i] != null && devices[i].joystick.Information.InstanceGuid == deviceInstance.InstanceGuid) //If the device is already initialized skip it                      {                          Console.WriteLine("Controller Already Acquired " + i.ToString() + " " + deviceInstance.InstanceName);                          spot = -1;                          break;                      }                  }                    if (spot == -1)                      continue;                    if (isExclusive)                  {                      joystick.SetCooperativeLevel(handle' CooperativeLevel.Exclusive | CooperativeLevel.Background);                  }                  else                  {                      joystick.SetCooperativeLevel(handle' CooperativeLevel.Nonexclusive | CooperativeLevel.Background);                  }                  joystick.Properties.BufferSize = 128;                  joystick.Acquire();                    devices[spot] = new ControllerDevice(joystick' spot + 1);                  if (IsActive)                  {                      processingData[spot] = new ContData();                      Console.WriteLine("Plug " + spot);                      Plugin(spot + 1);                      int t = spot;                      workers[spot] = new Thread(() =>                      { ProcessData(t); });                      workers[spot].Start();                  }              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The following statement contains a magic number: foreach (var deviceInstance in directInput.GetDevices(DeviceClass.GameController' DeviceEnumerationFlags.AttachedOnly))              {                  Joystick joystick = new Joystick(directInput' deviceInstance.InstanceGuid);                    if (joystick.Information.ProductGuid.ToString() == "028e045e-0000-0000-0000-504944564944") //If its an emulated controller skip it                      continue;                    if (joystick.Capabilities.ButtonCount < 1 && joystick.Capabilities.AxesCount < 1) //Skip if it doesn't have any button and axes                      continue;                    int spot = -1;                  for (int i = 0; i < 4; i++)                  {                      if (devices[i] == null)                      {                          if (spot == -1)                          {                              spot = i;                              Console.WriteLine("Open Spot " + i.ToString());                          }                      }                      else if (devices[i] != null && devices[i].joystick.Information.InstanceGuid == deviceInstance.InstanceGuid) //If the device is already initialized skip it                      {                          Console.WriteLine("Controller Already Acquired " + i.ToString() + " " + deviceInstance.InstanceName);                          spot = -1;                          break;                      }                  }                    if (spot == -1)                      continue;                    if (isExclusive)                  {                      joystick.SetCooperativeLevel(handle' CooperativeLevel.Exclusive | CooperativeLevel.Background);                  }                  else                  {                      joystick.SetCooperativeLevel(handle' CooperativeLevel.Nonexclusive | CooperativeLevel.Background);                  }                  joystick.Properties.BufferSize = 128;                  joystick.Acquire();                    devices[spot] = new ControllerDevice(joystick' spot + 1);                  if (IsActive)                  {                      processingData[spot] = new ContData();                      Console.WriteLine("Plug " + spot);                      Plugin(spot + 1);                      int t = spot;                      workers[spot] = new Thread(() =>                      { ProcessData(t); });                      workers[spot].Start();                  }              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Stop,The following statement contains a magic number: if (running)              {                  running = false;                  for (int i = 0; i < 4; i++)                  {                      if (devices[i] != null && devices[i].enabled)                      {                          Console.WriteLine(i);                          workers[i].Abort();                          workers[i] = null;                          Unplug(i + 1);                      }                  }                }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                  Byte[] Buffer = new Byte[16];                    Buffer[0] = 0x10;                  Buffer[1] = 0x00;                  Buffer[2] = 0x00;                  Buffer[3] = 0x00;                    Buffer[4] = (Byte)((Serial >> 0) & 0xFF);                  Buffer[5] = (Byte)((Serial >> 8) & 0xFF);                  Buffer[6] = (Byte)((Serial >> 16) & 0xFF);                  Buffer[7] = (Byte)((Serial >> 24) & 0xFF);                    return DeviceIoControl(m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Report,The following statement contains a magic number: if (IsActive)              {                  Int32 Transfered = 0;                      bool result = DeviceIoControl(m_FileHandle' 0x2A400C' Input' Input.Length' Output' Output.Length' ref Transfered' IntPtr.Zero) && Transfered > 0;                  int deviceInd = Input[4] - 1;                  return result;                }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: for (Int32 Index = 0; Index < 28; Index++) Output[Index] = 0x00;
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output[4] = (Byte)(Input[0] + 1);
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output[9] = 0x14;
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active              {                    UInt32 Buttons = (UInt32)((Input[10] << 0) | (Input[11] << 8) | (Input[12] << 16) | (Input[13] << 24));                    if ((Buttons & (0x1 << 0)) > 0) Output[10] |= (Byte)(1 << 5); // Back                  if ((Buttons & (0x1 << 1)) > 0) Output[10] |= (Byte)(1 << 6); // Left  Thumb                  if ((Buttons & (0x1 << 2)) > 0) Output[10] |= (Byte)(1 << 7); // Right Thumb                  if ((Buttons & (0x1 << 3)) > 0) Output[10] |= (Byte)(1 << 4); // Start                    if ((Buttons & (0x1 << 4)) > 0) Output[10] |= (Byte)(1 << 0); // Up                  if ((Buttons & (0x1 << 5)) > 0) Output[10] |= (Byte)(1 << 3); // Down                  if ((Buttons & (0x1 << 6)) > 0) Output[10] |= (Byte)(1 << 1); // Right                  if ((Buttons & (0x1 << 7)) > 0) Output[10] |= (Byte)(1 << 2); // Left                    if ((Buttons & (0x1 << 10)) > 0) Output[11] |= (Byte)(1 << 0); // Left  Shoulder                  if ((Buttons & (0x1 << 11)) > 0) Output[11] |= (Byte)(1 << 1); // Right Shoulder                    if ((Buttons & (0x1 << 12)) > 0) Output[11] |= (Byte)(1 << 7); // Y                  if ((Buttons & (0x1 << 13)) > 0) Output[11] |= (Byte)(1 << 5); // B                  if ((Buttons & (0x1 << 14)) > 0) Output[11] |= (Byte)(1 << 4); // A                  if ((Buttons & (0x1 << 15)) > 0) Output[11] |= (Byte)(1 << 6); // X                    if ((Buttons & (0x1 << 16)) > 16) Output[11] |= (Byte)(1 << 2); // Guide                         Output[12] = Input[26]; // Left Trigger                  Output[13] = Input[27]; // Right Trigger                    Int32 ThumbLX = Scale(Input[14]' false);                  Int32 ThumbLY = -Scale(Input[15]' false);                  Int32 ThumbRX = Scale(Input[16]' false);                  Int32 ThumbRY = -Scale(Input[17]' false);                    Output[14] = (Byte)((ThumbLX >> 0) & 0xFF); // LX                  Output[15] = (Byte)((ThumbLX >> 8) & 0xFF);                    Output[16] = (Byte)((ThumbLY >> 0) & 0xFF); // LY                  Output[17] = (Byte)((ThumbLY >> 8) & 0xFF);                    Output[18] = (Byte)((ThumbRX >> 0) & 0xFF); // RX                  Output[19] = (Byte)((ThumbRX >> 8) & 0xFF);                    Output[20] = (Byte)((ThumbRY >> 0) & 0xFF); // RY                  Output[21] = (Byte)((ThumbRY >> 8) & 0xFF);              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox>()) {                  //Tag structure: [Type' Number' Index]                  m.Items[0] = getBindingText(ind); //Change combobox text according to saved binding                  m.addOption("Disabled"'                      tag: new byte[] { 255' 0' (byte)ind });                  m.addOption("Detect"'                      tag: new byte[] { 254' 0' (byte)ind });                  ToolStripMenuItem axes = m.addMenu("Axes");                  ToolStripMenuItem buttons = m.addMenu("Buttons");                  ToolStripMenuItem dpads = m.addMenu("D-Pads");                  ToolStripMenuItem iaxes = m.addMenu("Inverted Axes"' axes);                  ToolStripMenuItem haxes = m.addMenu("Half Axes"' axes);                  ToolStripMenuItem ihaxes = m.addMenu("Inverted Half Axes"' axes);                  for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++)                  {                      m.addOption("Button " + i.ToString()' buttons'                          new byte[] { 0' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++)                  {                      m.addOption("D-Pad " + i.ToString() + " Up"' dpads'                          new byte[] { 32' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Down"' dpads'                          new byte[] { 33' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Left"' dpads'                          new byte[] { 34' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Right"' dpads'                          new byte[] { 35' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++)                  {                      m.addOption("Axis " + i.ToString()' axes'                          new byte[] { 16' (byte)(i - 1)' (byte)ind });                      m.addOption("IAxis " + i.ToString()' iaxes'                          new byte[] { 17' (byte)(i - 1)' (byte)ind });                      m.addOption("HAxis" + i.ToString()' haxes'                          new byte[] { 18' (byte)(i - 1)' (byte)ind });                      m.addOption("IHAxis" + i.ToString()' ihaxes'                          new byte[] { 19' (byte)(i - 1)' (byte)ind });                  }                  m.SelectionChangeCommitted += new System.EventHandler(SelectionChanged);                  ind++;              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox>()) {                  //Tag structure: [Type' Number' Index]                  m.Items[0] = getBindingText(ind); //Change combobox text according to saved binding                  m.addOption("Disabled"'                      tag: new byte[] { 255' 0' (byte)ind });                  m.addOption("Detect"'                      tag: new byte[] { 254' 0' (byte)ind });                  ToolStripMenuItem axes = m.addMenu("Axes");                  ToolStripMenuItem buttons = m.addMenu("Buttons");                  ToolStripMenuItem dpads = m.addMenu("D-Pads");                  ToolStripMenuItem iaxes = m.addMenu("Inverted Axes"' axes);                  ToolStripMenuItem haxes = m.addMenu("Half Axes"' axes);                  ToolStripMenuItem ihaxes = m.addMenu("Inverted Half Axes"' axes);                  for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++)                  {                      m.addOption("Button " + i.ToString()' buttons'                          new byte[] { 0' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++)                  {                      m.addOption("D-Pad " + i.ToString() + " Up"' dpads'                          new byte[] { 32' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Down"' dpads'                          new byte[] { 33' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Left"' dpads'                          new byte[] { 34' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Right"' dpads'                          new byte[] { 35' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++)                  {                      m.addOption("Axis " + i.ToString()' axes'                          new byte[] { 16' (byte)(i - 1)' (byte)ind });                      m.addOption("IAxis " + i.ToString()' iaxes'                          new byte[] { 17' (byte)(i - 1)' (byte)ind });                      m.addOption("HAxis" + i.ToString()' haxes'                          new byte[] { 18' (byte)(i - 1)' (byte)ind });                      m.addOption("IHAxis" + i.ToString()' ihaxes'                          new byte[] { 19' (byte)(i - 1)' (byte)ind });                  }                  m.SelectionChangeCommitted += new System.EventHandler(SelectionChanged);                  ind++;              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox>()) {                  //Tag structure: [Type' Number' Index]                  m.Items[0] = getBindingText(ind); //Change combobox text according to saved binding                  m.addOption("Disabled"'                      tag: new byte[] { 255' 0' (byte)ind });                  m.addOption("Detect"'                      tag: new byte[] { 254' 0' (byte)ind });                  ToolStripMenuItem axes = m.addMenu("Axes");                  ToolStripMenuItem buttons = m.addMenu("Buttons");                  ToolStripMenuItem dpads = m.addMenu("D-Pads");                  ToolStripMenuItem iaxes = m.addMenu("Inverted Axes"' axes);                  ToolStripMenuItem haxes = m.addMenu("Half Axes"' axes);                  ToolStripMenuItem ihaxes = m.addMenu("Inverted Half Axes"' axes);                  for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++)                  {                      m.addOption("Button " + i.ToString()' buttons'                          new byte[] { 0' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++)                  {                      m.addOption("D-Pad " + i.ToString() + " Up"' dpads'                          new byte[] { 32' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Down"' dpads'                          new byte[] { 33' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Left"' dpads'                          new byte[] { 34' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Right"' dpads'                          new byte[] { 35' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++)                  {                      m.addOption("Axis " + i.ToString()' axes'                          new byte[] { 16' (byte)(i - 1)' (byte)ind });                      m.addOption("IAxis " + i.ToString()' iaxes'                          new byte[] { 17' (byte)(i - 1)' (byte)ind });                      m.addOption("HAxis" + i.ToString()' haxes'                          new byte[] { 18' (byte)(i - 1)' (byte)ind });                      m.addOption("IHAxis" + i.ToString()' ihaxes'                          new byte[] { 19' (byte)(i - 1)' (byte)ind });                  }                  m.SelectionChangeCommitted += new System.EventHandler(SelectionChanged);                  ind++;              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox>()) {                  //Tag structure: [Type' Number' Index]                  m.Items[0] = getBindingText(ind); //Change combobox text according to saved binding                  m.addOption("Disabled"'                      tag: new byte[] { 255' 0' (byte)ind });                  m.addOption("Detect"'                      tag: new byte[] { 254' 0' (byte)ind });                  ToolStripMenuItem axes = m.addMenu("Axes");                  ToolStripMenuItem buttons = m.addMenu("Buttons");                  ToolStripMenuItem dpads = m.addMenu("D-Pads");                  ToolStripMenuItem iaxes = m.addMenu("Inverted Axes"' axes);                  ToolStripMenuItem haxes = m.addMenu("Half Axes"' axes);                  ToolStripMenuItem ihaxes = m.addMenu("Inverted Half Axes"' axes);                  for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++)                  {                      m.addOption("Button " + i.ToString()' buttons'                          new byte[] { 0' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++)                  {                      m.addOption("D-Pad " + i.ToString() + " Up"' dpads'                          new byte[] { 32' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Down"' dpads'                          new byte[] { 33' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Left"' dpads'                          new byte[] { 34' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Right"' dpads'                          new byte[] { 35' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++)                  {                      m.addOption("Axis " + i.ToString()' axes'                          new byte[] { 16' (byte)(i - 1)' (byte)ind });                      m.addOption("IAxis " + i.ToString()' iaxes'                          new byte[] { 17' (byte)(i - 1)' (byte)ind });                      m.addOption("HAxis" + i.ToString()' haxes'                          new byte[] { 18' (byte)(i - 1)' (byte)ind });                      m.addOption("IHAxis" + i.ToString()' ihaxes'                          new byte[] { 19' (byte)(i - 1)' (byte)ind });                  }                  m.SelectionChangeCommitted += new System.EventHandler(SelectionChanged);                  ind++;              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox>()) {                  //Tag structure: [Type' Number' Index]                  m.Items[0] = getBindingText(ind); //Change combobox text according to saved binding                  m.addOption("Disabled"'                      tag: new byte[] { 255' 0' (byte)ind });                  m.addOption("Detect"'                      tag: new byte[] { 254' 0' (byte)ind });                  ToolStripMenuItem axes = m.addMenu("Axes");                  ToolStripMenuItem buttons = m.addMenu("Buttons");                  ToolStripMenuItem dpads = m.addMenu("D-Pads");                  ToolStripMenuItem iaxes = m.addMenu("Inverted Axes"' axes);                  ToolStripMenuItem haxes = m.addMenu("Half Axes"' axes);                  ToolStripMenuItem ihaxes = m.addMenu("Inverted Half Axes"' axes);                  for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++)                  {                      m.addOption("Button " + i.ToString()' buttons'                          new byte[] { 0' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++)                  {                      m.addOption("D-Pad " + i.ToString() + " Up"' dpads'                          new byte[] { 32' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Down"' dpads'                          new byte[] { 33' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Left"' dpads'                          new byte[] { 34' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Right"' dpads'                          new byte[] { 35' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++)                  {                      m.addOption("Axis " + i.ToString()' axes'                          new byte[] { 16' (byte)(i - 1)' (byte)ind });                      m.addOption("IAxis " + i.ToString()' iaxes'                          new byte[] { 17' (byte)(i - 1)' (byte)ind });                      m.addOption("HAxis" + i.ToString()' haxes'                          new byte[] { 18' (byte)(i - 1)' (byte)ind });                      m.addOption("IHAxis" + i.ToString()' ihaxes'                          new byte[] { 19' (byte)(i - 1)' (byte)ind });                  }                  m.SelectionChangeCommitted += new System.EventHandler(SelectionChanged);                  ind++;              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox>()) {                  //Tag structure: [Type' Number' Index]                  m.Items[0] = getBindingText(ind); //Change combobox text according to saved binding                  m.addOption("Disabled"'                      tag: new byte[] { 255' 0' (byte)ind });                  m.addOption("Detect"'                      tag: new byte[] { 254' 0' (byte)ind });                  ToolStripMenuItem axes = m.addMenu("Axes");                  ToolStripMenuItem buttons = m.addMenu("Buttons");                  ToolStripMenuItem dpads = m.addMenu("D-Pads");                  ToolStripMenuItem iaxes = m.addMenu("Inverted Axes"' axes);                  ToolStripMenuItem haxes = m.addMenu("Half Axes"' axes);                  ToolStripMenuItem ihaxes = m.addMenu("Inverted Half Axes"' axes);                  for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++)                  {                      m.addOption("Button " + i.ToString()' buttons'                          new byte[] { 0' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++)                  {                      m.addOption("D-Pad " + i.ToString() + " Up"' dpads'                          new byte[] { 32' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Down"' dpads'                          new byte[] { 33' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Left"' dpads'                          new byte[] { 34' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Right"' dpads'                          new byte[] { 35' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++)                  {                      m.addOption("Axis " + i.ToString()' axes'                          new byte[] { 16' (byte)(i - 1)' (byte)ind });                      m.addOption("IAxis " + i.ToString()' iaxes'                          new byte[] { 17' (byte)(i - 1)' (byte)ind });                      m.addOption("HAxis" + i.ToString()' haxes'                          new byte[] { 18' (byte)(i - 1)' (byte)ind });                      m.addOption("IHAxis" + i.ToString()' ihaxes'                          new byte[] { 19' (byte)(i - 1)' (byte)ind });                  }                  m.SelectionChangeCommitted += new System.EventHandler(SelectionChanged);                  ind++;              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox>()) {                  //Tag structure: [Type' Number' Index]                  m.Items[0] = getBindingText(ind); //Change combobox text according to saved binding                  m.addOption("Disabled"'                      tag: new byte[] { 255' 0' (byte)ind });                  m.addOption("Detect"'                      tag: new byte[] { 254' 0' (byte)ind });                  ToolStripMenuItem axes = m.addMenu("Axes");                  ToolStripMenuItem buttons = m.addMenu("Buttons");                  ToolStripMenuItem dpads = m.addMenu("D-Pads");                  ToolStripMenuItem iaxes = m.addMenu("Inverted Axes"' axes);                  ToolStripMenuItem haxes = m.addMenu("Half Axes"' axes);                  ToolStripMenuItem ihaxes = m.addMenu("Inverted Half Axes"' axes);                  for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++)                  {                      m.addOption("Button " + i.ToString()' buttons'                          new byte[] { 0' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++)                  {                      m.addOption("D-Pad " + i.ToString() + " Up"' dpads'                          new byte[] { 32' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Down"' dpads'                          new byte[] { 33' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Left"' dpads'                          new byte[] { 34' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Right"' dpads'                          new byte[] { 35' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++)                  {                      m.addOption("Axis " + i.ToString()' axes'                          new byte[] { 16' (byte)(i - 1)' (byte)ind });                      m.addOption("IAxis " + i.ToString()' iaxes'                          new byte[] { 17' (byte)(i - 1)' (byte)ind });                      m.addOption("HAxis" + i.ToString()' haxes'                          new byte[] { 18' (byte)(i - 1)' (byte)ind });                      m.addOption("IHAxis" + i.ToString()' ihaxes'                          new byte[] { 19' (byte)(i - 1)' (byte)ind });                  }                  m.SelectionChangeCommitted += new System.EventHandler(SelectionChanged);                  ind++;              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox>()) {                  //Tag structure: [Type' Number' Index]                  m.Items[0] = getBindingText(ind); //Change combobox text according to saved binding                  m.addOption("Disabled"'                      tag: new byte[] { 255' 0' (byte)ind });                  m.addOption("Detect"'                      tag: new byte[] { 254' 0' (byte)ind });                  ToolStripMenuItem axes = m.addMenu("Axes");                  ToolStripMenuItem buttons = m.addMenu("Buttons");                  ToolStripMenuItem dpads = m.addMenu("D-Pads");                  ToolStripMenuItem iaxes = m.addMenu("Inverted Axes"' axes);                  ToolStripMenuItem haxes = m.addMenu("Half Axes"' axes);                  ToolStripMenuItem ihaxes = m.addMenu("Inverted Half Axes"' axes);                  for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++)                  {                      m.addOption("Button " + i.ToString()' buttons'                          new byte[] { 0' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++)                  {                      m.addOption("D-Pad " + i.ToString() + " Up"' dpads'                          new byte[] { 32' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Down"' dpads'                          new byte[] { 33' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Left"' dpads'                          new byte[] { 34' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Right"' dpads'                          new byte[] { 35' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++)                  {                      m.addOption("Axis " + i.ToString()' axes'                          new byte[] { 16' (byte)(i - 1)' (byte)ind });                      m.addOption("IAxis " + i.ToString()' iaxes'                          new byte[] { 17' (byte)(i - 1)' (byte)ind });                      m.addOption("HAxis" + i.ToString()' haxes'                          new byte[] { 18' (byte)(i - 1)' (byte)ind });                      m.addOption("IHAxis" + i.ToString()' ihaxes'                          new byte[] { 19' (byte)(i - 1)' (byte)ind });                  }                  m.SelectionChangeCommitted += new System.EventHandler(SelectionChanged);                  ind++;              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox>()) {                  //Tag structure: [Type' Number' Index]                  m.Items[0] = getBindingText(ind); //Change combobox text according to saved binding                  m.addOption("Disabled"'                      tag: new byte[] { 255' 0' (byte)ind });                  m.addOption("Detect"'                      tag: new byte[] { 254' 0' (byte)ind });                  ToolStripMenuItem axes = m.addMenu("Axes");                  ToolStripMenuItem buttons = m.addMenu("Buttons");                  ToolStripMenuItem dpads = m.addMenu("D-Pads");                  ToolStripMenuItem iaxes = m.addMenu("Inverted Axes"' axes);                  ToolStripMenuItem haxes = m.addMenu("Half Axes"' axes);                  ToolStripMenuItem ihaxes = m.addMenu("Inverted Half Axes"' axes);                  for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++)                  {                      m.addOption("Button " + i.ToString()' buttons'                          new byte[] { 0' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++)                  {                      m.addOption("D-Pad " + i.ToString() + " Up"' dpads'                          new byte[] { 32' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Down"' dpads'                          new byte[] { 33' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Left"' dpads'                          new byte[] { 34' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Right"' dpads'                          new byte[] { 35' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++)                  {                      m.addOption("Axis " + i.ToString()' axes'                          new byte[] { 16' (byte)(i - 1)' (byte)ind });                      m.addOption("IAxis " + i.ToString()' iaxes'                          new byte[] { 17' (byte)(i - 1)' (byte)ind });                      m.addOption("HAxis" + i.ToString()' haxes'                          new byte[] { 18' (byte)(i - 1)' (byte)ind });                      m.addOption("IHAxis" + i.ToString()' ihaxes'                          new byte[] { 19' (byte)(i - 1)' (byte)ind });                  }                  m.SelectionChangeCommitted += new System.EventHandler(SelectionChanged);                  ind++;              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox>()) {                  //Tag structure: [Type' Number' Index]                  m.Items[0] = getBindingText(ind); //Change combobox text according to saved binding                  m.addOption("Disabled"'                      tag: new byte[] { 255' 0' (byte)ind });                  m.addOption("Detect"'                      tag: new byte[] { 254' 0' (byte)ind });                  ToolStripMenuItem axes = m.addMenu("Axes");                  ToolStripMenuItem buttons = m.addMenu("Buttons");                  ToolStripMenuItem dpads = m.addMenu("D-Pads");                  ToolStripMenuItem iaxes = m.addMenu("Inverted Axes"' axes);                  ToolStripMenuItem haxes = m.addMenu("Half Axes"' axes);                  ToolStripMenuItem ihaxes = m.addMenu("Inverted Half Axes"' axes);                  for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++)                  {                      m.addOption("Button " + i.ToString()' buttons'                          new byte[] { 0' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++)                  {                      m.addOption("D-Pad " + i.ToString() + " Up"' dpads'                          new byte[] { 32' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Down"' dpads'                          new byte[] { 33' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Left"' dpads'                          new byte[] { 34' (byte)(i - 1)' (byte)ind });                      m.addOption("D-Pad " + i.ToString() + " Right"' dpads'                          new byte[] { 35' (byte)(i - 1)' (byte)ind });                  }                  for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++)                  {                      m.addOption("Axis " + i.ToString()' axes'                          new byte[] { 16' (byte)(i - 1)' (byte)ind });                      m.addOption("IAxis " + i.ToString()' iaxes'                          new byte[] { 17' (byte)(i - 1)' (byte)ind });                      m.addOption("HAxis" + i.ToString()' haxes'                          new byte[] { 18' (byte)(i - 1)' (byte)ind });                      m.addOption("IHAxis" + i.ToString()' ihaxes'                          new byte[] { 19' (byte)(i - 1)' (byte)ind });                  }                  m.SelectionChangeCommitted += new System.EventHandler(SelectionChanged);                  ind++;              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,getBindingText,The following statement contains a magic number: if (dev.mapping[i * 2] == 255) {                  return "Disabled";              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,getBindingText,The following statement contains a magic number: if (dev.mapping[i * 2] == 255) {                  return "Disabled";              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,getBindingText,The following statement contains a magic number: byte subType = (byte)(dev.mapping[i * 2] & 0x0F);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,getBindingText,The following statement contains a magic number: byte type = (byte)((dev.mapping[i * 2] & 0xF0) >> 4);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,getBindingText,The following statement contains a magic number: byte type = (byte)((dev.mapping[i * 2] & 0xF0) >> 4);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,getBindingText,The following statement contains a magic number: byte num = (byte)(dev.mapping[(i * 2) + 1] + 1);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,SelectionChanged,The following statement contains a magic number: if (b[0] == 254) {                  //start thread                  return;              }
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,SelectionChanged,The following statement contains a magic number: dev.mapping[b[2] * 2] = b[0];
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,SelectionChanged,The following statement contains a magic number: dev.mapping[b[2] * 2] = b[0];
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,SelectionChanged,The following statement contains a magic number: dev.mapping[(b[2] * 2) + 1] = b[1];
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,SelectionChanged,The following statement contains a magic number: dev.mapping[(b[2] * 2) + 1] = b[1];
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelA.Location = new System.Drawing.Point(609' 290);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelA.Location = new System.Drawing.Point(609' 290);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelA.Size = new System.Drawing.Size(20' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelA.Size = new System.Drawing.Size(20' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelB.Location = new System.Drawing.Point(609' 340);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelB.Location = new System.Drawing.Point(609' 340);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelB.Size = new System.Drawing.Size(20' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelB.Size = new System.Drawing.Size(20' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelB.TabIndex = 7;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelX.Location = new System.Drawing.Point(609' 390);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelX.Location = new System.Drawing.Point(609' 390);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelX.Size = new System.Drawing.Size(20' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelX.Size = new System.Drawing.Size(20' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelX.TabIndex = 8;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelY.Location = new System.Drawing.Point(609' 440);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelY.Location = new System.Drawing.Point(609' 440);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelY.Size = new System.Drawing.Size(20' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelY.Size = new System.Drawing.Size(20' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelY.TabIndex = 9;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelUp.Location = new System.Drawing.Point(167' 290);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelUp.Location = new System.Drawing.Point(167' 290);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelUp.Size = new System.Drawing.Size(30' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelUp.Size = new System.Drawing.Size(30' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelUp.TabIndex = 14;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelDown.Location = new System.Drawing.Point(167' 340);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelDown.Location = new System.Drawing.Point(167' 340);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelDown.Size = new System.Drawing.Size(50' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelDown.Size = new System.Drawing.Size(50' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelDown.TabIndex = 15;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLeft.Location = new System.Drawing.Point(167' 390);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLeft.Location = new System.Drawing.Point(167' 390);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLeft.Size = new System.Drawing.Size(37' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLeft.Size = new System.Drawing.Size(37' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLeft.TabIndex = 16;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRight.Location = new System.Drawing.Point(167' 440);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRight.Location = new System.Drawing.Point(167' 440);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRight.Size = new System.Drawing.Size(47' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRight.Size = new System.Drawing.Size(47' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRight.TabIndex = 17;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRight.Location = new System.Drawing.Point(40' 440);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRight.Location = new System.Drawing.Point(40' 440);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRight.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRight.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRight.TabIndex = 13;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLeft.Location = new System.Drawing.Point(40' 390);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLeft.Location = new System.Drawing.Point(40' 390);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLeft.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLeft.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLeft.TabIndex = 12;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropDown.Location = new System.Drawing.Point(40' 340);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropDown.Location = new System.Drawing.Point(40' 340);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropDown.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropDown.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropDown.TabIndex = 11;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropUp.Location = new System.Drawing.Point(40' 290);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropUp.Location = new System.Drawing.Point(40' 290);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropUp.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropUp.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropUp.TabIndex = 10;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropY.Location = new System.Drawing.Point(482' 440);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropY.Location = new System.Drawing.Point(482' 440);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropY.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropY.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropY.TabIndex = 6;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropX.Location = new System.Drawing.Point(482' 390);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropX.Location = new System.Drawing.Point(482' 390);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropX.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropX.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropX.TabIndex = 5;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropB.Location = new System.Drawing.Point(482' 340);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropB.Location = new System.Drawing.Point(482' 340);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropB.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropB.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropB.TabIndex = 4;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropA.Location = new System.Drawing.Point(482' 290);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropA.Location = new System.Drawing.Point(482' 290);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropA.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropA.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropA.TabIndex = 3;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRT.Location = new System.Drawing.Point(482' 40);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRT.Location = new System.Drawing.Point(482' 40);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRT.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRT.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRT.TabIndex = 18;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLT.Location = new System.Drawing.Point(40' 40);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLT.Location = new System.Drawing.Point(40' 40);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLT.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLT.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLT.TabIndex = 19;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRB.Location = new System.Drawing.Point(482' 90);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRB.Location = new System.Drawing.Point(482' 90);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRB.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRB.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRB.TabIndex = 20;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLB.Location = new System.Drawing.Point(40' 90);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLB.Location = new System.Drawing.Point(40' 90);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLB.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLB.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLB.TabIndex = 21;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropBack.Location = new System.Drawing.Point(40' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropBack.Location = new System.Drawing.Point(40' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropBack.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropBack.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropBack.TabIndex = 22;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropStart.Location = new System.Drawing.Point(482' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropStart.Location = new System.Drawing.Point(482' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropStart.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropStart.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropStart.TabIndex = 23;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropHome.Location = new System.Drawing.Point(264' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropHome.Location = new System.Drawing.Point(264' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropHome.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropHome.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropHome.TabIndex = 24;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRT.Location = new System.Drawing.Point(609' 40);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRT.Location = new System.Drawing.Point(609' 40);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRT.Size = new System.Drawing.Size(100' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRT.Size = new System.Drawing.Size(100' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRT.TabIndex = 25;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLT.Location = new System.Drawing.Point(167' 40);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLT.Location = new System.Drawing.Point(167' 40);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLT.Size = new System.Drawing.Size(90' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLT.Size = new System.Drawing.Size(90' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLT.TabIndex = 26;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRB.Location = new System.Drawing.Point(609' 90);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRB.Location = new System.Drawing.Point(609' 90);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRB.Size = new System.Drawing.Size(107' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRB.Size = new System.Drawing.Size(107' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRB.TabIndex = 27;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLB.Location = new System.Drawing.Point(167' 90);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLB.Location = new System.Drawing.Point(167' 90);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLB.Size = new System.Drawing.Size(97' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLB.Size = new System.Drawing.Size(97' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLB.TabIndex = 28;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelBack.Location = new System.Drawing.Point(167' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelBack.Location = new System.Drawing.Point(167' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelBack.Size = new System.Drawing.Size(45' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelBack.Size = new System.Drawing.Size(45' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelBack.TabIndex = 29;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelStart.Location = new System.Drawing.Point(609' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelStart.Location = new System.Drawing.Point(609' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelStart.Size = new System.Drawing.Size(44' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelStart.Size = new System.Drawing.Size(44' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelStart.TabIndex = 30;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelHome.Location = new System.Drawing.Point(391' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelHome.Location = new System.Drawing.Point(391' 490);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelHome.Size = new System.Drawing.Size(52' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelHome.Size = new System.Drawing.Size(52' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelHome.TabIndex = 31;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRA.Location = new System.Drawing.Point(482' 140);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRA.Location = new System.Drawing.Point(482' 140);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRA.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRA.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRA.TabIndex = 32;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLA.Location = new System.Drawing.Point(40' 140);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLA.Location = new System.Drawing.Point(40' 140);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLA.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLA.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLA.TabIndex = 33;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRX.Location = new System.Drawing.Point(482' 190);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRX.Location = new System.Drawing.Point(482' 190);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRX.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRX.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRX.TabIndex = 34;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRY.Location = new System.Drawing.Point(482' 240);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRY.Location = new System.Drawing.Point(482' 240);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRY.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRY.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropRY.TabIndex = 35;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLX.Location = new System.Drawing.Point(40' 190);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLX.Location = new System.Drawing.Point(40' 190);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLX.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLX.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLX.TabIndex = 36;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLY.Location = new System.Drawing.Point(40' 240);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLY.Location = new System.Drawing.Point(40' 240);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLY.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLY.Size = new System.Drawing.Size(121' 21);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.dropLY.TabIndex = 37;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRA.Location = new System.Drawing.Point(609' 140);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRA.Location = new System.Drawing.Point(609' 140);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRA.Size = new System.Drawing.Size(153' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRA.Size = new System.Drawing.Size(153' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRA.TabIndex = 38;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLA.Location = new System.Drawing.Point(167' 140);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLA.Location = new System.Drawing.Point(167' 140);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLA.Size = new System.Drawing.Size(143' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLA.Size = new System.Drawing.Size(143' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLA.TabIndex = 39;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLX.Location = new System.Drawing.Point(167' 190);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLX.Location = new System.Drawing.Point(167' 190);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLX.Size = new System.Drawing.Size(106' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLX.Size = new System.Drawing.Size(106' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLX.TabIndex = 40;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRX.Location = new System.Drawing.Point(609' 190);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRX.Location = new System.Drawing.Point(609' 190);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRX.Size = new System.Drawing.Size(116' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRX.Size = new System.Drawing.Size(116' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRX.TabIndex = 41;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLY.Location = new System.Drawing.Point(167' 240);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLY.Location = new System.Drawing.Point(167' 240);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLY.Size = new System.Drawing.Size(106' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLY.Size = new System.Drawing.Size(106' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelLY.TabIndex = 42;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRY.Location = new System.Drawing.Point(609' 240);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRY.Location = new System.Drawing.Point(609' 240);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRY.Size = new System.Drawing.Size(116' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRY.Size = new System.Drawing.Size(116' 20);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.labelRY.TabIndex = 43;
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(814' 561);
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(814' 561);
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: byte type = 255' subType = 255' num = 255;
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: byte type = 255' subType = 255' num = 255;
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: byte type = 255' subType = 255' num = 255;
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: for (i = 0; i < 21; i++) { //find which button this is for                  if (line.StartsWith(properties[i])) {                      break;                  }                  if (i == 20) {                      Logger.Log("Error parsing: Could not identify property");                      return new byte[] { 255' 255' 255};                  }              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: for (i = 0; i < 21; i++) { //find which button this is for                  if (line.StartsWith(properties[i])) {                      break;                  }                  if (i == 20) {                      Logger.Log("Error parsing: Could not identify property");                      return new byte[] { 255' 255' 255};                  }              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: for (i = 0; i < 21; i++) { //find which button this is for                  if (line.StartsWith(properties[i])) {                      break;                  }                  if (i == 20) {                      Logger.Log("Error parsing: Could not identify property");                      return new byte[] { 255' 255' 255};                  }              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: for (i = 0; i < 21; i++) { //find which button this is for                  if (line.StartsWith(properties[i])) {                      break;                  }                  if (i == 20) {                      Logger.Log("Error parsing: Could not identify property");                      return new byte[] { 255' 255' 255};                  }              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: for (i = 0; i < 21; i++) { //find which button this is for                  if (line.StartsWith(properties[i])) {                      break;                  }                  if (i == 20) {                      Logger.Log("Error parsing: Could not identify property");                      return new byte[] { 255' 255' 255};                  }              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (properties[i].Length + 1 > line.Length) {                  Logger.Log("Error parsing: No assignment");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (properties[i].Length + 1 > line.Length) {                  Logger.Log("Error parsing: No assignment");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (properties[i].Length + 1 > line.Length) {                  Logger.Log("Error parsing: No assignment");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith("btn")) {                  type = 0;                  subType = 0;                  num = byte.Parse(val.Remove(0' 3));              } else if (val.Contains("axis")) {                  type = 1;                  if (val.StartsWith("ih")) {                      num = byte.Parse(val.Remove(0' 6));                      subType = 3;                  } else if (val.StartsWith("h")) {                      subType = 2;                      num = byte.Parse(val.Remove(0' 5));                  } else if (val.StartsWith("i")) {                      subType = 1;                      num = byte.Parse(val.Remove(0' 5));                  } else {                      subType = 0;                      num = byte.Parse(val.Remove(0' 4));                  }              } else if (val.StartsWith("dpad")) {                  type = 2;                  val = val.Remove(0' 4);                  if (val.EndsWith("up")) {                      subType = 0;                      num = byte.Parse(val.Remove(val.Length - 2));                  } else if (val.EndsWith("down")) {                      subType = 1;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("left")) {                      subType = 2;                      num = byte.Parse(val.Remove(val.Length - 4));                  } else if (val.EndsWith("right")) {                      subType = 3;                      num = byte.Parse(val.Remove(val.Length - 5));                  }              } else if (val == "disabled") {              } else {                  Logger.Log("Error parsing: Could not identify value");                  return new byte[] { 255' 255' 255 };              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: byte l = (byte)(type << 4 | subType);
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: return new byte[] { (byte)(i * 2)' l' num};
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,Load,The following statement contains a magic number: byte[] mapping = new byte[42];
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,Load,The following statement contains a magic number: for (int i = 0; i < config.Length; i++) {                  byte[] data = parseLine(config[i]);                  Console.Write(data[0]);                  if (data[0] > 40) {                      continue;                  }                  mapping[data[0]] = data[1];                  mapping[data[0] + 1] = data[2];              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,Load,The following statement contains a magic number: for (int i = 0; i < config.Length; i++) {                  byte[] data = parseLine(config[i]);                  Console.Write(data[0]);                  if (data[0] > 40) {                      continue;                  }                  mapping[data[0]] = data[1];                  mapping[data[0] + 1] = data[2];              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {                  saveString += properties[i] + "=";                  if (Mapping[i * 2] == 255) {                      saveString += "disabled\r\n";                      continue;                  }                  byte subType = (byte)(Mapping[i * 2] & 0x0F);                  byte type = (byte)((Mapping[i * 2] & 0xF0) >> 4);                  byte num = (byte)(Mapping[i * 2 + 1] + 1);                  saveString += string.Format(typeString[type]' num' axesString[subType]' dpadString[subType]) + "\r\n";              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {                  saveString += properties[i] + "=";                  if (Mapping[i * 2] == 255) {                      saveString += "disabled\r\n";                      continue;                  }                  byte subType = (byte)(Mapping[i * 2] & 0x0F);                  byte type = (byte)((Mapping[i * 2] & 0xF0) >> 4);                  byte num = (byte)(Mapping[i * 2 + 1] + 1);                  saveString += string.Format(typeString[type]' num' axesString[subType]' dpadString[subType]) + "\r\n";              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {                  saveString += properties[i] + "=";                  if (Mapping[i * 2] == 255) {                      saveString += "disabled\r\n";                      continue;                  }                  byte subType = (byte)(Mapping[i * 2] & 0x0F);                  byte type = (byte)((Mapping[i * 2] & 0xF0) >> 4);                  byte num = (byte)(Mapping[i * 2 + 1] + 1);                  saveString += string.Format(typeString[type]' num' axesString[subType]' dpadString[subType]) + "\r\n";              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {                  saveString += properties[i] + "=";                  if (Mapping[i * 2] == 255) {                      saveString += "disabled\r\n";                      continue;                  }                  byte subType = (byte)(Mapping[i * 2] & 0x0F);                  byte type = (byte)((Mapping[i * 2] & 0xF0) >> 4);                  byte num = (byte)(Mapping[i * 2 + 1] + 1);                  saveString += string.Format(typeString[type]' num' axesString[subType]' dpadString[subType]) + "\r\n";              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {                  saveString += properties[i] + "=";                  if (Mapping[i * 2] == 255) {                      saveString += "disabled\r\n";                      continue;                  }                  byte subType = (byte)(Mapping[i * 2] & 0x0F);                  byte type = (byte)((Mapping[i * 2] & 0xF0) >> 4);                  byte num = (byte)(Mapping[i * 2 + 1] + 1);                  saveString += string.Format(typeString[type]' num' axesString[subType]' dpadString[subType]) + "\r\n";              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {                  saveString += properties[i] + "=";                  if (Mapping[i * 2] == 255) {                      saveString += "disabled\r\n";                      continue;                  }                  byte subType = (byte)(Mapping[i * 2] & 0x0F);                  byte type = (byte)((Mapping[i * 2] & 0xF0) >> 4);                  byte num = (byte)(Mapping[i * 2 + 1] + 1);                  saveString += string.Format(typeString[type]' num' axesString[subType]' dpadString[subType]) + "\r\n";              }
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {                  saveString += properties[i] + "=";                  if (Mapping[i * 2] == 255) {                      saveString += "disabled\r\n";                      continue;                  }                  byte subType = (byte)(Mapping[i * 2] & 0x0F);                  byte type = (byte)((Mapping[i * 2] & 0xF0) >> 4);                  byte num = (byte)(Mapping[i * 2 + 1] + 1);                  saveString += string.Format(typeString[type]' num' axesString[subType]' dpadString[subType]) + "\r\n";              }
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try              {                  SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA()' da = new SP_DEVICE_INTERFACE_DATA();                  Int32 bufferSize = 0' memberIndex = 0;                    deviceInfoSet = SetupDiGetClassDevs(ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);                    DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf(DeviceInterfaceData);                    while (SetupDiEnumDeviceInterfaces(deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData))                  {                      SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);                      {                          detailDataBuffer = Marshal.AllocHGlobal(bufferSize);                            Marshal.WriteInt32(detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);                            if (SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da))                          {                              IntPtr pDevicePathName = new IntPtr(IntPtr.Size == 4 ? detailDataBuffer.ToInt32() + 4 : detailDataBuffer.ToInt64() + 4);                                Path = Marshal.PtrToStringAuto(pDevicePathName).ToUpper();                              Marshal.FreeHGlobal(detailDataBuffer);                                if (memberIndex == Instance) return true;                          }                          else Marshal.FreeHGlobal(detailDataBuffer);                      }                        memberIndex++;                  }              }              catch (Exception ex)              {                  Console.WriteLine("{0} {1}"' ex.HelpLink' ex.Message);                  throw;              }              finally              {                  if (deviceInfoSet != IntPtr.Zero)                  {                      SetupDiDestroyDeviceInfoList(deviceInfoSet);                  }              }
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try              {                  SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA()' da = new SP_DEVICE_INTERFACE_DATA();                  Int32 bufferSize = 0' memberIndex = 0;                    deviceInfoSet = SetupDiGetClassDevs(ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);                    DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf(DeviceInterfaceData);                    while (SetupDiEnumDeviceInterfaces(deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData))                  {                      SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);                      {                          detailDataBuffer = Marshal.AllocHGlobal(bufferSize);                            Marshal.WriteInt32(detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);                            if (SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da))                          {                              IntPtr pDevicePathName = new IntPtr(IntPtr.Size == 4 ? detailDataBuffer.ToInt32() + 4 : detailDataBuffer.ToInt64() + 4);                                Path = Marshal.PtrToStringAuto(pDevicePathName).ToUpper();                              Marshal.FreeHGlobal(detailDataBuffer);                                if (memberIndex == Instance) return true;                          }                          else Marshal.FreeHGlobal(detailDataBuffer);                      }                        memberIndex++;                  }              }              catch (Exception ex)              {                  Console.WriteLine("{0} {1}"' ex.HelpLink' ex.Message);                  throw;              }              finally              {                  if (deviceInfoSet != IntPtr.Zero)                  {                      SetupDiDestroyDeviceInfoList(deviceInfoSet);                  }              }
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try              {                  SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA()' da = new SP_DEVICE_INTERFACE_DATA();                  Int32 bufferSize = 0' memberIndex = 0;                    deviceInfoSet = SetupDiGetClassDevs(ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);                    DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf(DeviceInterfaceData);                    while (SetupDiEnumDeviceInterfaces(deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData))                  {                      SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);                      {                          detailDataBuffer = Marshal.AllocHGlobal(bufferSize);                            Marshal.WriteInt32(detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);                            if (SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da))                          {                              IntPtr pDevicePathName = new IntPtr(IntPtr.Size == 4 ? detailDataBuffer.ToInt32() + 4 : detailDataBuffer.ToInt64() + 4);                                Path = Marshal.PtrToStringAuto(pDevicePathName).ToUpper();                              Marshal.FreeHGlobal(detailDataBuffer);                                if (memberIndex == Instance) return true;                          }                          else Marshal.FreeHGlobal(detailDataBuffer);                      }                        memberIndex++;                  }              }              catch (Exception ex)              {                  Console.WriteLine("{0} {1}"' ex.HelpLink' ex.Message);                  throw;              }              finally              {                  if (deviceInfoSet != IntPtr.Zero)                  {                      SetupDiDestroyDeviceInfoList(deviceInfoSet);                  }              }
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try              {                  SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA()' da = new SP_DEVICE_INTERFACE_DATA();                  Int32 bufferSize = 0' memberIndex = 0;                    deviceInfoSet = SetupDiGetClassDevs(ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);                    DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf(DeviceInterfaceData);                    while (SetupDiEnumDeviceInterfaces(deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData))                  {                      SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);                      {                          detailDataBuffer = Marshal.AllocHGlobal(bufferSize);                            Marshal.WriteInt32(detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);                            if (SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da))                          {                              IntPtr pDevicePathName = new IntPtr(IntPtr.Size == 4 ? detailDataBuffer.ToInt32() + 4 : detailDataBuffer.ToInt64() + 4);                                Path = Marshal.PtrToStringAuto(pDevicePathName).ToUpper();                              Marshal.FreeHGlobal(detailDataBuffer);                                if (memberIndex == Instance) return true;                          }                          else Marshal.FreeHGlobal(detailDataBuffer);                      }                        memberIndex++;                  }              }              catch (Exception ex)              {                  Console.WriteLine("{0} {1}"' ex.HelpLink' ex.Message);                  throw;              }              finally              {                  if (deviceInfoSet != IntPtr.Zero)                  {                      SetupDiDestroyDeviceInfoList(deviceInfoSet);                  }              }
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try              {                  SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA()' da = new SP_DEVICE_INTERFACE_DATA();                  Int32 bufferSize = 0' memberIndex = 0;                    deviceInfoSet = SetupDiGetClassDevs(ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);                    DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf(DeviceInterfaceData);                    while (SetupDiEnumDeviceInterfaces(deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData))                  {                      SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);                      {                          detailDataBuffer = Marshal.AllocHGlobal(bufferSize);                            Marshal.WriteInt32(detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);                            if (SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da))                          {                              IntPtr pDevicePathName = new IntPtr(IntPtr.Size == 4 ? detailDataBuffer.ToInt32() + 4 : detailDataBuffer.ToInt64() + 4);                                Path = Marshal.PtrToStringAuto(pDevicePathName).ToUpper();                              Marshal.FreeHGlobal(detailDataBuffer);                                if (memberIndex == Instance) return true;                          }                          else Marshal.FreeHGlobal(detailDataBuffer);                      }                        memberIndex++;                  }              }              catch (Exception ex)              {                  Console.WriteLine("{0} {1}"' ex.HelpLink' ex.Message);                  throw;              }              finally              {                  if (deviceInfoSet != IntPtr.Zero)                  {                      SetupDiDestroyDeviceInfoList(deviceInfoSet);                  }              }
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try              {                  SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA()' da = new SP_DEVICE_INTERFACE_DATA();                  Int32 bufferSize = 0' memberIndex = 0;                    deviceInfoSet = SetupDiGetClassDevs(ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);                    DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf(DeviceInterfaceData);                    while (SetupDiEnumDeviceInterfaces(deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData))                  {                      SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);                      {                          detailDataBuffer = Marshal.AllocHGlobal(bufferSize);                            Marshal.WriteInt32(detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);                            if (SetupDiGetDeviceInterfaceDetail(deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da))                          {                              IntPtr pDevicePathName = new IntPtr(IntPtr.Size == 4 ? detailDataBuffer.ToInt32() + 4 : detailDataBuffer.ToInt64() + 4);                                Path = Marshal.PtrToStringAuto(pDevicePathName).ToUpper();                              Marshal.FreeHGlobal(detailDataBuffer);                                if (memberIndex == Instance) return true;                          }                          else Marshal.FreeHGlobal(detailDataBuffer);                      }                        memberIndex++;                  }              }              catch (Exception ex)              {                  Console.WriteLine("{0} {1}"' ex.HelpLink' ex.Message);                  throw;              }              finally              {                  if (deviceInfoSet != IntPtr.Zero)                  {                      SetupDiDestroyDeviceInfoList(deviceInfoSet);                  }              }
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveOneDown.Click += (sender' e) => Swap(1' 2);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveTwoUp.Click += (sender' e) => Swap(2' 1);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveTwoDown.Click += (sender' e) => Swap(2' 3);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveTwoDown.Click += (sender' e) => Swap(2' 3);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveThreeUp.Click += (sender' e) => Swap(3' 2);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveThreeUp.Click += (sender' e) => Swap(3' 2);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveThreeDown.Click += (sender' e) => Swap(3' 4);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveThreeDown.Click += (sender' e) => Swap(3' 4);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveFourUp.Click += (sender' e) => Swap(4' 3);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveFourUp.Click += (sender' e) => Swap(4' 3);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.enabledThree.CheckedChanged += (sender' e) => enabledChanged(2);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.enabledFour.CheckedChanged += (sender' e) => enabledChanged(3);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.optionsThree.Click += (sender' e) => openOptions(2);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.optionsFour.Click += (sender' e) => openOptions(3);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: boxes = new System.Windows.Forms.GroupBox[4] { controllerBoxOne' controllerBoxTwo' controllerBoxThree' controllerBoxFour };
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: checks = new System.Windows.Forms.CheckBox[4] { enabledOne' enabledTwo' enabledThree' enabledFour };
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: options = new System.Windows.Forms.Button[4] { optionsOne' optionsTwo' optionsThree' optionsFour };
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,StartStopBtn_Click,The following statement contains a magic number: if (StartStopBtn.Text == "Start")              {                  if (optionsWindow != null)                  {                      System.Media.SystemSounds.Asterisk.Play();                      optionsWindow.Focus();                      return;                  }                  if (controllerManager.Start())                  {                      StartStopBtn.Text = "Stop";                      for (int i = 0; i < 4; i++)                      {                          checks[i].Enabled = false;                          isExclusive.Enabled = false;                          foreach (Control con in boxes[i].Controls)                          {                              con.Enabled = false;                          }                      }                  }              }              else              {                  if (controllerManager.Stop())                  {                      StartStopBtn.Text = "Start";                      for (int i = 0; i < 4; i++)                      {                          checks[i].Enabled = true;                          isExclusive.Enabled = true;                          foreach (Control con in boxes[i].Controls)                          {                              con.Enabled = true;                          }                      }                  }              }
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,StartStopBtn_Click,The following statement contains a magic number: if (StartStopBtn.Text == "Start")              {                  if (optionsWindow != null)                  {                      System.Media.SystemSounds.Asterisk.Play();                      optionsWindow.Focus();                      return;                  }                  if (controllerManager.Start())                  {                      StartStopBtn.Text = "Stop";                      for (int i = 0; i < 4; i++)                      {                          checks[i].Enabled = false;                          isExclusive.Enabled = false;                          foreach (Control con in boxes[i].Controls)                          {                              con.Enabled = false;                          }                      }                  }              }              else              {                  if (controllerManager.Stop())                  {                      StartStopBtn.Text = "Start";                      for (int i = 0; i < 4; i++)                      {                          checks[i].Enabled = true;                          isExclusive.Enabled = true;                          foreach (Control con in boxes[i].Controls)                          {                              con.Enabled = true;                          }                      }                  }              }
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,UpdateInfo,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  if (dev[i] != null)                  {                      boxes[i].Visible = true;                      boxes[i].Text = (i + 1).ToString() + ": " + dev[i].name;                      checks[i].Visible = true;                  }                  else                  {                      boxes[i].Visible = false;                      checks[i].Visible = false;                  }              }
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.StartStopBtn.Location = new System.Drawing.Point(397' 316);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.StartStopBtn.Location = new System.Drawing.Point(397' 316);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.StartStopBtn.Size = new System.Drawing.Size(75' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.StartStopBtn.Size = new System.Drawing.Size(75' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxOne.Location = new System.Drawing.Point(12' 12);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxOne.Location = new System.Drawing.Point(12' 12);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxOne.Size = new System.Drawing.Size(460' 70);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxOne.Size = new System.Drawing.Size(460' 70);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsOne.Location = new System.Drawing.Point(6' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsOne.Location = new System.Drawing.Point(6' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsOne.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsOne.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsOne.TabIndex = 7;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveOneDown.Location = new System.Drawing.Point(427' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveOneDown.Location = new System.Drawing.Point(427' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveOneDown.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveOneDown.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledTwo.Location = new System.Drawing.Point(51' 133);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledTwo.Location = new System.Drawing.Point(51' 133);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledTwo.Size = new System.Drawing.Size(65' 17);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledTwo.Size = new System.Drawing.Size(65' 17);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledTwo.TabIndex = 8;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledOne.Location = new System.Drawing.Point(51' 56);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledOne.Location = new System.Drawing.Point(51' 56);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledOne.Size = new System.Drawing.Size(65' 17);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledOne.Size = new System.Drawing.Size(65' 17);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledOne.TabIndex = 6;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxTwo.Location = new System.Drawing.Point(12' 88);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxTwo.Location = new System.Drawing.Point(12' 88);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxTwo.Size = new System.Drawing.Size(460' 70);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxTwo.Size = new System.Drawing.Size(460' 70);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxTwo.TabIndex = 2;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsTwo.Location = new System.Drawing.Point(6' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsTwo.Location = new System.Drawing.Point(6' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsTwo.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsTwo.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsTwo.TabIndex = 7;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveTwoUp.Location = new System.Drawing.Point(427' 12);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveTwoUp.Location = new System.Drawing.Point(427' 12);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveTwoUp.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveTwoUp.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveTwoUp.TabIndex = 3;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveTwoDown.Location = new System.Drawing.Point(427' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveTwoDown.Location = new System.Drawing.Point(427' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveTwoDown.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveTwoDown.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveTwoDown.TabIndex = 2;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxThree.Location = new System.Drawing.Point(12' 164);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxThree.Location = new System.Drawing.Point(12' 164);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxThree.Size = new System.Drawing.Size(460' 70);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxThree.Size = new System.Drawing.Size(460' 70);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxThree.TabIndex = 3;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsThree.Location = new System.Drawing.Point(6' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsThree.Location = new System.Drawing.Point(6' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsThree.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsThree.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsThree.TabIndex = 6;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveThreeUp.Location = new System.Drawing.Point(427' 12);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveThreeUp.Location = new System.Drawing.Point(427' 12);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveThreeUp.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveThreeUp.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveThreeUp.TabIndex = 4;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveThreeDown.Location = new System.Drawing.Point(427' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveThreeDown.Location = new System.Drawing.Point(427' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveThreeDown.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveThreeDown.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveThreeDown.TabIndex = 3;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledThree.Location = new System.Drawing.Point(51' 209);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledThree.Location = new System.Drawing.Point(51' 209);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledThree.Size = new System.Drawing.Size(65' 17);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledThree.Size = new System.Drawing.Size(65' 17);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledThree.TabIndex = 7;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxFour.Location = new System.Drawing.Point(12' 240);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxFour.Location = new System.Drawing.Point(12' 240);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxFour.Size = new System.Drawing.Size(460' 70);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxFour.Size = new System.Drawing.Size(460' 70);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.controllerBoxFour.TabIndex = 4;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsFour.Location = new System.Drawing.Point(6' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsFour.Location = new System.Drawing.Point(6' 41);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsFour.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsFour.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.optionsFour.TabIndex = 5;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveFourUp.Location = new System.Drawing.Point(427' 12);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveFourUp.Location = new System.Drawing.Point(427' 12);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveFourUp.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveFourUp.Size = new System.Drawing.Size(27' 23);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.moveFourUp.TabIndex = 4;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledFour.Location = new System.Drawing.Point(51' 285);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledFour.Location = new System.Drawing.Point(51' 285);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledFour.Size = new System.Drawing.Size(65' 17);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledFour.Size = new System.Drawing.Size(65' 17);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.enabledFour.TabIndex = 7;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.isExclusive.Location = new System.Drawing.Point(18' 320);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.isExclusive.Location = new System.Drawing.Point(18' 320);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.isExclusive.Size = new System.Drawing.Size(75' 17);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.isExclusive.Size = new System.Drawing.Size(75' 17);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.isExclusive.TabIndex = 9;
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(484' 351);
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(484' 351);
Missing Default,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following switch statement is missing a default case: switch (i)              {                  case -1: b[0] = false; b[1] = false; b[2] = false; b[3] = false; break;                  case 0: b[0] = true; b[1] = false; b[2] = false; b[3] = false; break;                  case 4500: b[0] = true; b[1] = false; b[2] = false; b[3] = true; break;                  case 9000: b[0] = false; b[1] = false; b[2] = false; b[3] = true; break;                  case 13500: b[0] = false; b[1] = true; b[2] = false; b[3] = true; break;                  case 18000: b[0] = false; b[1] = true; b[2] = false; b[3] = false; break;                  case 22500: b[0] = false; b[1] = true; b[2] = true; b[3] = false; break;                  case 27000: b[0] = false; b[1] = false; b[2] = true; b[3] = false; break;                  case 31500: b[0] = true; b[1] = false; b[2] = true; b[3] = false; break;              }
Missing Default,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following switch statement is missing a default case: switch (subType)              {                  case 0: //Normal                      return (byte)(p / 256);                  case 1: //Inverted                      return (byte)((65535 - p) / 256);                  case 2: //Half                      int m = (p - 32767) / 129;                      if (m < 0)                      {                          m = 0;                      }                      return (byte)m;                  case 3: //Inverted Half                      m = (p - 32767) / 129;                      if (-m < 0)                      {                          m = 0;                      }                      return (byte)-m;              }
