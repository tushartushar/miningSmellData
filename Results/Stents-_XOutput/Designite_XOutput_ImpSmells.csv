Implementation smell,Namespace,Class,File,Method,Description
Complex Method,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,Cyclomatic complexity of the method is 54
Complex Method,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,Cyclomatic complexity of the method is 10
Complex Method,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,Cyclomatic complexity of the method is 13
Complex Method,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,Cyclomatic complexity of the method is 19
Complex Method,XOutput,MultiLevelComboBox,C:\repos\Stents-_XOutput\XOutput\MultiLevelComboBox.cs,WndProc,Cyclomatic complexity of the method is 11
Complex Method,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,Cyclomatic complexity of the method is 16
Complex Method,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,InitializeDevice,Cyclomatic complexity of the method is 8
Complex Method,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,StartStopBtn_Click,Cyclomatic complexity of the method is 9
Long Parameter List,XOutput,MultiLevelComboBox,C:\repos\Stents-_XOutput\XOutput\MultiLevelComboBox.cs,addOption,The method has 5 parameters.
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,SetupDiEnumDeviceInterfaces,The method has 5 parameters.
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,CreateFile,The method has 7 parameters.
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,WinUsb_ControlTransfer,The method has 6 parameters.
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,WinUsb_ReadPipe,The method has 6 parameters.
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,WinUsb_WritePipe,The method has 6 parameters.
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,DeviceIoControl,The method has 8 parameters.
Long Parameter List,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,SetupDiOpenDeviceInfo,The method has 5 parameters.
Long Parameter List,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The method has 28 parameters.
Long Identifier,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,RegisterNotify,The length of the parameter devBroadcastDeviceInterfaceBuffer is 33.
Long Statement,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The length of the statement  "	Report [10] = (byte)(((cOutput.Back ? 1 : 0) << 0) | ((cOutput.L3 ? 1 : 0) << 1) | ((cOutput.R3 ? 1 : 0) << 2) | ((cOutput.Start ? 1 : 0) << 3) | ((cOutput.DpadUp ? 1 : 0) << 4) | ((cOutput.DpadRight ? 1 : 0) << 5) | ((cOutput.DpadDown ? 1 : 0) << 6) | ((cOutput.DpadLeft ? 1 : 0) << 7)); " is 288.
Long Statement,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The length of the statement  "	Report [11] = (byte)(((cOutput.L1 ? 1 : 0) << 2) | ((cOutput.R1 ? 1 : 0) << 3) | ((cOutput.Y ? 1 : 0) << 4) | ((cOutput.B ? 1 : 0) << 5) | ((cOutput.A ? 1 : 0) << 6) | ((cOutput.X ? 1 : 0) << 7)); " is 196.
Long Statement,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The length of the statement  "	foreach (var deviceInstance in directInput.GetDevices (DeviceClass.GameController' DeviceEnumerationFlags.AttachedOnly)) { " is 122.
Long Statement,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The length of the statement  "			else if (devices [i] != null && devices [i].joystick.Information.InstanceGuid == deviceInstance.InstanceGuid)//If the device is already initialized skip it " is 155.
Long Statement,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Report,The length of the statement  "		bool result = DeviceIoControl (m_FileHandle' 0x2A400C' Input' Input.Length' Output' Output.Length' ref Transfered' IntPtr.Zero) && Transfered > 0; " is 146.
Long Statement,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,RegisterNotify,The length of the statement  "		Handle = RegisterDeviceNotification (Form' devBroadcastDeviceInterfaceBuffer' Window ? DEVICE_NOTIFY_WINDOW_HANDLE : DEVICE_NOTIFY_SERVICE_HANDLE); " is 147.
Long Statement,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The length of the statement  "				if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) { " is 133.
Long Statement,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The length of the statement  "					IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4); " is 123.
Long Statement,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,GetDeviceHandle,The length of the statement  "	m_FileHandle = CreateFile (Path' (GENERIC_WRITE | GENERIC_READ)' FILE_SHARE_READ | FILE_SHARE_WRITE' IntPtr.Zero' OPEN_EXISTING' FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED' 0); " is 178.
Empty Catch Block,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,WndProc,The method has an empty catch block.
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,ControllerDevice,The following statement contains a magic number: for (int i = 0; i < 42; i++) {  	mapping [i] = 255;  	//Changed default mapping to blank  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,ControllerDevice,The following statement contains a magic number: for (int i = 0; i < 42; i++) {  	mapping [i] = 255;  	//Changed default mapping to blank  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,ControllerDevice,The following statement contains a magic number: mapping [i] = 255;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [2] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [3] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [2] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [3] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [2] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [3] = true;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [2] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [3] = true;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [2] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [3] = true;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [2] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [3] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [2] = true;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [3] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [2] = true;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [3] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [2] = true;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following statement contains a magic number: b [3] = false;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType) {  case 0:  	//Normal  	return (byte)(p / 256);  case 1:  	//Inverted  	return (byte)((65535 - p) / 256);  case 2:  	//Half  	int m = (p - 32767) / 129;  	if (m < 0) {  		m = 0;  	}  	return (byte)m;  case 3:  	//Inverted Half  	m = (p - 32767) / 129;  	if (-m < 0) {  		m = 0;  	}  	return (byte)-m;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType) {  case 0:  	//Normal  	return (byte)(p / 256);  case 1:  	//Inverted  	return (byte)((65535 - p) / 256);  case 2:  	//Half  	int m = (p - 32767) / 129;  	if (m < 0) {  		m = 0;  	}  	return (byte)m;  case 3:  	//Inverted Half  	m = (p - 32767) / 129;  	if (-m < 0) {  		m = 0;  	}  	return (byte)-m;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType) {  case 0:  	//Normal  	return (byte)(p / 256);  case 1:  	//Inverted  	return (byte)((65535 - p) / 256);  case 2:  	//Half  	int m = (p - 32767) / 129;  	if (m < 0) {  		m = 0;  	}  	return (byte)m;  case 3:  	//Inverted Half  	m = (p - 32767) / 129;  	if (-m < 0) {  		m = 0;  	}  	return (byte)-m;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType) {  case 0:  	//Normal  	return (byte)(p / 256);  case 1:  	//Inverted  	return (byte)((65535 - p) / 256);  case 2:  	//Half  	int m = (p - 32767) / 129;  	if (m < 0) {  		m = 0;  	}  	return (byte)m;  case 3:  	//Inverted Half  	m = (p - 32767) / 129;  	if (-m < 0) {  		m = 0;  	}  	return (byte)-m;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType) {  case 0:  	//Normal  	return (byte)(p / 256);  case 1:  	//Inverted  	return (byte)((65535 - p) / 256);  case 2:  	//Half  	int m = (p - 32767) / 129;  	if (m < 0) {  		m = 0;  	}  	return (byte)m;  case 3:  	//Inverted Half  	m = (p - 32767) / 129;  	if (-m < 0) {  		m = 0;  	}  	return (byte)-m;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType) {  case 0:  	//Normal  	return (byte)(p / 256);  case 1:  	//Inverted  	return (byte)((65535 - p) / 256);  case 2:  	//Half  	int m = (p - 32767) / 129;  	if (m < 0) {  		m = 0;  	}  	return (byte)m;  case 3:  	//Inverted Half  	m = (p - 32767) / 129;  	if (-m < 0) {  		m = 0;  	}  	return (byte)-m;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType) {  case 0:  	//Normal  	return (byte)(p / 256);  case 1:  	//Inverted  	return (byte)((65535 - p) / 256);  case 2:  	//Half  	int m = (p - 32767) / 129;  	if (m < 0) {  		m = 0;  	}  	return (byte)m;  case 3:  	//Inverted Half  	m = (p - 32767) / 129;  	if (-m < 0) {  		m = 0;  	}  	return (byte)-m;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType) {  case 0:  	//Normal  	return (byte)(p / 256);  case 1:  	//Inverted  	return (byte)((65535 - p) / 256);  case 2:  	//Half  	int m = (p - 32767) / 129;  	if (m < 0) {  		m = 0;  	}  	return (byte)m;  case 3:  	//Inverted Half  	m = (p - 32767) / 129;  	if (-m < 0) {  		m = 0;  	}  	return (byte)-m;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: switch (subType) {  case 0:  	//Normal  	return (byte)(p / 256);  case 1:  	//Inverted  	return (byte)((65535 - p) / 256);  case 2:  	//Half  	int m = (p - 32767) / 129;  	if (m < 0) {  		m = 0;  	}  	return (byte)m;  case 3:  	//Inverted Half  	m = (p - 32767) / 129;  	if (-m < 0) {  		m = 0;  	}  	return (byte)-m;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: return (byte)(p / 256);  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: return (byte)((65535 - p) / 256);  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: return (byte)((65535 - p) / 256);  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: m = (p - 32767) / 129;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following statement contains a magic number: m = (p - 32767) / 129;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	if (mapping [i * 2] == 255) {  		continue;  	}  	byte subtype = (byte)(mapping [i * 2] & 0x0F);  	byte type = (byte)((mapping [i * 2] & 0xF0) >> 4);  	byte num = mapping [(i * 2) + 1];  	output [i] = funcArray [type] (subtype' num);  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	if (mapping [i * 2] == 255) {  		continue;  	}  	byte subtype = (byte)(mapping [i * 2] & 0x0F);  	byte type = (byte)((mapping [i * 2] & 0xF0) >> 4);  	byte num = mapping [(i * 2) + 1];  	output [i] = funcArray [type] (subtype' num);  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	if (mapping [i * 2] == 255) {  		continue;  	}  	byte subtype = (byte)(mapping [i * 2] & 0x0F);  	byte type = (byte)((mapping [i * 2] & 0xF0) >> 4);  	byte num = mapping [(i * 2) + 1];  	output [i] = funcArray [type] (subtype' num);  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	if (mapping [i * 2] == 255) {  		continue;  	}  	byte subtype = (byte)(mapping [i * 2] & 0x0F);  	byte type = (byte)((mapping [i * 2] & 0xF0) >> 4);  	byte num = mapping [(i * 2) + 1];  	output [i] = funcArray [type] (subtype' num);  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	if (mapping [i * 2] == 255) {  		continue;  	}  	byte subtype = (byte)(mapping [i * 2] & 0x0F);  	byte type = (byte)((mapping [i * 2] & 0xF0) >> 4);  	byte num = mapping [(i * 2) + 1];  	output [i] = funcArray [type] (subtype' num);  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	if (mapping [i * 2] == 255) {  		continue;  	}  	byte subtype = (byte)(mapping [i * 2] & 0x0F);  	byte type = (byte)((mapping [i * 2] & 0xF0) >> 4);  	byte num = mapping [(i * 2) + 1];  	output [i] = funcArray [type] (subtype' num);  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	if (mapping [i * 2] == 255) {  		continue;  	}  	byte subtype = (byte)(mapping [i * 2] & 0x0F);  	byte type = (byte)((mapping [i * 2] & 0xF0) >> 4);  	byte num = mapping [(i * 2) + 1];  	output [i] = funcArray [type] (subtype' num);  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: if (mapping [i * 2] == 255) {  	continue;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: if (mapping [i * 2] == 255) {  	continue;  }  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.X = output [2] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.Y = output [3] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.DpadUp = output [4] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.DpadDown = output [5] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.DpadLeft = output [6] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.DpadRight = output [7] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.L2 = output [9];  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.R2 = output [8];  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.L1 = output [10] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.R1 = output [11] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.L3 = output [12] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.R3 = output [13] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.Home = output [14] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.Start = output [15] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.Back = output [16] != 0;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.LY = output [17];  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.LX = output [18];  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.RY = output [19];  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,updateInput,The following statement contains a magic number: cOutput.RX = output [20];  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [2] = 0x05;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [3] = 0x12;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [10] = (byte)(((cOutput.Back ? 1 : 0) << 0) | ((cOutput.L3 ? 1 : 0) << 1) | ((cOutput.R3 ? 1 : 0) << 2) | ((cOutput.Start ? 1 : 0) << 3) | ((cOutput.DpadUp ? 1 : 0) << 4) | ((cOutput.DpadRight ? 1 : 0) << 5) | ((cOutput.DpadDown ? 1 : 0) << 6) | ((cOutput.DpadLeft ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [10] = (byte)(((cOutput.Back ? 1 : 0) << 0) | ((cOutput.L3 ? 1 : 0) << 1) | ((cOutput.R3 ? 1 : 0) << 2) | ((cOutput.Start ? 1 : 0) << 3) | ((cOutput.DpadUp ? 1 : 0) << 4) | ((cOutput.DpadRight ? 1 : 0) << 5) | ((cOutput.DpadDown ? 1 : 0) << 6) | ((cOutput.DpadLeft ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [10] = (byte)(((cOutput.Back ? 1 : 0) << 0) | ((cOutput.L3 ? 1 : 0) << 1) | ((cOutput.R3 ? 1 : 0) << 2) | ((cOutput.Start ? 1 : 0) << 3) | ((cOutput.DpadUp ? 1 : 0) << 4) | ((cOutput.DpadRight ? 1 : 0) << 5) | ((cOutput.DpadDown ? 1 : 0) << 6) | ((cOutput.DpadLeft ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [10] = (byte)(((cOutput.Back ? 1 : 0) << 0) | ((cOutput.L3 ? 1 : 0) << 1) | ((cOutput.R3 ? 1 : 0) << 2) | ((cOutput.Start ? 1 : 0) << 3) | ((cOutput.DpadUp ? 1 : 0) << 4) | ((cOutput.DpadRight ? 1 : 0) << 5) | ((cOutput.DpadDown ? 1 : 0) << 6) | ((cOutput.DpadLeft ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [10] = (byte)(((cOutput.Back ? 1 : 0) << 0) | ((cOutput.L3 ? 1 : 0) << 1) | ((cOutput.R3 ? 1 : 0) << 2) | ((cOutput.Start ? 1 : 0) << 3) | ((cOutput.DpadUp ? 1 : 0) << 4) | ((cOutput.DpadRight ? 1 : 0) << 5) | ((cOutput.DpadDown ? 1 : 0) << 6) | ((cOutput.DpadLeft ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [10] = (byte)(((cOutput.Back ? 1 : 0) << 0) | ((cOutput.L3 ? 1 : 0) << 1) | ((cOutput.R3 ? 1 : 0) << 2) | ((cOutput.Start ? 1 : 0) << 3) | ((cOutput.DpadUp ? 1 : 0) << 4) | ((cOutput.DpadRight ? 1 : 0) << 5) | ((cOutput.DpadDown ? 1 : 0) << 6) | ((cOutput.DpadLeft ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [10] = (byte)(((cOutput.Back ? 1 : 0) << 0) | ((cOutput.L3 ? 1 : 0) << 1) | ((cOutput.R3 ? 1 : 0) << 2) | ((cOutput.Start ? 1 : 0) << 3) | ((cOutput.DpadUp ? 1 : 0) << 4) | ((cOutput.DpadRight ? 1 : 0) << 5) | ((cOutput.DpadDown ? 1 : 0) << 6) | ((cOutput.DpadLeft ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [11] = (byte)(((cOutput.L1 ? 1 : 0) << 2) | ((cOutput.R1 ? 1 : 0) << 3) | ((cOutput.Y ? 1 : 0) << 4) | ((cOutput.B ? 1 : 0) << 5) | ((cOutput.A ? 1 : 0) << 6) | ((cOutput.X ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [11] = (byte)(((cOutput.L1 ? 1 : 0) << 2) | ((cOutput.R1 ? 1 : 0) << 3) | ((cOutput.Y ? 1 : 0) << 4) | ((cOutput.B ? 1 : 0) << 5) | ((cOutput.A ? 1 : 0) << 6) | ((cOutput.X ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [11] = (byte)(((cOutput.L1 ? 1 : 0) << 2) | ((cOutput.R1 ? 1 : 0) << 3) | ((cOutput.Y ? 1 : 0) << 4) | ((cOutput.B ? 1 : 0) << 5) | ((cOutput.A ? 1 : 0) << 6) | ((cOutput.X ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [11] = (byte)(((cOutput.L1 ? 1 : 0) << 2) | ((cOutput.R1 ? 1 : 0) << 3) | ((cOutput.Y ? 1 : 0) << 4) | ((cOutput.B ? 1 : 0) << 5) | ((cOutput.A ? 1 : 0) << 6) | ((cOutput.X ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [11] = (byte)(((cOutput.L1 ? 1 : 0) << 2) | ((cOutput.R1 ? 1 : 0) << 3) | ((cOutput.Y ? 1 : 0) << 4) | ((cOutput.B ? 1 : 0) << 5) | ((cOutput.A ? 1 : 0) << 6) | ((cOutput.X ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [11] = (byte)(((cOutput.L1 ? 1 : 0) << 2) | ((cOutput.R1 ? 1 : 0) << 3) | ((cOutput.Y ? 1 : 0) << 4) | ((cOutput.B ? 1 : 0) << 5) | ((cOutput.A ? 1 : 0) << 6) | ((cOutput.X ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [11] = (byte)(((cOutput.L1 ? 1 : 0) << 2) | ((cOutput.R1 ? 1 : 0) << 3) | ((cOutput.Y ? 1 : 0) << 4) | ((cOutput.B ? 1 : 0) << 5) | ((cOutput.A ? 1 : 0) << 6) | ((cOutput.X ? 1 : 0) << 7));  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [12] = (byte)(cOutput.Home ? 0xFF : 0x00);  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [14] = cOutput.LX;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [15] = cOutput.LY;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [16] = cOutput.RX;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [17] = cOutput.RY;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [26] = cOutput.R2;  
Magic Number,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getoutput,The following statement contains a magic number: Report [27] = cOutput.L2;  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,ControllerManager,The following statement contains a magic number: devices = new ControllerDevice[4];  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,ControllerManager,The following statement contains a magic number: ds4locks [2] = new object ();  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,ControllerManager,The following statement contains a magic number: ds4locks [3] = new object ();  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,changeExclusive,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (devices [i] != null) {  		if (isExclusive) {  			devices [i].joystick.Unacquire ();  			devices [i].joystick.SetCooperativeLevel (handle' CooperativeLevel.Exclusive | CooperativeLevel.Background);  			devices [i].joystick.Acquire ();  		}  		else {  			devices [i].joystick.Unacquire ();  			devices [i].joystick.SetCooperativeLevel (handle' CooperativeLevel.Nonexclusive | CooperativeLevel.Background);  			devices [i].joystick.Acquire ();  		}  	}  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Scale,The following statement contains a magic number: if (Value == -128)  	Value = -127;  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Scale,The following statement contains a magic number: if (Value == -128)  	Value = -127;  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Scale,The following statement contains a magic number: Value = -127;  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Start,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (devices [i] != null && devices [i].enabled) {  		running = true;  		processingData [i] = new ContData ();  		Console.WriteLine ("Plug " + i);  		Plugin (i + 1);  		int t = i;  		workers [i] = new Thread (() =>  {  			ProcessData (t);  		});  		workers [i].Start ();  	}  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The following statement contains a magic number: for (int i = 0; i < 4; i++)//Remove disconnected controllers   {  	if (devices [i] != null && !directInput.IsDeviceAttached (devices [i].joystick.Information.InstanceGuid)) {  		Console.WriteLine (devices [i].joystick.Properties.InstanceName + " Removed");  		devices [i] = null;  		workers [i].Abort ();  		workers [i] = null;  		Unplug (i + 1);  	}  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The following statement contains a magic number: foreach (var deviceInstance in directInput.GetDevices (DeviceClass.GameController' DeviceEnumerationFlags.AttachedOnly)) {  	Joystick joystick = new Joystick (directInput' deviceInstance.InstanceGuid);  	if (joystick.Information.ProductGuid.ToString () == "028e045e-0000-0000-0000-504944564944")  		//If its an emulated controller skip it  		continue;  	if (joystick.Capabilities.ButtonCount < 1 && joystick.Capabilities.AxesCount < 1)  		//Skip if it doesn't have any button and axes  		continue;  	int spot = -1;  	for (int i = 0; i < 4; i++) {  		if (devices [i] == null) {  			if (spot == -1) {  				spot = i;  				Console.WriteLine ("Open Spot " + i.ToString ());  			}  		}  		else if (devices [i] != null && devices [i].joystick.Information.InstanceGuid == deviceInstance.InstanceGuid)//If the device is already initialized skip it  		 {  			Console.WriteLine ("Controller Already Acquired " + i.ToString () + " " + deviceInstance.InstanceName);  			spot = -1;  			break;  		}  	}  	if (spot == -1)  		continue;  	if (isExclusive) {  		joystick.SetCooperativeLevel (handle' CooperativeLevel.Exclusive | CooperativeLevel.Background);  	}  	else {  		joystick.SetCooperativeLevel (handle' CooperativeLevel.Nonexclusive | CooperativeLevel.Background);  	}  	joystick.Properties.BufferSize = 128;  	joystick.Acquire ();  	devices [spot] = new ControllerDevice (joystick' spot + 1);  	if (IsActive) {  		processingData [spot] = new ContData ();  		Console.WriteLine ("Plug " + spot);  		Plugin (spot + 1);  		int t = spot;  		workers [spot] = new Thread (() =>  {  			ProcessData (t);  		});  		workers [spot].Start ();  	}  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The following statement contains a magic number: foreach (var deviceInstance in directInput.GetDevices (DeviceClass.GameController' DeviceEnumerationFlags.AttachedOnly)) {  	Joystick joystick = new Joystick (directInput' deviceInstance.InstanceGuid);  	if (joystick.Information.ProductGuid.ToString () == "028e045e-0000-0000-0000-504944564944")  		//If its an emulated controller skip it  		continue;  	if (joystick.Capabilities.ButtonCount < 1 && joystick.Capabilities.AxesCount < 1)  		//Skip if it doesn't have any button and axes  		continue;  	int spot = -1;  	for (int i = 0; i < 4; i++) {  		if (devices [i] == null) {  			if (spot == -1) {  				spot = i;  				Console.WriteLine ("Open Spot " + i.ToString ());  			}  		}  		else if (devices [i] != null && devices [i].joystick.Information.InstanceGuid == deviceInstance.InstanceGuid)//If the device is already initialized skip it  		 {  			Console.WriteLine ("Controller Already Acquired " + i.ToString () + " " + deviceInstance.InstanceName);  			spot = -1;  			break;  		}  	}  	if (spot == -1)  		continue;  	if (isExclusive) {  		joystick.SetCooperativeLevel (handle' CooperativeLevel.Exclusive | CooperativeLevel.Background);  	}  	else {  		joystick.SetCooperativeLevel (handle' CooperativeLevel.Nonexclusive | CooperativeLevel.Background);  	}  	joystick.Properties.BufferSize = 128;  	joystick.Acquire ();  	devices [spot] = new ControllerDevice (joystick' spot + 1);  	if (IsActive) {  		processingData [spot] = new ContData ();  		Console.WriteLine ("Plug " + spot);  		Plugin (spot + 1);  		int t = spot;  		workers [spot] = new Thread (() =>  {  			ProcessData (t);  		});  		workers [spot].Start ();  	}  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (devices [i] == null) {  		if (spot == -1) {  			spot = i;  			Console.WriteLine ("Open Spot " + i.ToString ());  		}  	}  	else if (devices [i] != null && devices [i].joystick.Information.InstanceGuid == deviceInstance.InstanceGuid)//If the device is already initialized skip it  	 {  		Console.WriteLine ("Controller Already Acquired " + i.ToString () + " " + deviceInstance.InstanceName);  		spot = -1;  		break;  	}  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,detectControllers,The following statement contains a magic number: joystick.Properties.BufferSize = 128;  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Stop,The following statement contains a magic number: if (running) {  	running = false;  	for (int i = 0; i < 4; i++) {  		if (devices [i] != null && devices [i].enabled) {  			Console.WriteLine (i);  			workers [i].Abort ();  			workers [i] = null;  			Unplug (i + 1);  		}  	}  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Stop,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (devices [i] != null && devices [i].enabled) {  		Console.WriteLine (i);  		workers [i].Abort ();  		workers [i] = null;  		Unplug (i + 1);  	}  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4000' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: Buffer [2] = 0x00;  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: Buffer [3] = 0x00;  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Plugin,The following statement contains a magic number: Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	Byte[] Buffer = new Byte[16];  	Buffer [0] = 0x10;  	Buffer [1] = 0x00;  	Buffer [2] = 0x00;  	Buffer [3] = 0x00;  	Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  	Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  	Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  	Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  	return DeviceIoControl (m_FileHandle' 0x2A4004' Buffer' Buffer.Length' null' 0' ref Transfered' IntPtr.Zero);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: Buffer [2] = 0x00;  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: Buffer [3] = 0x00;  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: Buffer [4] = (Byte)((Serial >> 0) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: Buffer [5] = (Byte)((Serial >> 8) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: Buffer [6] = (Byte)((Serial >> 16) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Unplug,The following statement contains a magic number: Buffer [7] = (Byte)((Serial >> 24) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Report,The following statement contains a magic number: if (IsActive) {  	Int32 Transfered = 0;  	bool result = DeviceIoControl (m_FileHandle' 0x2A400C' Input' Input.Length' Output' Output.Length' ref Transfered' IntPtr.Zero) && Transfered > 0;  	int deviceInd = Input [4] - 1;  	return result;  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: for (Int32 Index = 0; Index < 28; Index++)  	Output [Index] = 0x00;  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [4] = (Byte)(Input [0] + 1);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [9] = 0x14;  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if (true)//Input[1] == 0x02) // Pad is active   {  	UInt32 Buttons = (UInt32)((Input [10] << 0) | (Input [11] << 8) | (Input [12] << 16) | (Input [13] << 24));  	if ((Buttons & (0x1 << 0)) > 0)  		Output [10] |= (Byte)(1 << 5);  	// Back  	if ((Buttons & (0x1 << 1)) > 0)  		Output [10] |= (Byte)(1 << 6);  	// Left  Thumb  	if ((Buttons & (0x1 << 2)) > 0)  		Output [10] |= (Byte)(1 << 7);  	// Right Thumb  	if ((Buttons & (0x1 << 3)) > 0)  		Output [10] |= (Byte)(1 << 4);  	// Start  	if ((Buttons & (0x1 << 4)) > 0)  		Output [10] |= (Byte)(1 << 0);  	// Up  	if ((Buttons & (0x1 << 5)) > 0)  		Output [10] |= (Byte)(1 << 3);  	// Down  	if ((Buttons & (0x1 << 6)) > 0)  		Output [10] |= (Byte)(1 << 1);  	// Right  	if ((Buttons & (0x1 << 7)) > 0)  		Output [10] |= (Byte)(1 << 2);  	// Left  	if ((Buttons & (0x1 << 10)) > 0)  		Output [11] |= (Byte)(1 << 0);  	// Left  Shoulder  	if ((Buttons & (0x1 << 11)) > 0)  		Output [11] |= (Byte)(1 << 1);  	// Right Shoulder  	if ((Buttons & (0x1 << 12)) > 0)  		Output [11] |= (Byte)(1 << 7);  	// Y  	if ((Buttons & (0x1 << 13)) > 0)  		Output [11] |= (Byte)(1 << 5);  	// B  	if ((Buttons & (0x1 << 14)) > 0)  		Output [11] |= (Byte)(1 << 4);  	// A  	if ((Buttons & (0x1 << 15)) > 0)  		Output [11] |= (Byte)(1 << 6);  	// X  	if ((Buttons & (0x1 << 16)) > 16)  		Output [11] |= (Byte)(1 << 2);  	// Guide       	Output [12] = Input [26];  	// Left Trigger  	Output [13] = Input [27];  	// Right Trigger  	Int32 ThumbLX = Scale (Input [14]' false);  	Int32 ThumbLY = -Scale (Input [15]' false);  	Int32 ThumbRX = Scale (Input [16]' false);  	Int32 ThumbRY = -Scale (Input [17]' false);  	Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  	// LX  	Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  	Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  	// LY  	Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  	Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  	// RX  	Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  	Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  	// RY  	Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  }  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 0)) > 0)  	Output [10] |= (Byte)(1 << 5);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 0)) > 0)  	Output [10] |= (Byte)(1 << 5);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 5);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 5);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 1)) > 0)  	Output [10] |= (Byte)(1 << 6);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 1)) > 0)  	Output [10] |= (Byte)(1 << 6);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 6);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 6);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 2)) > 0)  	Output [10] |= (Byte)(1 << 7);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 2)) > 0)  	Output [10] |= (Byte)(1 << 7);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 2)) > 0)  	Output [10] |= (Byte)(1 << 7);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 7);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 7);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 3)) > 0)  	Output [10] |= (Byte)(1 << 4);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 3)) > 0)  	Output [10] |= (Byte)(1 << 4);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 3)) > 0)  	Output [10] |= (Byte)(1 << 4);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 4);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 4);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 4)) > 0)  	Output [10] |= (Byte)(1 << 0);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 4)) > 0)  	Output [10] |= (Byte)(1 << 0);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 0);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 5)) > 0)  	Output [10] |= (Byte)(1 << 3);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 5)) > 0)  	Output [10] |= (Byte)(1 << 3);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 5)) > 0)  	Output [10] |= (Byte)(1 << 3);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 3);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 3);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 6)) > 0)  	Output [10] |= (Byte)(1 << 1);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 6)) > 0)  	Output [10] |= (Byte)(1 << 1);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 1);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 7)) > 0)  	Output [10] |= (Byte)(1 << 2);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 7)) > 0)  	Output [10] |= (Byte)(1 << 2);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 7)) > 0)  	Output [10] |= (Byte)(1 << 2);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 2);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [10] |= (Byte)(1 << 2);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 10)) > 0)  	Output [11] |= (Byte)(1 << 0);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 10)) > 0)  	Output [11] |= (Byte)(1 << 0);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 0);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 11)) > 0)  	Output [11] |= (Byte)(1 << 1);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 11)) > 0)  	Output [11] |= (Byte)(1 << 1);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 1);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 12)) > 0)  	Output [11] |= (Byte)(1 << 7);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 12)) > 0)  	Output [11] |= (Byte)(1 << 7);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 12)) > 0)  	Output [11] |= (Byte)(1 << 7);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 7);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 7);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 13)) > 0)  	Output [11] |= (Byte)(1 << 5);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 13)) > 0)  	Output [11] |= (Byte)(1 << 5);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 13)) > 0)  	Output [11] |= (Byte)(1 << 5);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 5);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 5);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 14)) > 0)  	Output [11] |= (Byte)(1 << 4);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 14)) > 0)  	Output [11] |= (Byte)(1 << 4);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 14)) > 0)  	Output [11] |= (Byte)(1 << 4);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 4);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 4);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 15)) > 0)  	Output [11] |= (Byte)(1 << 6);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 15)) > 0)  	Output [11] |= (Byte)(1 << 6);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 15)) > 0)  	Output [11] |= (Byte)(1 << 6);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 6);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 6);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 16)) > 16)  	Output [11] |= (Byte)(1 << 2);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 16)) > 16)  	Output [11] |= (Byte)(1 << 2);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 16)) > 16)  	Output [11] |= (Byte)(1 << 2);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: if ((Buttons & (0x1 << 16)) > 16)  	Output [11] |= (Byte)(1 << 2);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 2);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [11] |= (Byte)(1 << 2);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [12] = Input [26];  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [12] = Input [26];  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [13] = Input [27];  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [13] = Input [27];  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [14] = (Byte)((ThumbLX >> 0) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [15] = (Byte)((ThumbLX >> 8) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [16] = (Byte)((ThumbLY >> 0) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [17] = (Byte)((ThumbLY >> 8) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [18] = (Byte)((ThumbRX >> 0) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [19] = (Byte)((ThumbRX >> 8) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [20] = (Byte)((ThumbRY >> 0) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  
Magic Number,XOutput,ControllerManager,C:\repos\Stents-_XOutput\XOutput\ControllerManager.cs,Parse,The following statement contains a magic number: Output [21] = (Byte)((ThumbRY >> 8) & 0xFF);  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox> ()) {  	//Tag structure: [Type' Number' Index]  	m.Items [0] = getBindingText (ind);  	//Change combobox text according to saved binding  	m.addOption ("Disabled"' tag: new byte[] {  		255'  		0'  		(byte)ind  	});  	m.addOption ("Detect"' tag: new byte[] {  		254'  		0'  		(byte)ind  	});  	ToolStripMenuItem axes = m.addMenu ("Axes");  	ToolStripMenuItem buttons = m.addMenu ("Buttons");  	ToolStripMenuItem dpads = m.addMenu ("D-Pads");  	ToolStripMenuItem iaxes = m.addMenu ("Inverted Axes"' axes);  	ToolStripMenuItem haxes = m.addMenu ("Half Axes"' axes);  	ToolStripMenuItem ihaxes = m.addMenu ("Inverted Half Axes"' axes);  	for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++) {  		m.addOption ("Button " + i.ToString ()' buttons' new byte[] {  			0'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  		m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  			32'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  			33'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  			34'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  			35'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  		m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  			16'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  			17'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  			18'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  			19'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	m.SelectionChangeCommitted += new System.EventHandler (SelectionChanged);  	ind++;  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox> ()) {  	//Tag structure: [Type' Number' Index]  	m.Items [0] = getBindingText (ind);  	//Change combobox text according to saved binding  	m.addOption ("Disabled"' tag: new byte[] {  		255'  		0'  		(byte)ind  	});  	m.addOption ("Detect"' tag: new byte[] {  		254'  		0'  		(byte)ind  	});  	ToolStripMenuItem axes = m.addMenu ("Axes");  	ToolStripMenuItem buttons = m.addMenu ("Buttons");  	ToolStripMenuItem dpads = m.addMenu ("D-Pads");  	ToolStripMenuItem iaxes = m.addMenu ("Inverted Axes"' axes);  	ToolStripMenuItem haxes = m.addMenu ("Half Axes"' axes);  	ToolStripMenuItem ihaxes = m.addMenu ("Inverted Half Axes"' axes);  	for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++) {  		m.addOption ("Button " + i.ToString ()' buttons' new byte[] {  			0'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  		m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  			32'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  			33'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  			34'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  			35'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  		m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  			16'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  			17'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  			18'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  			19'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	m.SelectionChangeCommitted += new System.EventHandler (SelectionChanged);  	ind++;  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox> ()) {  	//Tag structure: [Type' Number' Index]  	m.Items [0] = getBindingText (ind);  	//Change combobox text according to saved binding  	m.addOption ("Disabled"' tag: new byte[] {  		255'  		0'  		(byte)ind  	});  	m.addOption ("Detect"' tag: new byte[] {  		254'  		0'  		(byte)ind  	});  	ToolStripMenuItem axes = m.addMenu ("Axes");  	ToolStripMenuItem buttons = m.addMenu ("Buttons");  	ToolStripMenuItem dpads = m.addMenu ("D-Pads");  	ToolStripMenuItem iaxes = m.addMenu ("Inverted Axes"' axes);  	ToolStripMenuItem haxes = m.addMenu ("Half Axes"' axes);  	ToolStripMenuItem ihaxes = m.addMenu ("Inverted Half Axes"' axes);  	for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++) {  		m.addOption ("Button " + i.ToString ()' buttons' new byte[] {  			0'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  		m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  			32'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  			33'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  			34'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  			35'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  		m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  			16'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  			17'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  			18'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  			19'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	m.SelectionChangeCommitted += new System.EventHandler (SelectionChanged);  	ind++;  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox> ()) {  	//Tag structure: [Type' Number' Index]  	m.Items [0] = getBindingText (ind);  	//Change combobox text according to saved binding  	m.addOption ("Disabled"' tag: new byte[] {  		255'  		0'  		(byte)ind  	});  	m.addOption ("Detect"' tag: new byte[] {  		254'  		0'  		(byte)ind  	});  	ToolStripMenuItem axes = m.addMenu ("Axes");  	ToolStripMenuItem buttons = m.addMenu ("Buttons");  	ToolStripMenuItem dpads = m.addMenu ("D-Pads");  	ToolStripMenuItem iaxes = m.addMenu ("Inverted Axes"' axes);  	ToolStripMenuItem haxes = m.addMenu ("Half Axes"' axes);  	ToolStripMenuItem ihaxes = m.addMenu ("Inverted Half Axes"' axes);  	for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++) {  		m.addOption ("Button " + i.ToString ()' buttons' new byte[] {  			0'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  		m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  			32'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  			33'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  			34'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  			35'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  		m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  			16'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  			17'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  			18'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  			19'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	m.SelectionChangeCommitted += new System.EventHandler (SelectionChanged);  	ind++;  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox> ()) {  	//Tag structure: [Type' Number' Index]  	m.Items [0] = getBindingText (ind);  	//Change combobox text according to saved binding  	m.addOption ("Disabled"' tag: new byte[] {  		255'  		0'  		(byte)ind  	});  	m.addOption ("Detect"' tag: new byte[] {  		254'  		0'  		(byte)ind  	});  	ToolStripMenuItem axes = m.addMenu ("Axes");  	ToolStripMenuItem buttons = m.addMenu ("Buttons");  	ToolStripMenuItem dpads = m.addMenu ("D-Pads");  	ToolStripMenuItem iaxes = m.addMenu ("Inverted Axes"' axes);  	ToolStripMenuItem haxes = m.addMenu ("Half Axes"' axes);  	ToolStripMenuItem ihaxes = m.addMenu ("Inverted Half Axes"' axes);  	for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++) {  		m.addOption ("Button " + i.ToString ()' buttons' new byte[] {  			0'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  		m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  			32'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  			33'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  			34'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  			35'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  		m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  			16'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  			17'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  			18'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  			19'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	m.SelectionChangeCommitted += new System.EventHandler (SelectionChanged);  	ind++;  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox> ()) {  	//Tag structure: [Type' Number' Index]  	m.Items [0] = getBindingText (ind);  	//Change combobox text according to saved binding  	m.addOption ("Disabled"' tag: new byte[] {  		255'  		0'  		(byte)ind  	});  	m.addOption ("Detect"' tag: new byte[] {  		254'  		0'  		(byte)ind  	});  	ToolStripMenuItem axes = m.addMenu ("Axes");  	ToolStripMenuItem buttons = m.addMenu ("Buttons");  	ToolStripMenuItem dpads = m.addMenu ("D-Pads");  	ToolStripMenuItem iaxes = m.addMenu ("Inverted Axes"' axes);  	ToolStripMenuItem haxes = m.addMenu ("Half Axes"' axes);  	ToolStripMenuItem ihaxes = m.addMenu ("Inverted Half Axes"' axes);  	for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++) {  		m.addOption ("Button " + i.ToString ()' buttons' new byte[] {  			0'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  		m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  			32'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  			33'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  			34'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  			35'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  		m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  			16'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  			17'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  			18'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  			19'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	m.SelectionChangeCommitted += new System.EventHandler (SelectionChanged);  	ind++;  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox> ()) {  	//Tag structure: [Type' Number' Index]  	m.Items [0] = getBindingText (ind);  	//Change combobox text according to saved binding  	m.addOption ("Disabled"' tag: new byte[] {  		255'  		0'  		(byte)ind  	});  	m.addOption ("Detect"' tag: new byte[] {  		254'  		0'  		(byte)ind  	});  	ToolStripMenuItem axes = m.addMenu ("Axes");  	ToolStripMenuItem buttons = m.addMenu ("Buttons");  	ToolStripMenuItem dpads = m.addMenu ("D-Pads");  	ToolStripMenuItem iaxes = m.addMenu ("Inverted Axes"' axes);  	ToolStripMenuItem haxes = m.addMenu ("Half Axes"' axes);  	ToolStripMenuItem ihaxes = m.addMenu ("Inverted Half Axes"' axes);  	for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++) {  		m.addOption ("Button " + i.ToString ()' buttons' new byte[] {  			0'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  		m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  			32'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  			33'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  			34'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  			35'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  		m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  			16'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  			17'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  			18'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  			19'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	m.SelectionChangeCommitted += new System.EventHandler (SelectionChanged);  	ind++;  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox> ()) {  	//Tag structure: [Type' Number' Index]  	m.Items [0] = getBindingText (ind);  	//Change combobox text according to saved binding  	m.addOption ("Disabled"' tag: new byte[] {  		255'  		0'  		(byte)ind  	});  	m.addOption ("Detect"' tag: new byte[] {  		254'  		0'  		(byte)ind  	});  	ToolStripMenuItem axes = m.addMenu ("Axes");  	ToolStripMenuItem buttons = m.addMenu ("Buttons");  	ToolStripMenuItem dpads = m.addMenu ("D-Pads");  	ToolStripMenuItem iaxes = m.addMenu ("Inverted Axes"' axes);  	ToolStripMenuItem haxes = m.addMenu ("Half Axes"' axes);  	ToolStripMenuItem ihaxes = m.addMenu ("Inverted Half Axes"' axes);  	for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++) {  		m.addOption ("Button " + i.ToString ()' buttons' new byte[] {  			0'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  		m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  			32'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  			33'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  			34'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  			35'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  		m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  			16'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  			17'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  			18'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  			19'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	m.SelectionChangeCommitted += new System.EventHandler (SelectionChanged);  	ind++;  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox> ()) {  	//Tag structure: [Type' Number' Index]  	m.Items [0] = getBindingText (ind);  	//Change combobox text according to saved binding  	m.addOption ("Disabled"' tag: new byte[] {  		255'  		0'  		(byte)ind  	});  	m.addOption ("Detect"' tag: new byte[] {  		254'  		0'  		(byte)ind  	});  	ToolStripMenuItem axes = m.addMenu ("Axes");  	ToolStripMenuItem buttons = m.addMenu ("Buttons");  	ToolStripMenuItem dpads = m.addMenu ("D-Pads");  	ToolStripMenuItem iaxes = m.addMenu ("Inverted Axes"' axes);  	ToolStripMenuItem haxes = m.addMenu ("Half Axes"' axes);  	ToolStripMenuItem ihaxes = m.addMenu ("Inverted Half Axes"' axes);  	for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++) {  		m.addOption ("Button " + i.ToString ()' buttons' new byte[] {  			0'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  		m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  			32'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  			33'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  			34'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  			35'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  		m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  			16'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  			17'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  			18'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  			19'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	m.SelectionChangeCommitted += new System.EventHandler (SelectionChanged);  	ind++;  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: foreach (MultiLevelComboBox m in this.Controls.OfType<MultiLevelComboBox> ()) {  	//Tag structure: [Type' Number' Index]  	m.Items [0] = getBindingText (ind);  	//Change combobox text according to saved binding  	m.addOption ("Disabled"' tag: new byte[] {  		255'  		0'  		(byte)ind  	});  	m.addOption ("Detect"' tag: new byte[] {  		254'  		0'  		(byte)ind  	});  	ToolStripMenuItem axes = m.addMenu ("Axes");  	ToolStripMenuItem buttons = m.addMenu ("Buttons");  	ToolStripMenuItem dpads = m.addMenu ("D-Pads");  	ToolStripMenuItem iaxes = m.addMenu ("Inverted Axes"' axes);  	ToolStripMenuItem haxes = m.addMenu ("Half Axes"' axes);  	ToolStripMenuItem ihaxes = m.addMenu ("Inverted Half Axes"' axes);  	for (int i = 1; i <= dev.joystick.Capabilities.ButtonCount; i++) {  		m.addOption ("Button " + i.ToString ()' buttons' new byte[] {  			0'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  		m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  			32'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  			33'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  			34'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  			35'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  		m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  			16'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  			17'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  			18'  			(byte)(i - 1)'  			(byte)ind  		});  		m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  			19'  			(byte)(i - 1)'  			(byte)ind  		});  	}  	m.SelectionChangeCommitted += new System.EventHandler (SelectionChanged);  	ind++;  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: m.addOption ("Disabled"' tag: new byte[] {  	255'  	0'  	(byte)ind  });  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: m.addOption ("Detect"' tag: new byte[] {  	254'  	0'  	(byte)ind  });  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  	m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  		32'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  		33'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  		34'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  		35'  		(byte)(i - 1)'  		(byte)ind  	});  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  	m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  		32'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  		33'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  		34'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  		35'  		(byte)(i - 1)'  		(byte)ind  	});  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  	m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  		32'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  		33'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  		34'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  		35'  		(byte)(i - 1)'  		(byte)ind  	});  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: for (int i = 1; i <= dev.joystick.Capabilities.PovCount; i++) {  	m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  		32'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  		33'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  		34'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  		35'  		(byte)(i - 1)'  		(byte)ind  	});  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: m.addOption ("D-Pad " + i.ToString () + " Up"' dpads' new byte[] {  	32'  	(byte)(i - 1)'  	(byte)ind  });  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: m.addOption ("D-Pad " + i.ToString () + " Down"' dpads' new byte[] {  	33'  	(byte)(i - 1)'  	(byte)ind  });  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: m.addOption ("D-Pad " + i.ToString () + " Left"' dpads' new byte[] {  	34'  	(byte)(i - 1)'  	(byte)ind  });  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: m.addOption ("D-Pad " + i.ToString () + " Right"' dpads' new byte[] {  	35'  	(byte)(i - 1)'  	(byte)ind  });  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  	m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  		16'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  		17'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  		18'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  		19'  		(byte)(i - 1)'  		(byte)ind  	});  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  	m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  		16'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  		17'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  		18'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  		19'  		(byte)(i - 1)'  		(byte)ind  	});  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  	m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  		16'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  		17'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  		18'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  		19'  		(byte)(i - 1)'  		(byte)ind  	});  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: for (int i = 1; i <= dev.joystick.Capabilities.AxesCount; i++) {  	m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  		16'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  		17'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  		18'  		(byte)(i - 1)'  		(byte)ind  	});  	m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  		19'  		(byte)(i - 1)'  		(byte)ind  	});  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: m.addOption ("Axis " + i.ToString ()' axes' new byte[] {  	16'  	(byte)(i - 1)'  	(byte)ind  });  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: m.addOption ("IAxis " + i.ToString ()' iaxes' new byte[] {  	17'  	(byte)(i - 1)'  	(byte)ind  });  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: m.addOption ("HAxis" + i.ToString ()' haxes' new byte[] {  	18'  	(byte)(i - 1)'  	(byte)ind  });  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,ControllerOptions,The following statement contains a magic number: m.addOption ("IHAxis" + i.ToString ()' ihaxes' new byte[] {  	19'  	(byte)(i - 1)'  	(byte)ind  });  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,getBindingText,The following statement contains a magic number: if (dev.mapping [i * 2] == 255) {  	return "Disabled";  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,getBindingText,The following statement contains a magic number: if (dev.mapping [i * 2] == 255) {  	return "Disabled";  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,SelectionChanged,The following statement contains a magic number: if (b [0] == 254) {  	//start thread  	return;  }  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,SelectionChanged,The following statement contains a magic number: dev.mapping [b [2] * 2] = b [0];  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,SelectionChanged,The following statement contains a magic number: dev.mapping [b [2] * 2] = b [0];  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,SelectionChanged,The following statement contains a magic number: dev.mapping [(b [2] * 2) + 1] = b [1];  
Magic Number,XOutput,ControllerOptions,C:\repos\Stents-_XOutput\XOutput\ControllerOptions.cs,SelectionChanged,The following statement contains a magic number: dev.mapping [(b [2] * 2) + 1] = b [1];  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: for (i = 0; i < 21; i++) {  	//find which button this is for  	if (line.StartsWith (properties [i])) {  		break;  	}  	if (i == 20) {  		Logger.Log ("Error parsing: Could not identify property");  		return new byte[] {  			255'  			255'  			255  		};  	}  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: for (i = 0; i < 21; i++) {  	//find which button this is for  	if (line.StartsWith (properties [i])) {  		break;  	}  	if (i == 20) {  		Logger.Log ("Error parsing: Could not identify property");  		return new byte[] {  			255'  			255'  			255  		};  	}  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: for (i = 0; i < 21; i++) {  	//find which button this is for  	if (line.StartsWith (properties [i])) {  		break;  	}  	if (i == 20) {  		Logger.Log ("Error parsing: Could not identify property");  		return new byte[] {  			255'  			255'  			255  		};  	}  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: for (i = 0; i < 21; i++) {  	//find which button this is for  	if (line.StartsWith (properties [i])) {  		break;  	}  	if (i == 20) {  		Logger.Log ("Error parsing: Could not identify property");  		return new byte[] {  			255'  			255'  			255  		};  	}  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: for (i = 0; i < 21; i++) {  	//find which button this is for  	if (line.StartsWith (properties [i])) {  		break;  	}  	if (i == 20) {  		Logger.Log ("Error parsing: Could not identify property");  		return new byte[] {  			255'  			255'  			255  		};  	}  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (i == 20) {  	Logger.Log ("Error parsing: Could not identify property");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (i == 20) {  	Logger.Log ("Error parsing: Could not identify property");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (i == 20) {  	Logger.Log ("Error parsing: Could not identify property");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (i == 20) {  	Logger.Log ("Error parsing: Could not identify property");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: return new byte[] {  	255'  	255'  	255  };  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: return new byte[] {  	255'  	255'  	255  };  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: return new byte[] {  	255'  	255'  	255  };  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (properties [i].Length + 1 > line.Length) {  	Logger.Log ("Error parsing: No assignment");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (properties [i].Length + 1 > line.Length) {  	Logger.Log ("Error parsing: No assignment");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (properties [i].Length + 1 > line.Length) {  	Logger.Log ("Error parsing: No assignment");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: return new byte[] {  	255'  	255'  	255  };  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: return new byte[] {  	255'  	255'  	255  };  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: return new byte[] {  	255'  	255'  	255  };  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("btn")) {  	type = 0;  	subType = 0;  	num = byte.Parse (val.Remove (0' 3));  }  else if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: num = byte.Parse (val.Remove (0' 3));  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.Contains ("axis")) {  	type = 1;  	if (val.StartsWith ("ih")) {  		num = byte.Parse (val.Remove (0' 6));  		subType = 3;  	}  	else if (val.StartsWith ("h")) {  		subType = 2;  		num = byte.Parse (val.Remove (0' 5));  	}  	else if (val.StartsWith ("i")) {  		subType = 1;  		num = byte.Parse (val.Remove (0' 5));  	}  	else {  		subType = 0;  		num = byte.Parse (val.Remove (0' 4));  	}  }  else if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("ih")) {  	num = byte.Parse (val.Remove (0' 6));  	subType = 3;  }  else if (val.StartsWith ("h")) {  	subType = 2;  	num = byte.Parse (val.Remove (0' 5));  }  else if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("ih")) {  	num = byte.Parse (val.Remove (0' 6));  	subType = 3;  }  else if (val.StartsWith ("h")) {  	subType = 2;  	num = byte.Parse (val.Remove (0' 5));  }  else if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("ih")) {  	num = byte.Parse (val.Remove (0' 6));  	subType = 3;  }  else if (val.StartsWith ("h")) {  	subType = 2;  	num = byte.Parse (val.Remove (0' 5));  }  else if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("ih")) {  	num = byte.Parse (val.Remove (0' 6));  	subType = 3;  }  else if (val.StartsWith ("h")) {  	subType = 2;  	num = byte.Parse (val.Remove (0' 5));  }  else if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("ih")) {  	num = byte.Parse (val.Remove (0' 6));  	subType = 3;  }  else if (val.StartsWith ("h")) {  	subType = 2;  	num = byte.Parse (val.Remove (0' 5));  }  else if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("ih")) {  	num = byte.Parse (val.Remove (0' 6));  	subType = 3;  }  else if (val.StartsWith ("h")) {  	subType = 2;  	num = byte.Parse (val.Remove (0' 5));  }  else if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: num = byte.Parse (val.Remove (0' 6));  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: subType = 3;  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("h")) {  	subType = 2;  	num = byte.Parse (val.Remove (0' 5));  }  else if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("h")) {  	subType = 2;  	num = byte.Parse (val.Remove (0' 5));  }  else if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("h")) {  	subType = 2;  	num = byte.Parse (val.Remove (0' 5));  }  else if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("h")) {  	subType = 2;  	num = byte.Parse (val.Remove (0' 5));  }  else if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: subType = 2;  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: num = byte.Parse (val.Remove (0' 5));  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("i")) {  	subType = 1;  	num = byte.Parse (val.Remove (0' 5));  }  else {  	subType = 0;  	num = byte.Parse (val.Remove (0' 4));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: num = byte.Parse (val.Remove (0' 5));  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: num = byte.Parse (val.Remove (0' 4));  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.StartsWith ("dpad")) {  	type = 2;  	val = val.Remove (0' 4);  	if (val.EndsWith ("up")) {  		subType = 0;  		num = byte.Parse (val.Remove (val.Length - 2));  	}  	else if (val.EndsWith ("down")) {  		subType = 1;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("left")) {  		subType = 2;  		num = byte.Parse (val.Remove (val.Length - 4));  	}  	else if (val.EndsWith ("right")) {  		subType = 3;  		num = byte.Parse (val.Remove (val.Length - 5));  	}  }  else if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: type = 2;  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: val = val.Remove (0' 4);  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("up")) {  	subType = 0;  	num = byte.Parse (val.Remove (val.Length - 2));  }  else if (val.EndsWith ("down")) {  	subType = 1;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("up")) {  	subType = 0;  	num = byte.Parse (val.Remove (val.Length - 2));  }  else if (val.EndsWith ("down")) {  	subType = 1;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("up")) {  	subType = 0;  	num = byte.Parse (val.Remove (val.Length - 2));  }  else if (val.EndsWith ("down")) {  	subType = 1;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("up")) {  	subType = 0;  	num = byte.Parse (val.Remove (val.Length - 2));  }  else if (val.EndsWith ("down")) {  	subType = 1;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("up")) {  	subType = 0;  	num = byte.Parse (val.Remove (val.Length - 2));  }  else if (val.EndsWith ("down")) {  	subType = 1;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("up")) {  	subType = 0;  	num = byte.Parse (val.Remove (val.Length - 2));  }  else if (val.EndsWith ("down")) {  	subType = 1;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: num = byte.Parse (val.Remove (val.Length - 2));  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("down")) {  	subType = 1;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("down")) {  	subType = 1;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("down")) {  	subType = 1;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("down")) {  	subType = 1;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("down")) {  	subType = 1;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: num = byte.Parse (val.Remove (val.Length - 4));  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("left")) {  	subType = 2;  	num = byte.Parse (val.Remove (val.Length - 4));  }  else if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: subType = 2;  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: num = byte.Parse (val.Remove (val.Length - 4));  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val.EndsWith ("right")) {  	subType = 3;  	num = byte.Parse (val.Remove (val.Length - 5));  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: subType = 3;  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: num = byte.Parse (val.Remove (val.Length - 5));  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: if (val == "disabled") {  }  else {  	Logger.Log ("Error parsing: Could not identify value");  	return new byte[] {  		255'  		255'  		255  	};  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: return new byte[] {  	255'  	255'  	255  };  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: return new byte[] {  	255'  	255'  	255  };  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: return new byte[] {  	255'  	255'  	255  };  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,parseLine,The following statement contains a magic number: return new byte[] {  	(byte)(i * 2)'  	l'  	num  };  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,Load,The following statement contains a magic number: for (int i = 0; i < config.Length; i++) {  	byte[] data = parseLine (config [i]);  	Console.Write (data [0]);  	if (data [0] > 40) {  		continue;  	}  	mapping [data [0]] = data [1];  	mapping [data [0] + 1] = data [2];  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,Load,The following statement contains a magic number: for (int i = 0; i < config.Length; i++) {  	byte[] data = parseLine (config [i]);  	Console.Write (data [0]);  	if (data [0] > 40) {  		continue;  	}  	mapping [data [0]] = data [1];  	mapping [data [0] + 1] = data [2];  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,Load,The following statement contains a magic number: if (data [0] > 40) {  	continue;  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,Load,The following statement contains a magic number: mapping [data [0] + 1] = data [2];  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	saveString += properties [i] + "=";  	if (Mapping [i * 2] == 255) {  		saveString += "disabled\r\n";  		continue;  	}  	byte subType = (byte)(Mapping [i * 2] & 0x0F);  	byte type = (byte)((Mapping [i * 2] & 0xF0) >> 4);  	byte num = (byte)(Mapping [i * 2 + 1] + 1);  	saveString += string.Format (typeString [type]' num' axesString [subType]' dpadString [subType]) + "\r\n";  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	saveString += properties [i] + "=";  	if (Mapping [i * 2] == 255) {  		saveString += "disabled\r\n";  		continue;  	}  	byte subType = (byte)(Mapping [i * 2] & 0x0F);  	byte type = (byte)((Mapping [i * 2] & 0xF0) >> 4);  	byte num = (byte)(Mapping [i * 2 + 1] + 1);  	saveString += string.Format (typeString [type]' num' axesString [subType]' dpadString [subType]) + "\r\n";  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	saveString += properties [i] + "=";  	if (Mapping [i * 2] == 255) {  		saveString += "disabled\r\n";  		continue;  	}  	byte subType = (byte)(Mapping [i * 2] & 0x0F);  	byte type = (byte)((Mapping [i * 2] & 0xF0) >> 4);  	byte num = (byte)(Mapping [i * 2 + 1] + 1);  	saveString += string.Format (typeString [type]' num' axesString [subType]' dpadString [subType]) + "\r\n";  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	saveString += properties [i] + "=";  	if (Mapping [i * 2] == 255) {  		saveString += "disabled\r\n";  		continue;  	}  	byte subType = (byte)(Mapping [i * 2] & 0x0F);  	byte type = (byte)((Mapping [i * 2] & 0xF0) >> 4);  	byte num = (byte)(Mapping [i * 2 + 1] + 1);  	saveString += string.Format (typeString [type]' num' axesString [subType]' dpadString [subType]) + "\r\n";  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	saveString += properties [i] + "=";  	if (Mapping [i * 2] == 255) {  		saveString += "disabled\r\n";  		continue;  	}  	byte subType = (byte)(Mapping [i * 2] & 0x0F);  	byte type = (byte)((Mapping [i * 2] & 0xF0) >> 4);  	byte num = (byte)(Mapping [i * 2 + 1] + 1);  	saveString += string.Format (typeString [type]' num' axesString [subType]' dpadString [subType]) + "\r\n";  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	saveString += properties [i] + "=";  	if (Mapping [i * 2] == 255) {  		saveString += "disabled\r\n";  		continue;  	}  	byte subType = (byte)(Mapping [i * 2] & 0x0F);  	byte type = (byte)((Mapping [i * 2] & 0xF0) >> 4);  	byte num = (byte)(Mapping [i * 2 + 1] + 1);  	saveString += string.Format (typeString [type]' num' axesString [subType]' dpadString [subType]) + "\r\n";  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: for (int i = 0; i < 21; i++) {  	saveString += properties [i] + "=";  	if (Mapping [i * 2] == 255) {  		saveString += "disabled\r\n";  		continue;  	}  	byte subType = (byte)(Mapping [i * 2] & 0x0F);  	byte type = (byte)((Mapping [i * 2] & 0xF0) >> 4);  	byte num = (byte)(Mapping [i * 2 + 1] + 1);  	saveString += string.Format (typeString [type]' num' axesString [subType]' dpadString [subType]) + "\r\n";  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: if (Mapping [i * 2] == 255) {  	saveString += "disabled\r\n";  	continue;  }  
Magic Number,XOutput,SaveManager,C:\repos\Stents-_XOutput\XOutput\SaveManager.cs,generateSaveString,The following statement contains a magic number: if (Mapping [i * 2] == 255) {  	saveString += "disabled\r\n";  	continue;  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try {  	SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA ()' da = new SP_DEVICE_INTERFACE_DATA ();  	Int32 bufferSize = 0' memberIndex = 0;  	deviceInfoSet = SetupDiGetClassDevs (ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);  	DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf (DeviceInterfaceData);  	while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  		SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  		{  			detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  			Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  			if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  				IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  				Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  				Marshal.FreeHGlobal (detailDataBuffer);  				if (memberIndex == Instance)  					return true;  			}  			else  				Marshal.FreeHGlobal (detailDataBuffer);  		}  		memberIndex++;  	}  }  catch (Exception ex) {  	Console.WriteLine ("{0} {1}"' ex.HelpLink' ex.Message);  	throw;  }  finally {  	if (deviceInfoSet != IntPtr.Zero) {  		SetupDiDestroyDeviceInfoList (deviceInfoSet);  	}  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try {  	SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA ()' da = new SP_DEVICE_INTERFACE_DATA ();  	Int32 bufferSize = 0' memberIndex = 0;  	deviceInfoSet = SetupDiGetClassDevs (ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);  	DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf (DeviceInterfaceData);  	while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  		SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  		{  			detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  			Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  			if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  				IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  				Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  				Marshal.FreeHGlobal (detailDataBuffer);  				if (memberIndex == Instance)  					return true;  			}  			else  				Marshal.FreeHGlobal (detailDataBuffer);  		}  		memberIndex++;  	}  }  catch (Exception ex) {  	Console.WriteLine ("{0} {1}"' ex.HelpLink' ex.Message);  	throw;  }  finally {  	if (deviceInfoSet != IntPtr.Zero) {  		SetupDiDestroyDeviceInfoList (deviceInfoSet);  	}  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try {  	SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA ()' da = new SP_DEVICE_INTERFACE_DATA ();  	Int32 bufferSize = 0' memberIndex = 0;  	deviceInfoSet = SetupDiGetClassDevs (ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);  	DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf (DeviceInterfaceData);  	while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  		SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  		{  			detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  			Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  			if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  				IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  				Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  				Marshal.FreeHGlobal (detailDataBuffer);  				if (memberIndex == Instance)  					return true;  			}  			else  				Marshal.FreeHGlobal (detailDataBuffer);  		}  		memberIndex++;  	}  }  catch (Exception ex) {  	Console.WriteLine ("{0} {1}"' ex.HelpLink' ex.Message);  	throw;  }  finally {  	if (deviceInfoSet != IntPtr.Zero) {  		SetupDiDestroyDeviceInfoList (deviceInfoSet);  	}  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try {  	SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA ()' da = new SP_DEVICE_INTERFACE_DATA ();  	Int32 bufferSize = 0' memberIndex = 0;  	deviceInfoSet = SetupDiGetClassDevs (ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);  	DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf (DeviceInterfaceData);  	while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  		SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  		{  			detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  			Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  			if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  				IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  				Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  				Marshal.FreeHGlobal (detailDataBuffer);  				if (memberIndex == Instance)  					return true;  			}  			else  				Marshal.FreeHGlobal (detailDataBuffer);  		}  		memberIndex++;  	}  }  catch (Exception ex) {  	Console.WriteLine ("{0} {1}"' ex.HelpLink' ex.Message);  	throw;  }  finally {  	if (deviceInfoSet != IntPtr.Zero) {  		SetupDiDestroyDeviceInfoList (deviceInfoSet);  	}  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try {  	SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA ()' da = new SP_DEVICE_INTERFACE_DATA ();  	Int32 bufferSize = 0' memberIndex = 0;  	deviceInfoSet = SetupDiGetClassDevs (ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);  	DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf (DeviceInterfaceData);  	while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  		SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  		{  			detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  			Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  			if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  				IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  				Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  				Marshal.FreeHGlobal (detailDataBuffer);  				if (memberIndex == Instance)  					return true;  			}  			else  				Marshal.FreeHGlobal (detailDataBuffer);  		}  		memberIndex++;  	}  }  catch (Exception ex) {  	Console.WriteLine ("{0} {1}"' ex.HelpLink' ex.Message);  	throw;  }  finally {  	if (deviceInfoSet != IntPtr.Zero) {  		SetupDiDestroyDeviceInfoList (deviceInfoSet);  	}  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: try {  	SP_DEVICE_INTERFACE_DATA DeviceInterfaceData = new SP_DEVICE_INTERFACE_DATA ()' da = new SP_DEVICE_INTERFACE_DATA ();  	Int32 bufferSize = 0' memberIndex = 0;  	deviceInfoSet = SetupDiGetClassDevs (ref Target' IntPtr.Zero' IntPtr.Zero' DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);  	DeviceInterfaceData.cbSize = da.cbSize = Marshal.SizeOf (DeviceInterfaceData);  	while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  		SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  		{  			detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  			Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  			if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  				IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  				Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  				Marshal.FreeHGlobal (detailDataBuffer);  				if (memberIndex == Instance)  					return true;  			}  			else  				Marshal.FreeHGlobal (detailDataBuffer);  		}  		memberIndex++;  	}  }  catch (Exception ex) {  	Console.WriteLine ("{0} {1}"' ex.HelpLink' ex.Message);  	throw;  }  finally {  	if (deviceInfoSet != IntPtr.Zero) {  		SetupDiDestroyDeviceInfoList (deviceInfoSet);  	}  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  	SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  	{  		detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  		Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  		if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  			IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  			Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  			Marshal.FreeHGlobal (detailDataBuffer);  			if (memberIndex == Instance)  				return true;  		}  		else  			Marshal.FreeHGlobal (detailDataBuffer);  	}  	memberIndex++;  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  	SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  	{  		detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  		Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  		if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  			IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  			Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  			Marshal.FreeHGlobal (detailDataBuffer);  			if (memberIndex == Instance)  				return true;  		}  		else  			Marshal.FreeHGlobal (detailDataBuffer);  	}  	memberIndex++;  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  	SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  	{  		detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  		Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  		if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  			IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  			Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  			Marshal.FreeHGlobal (detailDataBuffer);  			if (memberIndex == Instance)  				return true;  		}  		else  			Marshal.FreeHGlobal (detailDataBuffer);  	}  	memberIndex++;  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  	SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  	{  		detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  		Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  		if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  			IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  			Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  			Marshal.FreeHGlobal (detailDataBuffer);  			if (memberIndex == Instance)  				return true;  		}  		else  			Marshal.FreeHGlobal (detailDataBuffer);  	}  	memberIndex++;  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  	SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  	{  		detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  		Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  		if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  			IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  			Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  			Marshal.FreeHGlobal (detailDataBuffer);  			if (memberIndex == Instance)  				return true;  		}  		else  			Marshal.FreeHGlobal (detailDataBuffer);  	}  	memberIndex++;  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: while (SetupDiEnumDeviceInterfaces (deviceInfoSet' IntPtr.Zero' ref Target' memberIndex' ref DeviceInterfaceData)) {  	SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' IntPtr.Zero' 0' ref bufferSize' ref da);  	{  		detailDataBuffer = Marshal.AllocHGlobal (bufferSize);  		Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  		if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  			IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  			Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  			Marshal.FreeHGlobal (detailDataBuffer);  			if (memberIndex == Instance)  				return true;  		}  		else  			Marshal.FreeHGlobal (detailDataBuffer);  	}  	memberIndex++;  }  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: Marshal.WriteInt32 (detailDataBuffer' (IntPtr.Size == 4) ? (4 + Marshal.SystemDefaultCharSize) : 8);  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  	IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  	Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  	Marshal.FreeHGlobal (detailDataBuffer);  	if (memberIndex == Instance)  		return true;  }  else  	Marshal.FreeHGlobal (detailDataBuffer);  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  	IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  	Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  	Marshal.FreeHGlobal (detailDataBuffer);  	if (memberIndex == Instance)  		return true;  }  else  	Marshal.FreeHGlobal (detailDataBuffer);  
Magic Number,XOutput,ScpDevice,C:\repos\Stents-_XOutput\XOutput\ScpDevice.cs,Find,The following statement contains a magic number: if (SetupDiGetDeviceInterfaceDetail (deviceInfoSet' ref DeviceInterfaceData' detailDataBuffer' bufferSize' ref bufferSize' ref da)) {  	IntPtr pDevicePathName = new IntPtr (IntPtr.Size == 4 ? detailDataBuffer.ToInt32 () + 4 : detailDataBuffer.ToInt64 () + 4);  	Path = Marshal.PtrToStringAuto (pDevicePathName).ToUpper ();  	Marshal.FreeHGlobal (detailDataBuffer);  	if (memberIndex == Instance)  		return true;  }  else  	Marshal.FreeHGlobal (detailDataBuffer);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveOneDown.Click += (sender' e) => Swap (1' 2);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveTwoUp.Click += (sender' e) => Swap (2' 1);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveTwoDown.Click += (sender' e) => Swap (2' 3);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveTwoDown.Click += (sender' e) => Swap (2' 3);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveThreeUp.Click += (sender' e) => Swap (3' 2);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveThreeUp.Click += (sender' e) => Swap (3' 2);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveThreeDown.Click += (sender' e) => Swap (3' 4);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveThreeDown.Click += (sender' e) => Swap (3' 4);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveFourUp.Click += (sender' e) => Swap (4' 3);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.moveFourUp.Click += (sender' e) => Swap (4' 3);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.enabledThree.CheckedChanged += (sender' e) => enabledChanged (2);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.enabledFour.CheckedChanged += (sender' e) => enabledChanged (3);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.optionsThree.Click += (sender' e) => openOptions (2);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: this.optionsFour.Click += (sender' e) => openOptions (3);  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: boxes = new System.Windows.Forms.GroupBox[4] {  	controllerBoxOne'  	controllerBoxTwo'  	controllerBoxThree'  	controllerBoxFour  };  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: checks = new System.Windows.Forms.CheckBox[4] {  	enabledOne'  	enabledTwo'  	enabledThree'  	enabledFour  };  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,XOut,The following statement contains a magic number: options = new System.Windows.Forms.Button[4] {  	optionsOne'  	optionsTwo'  	optionsThree'  	optionsFour  };  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,StartStopBtn_Click,The following statement contains a magic number: if (StartStopBtn.Text == "Start") {  	if (optionsWindow != null) {  		System.Media.SystemSounds.Asterisk.Play ();  		optionsWindow.Focus ();  		return;  	}  	if (controllerManager.Start ()) {  		StartStopBtn.Text = "Stop";  		for (int i = 0; i < 4; i++) {  			checks [i].Enabled = false;  			isExclusive.Enabled = false;  			foreach (Control con in boxes [i].Controls) {  				con.Enabled = false;  			}  		}  	}  }  else {  	if (controllerManager.Stop ()) {  		StartStopBtn.Text = "Start";  		for (int i = 0; i < 4; i++) {  			checks [i].Enabled = true;  			isExclusive.Enabled = true;  			foreach (Control con in boxes [i].Controls) {  				con.Enabled = true;  			}  		}  	}  }  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,StartStopBtn_Click,The following statement contains a magic number: if (StartStopBtn.Text == "Start") {  	if (optionsWindow != null) {  		System.Media.SystemSounds.Asterisk.Play ();  		optionsWindow.Focus ();  		return;  	}  	if (controllerManager.Start ()) {  		StartStopBtn.Text = "Stop";  		for (int i = 0; i < 4; i++) {  			checks [i].Enabled = false;  			isExclusive.Enabled = false;  			foreach (Control con in boxes [i].Controls) {  				con.Enabled = false;  			}  		}  	}  }  else {  	if (controllerManager.Stop ()) {  		StartStopBtn.Text = "Start";  		for (int i = 0; i < 4; i++) {  			checks [i].Enabled = true;  			isExclusive.Enabled = true;  			foreach (Control con in boxes [i].Controls) {  				con.Enabled = true;  			}  		}  	}  }  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,StartStopBtn_Click,The following statement contains a magic number: if (controllerManager.Start ()) {  	StartStopBtn.Text = "Stop";  	for (int i = 0; i < 4; i++) {  		checks [i].Enabled = false;  		isExclusive.Enabled = false;  		foreach (Control con in boxes [i].Controls) {  			con.Enabled = false;  		}  	}  }  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,StartStopBtn_Click,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	checks [i].Enabled = false;  	isExclusive.Enabled = false;  	foreach (Control con in boxes [i].Controls) {  		con.Enabled = false;  	}  }  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,StartStopBtn_Click,The following statement contains a magic number: if (controllerManager.Stop ()) {  	StartStopBtn.Text = "Start";  	for (int i = 0; i < 4; i++) {  		checks [i].Enabled = true;  		isExclusive.Enabled = true;  		foreach (Control con in boxes [i].Controls) {  			con.Enabled = true;  		}  	}  }  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,StartStopBtn_Click,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	checks [i].Enabled = true;  	isExclusive.Enabled = true;  	foreach (Control con in boxes [i].Controls) {  		con.Enabled = true;  	}  }  
Magic Number,XOutput,XOut,C:\repos\Stents-_XOutput\XOutput\XOut.cs,UpdateInfo,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (dev [i] != null) {  		boxes [i].Visible = true;  		boxes [i].Text = (i + 1).ToString () + ": " + dev [i].name;  		checks [i].Visible = true;  	}  	else {  		boxes [i].Visible = false;  		checks [i].Visible = false;  	}  }  
Missing Default,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,getPov,The following switch statement is missing a default case: switch (i) {  case -1:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 0:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = false;  	break;  case 4500:  	b [0] = true;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 9000:  	b [0] = false;  	b [1] = false;  	b [2] = false;  	b [3] = true;  	break;  case 13500:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = true;  	break;  case 18000:  	b [0] = false;  	b [1] = true;  	b [2] = false;  	b [3] = false;  	break;  case 22500:  	b [0] = false;  	b [1] = true;  	b [2] = true;  	b [3] = false;  	break;  case 27000:  	b [0] = false;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  case 31500:  	b [0] = true;  	b [1] = false;  	b [2] = true;  	b [3] = false;  	break;  }  
Missing Default,XOutput,ControllerDevice,C:\repos\Stents-_XOutput\XOutput\ControllerDevice.cs,Analog,The following switch statement is missing a default case: switch (subType) {  case 0:  	//Normal  	return (byte)(p / 256);  case 1:  	//Inverted  	return (byte)((65535 - p) / 256);  case 2:  	//Half  	int m = (p - 32767) / 129;  	if (m < 0) {  		m = 0;  	}  	return (byte)m;  case 3:  	//Inverted Half  	m = (p - 32767) / 129;  	if (-m < 0) {  		m = 0;  	}  	return (byte)-m;  }  
