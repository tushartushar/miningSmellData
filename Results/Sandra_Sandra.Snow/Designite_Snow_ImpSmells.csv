Implementation smell,Namespace,Class,File,Method,Description
Long Method,Snow,Program,C:\repos\Sandra_Sandra.Snow\src\Snow\Program.cs,Main,The method has 134 lines of code.
Complex Method,Snow,Program,C:\repos\Sandra_Sandra.Snow\src\Snow\Program.cs,Main,Cyclomatic complexity of the method is 16
Complex Method,Snow,Program,C:\repos\Sandra_Sandra.Snow\src\Snow\Program.cs,CreateSettings,Cyclomatic complexity of the method is 8
Long Parameter List,Snow.Extensions,AtomResponse,C:\repos\Sandra_Sandra.Snow\src\Snow\Extensions\AtomResponse.cs,AtomResponse,The method has 6 parameters. Parameters: model' atomTitle' siteUrl' author' authorEmail' feedfileName
Long Parameter List,Snow.Extensions,FormatterExtensions,C:\repos\Sandra_Sandra.Snow\src\Snow\Extensions\FormatterExtensions.cs,AsRSS,The method has 5 parameters. Parameters: formatter' model' rssTitle' siteUrl' feedfileName
Long Parameter List,Snow.Extensions,FormatterExtensions,C:\repos\Sandra_Sandra.Snow\src\Snow\Extensions\FormatterExtensions.cs,AsAtom,The method has 7 parameters. Parameters: formatter' model' atomTitle' siteUrl' feedAuthor' feedAuthorEmail' feedfileName
Long Identifier,Snow.Extensions,RazorHelpers,C:\repos\Sandra_Sandra.Snow\src\Snow\Extensions\RazorHelpers.cs,,The length of the parameter GoogleUniversalAnalyticsFormat is 30.
Long Statement,Snow,Program,C:\repos\Sandra_Sandra.Snow\src\Snow\Program.cs,Main,The length of the statement  "                    var sourceDir = (settings.ThemesDir + Path.DirectorySeparatorChar + settings.Theme + Path.DirectorySeparatorChar + copyDirectory); " is 130.
Long Statement,Snow,Program,C:\repos\Sandra_Sandra.Snow\src\Snow\Program.cs,Main,The length of the statement  "                    var sourceFile = (settings.ThemesDir + Path.DirectorySeparatorChar + settings.Theme + Path.DirectorySeparatorChar + copyFile); " is 126.
Long Statement,Snow,Program,C:\repos\Sandra_Sandra.Snow\src\Snow\Program.cs,ComposeParsedFiles,The length of the statement  "                var outputFolder = Path.Combine(output' post.Url.Trim('/')); //Outputfolder is incorrect with leading slash on urlFormat " is 120.
Long Statement,Snow,Program,C:\repos\Sandra_Sandra.Snow\src\Snow\Program.cs,ComposeDrafts,The length of the statement  "                var outputFolder = Path.Combine(output' post.Url.Trim('/')); //Outputfolder is incorrect with leading slash on urlFormat " is 120.
Long Statement,Snow,SnowViewLocationConventions,C:\repos\Sandra_Sandra.Snow\src\Snow\SnowViewLocationConventions.cs,ConfigureViewLocationConventions,The length of the statement  "                (viewName' model' viewLocationContext) => Settings.ThemesDir + Settings.Theme + "/" + Settings.LayoutsRaw.TrimEnd('/') + "/" + viewName' " is 136.
Long Statement,Snow.Extensions,AtomResponse,C:\repos\Sandra_Sandra.Snow\src\Snow\Extensions\AtomResponse.cs,GetXmlContents,The length of the statement  "                var excerptHtml = Regex.Replace(post.ContentExcerpt' UrlRegex' m => siteUrl.TrimEnd('/') + "/" + m.Value.TrimStart('/')); " is 121.
Long Statement,Snow.Extensions,RssResponse,C:\repos\Sandra_Sandra.Snow\src\Snow\Extensions\RssResponse.cs,GetXmlContents,The length of the statement  "                var excerptHtml = Regex.Replace(post.ContentExcerpt' UrlRegex' m => siteUrl.TrimEnd('/') + "/" + m.Value.TrimStart('/')); " is 121.
Long Statement,Snow.Extensions,SitemapResponse,C:\repos\Sandra_Sandra.Snow\src\Snow\Extensions\SitemapResponse.cs,GetXmlContents,The length of the statement  "            var xDocument = new XDocument(new XDeclaration("1.0"' "utf-8"' "yes")' new XElement(blank+"urlset"' new XAttribute("xmlns"' blank.NamespaceName))); " is 147.
Long Statement,Snow.Extensions,StatusCodeExtension,C:\repos\Sandra_Sandra.Snow\src\Snow\Extensions\StatusCodeExtension.cs,ThrowIfNotSuccessful,The length of the statement  "                    Regex.Match(body' "<pre id=\"errorContents\">(?<content>.*)&lt;!DOCTYPE html&gt;"' RegexOptions.IgnoreCase | RegexOptions.Singleline); " is 134.
Long Statement,Snow.StaticFileProcessors,BaseProcessor,C:\repos\Sandra_Sandra.Snow\src\Snow\StaticFileProcessors\BaseProcessor.cs,ParseDirectories,The length of the statement  "            var destinationDirectory = Path.Combine(snowyData.Settings.PostsOutput' source.Substring(0' snowyData.File.File.IndexOf('.'))); " is 127.
Empty Catch Block,Snow,Program,C:\repos\Sandra_Sandra.Snow\src\Snow\Program.cs,ComposeDrafts,The method has an empty catch block.
Magic Number,Snow,PostParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParser.cs,ParseSettings,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i].Trim();                  var setting = line.Split(new[] { ':' }' 2' StringSplitOptions.RemoveEmptyEntries);                    if (setting.Length == 1)                  {                      //This most likely means that the setting has sub-settings                      var counter = i + 1;                      var subLines = new List<string>();                      var settingName = setting[0];                        for (; counter < lines.Length; counter++)                      {                          var subLine = lines[counter];                            if (char.IsWhiteSpace(subLine' 0))                          {                              subLines.Add(subLine);                              continue;                          }                            break;                      }                        var subSettings = SubSettingParsers[settingName].Invoke(subLines);                        result.Add(setting[0]' subSettings);                        i = counter - 1;                  }                  else                  {                      result.Add(setting[0].Trim()' setting[1].Trim());                  }              }
Magic Number,Snow,PostParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParser.cs,SeriesParser,The following statement contains a magic number: foreach (var lineSplit in subLines.Select(t => t.Split(new[] { ':' }' 2' StringSplitOptions.RemoveEmptyEntries)))              {                  switch (lineSplit[0].Trim())                  {                      case "name":                      {                          seriesResult.Name = lineSplit[1].Trim();                          break;                      }                      case "current":                      {                          seriesResult.Current = int.Parse(lineSplit[1].Trim());                          break;                      }                      case "part":                      {                          seriesResult.Parts.Add(partCount' new Series.Part                          {                              Name = lineSplit[1].Trim()                          });                          partCount++;                          break;                      }                  }              }
Magic Number,Snow,SnowServer,C:\repos\Sandra_Sandra.Snow\src\Snow\SnowServer.cs,Start,The following statement contains a magic number: var options = new StartOptions              {                  ServerFactory = "Nowin"'                  Port = 5498              };
Magic Number,Snow,SnowSettings,C:\repos\Sandra_Sandra.Snow\src\Snow\SnowSettings.cs,Default,The following statement contains a magic number: return new SnowSettings                {                    CurrentDir = directory.TrimEnd('/')'                    Posts = "_posts"'                    Layouts = "_layouts"'                    Theme = "default"'                    PostsOutput = "Website"'                    PagesOutput = "Website"'                    PostUrlFormat = "yyyy/MM/dd/slug"'                    PageUrlFormat = "slug"'                    CopyDirectories = new string[] {}'                    CopyFiles = new string[] {}'                    ProcessFiles = new List<StaticFile>()'                    PageSize = 10'                    FeedSize = 10'                    Author = string.Empty'                    Email = string.Empty'                    DefaultPostLayout = "post"'                    DefaultPageLayout = "page"                };
Magic Number,Snow,SnowSettings,C:\repos\Sandra_Sandra.Snow\src\Snow\SnowSettings.cs,Default,The following statement contains a magic number: return new SnowSettings                {                    CurrentDir = directory.TrimEnd('/')'                    Posts = "_posts"'                    Layouts = "_layouts"'                    Theme = "default"'                    PostsOutput = "Website"'                    PagesOutput = "Website"'                    PostUrlFormat = "yyyy/MM/dd/slug"'                    PageUrlFormat = "slug"'                    CopyDirectories = new string[] {}'                    CopyFiles = new string[] {}'                    ProcessFiles = new List<StaticFile>()'                    PageSize = 10'                    FeedSize = 10'                    Author = string.Empty'                    Email = string.Empty'                    DefaultPostLayout = "post"'                    DefaultPageLayout = "page"                };
Magic Number,Snow.PostParsers,MarkdownFileParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParsers\MarkdownFileParser.cs,ParseDataFromFile,The following statement contains a magic number: if (startOfSettingsIndex >= 0)              {                  //Find the second index of --- after the first                  var endOfSettingsIndex = rawPost.IndexOf("---"' startOfSettingsIndex + 3'                      StringComparison.InvariantCultureIgnoreCase);                    //If we find the 2nd index' parse the settings                  //Otherwise we assume there's no header or settings...                  if (endOfSettingsIndex >= 0)                  {                      parsedFile.Header = rawPost.Substring(startOfSettingsIndex' endOfSettingsIndex + 3);                      parsedFile.Body = rawPost.Substring(endOfSettingsIndex + 3' rawPost.Length - (endOfSettingsIndex + 3));                  }              }              else              {                  parsedFile.Body = rawPost;              }
Magic Number,Snow.PostParsers,MarkdownFileParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParsers\MarkdownFileParser.cs,ParseDataFromFile,The following statement contains a magic number: if (startOfSettingsIndex >= 0)              {                  //Find the second index of --- after the first                  var endOfSettingsIndex = rawPost.IndexOf("---"' startOfSettingsIndex + 3'                      StringComparison.InvariantCultureIgnoreCase);                    //If we find the 2nd index' parse the settings                  //Otherwise we assume there's no header or settings...                  if (endOfSettingsIndex >= 0)                  {                      parsedFile.Header = rawPost.Substring(startOfSettingsIndex' endOfSettingsIndex + 3);                      parsedFile.Body = rawPost.Substring(endOfSettingsIndex + 3' rawPost.Length - (endOfSettingsIndex + 3));                  }              }              else              {                  parsedFile.Body = rawPost;              }
Magic Number,Snow.PostParsers,MarkdownFileParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParsers\MarkdownFileParser.cs,ParseDataFromFile,The following statement contains a magic number: if (startOfSettingsIndex >= 0)              {                  //Find the second index of --- after the first                  var endOfSettingsIndex = rawPost.IndexOf("---"' startOfSettingsIndex + 3'                      StringComparison.InvariantCultureIgnoreCase);                    //If we find the 2nd index' parse the settings                  //Otherwise we assume there's no header or settings...                  if (endOfSettingsIndex >= 0)                  {                      parsedFile.Header = rawPost.Substring(startOfSettingsIndex' endOfSettingsIndex + 3);                      parsedFile.Body = rawPost.Substring(endOfSettingsIndex + 3' rawPost.Length - (endOfSettingsIndex + 3));                  }              }              else              {                  parsedFile.Body = rawPost;              }
Magic Number,Snow.PostParsers,MarkdownFileParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParsers\MarkdownFileParser.cs,ParseDataFromFile,The following statement contains a magic number: if (startOfSettingsIndex >= 0)              {                  //Find the second index of --- after the first                  var endOfSettingsIndex = rawPost.IndexOf("---"' startOfSettingsIndex + 3'                      StringComparison.InvariantCultureIgnoreCase);                    //If we find the 2nd index' parse the settings                  //Otherwise we assume there's no header or settings...                  if (endOfSettingsIndex >= 0)                  {                      parsedFile.Header = rawPost.Substring(startOfSettingsIndex' endOfSettingsIndex + 3);                      parsedFile.Body = rawPost.Substring(endOfSettingsIndex + 3' rawPost.Length - (endOfSettingsIndex + 3));                  }              }              else              {                  parsedFile.Body = rawPost;              }
Magic Number,Snow.PostParsers,MarkdownFileParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParsers\MarkdownFileParser.cs,ParseDataFromFile,The following statement contains a magic number: var endOfExcerpt = rawPost.IndexOf("---end"' startOfExcerpt + 10' StringComparison.InvariantCultureIgnoreCase);
Magic Number,Snow.PostParsers,MarkdownFileParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParsers\MarkdownFileParser.cs,ParseDataFromFile,The following statement contains a magic number: if (startOfExcerpt >= 0 && endOfExcerpt > startOfExcerpt)              {                  parsedFile.Excerpt = rawPost.Substring(startOfExcerpt + 10' endOfExcerpt - (startOfExcerpt + 10));                  parsedFile.Body = rawPost.Substring(endOfExcerpt + 6' rawPost.Length - (endOfExcerpt + 6));              }
Magic Number,Snow.PostParsers,MarkdownFileParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParsers\MarkdownFileParser.cs,ParseDataFromFile,The following statement contains a magic number: if (startOfExcerpt >= 0 && endOfExcerpt > startOfExcerpt)              {                  parsedFile.Excerpt = rawPost.Substring(startOfExcerpt + 10' endOfExcerpt - (startOfExcerpt + 10));                  parsedFile.Body = rawPost.Substring(endOfExcerpt + 6' rawPost.Length - (endOfExcerpt + 6));              }
Magic Number,Snow.PostParsers,MarkdownFileParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParsers\MarkdownFileParser.cs,ParseDataFromFile,The following statement contains a magic number: if (startOfExcerpt >= 0 && endOfExcerpt > startOfExcerpt)              {                  parsedFile.Excerpt = rawPost.Substring(startOfExcerpt + 10' endOfExcerpt - (startOfExcerpt + 10));                  parsedFile.Body = rawPost.Substring(endOfExcerpt + 6' rawPost.Length - (endOfExcerpt + 6));              }
Magic Number,Snow.PostParsers,MarkdownFileParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParsers\MarkdownFileParser.cs,ParseDataFromFile,The following statement contains a magic number: if (startOfExcerpt >= 0 && endOfExcerpt > startOfExcerpt)              {                  parsedFile.Excerpt = rawPost.Substring(startOfExcerpt + 10' endOfExcerpt - (startOfExcerpt + 10));                  parsedFile.Body = rawPost.Substring(endOfExcerpt + 6' rawPost.Length - (endOfExcerpt + 6));              }
Missing Default,Snow,PostParser,C:\repos\Sandra_Sandra.Snow\src\Snow\PostParser.cs,SeriesParser,The following switch statement is missing a default case: switch (lineSplit[0].Trim())                  {                      case "name":                      {                          seriesResult.Name = lineSplit[1].Trim();                          break;                      }                      case "current":                      {                          seriesResult.Current = int.Parse(lineSplit[1].Trim());                          break;                      }                      case "part":                      {                          seriesResult.Parts.Add(partCount' new Series.Part                          {                              Name = lineSplit[1].Trim()                          });                          partCount++;                          break;                      }                  }
Missing Default,Snow.Models,Post,C:\repos\Sandra_Sandra.Snow\src\Snow\Models\Post.cs,SetHeaderSettings,The following switch statement is missing a default case: switch (setting.Key.ToLower())                  {                      case "categories":                      case "category":                          {                              var categories = ((string)setting.Value).Split(                                  new[] { "'" }'                                  StringSplitOptions.RemoveEmptyEntries);                                Categories = categories.Select(x => x.Trim()).OrderBy(x => x);                                break;                          }                      case "title":                          {                              Title = (string)setting.Value;                              break;                          }                      case "layout":                          {                              Layout = (string)setting.Value;                              break;                          }                      case "author":                          {                              Author = (string)setting.Value;                              break;                          }                      case "email":                          {                              Email = (string)setting.Value;                              break;                          }                      case "published":                          {                              Published published;                              Enum.TryParse((string)setting.Value' true' out published);                              Published = published;                              break;                          }                      case "series":                          {                              Series = (Series)setting.Value;                              break;                          }                      case "metadescription":                          {                              MetaDescription = (string)setting.Value;                              break;                          }                      case "tags":                      case "keywords":                          {                              Keywords = (string)setting.Value;                                break;                          }                  }
