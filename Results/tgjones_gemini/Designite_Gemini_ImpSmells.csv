Implementation smell,Namespace,Class,File,Method,Description
Long Method,Gemini.Framework.Controls,HwndWrapper,C:\repos\tgjones_gemini\src\Gemini\Framework\Controls\HwndWrapper.cs,WndProc,The method has 115 lines of code.
Complex Method,Gemini.Framework.Behaviors,BindableTreeViewSelectedItemBehavior,C:\repos\tgjones_gemini\src\Gemini\Framework\Behaviors\BindableTreeViewSelectedItemBehavior.cs,GetTreeViewItem,Cyclomatic complexity of the method is 8
Complex Method,Gemini.Modules.Shell.ViewModels,ShellViewModel,C:\repos\tgjones_gemini\src\Gemini\Modules\Shell\ViewModels\ShellViewModel.cs,OnViewLoaded,Cyclomatic complexity of the method is 12
Long Parameter List,Gemini.Framework.Controls,HwndWrapper,C:\repos\tgjones_gemini\src\Gemini\Framework\Controls\HwndWrapper.cs,WndProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,Gemini.Framework.Win32,NativeMethods,C:\repos\tgjones_gemini\src\Gemini\Framework\Win32\NativeMethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hwnd' hwndInsertAfter' x' y' width' height' flags
Long Parameter List,Gemini.Framework.Win32,NativeMethods,C:\repos\tgjones_gemini\src\Gemini\Framework\Win32\NativeMethods.cs,CreateWindowEx,The method has 12 parameters. Parameters: exStyle' className' windowName' style' x' y' width' height' hwndParent' hMenu' hInstance' pvParam
Long Parameter List,Gemini.Modules.MainMenu,MenuBuilder,C:\repos\tgjones_gemini\src\Gemini\Modules\MainMenu\MenuBuilder.cs,MenuBuilder,The method has 8 parameters. Parameters: commandService' menuBars' menus' menuItemGroups' menuItems' excludeMenus' excludeMenuItemGroups' excludeMenuItems
Long Parameter List,Gemini.Modules.Shell.Views,LayoutUtility,C:\repos\tgjones_gemini\src\Gemini\Modules\Shell\Views\LayoutUtility.cs,LoadLayout,The method has 5 parameters. Parameters: manager' stream' addDocumentCallback' addToolCallback' items
Long Parameter List,Gemini.Modules.ToolBars,ToolBarBuilder,C:\repos\tgjones_gemini\src\Gemini\Modules\ToolBars\ToolBarBuilder.cs,ToolBarBuilder,The method has 7 parameters. Parameters: commandService' toolBars' toolBarItemGroups' toolBarItems' excludeToolBars' excludeToolBarItemGroups' excludeToolBarItems
Long Identifier,Gemini.Framework.Commands,CommandRouter,C:\repos\tgjones_gemini\src\Gemini\Framework\Commands\CommandRouter.cs,,The length of the parameter CommandListHandlerInterfaceType is 31.
Long Identifier,Gemini.Framework.Commands,CommandRouter,C:\repos\tgjones_gemini\src\Gemini\Framework\Commands\CommandRouter.cs,,The length of the parameter _commandHandlerTypeToCommandDefinitionTypesLookup is 49.
Long Identifier,Gemini.Framework.Controls,DynamicStyle,C:\repos\tgjones_gemini\src\Gemini\Framework\Controls\DynamicStyle.cs,,The length of the parameter ItemContainerBaseStyleProperty is 30.
Long Identifier,Gemini.Framework.Controls,DynamicStyle,C:\repos\tgjones_gemini\src\Gemini\Framework\Controls\DynamicStyle.cs,,The length of the parameter ItemContainerDerivedStyleProperty is 33.
Long Identifier,Gemini.Framework.Menus,ExcludeMenuItemGroupDefinition,C:\repos\tgjones_gemini\src\Gemini\Framework\Menus\ExcludeMenuItemGroupDefinition.cs,,The length of the parameter _menuItemGroupDefinitionToExclude is 33.
Long Identifier,Gemini.Framework.Themes,ThemeManager,C:\repos\tgjones_gemini\src\Gemini\Framework\Themes\ThemeManager.cs,,The length of the parameter _applicationResourceDictionary is 30.
Long Identifier,Gemini.Framework.ToolBars,ExcludeToolBarItemDefinition,C:\repos\tgjones_gemini\src\Gemini\Framework\ToolBars\ExcludeToolBarItemDefinition.cs,,The length of the parameter _toolBarItemDefinitionToExclude is 31.
Long Identifier,Gemini.Framework.ToolBars,ExcludeToolBarItemGroupDefinition,C:\repos\tgjones_gemini\src\Gemini\Framework\ToolBars\ExcludeToolBarItemGroupDefinition.cs,,The length of the parameter _toolBarItemGroupDefinitionToExclude is 36.
Long Identifier,Gemini.Modules.MainMenu.Controls,MenuEx,C:\repos\tgjones_gemini\src\Gemini\Modules\MainMenu\Controls\MenuEx.cs,AutoHidePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Statement,Gemini.Framework.Behaviors,CustomGlowWindowBehavior,C:\repos\tgjones_gemini\src\Gemini\Framework\Behaviors\CustomGlowWindowBehavior.cs,AssociatedObjectOnLoaded,The length of the statement  "                this.AssociatedObject.IsVisibleChanged += new DependencyPropertyChangedEventHandler(this.AssociatedObjectIsVisibleChanged); " is 123.
Long Statement,Gemini.Framework.Behaviors,CustomGlowWindowBehavior,C:\repos\tgjones_gemini\src\Gemini\Framework\Behaviors\CustomGlowWindowBehavior.cs,AssociatedObjectOnLoaded,The length of the statement  "                    this.AssociatedObject.IsVisibleChanged -= new DependencyPropertyChangedEventHandler(this.AssociatedObjectIsVisibleChanged); " is 123.
Long Statement,Gemini.Framework.Behaviors,CustomGlowWindowBehavior,C:\repos\tgjones_gemini\src\Gemini\Framework\Behaviors\CustomGlowWindowBehavior.cs,StartOpacityStoryboard,The length of the statement  "            if (this.left == null || this.left.OpacityStoryboard == null || (this.right == null || this.right.OpacityStoryboard == null) || (this.top == null || this.top.OpacityStoryboard == null || (this.bottom == null || this.bottom.OpacityStoryboard == null))) " is 251.
Long Statement,Gemini.Framework.Commands,CommandRouter,C:\repos\tgjones_gemini\src\Gemini\Framework\Commands\CommandRouter.cs,CreateCommandHandlerWrapper,The length of the statement  "                return CommandHandlerWrapper.FromCommandHandler(CommandHandlerInterfaceType.MakeGenericType(commandDefinitionType)' commandHandler); " is 132.
Long Statement,Gemini.Framework.Commands,CommandRouter,C:\repos\tgjones_gemini\src\Gemini\Framework\Commands\CommandRouter.cs,CreateCommandHandlerWrapper,The length of the statement  "                return CommandHandlerWrapper.FromCommandListHandler(CommandListHandlerInterfaceType.MakeGenericType(commandDefinitionType)' commandHandler); " is 140.
Long Statement,Gemini.Framework.Commands,CommandRouter,C:\repos\tgjones_gemini\src\Gemini\Framework\Commands\CommandRouter.cs,EnsureCommandHandlerTypeToCommandDefinitionTypesPopulated,The length of the statement  "                var commandDefinitionTypes = _commandHandlerTypeToCommandDefinitionTypesLookup[commandHandlerType] = new HashSet<Type>(); " is 121.
Long Statement,Gemini.Framework.Commands,CommandRouter,C:\repos\tgjones_gemini\src\Gemini\Framework\Commands\CommandRouter.cs,EnsureCommandHandlerTypeToCommandDefinitionTypesPopulated,The length of the statement  "                foreach (var handledCommandDefinitionType in GetAllHandledCommandedDefinitionTypes(commandHandlerType' CommandHandlerInterfaceType)) " is 132.
Long Statement,Gemini.Framework.Commands,CommandRouter,C:\repos\tgjones_gemini\src\Gemini\Framework\Commands\CommandRouter.cs,EnsureCommandHandlerTypeToCommandDefinitionTypesPopulated,The length of the statement  "                foreach (var handledCommandDefinitionType in GetAllHandledCommandedDefinitionTypes(commandHandlerType' CommandListHandlerInterfaceType)) " is 136.
Long Statement,Gemini.Modules.MainMenu.Views,MainMenuView,C:\repos\tgjones_gemini\src\Gemini\Modules\MainMenu\Views\MainMenuView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Gemini;component/modules/mainmenu/views/mainmenuview.xaml"' System.UriKind.Relative); " is 131.
Long Statement,Gemini.Modules.Shell.Commands,NewFileCommandHandler,C:\repos\tgjones_gemini\src\Gemini\Modules\Shell\Commands\NewFileCommandHandler.cs,Run,The length of the statement  "                    await tag.EditorProvider.New(editor' string.Format(Resources.FileNewUntitled' (_newFileCounter++) + tag.FileType.FileExtension)); " is 129.
Long Statement,Gemini.Modules.Shell.Services,LayoutItemStatePersister,C:\repos\tgjones_gemini\src\Gemini\Modules\Shell\Services\LayoutItemStatePersister.cs,SaveState,The length of the statement  "                                "A ViewModel that participates in LayoutItem.ShouldReopenOnStart must be decorated with an ExportAttribute who's ContractType that inherits from ILayoutItem' infringing type is {0}."' itemType)); " is 195.
Long Statement,Gemini.Modules.Shell.Services,LayoutItemStatePersister,C:\repos\tgjones_gemini\src\Gemini\Modules\Shell\Services\LayoutItemStatePersister.cs,SaveState,The length of the statement  "                                "A ViewModel that participates in LayoutItem.ShouldReopenOnStart can't be decorated with more than one ExportAttribute which inherits from ILayoutItem. infringing type is {0}."' itemType)); " is 189.
Long Statement,Gemini.Modules.Shell.Services,LayoutItemStatePersister,C:\repos\tgjones_gemini\src\Gemini\Modules\Shell\Services\LayoutItemStatePersister.cs,SaveState,The length of the statement  "                        // TODO: it is possible to save generic types. It requires that every generic parameter is saved' along with its position in the generic tree... A lot of work. " is 159.
Long Statement,Gemini.Modules.Shell.Services,LayoutItemStatePersister,C:\repos\tgjones_gemini\src\Gemini\Modules\Shell\Services\LayoutItemStatePersister.cs,SaveState,The length of the statement  "                        // Here's the tricky part. Because some items might fail to save their state' or they might be removed (a plug-in assembly deleted and etc.) " is 140.
Long Statement,Gemini.Modules.StatusBar.Views,StatusBarView,C:\repos\tgjones_gemini\src\Gemini\Modules\StatusBar\Views\StatusBarView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Gemini;component/modules/statusbar/views/statusbarview.xaml"' System.UriKind.Relative); " is 133.
Long Statement,Gemini.Modules.Toolbox.Views,ToolboxView,C:\repos\tgjones_gemini\src\Gemini\Modules\Toolbox\Views\ToolboxView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Gemini;component/modules/toolbox/views/toolboxview.xaml"' System.UriKind.Relative); " is 129.
Long Statement,Gemini.Modules.Toolbox.Views,ToolboxView,C:\repos\tgjones_gemini\src\Gemini\Modules\Toolbox\Views\ToolboxView.xaml.cs,Connect,The length of the statement  "            this.ListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnListBoxPreviewMouseLeftButtonDown); " is 134.
Long Statement,Gemini.Modules.UndoRedo.Views,HistoryView,C:\repos\tgjones_gemini\src\Gemini\Modules\UndoRedo\Views\HistoryView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Gemini;component/modules/undoredo/views/historyview.xaml"' System.UriKind.Relative); " is 130.
Long Statement,Gemini.Modules.UndoRedo.Views,HistoryView,C:\repos\tgjones_gemini\src\Gemini\Modules\UndoRedo\Views\HistoryView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Border)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.HistoryItemMouseLeftButtonUp); " is 148.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\tgjones_gemini\src\Gemini\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Gemini.Framework.Behaviors,CustomGlowWindowBehavior,C:\repos\tgjones_gemini\src\Gemini\Framework\Behaviors\CustomGlowWindowBehavior.cs,Update,The conditional expression  "this.left == null || this.right == null || (this.top == null || this.bottom == null)"  is complex.
Complex Conditional,Gemini.Framework.Behaviors,CustomGlowWindowBehavior,C:\repos\tgjones_gemini\src\Gemini\Framework\Behaviors\CustomGlowWindowBehavior.cs,SetOpacityTo,The conditional expression  "this.left == null || this.right == null || (this.top == null || this.bottom == null)"  is complex.
Complex Conditional,Gemini.Framework.Behaviors,CustomGlowWindowBehavior,C:\repos\tgjones_gemini\src\Gemini\Framework\Behaviors\CustomGlowWindowBehavior.cs,StartOpacityStoryboard,The conditional expression  "this.left == null || this.left.OpacityStoryboard == null || (this.right == null || this.right.OpacityStoryboard == null) || (this.top == null || this.top.OpacityStoryboard == null || (this.bottom == null || this.bottom.OpacityStoryboard == null))"  is complex.
Virtual Method Call from Constructor,Gemini,AppBootstrapper,C:\repos\tgjones_gemini\src\Gemini\AppBootstrapper.cs,AppBootstrapper,The constructor "AppBootstrapper" calls a virtual method "PreInitialize".
Empty Catch Block,Gemini.Modules.Shell.Views,LayoutUtility,C:\repos\tgjones_gemini\src\Gemini\Modules\Shell\Views\LayoutUtility.cs,LoadLayout,The method has an empty catch block.
Magic Number,Gemini.Framework.Win32,NativeMethods,C:\repos\tgjones_gemini\src\Gemini\Framework\Win32\NativeMethods.cs,HighWord,The following statement contains a magic number: return (short) (input >> 16);
Magic Number,Gemini.Modules.StatusBar.Views,StatusBarView,C:\repos\tgjones_gemini\src\Gemini\Modules\StatusBar\Views\StatusBarView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 2:                            #line 21 "..\..\..\..\..\Modules\StatusBar\Views\StatusBarView.xaml"              ((System.Windows.Controls.Grid)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnStatusBarGridLoaded);                            #line default              #line hidden              break;              }
Missing Default,Gemini.Framework.Controls,HwndWrapper,C:\repos\tgjones_gemini\src\Gemini\Framework\Controls\HwndWrapper.cs,WndProc,The following switch statement is missing a default case: switch (msg)              {                  case NativeMethods.WM_MOUSEWHEEL:                      if (_mouseInWindow)                      {                          int delta = NativeMethods.GetWheelDeltaWParam(wParam.ToInt32());                          RaiseHwndMouseWheel(new HwndMouseEventArgs(_mouseState' delta' 0));                      }                      break;                  case NativeMethods.WM_LBUTTONDOWN:                      _mouseState.LeftButton = MouseButtonState.Pressed;                      RaiseHwndLButtonDown(new HwndMouseEventArgs(_mouseState));                      break;                  case NativeMethods.WM_LBUTTONUP:                      _mouseState.LeftButton = MouseButtonState.Released;                      RaiseHwndLButtonUp(new HwndMouseEventArgs(_mouseState));                      break;                  case NativeMethods.WM_LBUTTONDBLCLK:                      RaiseHwndLButtonDblClick(new HwndMouseEventArgs(_mouseState' MouseButton.Left));                      break;                  case NativeMethods.WM_RBUTTONDOWN:                      _mouseState.RightButton = MouseButtonState.Pressed;                      RaiseHwndRButtonDown(new HwndMouseEventArgs(_mouseState));                      break;                  case NativeMethods.WM_RBUTTONUP:                      _mouseState.RightButton = MouseButtonState.Released;                      RaiseHwndRButtonUp(new HwndMouseEventArgs(_mouseState));                      break;                  case NativeMethods.WM_RBUTTONDBLCLK:                      RaiseHwndRButtonDblClick(new HwndMouseEventArgs(_mouseState' MouseButton.Right));                      break;                  case NativeMethods.WM_MBUTTONDOWN:                      _mouseState.MiddleButton = MouseButtonState.Pressed;                      RaiseHwndMButtonDown(new HwndMouseEventArgs(_mouseState));                      break;                  case NativeMethods.WM_MBUTTONUP:                      _mouseState.MiddleButton = MouseButtonState.Released;                      RaiseHwndMButtonUp(new HwndMouseEventArgs(_mouseState));                      break;                  case NativeMethods.WM_MBUTTONDBLCLK:                      RaiseHwndMButtonDblClick(new HwndMouseEventArgs(_mouseState' MouseButton.Middle));                      break;                  case NativeMethods.WM_XBUTTONDOWN:                      if (((int) wParam & NativeMethods.MK_XBUTTON1) != 0)                      {                          _mouseState.X1Button = MouseButtonState.Pressed;                          RaiseHwndX1ButtonDown(new HwndMouseEventArgs(_mouseState));                      }                      else if (((int) wParam & NativeMethods.MK_XBUTTON2) != 0)                      {                          _mouseState.X2Button = MouseButtonState.Pressed;                          RaiseHwndX2ButtonDown(new HwndMouseEventArgs(_mouseState));                      }                      break;                  case NativeMethods.WM_XBUTTONUP:                      if (((int) wParam & NativeMethods.MK_XBUTTON1) != 0)                      {                          _mouseState.X1Button = MouseButtonState.Released;                          RaiseHwndX1ButtonUp(new HwndMouseEventArgs(_mouseState));                      }                      else if (((int) wParam & NativeMethods.MK_XBUTTON2) != 0)                      {                          _mouseState.X2Button = MouseButtonState.Released;                          RaiseHwndX2ButtonUp(new HwndMouseEventArgs(_mouseState));                      }                      break;                  case NativeMethods.WM_XBUTTONDBLCLK:                      if (((int) wParam & NativeMethods.MK_XBUTTON1) != 0)                          RaiseHwndX1ButtonDblClick(new HwndMouseEventArgs(_mouseState' MouseButton.XButton1));                      else if (((int) wParam & NativeMethods.MK_XBUTTON2) != 0)                          RaiseHwndX2ButtonDblClick(new HwndMouseEventArgs(_mouseState' MouseButton.XButton2));                      break;                  case NativeMethods.WM_MOUSEMOVE:                      // If the application isn't in focus' we don't handle this message                      if (!_applicationHasFocus)                          break;                        // record the prevous and new position of the mouse                      _mouseState.ScreenPosition = PointToScreen(new Point(                          NativeMethods.GetXLParam((int) lParam)'                          NativeMethods.GetYLParam((int) lParam)));                        if (!_mouseInWindow)                      {                          _mouseInWindow = true;                            RaiseHwndMouseEnter(new HwndMouseEventArgs(_mouseState));                            // Track the previously focused window' and set focus to this window.                          _hWndPrev = NativeMethods.GetFocus();                          NativeMethods.SetFocus(_hWnd);                            // send the track mouse event so that we get the WM_MOUSELEAVE message                          var tme = new NativeMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf(typeof (NativeMethods.TRACKMOUSEEVENT))'                              dwFlags = NativeMethods.TME_LEAVE'                              hWnd = hwnd                          };                          NativeMethods.TrackMouseEvent(ref tme);                      }                        if (_mouseState.ScreenPosition != _previousPosition)                          RaiseHwndMouseMove(new HwndMouseEventArgs(_mouseState));                        _previousPosition = _mouseState.ScreenPosition;                        break;                  case NativeMethods.WM_MOUSELEAVE:                        // If we have capture' we ignore this message because we're just                      // going to reset the cursor position back into the window                      if (_isMouseCaptured)                          break;                        // Reset the state which releases all buttons and                       // marks the mouse as not being in the window.                      ResetMouseState();                        RaiseHwndMouseLeave(new HwndMouseEventArgs(_mouseState));                        NativeMethods.SetFocus(_hWndPrev);                        break;              }
Missing Default,Gemini.Modules.StatusBar.Views,StatusBarView,C:\repos\tgjones_gemini\src\Gemini\Modules\StatusBar\Views\StatusBarView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.StatusBar = ((System.Windows.Controls.Primitives.StatusBar)(target));              return;              }
Missing Default,Gemini.Modules.StatusBar.Views,StatusBarView,C:\repos\tgjones_gemini\src\Gemini\Modules\StatusBar\Views\StatusBarView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 2:                            #line 21 "..\..\..\..\..\Modules\StatusBar\Views\StatusBarView.xaml"              ((System.Windows.Controls.Grid)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnStatusBarGridLoaded);                            #line default              #line hidden              break;              }
Missing Default,Gemini.Modules.Toolbox.Views,ToolboxView,C:\repos\tgjones_gemini\src\Gemini\Modules\Toolbox\Views\ToolboxView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.ListBox = ((System.Windows.Controls.ListBox)(target));                            #line 13 "..\..\..\..\..\Modules\Toolbox\Views\ToolboxView.xaml"              this.ListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnListBoxPreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 14 "..\..\..\..\..\Modules\Toolbox\Views\ToolboxView.xaml"              this.ListBox.MouseMove += new System.Windows.Input.MouseEventHandler(this.OnListBoxMouseMove);                            #line default              #line hidden              return;              }
Missing Default,Gemini.Modules.UndoRedo.Views,HistoryView,C:\repos\tgjones_gemini\src\Gemini\Modules\UndoRedo\Views\HistoryView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 23 "..\..\..\..\..\Modules\UndoRedo\Views\HistoryView.xaml"              ((System.Windows.Controls.Border)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.HistoryItemMouseLeftButtonUp);                            #line default              #line hidden              break;              }
