Implementation smell,Namespace,Class,File,Method,Description
Long Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,readFile,The method has 107 lines of code.
Long Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The method has 102 lines of code.
Long Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,analyze,The method has 133 lines of code.
Long Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The method has 235 lines of code.
Long Method,kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor,SentenceSegmentor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\SupplementPlugin\PlainTextProcessor\SentenceSegmentor\SentenceSegmentor.cs,doProcess,The method has 140 lines of code.
Complex Method,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,activateWorkflow,Cyclomatic complexity of the method is 12
Complex Method,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfSentence,Cyclomatic complexity of the method is 8
Complex Method,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfDocument,Cyclomatic complexity of the method is 14
Complex Method,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,analyzeInSingleThread,Cyclomatic complexity of the method is 22
Complex Method,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,Cyclomatic complexity of the method is 37
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,readFile,Cyclomatic complexity of the method is 27
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,ConnectionNot,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\ConnectionNot.cs,readFile,Cyclomatic complexity of the method is 14
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,Cyclomatic complexity of the method is 8
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,Cyclomatic complexity of the method is 14
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,Cyclomatic complexity of the method is 20
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,analyze,Cyclomatic complexity of the method is 44
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,printChart,Cyclomatic complexity of the method is 10
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,preReplace,Cyclomatic complexity of the method is 12
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,Cyclomatic complexity of the method is 16
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,Cyclomatic complexity of the method is 12
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,insert,Cyclomatic complexity of the method is 8
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,nextkey,Cyclomatic complexity of the method is 11
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,search,Cyclomatic complexity of the method is 8
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Trie,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Trie.cs,node_alloc,Cyclomatic complexity of the method is 8
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Trie,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Trie.cs,node_free,Cyclomatic complexity of the method is 8
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Trie,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Trie.cs,read_dic,Cyclomatic complexity of the method is 8
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Trie,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Trie.cs,search,Cyclomatic complexity of the method is 10
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Trie,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Trie.cs,store,Cyclomatic complexity of the method is 9
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,HMMTagger,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\HMMTagger.cs,compute_wt,Cyclomatic complexity of the method is 10
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,Cyclomatic complexity of the method is 93
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.MorphemeProcessor.SimpleMAResult09,SimpleMAResult09,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\SupplementPlugin\MorphemeProcessor\SimpleMAResult09\SimpleMAResult09.cs,doProcess,Cyclomatic complexity of the method is 10
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.MorphemeProcessor.SimpleMAResult22,SimpleMAResult22,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\SupplementPlugin\MorphemeProcessor\SimpleMAResult22\SimpleMAResult22.cs,doProcess,Cyclomatic complexity of the method is 10
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor,SentenceSegmentor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\SupplementPlugin\PlainTextProcessor\SentenceSegmentor\SentenceSegmentor.cs,isSym,Cyclomatic complexity of the method is 8
Complex Method,kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor,SentenceSegmentor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\SupplementPlugin\PlainTextProcessor\SentenceSegmentor\SentenceSegmentor.cs,doProcess,Cyclomatic complexity of the method is 36
Complex Method,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toJamo,Cyclomatic complexity of the method is 12
Complex Method,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,Cyclomatic complexity of the method is 15
Complex Method,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,Cyclomatic complexity of the method is 8
Complex Method,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,Cyclomatic complexity of the method is 13
Complex Method,kr.ac.kaist.swrc.jhannanum.share,TagSet,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\TagSet.cs,init,Cyclomatic complexity of the method is 18
Complex Method,PetShop.Data,StringTokenizer,C:\repos\stjeong_NHanNanum\NHanNanum\kr\Net\StringTokenizer.cs,Tokenize,Cyclomatic complexity of the method is 14
Complex Method,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,Cyclomatic complexity of the method is 17
Complex Method,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,Cyclomatic complexity of the method is 20
Complex Method,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,Cyclomatic complexity of the method is 10
Complex Method,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,quote,Cyclomatic complexity of the method is 31
Complex Method,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,Cyclomatic complexity of the method is 11
Complex Method,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,toString,Cyclomatic complexity of the method is 8
Complex Method,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,valueToString,Cyclomatic complexity of the method is 10
Complex Method,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,valueToString,Cyclomatic complexity of the method is 12
Complex Method,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,wrap,Cyclomatic complexity of the method is 8
Complex Method,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextString,Cyclomatic complexity of the method is 14
Complex Method,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextValue,Cyclomatic complexity of the method is 9
Long Parameter List,kr.ac.kaist.swrc.jhannanum.comm,Sentence,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\comm\Sentence.cs,Sentence,The method has 5 parameters.
Long Parameter List,kr.ac.kaist.swrc.jhannanum.comm,SetOfSentences,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\comm\SetOfSentences.cs,SetOfSentences,The method has 5 parameters.
Long Parameter List,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,checkConnection,The method has 6 parameters.
Long Parameter List,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,strncmp,The method has 5 parameters.
Long Parameter List,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,MorphemeChart,The method has 7 parameters.
Long Parameter List,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,checkChart,The method has 7 parameters.
Long Parameter List,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,phonemeChange,The method has 6 parameters.
Long Parameter List,PetShop.Data,StringTokenizer,C:\repos\stjeong_NHanNanum\NHanNanum\kr\Net\StringTokenizer.cs,StringTokenizer,The method has 5 parameters.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor.SentenceSegmentor ()' null); " is 155.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.InformalSentenceFilter.InformalSentenceFilter ()' null); " is 165.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.setMorphAnalyzer (new kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer.ChartMorphAnalyzer ()' "conf/plugin/MajorPlugin/MorphAnalyzer/ChartMorphAnalyzer.json"); " is 198.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor.SentenceSegmentor ()' null); " is 155.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.InformalSentenceFilter.InformalSentenceFilter ()' null); " is 165.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.setMorphAnalyzer (new kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer.ChartMorphAnalyzer ()' "conf/plugin/MajorPlugin/MorphAnalyzer/ChartMorphAnalyzer.json"); " is 198.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor.SentenceSegmentor ()' null); " is 155.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.InformalSentenceFilter.InformalSentenceFilter ()' null); " is 165.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.setMorphAnalyzer (new kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer.ChartMorphAnalyzer ()' "conf/plugin/MajorPlugin/MorphAnalyzer/ChartMorphAnalyzer.json"); " is 198.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPosProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PosProcessor.NounExtractor.NounExtractor ()' null); " is 135.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor.SentenceSegmentor ()' null); " is 155.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.InformalSentenceFilter.InformalSentenceFilter ()' null); " is 165.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.setMorphAnalyzer (new kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer.ChartMorphAnalyzer ()' "conf/plugin/MajorPlugin/MorphAnalyzer/ChartMorphAnalyzer.json"); " is 198.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPosProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PosProcessor.SimplePOSResult22.SimplePOSResult22 ()' null); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor.SentenceSegmentor ()' null); " is 155.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.InformalSentenceFilter.InformalSentenceFilter ()' null); " is 165.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.setMorphAnalyzer (new kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer.ChartMorphAnalyzer ()' "conf/plugin/MajorPlugin/MorphAnalyzer/ChartMorphAnalyzer.json"); " is 198.
Long Statement,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The length of the statement  "		workflow.appendPosProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PosProcessor.SimplePOSResult09.SimplePOSResult09 ()' null); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,AnalyzedDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\AnalyzedDic.cs,readDic,The length of the statement  "	System.IO.StreamReader in_Renamed = new System.IO.StreamReader (new System.IO.FileStream (dictionaryFileName' System.IO.FileMode.Open' System.IO.FileAccess.Read)' Encoding.UTF8); " is 178.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,ChartMorphAnalyzer,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\ChartMorphAnalyzer.cs,morphAnalyze,The length of the statement  "	SetOfSentences sos = new SetOfSentences (ps.DocumentID' ps.SentenceID' ps.EndOfDocument' plainEojeolArray' eojeolSetArray); " is 123.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,checkConnection,The length of the statement  "	//		System.err.println(tag1Name + "\t" + tag2Name + ": " + connectionTable[tag1][tag2] + " " + tagSet.checkTagType(nextTagType' tag2)); " is 135.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,readFile,The length of the statement  "	System.IO.StreamReader br = new System.IO.StreamReader (new System.IO.FileStream (filePath' System.IO.FileMode.Open' System.IO.FileAccess.Read)' System.Text.Encoding.UTF8); " is 172.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,ConnectionNot,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\ConnectionNot.cs,readFile,The length of the statement  "	System.IO.StreamReader br = new System.IO.StreamReader (new System.IO.FileStream (filePath' System.IO.FileMode.Open' System.IO.FileAccess.Read)' System.Text.Encoding.UTF8); " is 172.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_eomi_u,The length of the statement  "	if ((cur > 0 && pcheck (str' cur - 1' "l54") != 0) && pcheck (str' cur' "54") != 0 && pcheck (str' cur + 1' "r54") != 0) { " is 122.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_eomi_u,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_eomi_u,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_eomi_u,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The length of the statement  "				// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The length of the statement  "				// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The length of the statement  "					// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The length of the statement  "				// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The length of the statement  "				// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The length of the statement  "			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The length of the statement  "			if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0) " is 187.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The length of the statement  "			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "	/* 'ᆮ' irregular rule */if ((cur > 0 && cur <= len && pcheck (str' cur - 1' "l21") != 0) && pcheck (str' cur' "21") != 0 && pcheck (str' cur + 1' "r21") != 0) { " is 160.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "	/* 'ᆺ' irregular rule */if ((cur > 0 && cur < len && pcheck (str' cur - 1' "l22") != 0) && pcheck (str' cur' "22") != 0 && pcheck (str' cur + 1' "r22") != 0) { " is 159.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "	/* 'ㅂ' irregular rule */if ((cur > 0 && cur <= len && pcheck (str' cur - 1' "l23") != 0) && pcheck (str' cur' "23") != 0 && pcheck (str' cur + 1' "r23") != 0) { " is 160.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "	/* 'ᆸ' irregular rule */if ((cur > 0 && cur <= len && pcheck (str' cur - 1' "l24") != 0) && pcheck (str' cur' "24") != 0 && pcheck (str' cur + 1' "r24") != 0) { " is 160.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "	/* 'ㅂ' irregular rule */if ((cur > 0 && cur <= len && pcheck (str' cur - 1' "l25") != 0) && pcheck (str' cur' "25") != 0 && pcheck (str' cur + 1' "r25") != 0) { " is 160.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "	/* 'ᇂ' irregular rule */if ((cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l26") != 0) && pcheck (str' cur' "26") != 0 && pcheck (str' cur + 1' "r26") != 0) { " is 163.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "	/* 'ㅎ' irregular rule */if ((cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l27") != 0) && pcheck (str' cur' "27") != 0 && pcheck (str' cur + 1' "r27") != 0) { " is 163.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "	/* 'ㅎ' irregular rule */if ((cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l28") != 0) && pcheck (str' cur' "28") != 0 && pcheck (str' cur + 1' "r28") != 0) { " is 163.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "	/* '르' irregular rule */if ((cur > 0 && cur < len && pcheck (str' cur - 1' "l29") != 0) && pcheck (str' cur' "29") != 0 && pcheck (str' cur + 1' "r29") != 0) { " is 160.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "	/* '러' irregular rule */if ((cur > 0 && cur <= len && pcheck (str' cur - 1' "l30") != 0) && pcheck (str' cur' "30") != 0 && pcheck (str' cur + 1' "r30") != 0 && (cur - 2 >= 0 && str [cur - 2] == 'ᄅ')) { " is 202.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The length of the statement  "	/* '우' irregular rule */if ((cur > 0 && pcheck (str' cur - 1' "l31") != 0) && pcheck (str' cur' "31") != 0 && pcheck (str' cur + 1' "r31") != 0) { " is 146.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The length of the statement  "	/* '여' irregular rule */if ((cur > 0 && pcheck (str' cur - 1' "l32") != 0) && pcheck (str' cur' "32") != 0 && pcheck (str' cur + 1' "r32") != 0 && str [cur + 2] == 'ᅧ') { " is 170.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The length of the statement  "	/* '여' irregular rule */if ((cur > 0 && pcheck (str' cur - 1' "l33") != 0) && pcheck (str' cur' "33") != 0 && pcheck (str' cur + 1' "r33") != 0) { " is 146.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_johwa,The length of the statement  "			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_johwa,The length of the statement  "			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray())); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The length of the statement  "	/* 'ㄹ' elision rule */if ((cur > 0 && pcheck (str' cur - 1' "l11") != 0) && (pcheck (str' cur' "11") != 0 || strncmp (str' cur' "오"' 0' 2) == 0) && pcheck (str' cur + 1' "r11") != 0) { " is 185.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The length of the statement  "	/* 'ㅡ' elision rule */if ((cur > 0 && pcheck (str' cur - 1' "l12") != 0) && pcheck (str' cur' "12") != 0 && pcheck (str' cur + 1' "r12") != 0 || (cur == 1 && str [cur] != 'ᅡ')) { " is 178.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The length of the statement  "	/* 'ㅏ' elision rule */if ((cur > 0 && pcheck (str' cur - 1' "l13") != 0) && pcheck (str' cur' "13") != 0 && pcheck (str' cur + 1' "r13") != 0) { " is 144.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The length of the statement  "	/* 'ㅓ' elision rule */if ((cur > 0 && pcheck (str' cur - 1' "l14") != 0) && pcheck (str' cur' "14") != 0 && pcheck (str' cur + 1' "r14") != 0) { " is 144.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_shorten,The length of the statement  "	/* 'ㅗ'' 'ㅜ' contraction rule */if ((cur > 0 && pcheck (str' cur - 1' "l51") != 0) && pcheck (str' cur' "51") != 0 && pcheck (str' cur + 1' "r51") != 0) { " is 153.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_shorten,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_shorten,The length of the statement  "	/* 'ㅚ' contraction rule */if ((cur > 0 && pcheck (str' cur - 1' "l52") != 0) && pcheck (str' cur' "52") != 0 && pcheck (str' cur + 1' "r52") != 0) { " is 148.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_shorten,The length of the statement  "		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_shorten,The length of the statement  "		if (((cur > 1 || (str [cur - 1] != 'ᄋ')) && pcheck (str' cur - 1' "l53") != 0) && pcheck (str' cur' "53") != 0 && pcheck (str' cur + 1' "r53") != 0) { " is 150.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_shorten,The length of the statement  "			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur); " is 143.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,analyze,The length of the statement  "			if (chart [mp].state == MORPHEME_STATE_SUCCESS && connection.checkConnection (tagSet' morph.tag' chart [mp].tag' morph.str.Length' chart [mp].str.Length' morph.nextTagType)) { " is 175.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,checkChart,The length of the statement  "		if (morph.tag == tag && morph.phoneme == phoneme && morph.nextPosition == nextPosition && morph.nextTagType == nextTagType && morph.str.Equals (str)) { " is 151.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,printMorphemeAll,The length of the statement  "		Trace.Write (string.Format ("{0}/{1}.{2} nextPosition={3} nextTagType={4} state={5} "' Code.toString (chart [i].str.ToCharArray ())' tagSet.getTagName (chart [i].tag)' tagSet.getIrregularName (chart [i].phoneme)' Code.toCompatibilityJamo (sp.getPosition (chart [i].nextPosition).key)' tagSet.getTagName (chart [i].nextTagType)' chart [i].state)); " is 346.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,preReplace,The length of the statement  "		else if (((c >= 0x2E80 && c <= 0x2EFF) || (c >= 0x3400 && c <= 0x4DBF)) || (c >= 0x4E00 && c < 0x9FBF) || (c >= 0xF900 && c <= 0xFAFF) && chiFlag) { " is 148.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The length of the statement  "						/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) { " is 270.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The length of the statement  "						else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) { " is 182.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The length of the statement  "						else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) { " is 190.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The length of the statement  "					else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) { " is 152.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The length of the statement  "						/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) { " is 134.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,SegmentPosition,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\SegmentPosition.cs,printPosition,The length of the statement  "		Trace.WriteLine (string.Format ("position[{0}].key={1} nextPosition={2}"' i' Code.toCompatibilityJamo (position [i].key)' position [i].nextPosition)); " is 150.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Trie,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Trie.cs,read_dic,The length of the statement  "	System.IO.StreamReader in_Renamed = new System.IO.StreamReader (new System.IO.FileStream (dictionaryFileName' System.IO.FileMode.Open' System.IO.FileAccess.Read)' System.Text.Encoding.UTF8); " is 190.
Long Statement,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,HMMTagger,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\HMMTagger.cs,end_sentence,The length of the statement  "	return new Sentence (sos.DocumentID' sos.SentenceID' sos.EndOfDocument' sos.getPlainEojeolArray ().ToArray ()' eojeols); " is 120.
Long Statement,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,convertFile,The length of the statement  "	System.IO.StreamReader br = new System.IO.StreamReader (new System.IO.FileStream (srcFileName' System.IO.FileMode.Open' System.IO.FileAccess.Read)' System.Text.Encoding.UTF8); " is 175.
Long Statement,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,convertFile,The length of the statement  "	System.IO.StreamWriter bw = new System.IO.StreamWriter (new System.IO.FileStream (desFileName' System.IO.FileMode.Create)' System.Text.Encoding.UTF8); " is 150.
Long Statement,kr.ac.kaist.swrc.jhannanum.share,TagSet,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\TagSet.cs,init,The length of the statement  "	System.IO.StreamReader br = new System.IO.StreamReader (new System.IO.FileStream (filePath' System.IO.FileMode.Open' System.IO.FileAccess.Read)' System.Text.Encoding.UTF8); " is 172.
Long Statement,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,getDouble,The length of the statement  "		return o is System.ValueType ? System.Convert.ToDouble (((System.ValueType)o)) : System.Double.Parse ((System.String)o); " is 120.
Long Statement,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,getInt,The length of the statement  "	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,getLong,The length of the statement  "	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,getString,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,optString,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,getDouble,The length of the statement  "		return o is System.ValueType ? System.Convert.ToDouble (((System.ValueType)o)) : System.Double.Parse ((System.String)o); " is 120.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,numberToString,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,optDouble,The length of the statement  "		//UPGRADE_TODO: The differences in the format  of parameters for constructor 'java.lang.Double.Double'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'" " is 243.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,optDouble,The length of the statement  "		return o is System.ValueType ? System.Convert.ToDouble (((System.ValueType)o)) : System.Double.Parse ((System.String)o); " is 120.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The length of the statement  "	System.Reflection.MethodInfo[] methods = (includeSuperClass) ? klass.GetMethods () : klass.GetMethods (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.DeclaredOnly | System.Reflection.BindingFlags.Static); " is 313.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The length of the statement  "				//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.reflect.Method.getParameterTypes' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 233.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,sortedKeys,The length of the statement  "	//UPGRADE_TODO: Class 'java.util.TreeSet' was converted to 'SupportClass.TreeSetSupport' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilTreeSet'" " is 245.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,sortedKeys,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Map.keySet' was converted to 'SupportClass.HashSetSupport' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilMapkeySet'" " is 251.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The length of the statement  "				//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'" " is 234.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,toString,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Iterator.next' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilIteratornext'" " is 268.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,toString,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,toString,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Iterator.hasNext' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilIteratorhasNext'" " is 275.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,toString,The length of the statement  "			//UPGRADE_TODO: Method 'java.util.Iterator.next' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilIteratornext'" " is 268.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,toString,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,valueToString,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,valueToString,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,valueToString,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,valueToString,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,valueToString,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,wrap,The length of the statement  "		if (object_Renamed is JSONObject || object_Renamed is JSONArray || NULL.Equals (object_Renamed) || object_Renamed is JSONString || object_Renamed is System.SByte || object_Renamed is System.Char || object_Renamed is System.Int16 || object_Renamed is System.Int32 || object_Renamed is System.Int64 || object_Renamed is System.Boolean || object_Renamed is System.Single || object_Renamed is System.Double || object_Renamed is System.String) { " is 440.
Long Statement,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,next,The length of the statement  "			//UPGRADE_TODO: Method 'java.io.Reader.read' was converted to 'System.IO.StreamReader.Read' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioReaderread'" " is 249.
Long Statement,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextString,The length of the statement  "				//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'" " is 234.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_eomi_u,The conditional expression  "(cur > 0 && pcheck (str' cur - 1' "l54") != 0) && pcheck (str' cur' "54") != 0 && pcheck (str' cur + 1' "r54") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The conditional expression  "(prev != null && prev.Length != 0 && cur == 0) && pcheck (prev' prev.Length - 1' "중성") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The conditional expression  "pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The conditional expression  "(cur > 0 && cur <= len && pcheck (str' cur - 1' "l21") != 0) && pcheck (str' cur' "21") != 0 && pcheck (str' cur + 1' "r21") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The conditional expression  "(cur > 0 && cur < len && pcheck (str' cur - 1' "l22") != 0) && pcheck (str' cur' "22") != 0 && pcheck (str' cur + 1' "r22") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The conditional expression  "(cur > 0 && cur <= len && pcheck (str' cur - 1' "l23") != 0) && pcheck (str' cur' "23") != 0 && pcheck (str' cur + 1' "r23") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The conditional expression  "(cur > 0 && cur <= len && pcheck (str' cur - 1' "l24") != 0) && pcheck (str' cur' "24") != 0 && pcheck (str' cur + 1' "r24") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The conditional expression  "(cur > 0 && cur <= len && pcheck (str' cur - 1' "l25") != 0) && pcheck (str' cur' "25") != 0 && pcheck (str' cur + 1' "r25") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The conditional expression  "(cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l26") != 0) && pcheck (str' cur' "26") != 0 && pcheck (str' cur + 1' "r26") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The conditional expression  "(cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l27") != 0) && pcheck (str' cur' "27") != 0 && pcheck (str' cur + 1' "r27") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The conditional expression  "(cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l28") != 0) && pcheck (str' cur' "28") != 0 && pcheck (str' cur + 1' "r28") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The conditional expression  "(cur > 0 && cur < len && pcheck (str' cur - 1' "l29") != 0) && pcheck (str' cur' "29") != 0 && pcheck (str' cur + 1' "r29") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The conditional expression  "(cur > 0 && cur <= len && pcheck (str' cur - 1' "l30") != 0) && pcheck (str' cur' "30") != 0 && pcheck (str' cur + 1' "r30") != 0 && (cur - 2 >= 0 && str [cur - 2] == 'ᄅ')"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The conditional expression  "(cur > 0 && pcheck (str' cur - 1' "l31") != 0) && pcheck (str' cur' "31") != 0 && pcheck (str' cur + 1' "r31") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The conditional expression  "(cur > 0 && pcheck (str' cur - 1' "l32") != 0) && pcheck (str' cur' "32") != 0 && pcheck (str' cur + 1' "r32") != 0 && str [cur + 2] == 'ᅧ'"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The conditional expression  "(cur > 0 && pcheck (str' cur - 1' "l33") != 0) && pcheck (str' cur' "33") != 0 && pcheck (str' cur + 1' "r33") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The conditional expression  "(cur > 0 && pcheck (str' cur - 1' "l11") != 0) && (pcheck (str' cur' "11") != 0 || strncmp (str' cur' "오"' 0' 2) == 0) && pcheck (str' cur + 1' "r11") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The conditional expression  "(cur > 0 && pcheck (str' cur - 1' "l12") != 0) && pcheck (str' cur' "12") != 0 && pcheck (str' cur + 1' "r12") != 0 || (cur == 1 && str [cur] != 'ᅡ')"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The conditional expression  "(cur > 0 && pcheck (str' cur - 1' "l13") != 0) && pcheck (str' cur' "13") != 0 && pcheck (str' cur + 1' "r13") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The conditional expression  "(cur > 0 && pcheck (str' cur - 1' "l14") != 0) && pcheck (str' cur' "14") != 0 && pcheck (str' cur + 1' "r14") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_shorten,The conditional expression  "(cur > 0 && pcheck (str' cur - 1' "l51") != 0) && pcheck (str' cur' "51") != 0 && pcheck (str' cur + 1' "r51") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_shorten,The conditional expression  "(cur > 0 && pcheck (str' cur - 1' "l52") != 0) && pcheck (str' cur' "52") != 0 && pcheck (str' cur + 1' "r52") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_shorten,The conditional expression  "((cur > 1 || (str [cur - 1] != 'ᄋ')) && pcheck (str' cur - 1' "l53") != 0) && pcheck (str' cur' "53") != 0 && pcheck (str' cur + 1' "r53") != 0"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,checkChart,The conditional expression  "morph.tag == tag && morph.phoneme == phoneme && morph.nextPosition == nextPosition && morph.nextTagType == nextTagType && morph.str.Equals (str)"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,preReplace,The conditional expression  "((c >= 'a' && c <= 'z') || c >= 'A' && c <= 'Z')"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,MorphemeChart,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\MorphemeChart.cs,preReplace,The conditional expression  "((c >= 0x2E80 && c <= 0x2EFF) || (c >= 0x3400 && c <= 0x4DBF)) || (c >= 0x4E00 && c < 0x9FBF) || (c >= 0xF900 && c <= 0xFAFF) && chiFlag"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The conditional expression  "prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The conditional expression  "prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The conditional expression  "prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))"  is complex.
Complex Conditional,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The conditional expression  "c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E"  is complex.
Complex Conditional,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,quote,The conditional expression  "c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')"  is complex.
Complex Conditional,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The conditional expression  "(b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+'"  is complex.
Complex Conditional,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The conditional expression  "b == '0' && s.Length > 2 && (s [1] == 'x' || s [1] == 'X')"  is complex.
Complex Conditional,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,wrap,The conditional expression  "object_Renamed is JSONObject || object_Renamed is JSONArray || NULL.Equals (object_Renamed) || object_Renamed is JSONString || object_Renamed is System.SByte || object_Renamed is System.Char || object_Renamed is System.Int16 || object_Renamed is System.Int32 || object_Renamed is System.Int64 || object_Renamed is System.Boolean || object_Renamed is System.Single || object_Renamed is System.Double || object_Renamed is System.String"  is complex.
Complex Conditional,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextTo,The conditional expression  "c == d || c == 0 || c == '\n' || c == '\r'"  is complex.
Complex Conditional,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextTo,The conditional expression  "delimiters.IndexOf ((System.Char)c) >= 0 || c == 0 || c == '\n' || c == '\r'"  is complex.
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "nextClean".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "syntaxError".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "nextClean".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "back".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "nextClean".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "back".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "back".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "nextValue".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "nextClean".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "nextClean".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "back".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "syntaxError".
Virtual Method Call from Constructor,org.json,JSONArray,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONArray.cs,JSONArray,The constructor "JSONArray" calls a virtual method "syntaxError".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "putOnce".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "opt".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "nextClean".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "syntaxError".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "nextClean".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "syntaxError".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "back".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "nextValue".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "nextClean".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "next".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "back".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "syntaxError".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "putOnce".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "nextValue".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "nextClean".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "nextClean".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "back".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "syntaxError".
Virtual Method Call from Constructor,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The constructor "JSONObject" calls a virtual method "putOpt".
Empty Catch Block,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The method has an empty catch block.
Empty Catch Block,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,JSONObject,The method has an empty catch block.
Empty Catch Block,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The method has an empty catch block.
Empty Catch Block,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The method has an empty catch block.
Empty Catch Block,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The method has an empty catch block.
Empty Catch Block,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,valueToString,The method has an empty catch block.
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,activateWorkflow,The following statement contains a magic number: if (threadMode) {  	isThreadMode = true;  	// initialize the first phase supplement plug-ins and the communication queues  	LinkedBlockingQueue<PlainSentence> in1 = null;  	LinkedBlockingQueue<PlainSentence> out1 = new LinkedBlockingQueue<PlainSentence> ();  	queuePhase1.Add (out1);  	for (int i = 0; i < plainTextPluginCnt; i++) {  		in1 = out1;  		out1 = new LinkedBlockingQueue<PlainSentence> ();  		queuePhase1.Add (out1);  		plainTextProcessors [i].initialize (baseDir' plainTextProcessorsConfFiles [i]);  		threadList.AddLast (new PlainTextProcThread (plainTextProcessors [i]' in1' out1));  	}  	if (morphAnalyzer == null) {  		outputPhaseNum = 1;  		outputQueueNum = plainTextPluginCnt;  		runThreads ();  		return;  	}  	in1 = out1;  	// initialize the second phase major plug-in and the communication queues  	LinkedBlockingQueue<SetOfSentences> in2 = null;  	LinkedBlockingQueue<SetOfSentences> out2 = new LinkedBlockingQueue<SetOfSentences> ();  	queuePhase2.Add (out2);  	morphAnalyzer.initialize (baseDir' morphAnalyzerConfFile);  	threadList.AddLast (new MorphAnalyzerThread (morphAnalyzer' in1' out2));  	// initialize the second phase supplement plug-ins and the communication queues  	for (int i = 0; i < morphemePluginCnt; i++) {  		in2 = out2;  		out2 = new LinkedBlockingQueue<SetOfSentences> ();  		queuePhase2.Add (out2);  		morphemeProcessors [i].initialize (baseDir' morphemeProcessorsConfFiles [i]);  		threadList.AddLast (new MorphemeProcThread (morphemeProcessors [i]' in2' out2));  	}  	if (posTagger == null) {  		outputPhaseNum = 2;  		outputQueueNum = morphemePluginCnt;  		runThreads ();  		return;  	}  	in2 = out2;  	// initialize the third phase major plug-in and the communication queues  	LinkedBlockingQueue<Sentence> in3 = null;  	LinkedBlockingQueue<Sentence> out3 = new LinkedBlockingQueue<Sentence> ();  	posTagger.initialize (baseDir' posTaggerConfFile);  	queuePhase3.Add (out3);  	threadList.AddLast (new PosTaggerThread (posTagger' in2' out3));  	// initialize the third phase supplement plug-ins and the communication queues  	for (int i = 0; i < posPluginCnt; i++) {  		in3 = out3;  		out3 = new LinkedBlockingQueue<Sentence> ();  		queuePhase3.Add (out3);  		posProcessors [i].initialize (baseDir' posProcessorConfFiles [i]);  		threadList.AddLast (new PosProcThread (posProcessors [i]' in3' out3));  	}  	outputPhaseNum = 3;  	outputQueueNum = posPluginCnt;  	runThreads ();  }  else {  	isThreadMode = false;  	// initialize the first phase supplement plug-ins and the communication queues  	queuePhase1.Add (new LinkedBlockingQueue<PlainSentence> ());  	for (int i = 0; i < plainTextPluginCnt; i++) {  		plainTextProcessors [i].initialize (baseDir' plainTextProcessorsConfFiles [i]);  		queuePhase1.Add (new LinkedBlockingQueue<PlainSentence> ());  	}  	if (morphAnalyzer == null) {  		outputPhaseNum = 1;  		outputQueueNum = plainTextPluginCnt;  		return;  	}  	// initialize the second phase major plug-in and the communication queue  	morphAnalyzer.initialize (baseDir' morphAnalyzerConfFile);  	queuePhase2.Add (new LinkedBlockingQueue<SetOfSentences> ());  	// initialize the second phase supplement plug-ins and the communication queues  	for (int i = 0; i < morphemePluginCnt; i++) {  		morphemeProcessors [i].initialize (baseDir' morphemeProcessorsConfFiles [i]);  		queuePhase2.Add (new LinkedBlockingQueue<SetOfSentences> ());  	}  	if (posTagger == null) {  		outputPhaseNum = 2;  		outputQueueNum = morphemePluginCnt;  		return;  	}  	// initialize the third phase major plug-in and the communication queue  	posTagger.initialize (baseDir' posTaggerConfFile);  	queuePhase3.Add (new LinkedBlockingQueue<Sentence> ());  	// initialize the third phase supplement plug-in and the communication queues  	for (int i = 0; i < posPluginCnt; i++) {  		posProcessors [i].initialize (baseDir' posProcessorConfFiles [i]);  		queuePhase3.Add (new LinkedBlockingQueue<Sentence> ());  	}  	outputPhaseNum = 3;  	outputQueueNum = posPluginCnt;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,activateWorkflow,The following statement contains a magic number: if (threadMode) {  	isThreadMode = true;  	// initialize the first phase supplement plug-ins and the communication queues  	LinkedBlockingQueue<PlainSentence> in1 = null;  	LinkedBlockingQueue<PlainSentence> out1 = new LinkedBlockingQueue<PlainSentence> ();  	queuePhase1.Add (out1);  	for (int i = 0; i < plainTextPluginCnt; i++) {  		in1 = out1;  		out1 = new LinkedBlockingQueue<PlainSentence> ();  		queuePhase1.Add (out1);  		plainTextProcessors [i].initialize (baseDir' plainTextProcessorsConfFiles [i]);  		threadList.AddLast (new PlainTextProcThread (plainTextProcessors [i]' in1' out1));  	}  	if (morphAnalyzer == null) {  		outputPhaseNum = 1;  		outputQueueNum = plainTextPluginCnt;  		runThreads ();  		return;  	}  	in1 = out1;  	// initialize the second phase major plug-in and the communication queues  	LinkedBlockingQueue<SetOfSentences> in2 = null;  	LinkedBlockingQueue<SetOfSentences> out2 = new LinkedBlockingQueue<SetOfSentences> ();  	queuePhase2.Add (out2);  	morphAnalyzer.initialize (baseDir' morphAnalyzerConfFile);  	threadList.AddLast (new MorphAnalyzerThread (morphAnalyzer' in1' out2));  	// initialize the second phase supplement plug-ins and the communication queues  	for (int i = 0; i < morphemePluginCnt; i++) {  		in2 = out2;  		out2 = new LinkedBlockingQueue<SetOfSentences> ();  		queuePhase2.Add (out2);  		morphemeProcessors [i].initialize (baseDir' morphemeProcessorsConfFiles [i]);  		threadList.AddLast (new MorphemeProcThread (morphemeProcessors [i]' in2' out2));  	}  	if (posTagger == null) {  		outputPhaseNum = 2;  		outputQueueNum = morphemePluginCnt;  		runThreads ();  		return;  	}  	in2 = out2;  	// initialize the third phase major plug-in and the communication queues  	LinkedBlockingQueue<Sentence> in3 = null;  	LinkedBlockingQueue<Sentence> out3 = new LinkedBlockingQueue<Sentence> ();  	posTagger.initialize (baseDir' posTaggerConfFile);  	queuePhase3.Add (out3);  	threadList.AddLast (new PosTaggerThread (posTagger' in2' out3));  	// initialize the third phase supplement plug-ins and the communication queues  	for (int i = 0; i < posPluginCnt; i++) {  		in3 = out3;  		out3 = new LinkedBlockingQueue<Sentence> ();  		queuePhase3.Add (out3);  		posProcessors [i].initialize (baseDir' posProcessorConfFiles [i]);  		threadList.AddLast (new PosProcThread (posProcessors [i]' in3' out3));  	}  	outputPhaseNum = 3;  	outputQueueNum = posPluginCnt;  	runThreads ();  }  else {  	isThreadMode = false;  	// initialize the first phase supplement plug-ins and the communication queues  	queuePhase1.Add (new LinkedBlockingQueue<PlainSentence> ());  	for (int i = 0; i < plainTextPluginCnt; i++) {  		plainTextProcessors [i].initialize (baseDir' plainTextProcessorsConfFiles [i]);  		queuePhase1.Add (new LinkedBlockingQueue<PlainSentence> ());  	}  	if (morphAnalyzer == null) {  		outputPhaseNum = 1;  		outputQueueNum = plainTextPluginCnt;  		return;  	}  	// initialize the second phase major plug-in and the communication queue  	morphAnalyzer.initialize (baseDir' morphAnalyzerConfFile);  	queuePhase2.Add (new LinkedBlockingQueue<SetOfSentences> ());  	// initialize the second phase supplement plug-ins and the communication queues  	for (int i = 0; i < morphemePluginCnt; i++) {  		morphemeProcessors [i].initialize (baseDir' morphemeProcessorsConfFiles [i]);  		queuePhase2.Add (new LinkedBlockingQueue<SetOfSentences> ());  	}  	if (posTagger == null) {  		outputPhaseNum = 2;  		outputQueueNum = morphemePluginCnt;  		return;  	}  	// initialize the third phase major plug-in and the communication queue  	posTagger.initialize (baseDir' posTaggerConfFile);  	queuePhase3.Add (new LinkedBlockingQueue<Sentence> ());  	// initialize the third phase supplement plug-in and the communication queues  	for (int i = 0; i < posPluginCnt; i++) {  		posProcessors [i].initialize (baseDir' posProcessorConfFiles [i]);  		queuePhase3.Add (new LinkedBlockingQueue<Sentence> ());  	}  	outputPhaseNum = 3;  	outputQueueNum = posPluginCnt;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,activateWorkflow,The following statement contains a magic number: if (threadMode) {  	isThreadMode = true;  	// initialize the first phase supplement plug-ins and the communication queues  	LinkedBlockingQueue<PlainSentence> in1 = null;  	LinkedBlockingQueue<PlainSentence> out1 = new LinkedBlockingQueue<PlainSentence> ();  	queuePhase1.Add (out1);  	for (int i = 0; i < plainTextPluginCnt; i++) {  		in1 = out1;  		out1 = new LinkedBlockingQueue<PlainSentence> ();  		queuePhase1.Add (out1);  		plainTextProcessors [i].initialize (baseDir' plainTextProcessorsConfFiles [i]);  		threadList.AddLast (new PlainTextProcThread (plainTextProcessors [i]' in1' out1));  	}  	if (morphAnalyzer == null) {  		outputPhaseNum = 1;  		outputQueueNum = plainTextPluginCnt;  		runThreads ();  		return;  	}  	in1 = out1;  	// initialize the second phase major plug-in and the communication queues  	LinkedBlockingQueue<SetOfSentences> in2 = null;  	LinkedBlockingQueue<SetOfSentences> out2 = new LinkedBlockingQueue<SetOfSentences> ();  	queuePhase2.Add (out2);  	morphAnalyzer.initialize (baseDir' morphAnalyzerConfFile);  	threadList.AddLast (new MorphAnalyzerThread (morphAnalyzer' in1' out2));  	// initialize the second phase supplement plug-ins and the communication queues  	for (int i = 0; i < morphemePluginCnt; i++) {  		in2 = out2;  		out2 = new LinkedBlockingQueue<SetOfSentences> ();  		queuePhase2.Add (out2);  		morphemeProcessors [i].initialize (baseDir' morphemeProcessorsConfFiles [i]);  		threadList.AddLast (new MorphemeProcThread (morphemeProcessors [i]' in2' out2));  	}  	if (posTagger == null) {  		outputPhaseNum = 2;  		outputQueueNum = morphemePluginCnt;  		runThreads ();  		return;  	}  	in2 = out2;  	// initialize the third phase major plug-in and the communication queues  	LinkedBlockingQueue<Sentence> in3 = null;  	LinkedBlockingQueue<Sentence> out3 = new LinkedBlockingQueue<Sentence> ();  	posTagger.initialize (baseDir' posTaggerConfFile);  	queuePhase3.Add (out3);  	threadList.AddLast (new PosTaggerThread (posTagger' in2' out3));  	// initialize the third phase supplement plug-ins and the communication queues  	for (int i = 0; i < posPluginCnt; i++) {  		in3 = out3;  		out3 = new LinkedBlockingQueue<Sentence> ();  		queuePhase3.Add (out3);  		posProcessors [i].initialize (baseDir' posProcessorConfFiles [i]);  		threadList.AddLast (new PosProcThread (posProcessors [i]' in3' out3));  	}  	outputPhaseNum = 3;  	outputQueueNum = posPluginCnt;  	runThreads ();  }  else {  	isThreadMode = false;  	// initialize the first phase supplement plug-ins and the communication queues  	queuePhase1.Add (new LinkedBlockingQueue<PlainSentence> ());  	for (int i = 0; i < plainTextPluginCnt; i++) {  		plainTextProcessors [i].initialize (baseDir' plainTextProcessorsConfFiles [i]);  		queuePhase1.Add (new LinkedBlockingQueue<PlainSentence> ());  	}  	if (morphAnalyzer == null) {  		outputPhaseNum = 1;  		outputQueueNum = plainTextPluginCnt;  		return;  	}  	// initialize the second phase major plug-in and the communication queue  	morphAnalyzer.initialize (baseDir' morphAnalyzerConfFile);  	queuePhase2.Add (new LinkedBlockingQueue<SetOfSentences> ());  	// initialize the second phase supplement plug-ins and the communication queues  	for (int i = 0; i < morphemePluginCnt; i++) {  		morphemeProcessors [i].initialize (baseDir' morphemeProcessorsConfFiles [i]);  		queuePhase2.Add (new LinkedBlockingQueue<SetOfSentences> ());  	}  	if (posTagger == null) {  		outputPhaseNum = 2;  		outputQueueNum = morphemePluginCnt;  		return;  	}  	// initialize the third phase major plug-in and the communication queue  	posTagger.initialize (baseDir' posTaggerConfFile);  	queuePhase3.Add (new LinkedBlockingQueue<Sentence> ());  	// initialize the third phase supplement plug-in and the communication queues  	for (int i = 0; i < posPluginCnt; i++) {  		posProcessors [i].initialize (baseDir' posProcessorConfFiles [i]);  		queuePhase3.Add (new LinkedBlockingQueue<Sentence> ());  	}  	outputPhaseNum = 3;  	outputQueueNum = posPluginCnt;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,activateWorkflow,The following statement contains a magic number: if (threadMode) {  	isThreadMode = true;  	// initialize the first phase supplement plug-ins and the communication queues  	LinkedBlockingQueue<PlainSentence> in1 = null;  	LinkedBlockingQueue<PlainSentence> out1 = new LinkedBlockingQueue<PlainSentence> ();  	queuePhase1.Add (out1);  	for (int i = 0; i < plainTextPluginCnt; i++) {  		in1 = out1;  		out1 = new LinkedBlockingQueue<PlainSentence> ();  		queuePhase1.Add (out1);  		plainTextProcessors [i].initialize (baseDir' plainTextProcessorsConfFiles [i]);  		threadList.AddLast (new PlainTextProcThread (plainTextProcessors [i]' in1' out1));  	}  	if (morphAnalyzer == null) {  		outputPhaseNum = 1;  		outputQueueNum = plainTextPluginCnt;  		runThreads ();  		return;  	}  	in1 = out1;  	// initialize the second phase major plug-in and the communication queues  	LinkedBlockingQueue<SetOfSentences> in2 = null;  	LinkedBlockingQueue<SetOfSentences> out2 = new LinkedBlockingQueue<SetOfSentences> ();  	queuePhase2.Add (out2);  	morphAnalyzer.initialize (baseDir' morphAnalyzerConfFile);  	threadList.AddLast (new MorphAnalyzerThread (morphAnalyzer' in1' out2));  	// initialize the second phase supplement plug-ins and the communication queues  	for (int i = 0; i < morphemePluginCnt; i++) {  		in2 = out2;  		out2 = new LinkedBlockingQueue<SetOfSentences> ();  		queuePhase2.Add (out2);  		morphemeProcessors [i].initialize (baseDir' morphemeProcessorsConfFiles [i]);  		threadList.AddLast (new MorphemeProcThread (morphemeProcessors [i]' in2' out2));  	}  	if (posTagger == null) {  		outputPhaseNum = 2;  		outputQueueNum = morphemePluginCnt;  		runThreads ();  		return;  	}  	in2 = out2;  	// initialize the third phase major plug-in and the communication queues  	LinkedBlockingQueue<Sentence> in3 = null;  	LinkedBlockingQueue<Sentence> out3 = new LinkedBlockingQueue<Sentence> ();  	posTagger.initialize (baseDir' posTaggerConfFile);  	queuePhase3.Add (out3);  	threadList.AddLast (new PosTaggerThread (posTagger' in2' out3));  	// initialize the third phase supplement plug-ins and the communication queues  	for (int i = 0; i < posPluginCnt; i++) {  		in3 = out3;  		out3 = new LinkedBlockingQueue<Sentence> ();  		queuePhase3.Add (out3);  		posProcessors [i].initialize (baseDir' posProcessorConfFiles [i]);  		threadList.AddLast (new PosProcThread (posProcessors [i]' in3' out3));  	}  	outputPhaseNum = 3;  	outputQueueNum = posPluginCnt;  	runThreads ();  }  else {  	isThreadMode = false;  	// initialize the first phase supplement plug-ins and the communication queues  	queuePhase1.Add (new LinkedBlockingQueue<PlainSentence> ());  	for (int i = 0; i < plainTextPluginCnt; i++) {  		plainTextProcessors [i].initialize (baseDir' plainTextProcessorsConfFiles [i]);  		queuePhase1.Add (new LinkedBlockingQueue<PlainSentence> ());  	}  	if (morphAnalyzer == null) {  		outputPhaseNum = 1;  		outputQueueNum = plainTextPluginCnt;  		return;  	}  	// initialize the second phase major plug-in and the communication queue  	morphAnalyzer.initialize (baseDir' morphAnalyzerConfFile);  	queuePhase2.Add (new LinkedBlockingQueue<SetOfSentences> ());  	// initialize the second phase supplement plug-ins and the communication queues  	for (int i = 0; i < morphemePluginCnt; i++) {  		morphemeProcessors [i].initialize (baseDir' morphemeProcessorsConfFiles [i]);  		queuePhase2.Add (new LinkedBlockingQueue<SetOfSentences> ());  	}  	if (posTagger == null) {  		outputPhaseNum = 2;  		outputQueueNum = morphemePluginCnt;  		return;  	}  	// initialize the third phase major plug-in and the communication queue  	posTagger.initialize (baseDir' posTaggerConfFile);  	queuePhase3.Add (new LinkedBlockingQueue<Sentence> ());  	// initialize the third phase supplement plug-in and the communication queues  	for (int i = 0; i < posPluginCnt; i++) {  		posProcessors [i].initialize (baseDir' posProcessorConfFiles [i]);  		queuePhase3.Add (new LinkedBlockingQueue<Sentence> ());  	}  	outputPhaseNum = 3;  	outputQueueNum = posPluginCnt;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,activateWorkflow,The following statement contains a magic number: if (posTagger == null) {  	outputPhaseNum = 2;  	outputQueueNum = morphemePluginCnt;  	runThreads ();  	return;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,activateWorkflow,The following statement contains a magic number: outputPhaseNum = 2;  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,activateWorkflow,The following statement contains a magic number: outputPhaseNum = 3;  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,activateWorkflow,The following statement contains a magic number: if (posTagger == null) {  	outputPhaseNum = 2;  	outputQueueNum = morphemePluginCnt;  	return;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,activateWorkflow,The following statement contains a magic number: outputPhaseNum = 2;  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,activateWorkflow,The following statement contains a magic number: outputPhaseNum = 3;  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfSentence,The following statement contains a magic number: try {  	if (typeof(PlainSentence).Equals (objClass)) {  		if (outputPhaseNum != 1) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<PlainSentence> queue = queuePhase1 [outputQueueNum];  		a = queue.Take () as T;  	}  	else if (typeof(SetOfSentences).Equals (objClass)) {  		if (outputPhaseNum != 2) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  		a = queue.Take () as T;  	}  	else if (typeof(Sentence).Equals (objClass)) {  		if (outputPhaseNum != 3) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  		a = queue.Take () as T;  	}  	else {  		throw new ResultTypeException (outputPhaseNum);  	}  }  catch (Exception e) {  	Debug.WriteLine (e.ToString ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfSentence,The following statement contains a magic number: try {  	if (typeof(PlainSentence).Equals (objClass)) {  		if (outputPhaseNum != 1) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<PlainSentence> queue = queuePhase1 [outputQueueNum];  		a = queue.Take () as T;  	}  	else if (typeof(SetOfSentences).Equals (objClass)) {  		if (outputPhaseNum != 2) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  		a = queue.Take () as T;  	}  	else if (typeof(Sentence).Equals (objClass)) {  		if (outputPhaseNum != 3) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  		a = queue.Take () as T;  	}  	else {  		throw new ResultTypeException (outputPhaseNum);  	}  }  catch (Exception e) {  	Debug.WriteLine (e.ToString ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfSentence,The following statement contains a magic number: if (typeof(PlainSentence).Equals (objClass)) {  	if (outputPhaseNum != 1) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<PlainSentence> queue = queuePhase1 [outputQueueNum];  	a = queue.Take () as T;  }  else if (typeof(SetOfSentences).Equals (objClass)) {  	if (outputPhaseNum != 2) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  	a = queue.Take () as T;  }  else if (typeof(Sentence).Equals (objClass)) {  	if (outputPhaseNum != 3) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  	a = queue.Take () as T;  }  else {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfSentence,The following statement contains a magic number: if (typeof(PlainSentence).Equals (objClass)) {  	if (outputPhaseNum != 1) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<PlainSentence> queue = queuePhase1 [outputQueueNum];  	a = queue.Take () as T;  }  else if (typeof(SetOfSentences).Equals (objClass)) {  	if (outputPhaseNum != 2) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  	a = queue.Take () as T;  }  else if (typeof(Sentence).Equals (objClass)) {  	if (outputPhaseNum != 3) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  	a = queue.Take () as T;  }  else {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfSentence,The following statement contains a magic number: if (typeof(SetOfSentences).Equals (objClass)) {  	if (outputPhaseNum != 2) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  	a = queue.Take () as T;  }  else if (typeof(Sentence).Equals (objClass)) {  	if (outputPhaseNum != 3) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  	a = queue.Take () as T;  }  else {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfSentence,The following statement contains a magic number: if (typeof(SetOfSentences).Equals (objClass)) {  	if (outputPhaseNum != 2) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  	a = queue.Take () as T;  }  else if (typeof(Sentence).Equals (objClass)) {  	if (outputPhaseNum != 3) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  	a = queue.Take () as T;  }  else {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfSentence,The following statement contains a magic number: if (outputPhaseNum != 2) {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfSentence,The following statement contains a magic number: if (typeof(Sentence).Equals (objClass)) {  	if (outputPhaseNum != 3) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  	a = queue.Take () as T;  }  else {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfSentence,The following statement contains a magic number: if (outputPhaseNum != 3) {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfDocument,The following statement contains a magic number: try {  	if (typeof(PlainSentence).Equals (objClass)) {  		if (outputPhaseNum != 1) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<PlainSentence> queue = queuePhase1 [outputQueueNum];  		while (true) {  			PlainSentence ps = queue.Take ();  			list.AddLast (ps as T);  			if (ps.EndOfDocument) {  				break;  			}  		}  	}  	else if (typeof(SetOfSentences).Equals (objClass)) {  		if (outputPhaseNum != 2) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  		while (true) {  			SetOfSentences sos = queue.Take ();  			list.AddLast (sos as T);  			if (sos.EndOfDocument) {  				break;  			}  		}  	}  	else if (typeof(Sentence).Equals (objClass)) {  		if (outputPhaseNum != 3) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  		while (true) {  			Sentence sent = queue.Take ();  			list.AddLast (sent as T);  			if (sent.EndOfDocument) {  				break;  			}  		}  	}  	else {  		throw new ResultTypeException (outputPhaseNum);  	}  }  catch (Exception e) {  	Debug.WriteLine (e.ToString ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfDocument,The following statement contains a magic number: try {  	if (typeof(PlainSentence).Equals (objClass)) {  		if (outputPhaseNum != 1) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<PlainSentence> queue = queuePhase1 [outputQueueNum];  		while (true) {  			PlainSentence ps = queue.Take ();  			list.AddLast (ps as T);  			if (ps.EndOfDocument) {  				break;  			}  		}  	}  	else if (typeof(SetOfSentences).Equals (objClass)) {  		if (outputPhaseNum != 2) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  		while (true) {  			SetOfSentences sos = queue.Take ();  			list.AddLast (sos as T);  			if (sos.EndOfDocument) {  				break;  			}  		}  	}  	else if (typeof(Sentence).Equals (objClass)) {  		if (outputPhaseNum != 3) {  			throw new ResultTypeException (outputPhaseNum);  		}  		LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  		while (true) {  			Sentence sent = queue.Take ();  			list.AddLast (sent as T);  			if (sent.EndOfDocument) {  				break;  			}  		}  	}  	else {  		throw new ResultTypeException (outputPhaseNum);  	}  }  catch (Exception e) {  	Debug.WriteLine (e.ToString ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfDocument,The following statement contains a magic number: if (typeof(PlainSentence).Equals (objClass)) {  	if (outputPhaseNum != 1) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<PlainSentence> queue = queuePhase1 [outputQueueNum];  	while (true) {  		PlainSentence ps = queue.Take ();  		list.AddLast (ps as T);  		if (ps.EndOfDocument) {  			break;  		}  	}  }  else if (typeof(SetOfSentences).Equals (objClass)) {  	if (outputPhaseNum != 2) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  	while (true) {  		SetOfSentences sos = queue.Take ();  		list.AddLast (sos as T);  		if (sos.EndOfDocument) {  			break;  		}  	}  }  else if (typeof(Sentence).Equals (objClass)) {  	if (outputPhaseNum != 3) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  	while (true) {  		Sentence sent = queue.Take ();  		list.AddLast (sent as T);  		if (sent.EndOfDocument) {  			break;  		}  	}  }  else {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfDocument,The following statement contains a magic number: if (typeof(PlainSentence).Equals (objClass)) {  	if (outputPhaseNum != 1) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<PlainSentence> queue = queuePhase1 [outputQueueNum];  	while (true) {  		PlainSentence ps = queue.Take ();  		list.AddLast (ps as T);  		if (ps.EndOfDocument) {  			break;  		}  	}  }  else if (typeof(SetOfSentences).Equals (objClass)) {  	if (outputPhaseNum != 2) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  	while (true) {  		SetOfSentences sos = queue.Take ();  		list.AddLast (sos as T);  		if (sos.EndOfDocument) {  			break;  		}  	}  }  else if (typeof(Sentence).Equals (objClass)) {  	if (outputPhaseNum != 3) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  	while (true) {  		Sentence sent = queue.Take ();  		list.AddLast (sent as T);  		if (sent.EndOfDocument) {  			break;  		}  	}  }  else {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfDocument,The following statement contains a magic number: if (typeof(SetOfSentences).Equals (objClass)) {  	if (outputPhaseNum != 2) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  	while (true) {  		SetOfSentences sos = queue.Take ();  		list.AddLast (sos as T);  		if (sos.EndOfDocument) {  			break;  		}  	}  }  else if (typeof(Sentence).Equals (objClass)) {  	if (outputPhaseNum != 3) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  	while (true) {  		Sentence sent = queue.Take ();  		list.AddLast (sent as T);  		if (sent.EndOfDocument) {  			break;  		}  	}  }  else {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfDocument,The following statement contains a magic number: if (typeof(SetOfSentences).Equals (objClass)) {  	if (outputPhaseNum != 2) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<SetOfSentences> queue = queuePhase2 [outputQueueNum];  	while (true) {  		SetOfSentences sos = queue.Take ();  		list.AddLast (sos as T);  		if (sos.EndOfDocument) {  			break;  		}  	}  }  else if (typeof(Sentence).Equals (objClass)) {  	if (outputPhaseNum != 3) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  	while (true) {  		Sentence sent = queue.Take ();  		list.AddLast (sent as T);  		if (sent.EndOfDocument) {  			break;  		}  	}  }  else {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfDocument,The following statement contains a magic number: if (outputPhaseNum != 2) {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfDocument,The following statement contains a magic number: if (typeof(Sentence).Equals (objClass)) {  	if (outputPhaseNum != 3) {  		throw new ResultTypeException (outputPhaseNum);  	}  	LinkedBlockingQueue<Sentence> queue = queuePhase3 [outputQueueNum];  	while (true) {  		Sentence sent = queue.Take ();  		list.AddLast (sent as T);  		if (sent.EndOfDocument) {  			break;  		}  	}  }  else {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.hannanum,Workflow,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\Workflow.cs,getResultOfDocument,The following statement contains a magic number: if (outputPhaseNum != 3) {  	throw new ResultTypeException (outputPhaseNum);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,ChartMorphAnalyzer,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\ChartMorphAnalyzer.cs,processEojeol,The following statement contains a magic number: if (analysis != null) {  	// the eojeol was registered in the pre-analyzed dictionary  	StringTokenizer st = new StringTokenizer (analysis' "^");  	while (st.HasMoreTokens) {  		System.String analyzed = st.NextToken;  		System.String[] tokens = analyzed.Split ("\\+|/");  		System.String[] morphemes = new System.String[tokens.Length / 2];  		System.String[] tags = new System.String[tokens.Length / 2];  		for (int i = 0' j = 0; i < morphemes.Length; i++) {  			morphemes [i] = tokens [j++];  			tags [i] = tokens [j++];  		}  		Eojeol eojeol = new Eojeol (morphemes' tags);  		eojeolList.AddLast (eojeol);  	}  }  else {  	// analyze the input plain eojeol  	chart.init (plainEojeol);  	chart.analyze ();  	chart.getResult ();  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,ChartMorphAnalyzer,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\ChartMorphAnalyzer.cs,processEojeol,The following statement contains a magic number: if (analysis != null) {  	// the eojeol was registered in the pre-analyzed dictionary  	StringTokenizer st = new StringTokenizer (analysis' "^");  	while (st.HasMoreTokens) {  		System.String analyzed = st.NextToken;  		System.String[] tokens = analyzed.Split ("\\+|/");  		System.String[] morphemes = new System.String[tokens.Length / 2];  		System.String[] tags = new System.String[tokens.Length / 2];  		for (int i = 0' j = 0; i < morphemes.Length; i++) {  			morphemes [i] = tokens [j++];  			tags [i] = tokens [j++];  		}  		Eojeol eojeol = new Eojeol (morphemes' tags);  		eojeolList.AddLast (eojeol);  	}  }  else {  	// analyze the input plain eojeol  	chart.init (plainEojeol);  	chart.analyze ();  	chart.getResult ();  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,ChartMorphAnalyzer,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\ChartMorphAnalyzer.cs,processEojeol,The following statement contains a magic number: while (st.HasMoreTokens) {  	System.String analyzed = st.NextToken;  	System.String[] tokens = analyzed.Split ("\\+|/");  	System.String[] morphemes = new System.String[tokens.Length / 2];  	System.String[] tags = new System.String[tokens.Length / 2];  	for (int i = 0' j = 0; i < morphemes.Length; i++) {  		morphemes [i] = tokens [j++];  		tags [i] = tokens [j++];  	}  	Eojeol eojeol = new Eojeol (morphemes' tags);  	eojeolList.AddLast (eojeol);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,ChartMorphAnalyzer,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\ChartMorphAnalyzer.cs,processEojeol,The following statement contains a magic number: while (st.HasMoreTokens) {  	System.String analyzed = st.NextToken;  	System.String[] tokens = analyzed.Split ("\\+|/");  	System.String[] morphemes = new System.String[tokens.Length / 2];  	System.String[] tags = new System.String[tokens.Length / 2];  	for (int i = 0' j = 0; i < morphemes.Length; i++) {  		morphemes [i] = tokens [j++];  		tags [i] = tokens [j++];  	}  	Eojeol eojeol = new Eojeol (morphemes' tags);  	eojeolList.AddLast (eojeol);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,checkConnection,The following statement contains a magic number: if ((tag1Name.StartsWith ("nc") || tag1Name [0] == 'f') && tag2Name [0] == 'n') {  	if (tag2Name.StartsWith ("nq")) {  		return false;  	}  	else if (len1 < 4 || len2 < 2) {  		return false;  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,checkConnection,The following statement contains a magic number: if ((tag1Name.StartsWith ("nc") || tag1Name [0] == 'f') && tag2Name [0] == 'n') {  	if (tag2Name.StartsWith ("nq")) {  		return false;  	}  	else if (len1 < 4 || len2 < 2) {  		return false;  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,checkConnection,The following statement contains a magic number: if (tag2Name.StartsWith ("nq")) {  	return false;  }  else if (len1 < 4 || len2 < 2) {  	return false;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,checkConnection,The following statement contains a magic number: if (tag2Name.StartsWith ("nq")) {  	return false;  }  else if (len1 < 4 || len2 < 2) {  	return false;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,checkConnection,The following statement contains a magic number: if (len1 < 4 || len2 < 2) {  	return false;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,checkConnection,The following statement contains a magic number: if (len1 < 4 || len2 < 2) {  	return false;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,readFile,The following statement contains a magic number: while ((line = br.ReadLine ()) != null) {  	StringTokenizer lineTokenizer = new StringTokenizer (line' "\t");  	if (lineTokenizer.HasMoreTokens == false) {  		continue;  	}  	System.String lineToken = lineTokenizer.NextToken;  	if (lineToken.StartsWith ("@")) {  		if ("@title".Equals (lineToken)) {  			title = lineTokenizer.NextToken;  		}  		else if ("@version".Equals (lineToken)) {  			version = lineTokenizer.NextToken;  		}  		else if ("@copyright".Equals (lineToken)) {  			copyright = lineTokenizer.NextToken;  		}  		else if ("@author".Equals (lineToken)) {  			author = lineTokenizer.NextToken;  		}  		else if ("@date".Equals (lineToken)) {  			date = lineTokenizer.NextToken;  		}  		else if ("@editor".Equals (lineToken)) {  			editor = lineTokenizer.NextToken;  		}  	}  	else if ("CONNECTION".Equals (lineToken)) {  		lineToken = lineTokenizer.NextToken;  		System.String[] tagLists = lineToken.Split ("\\*"' 2);  		StringTokenizer tagTokenizer = new StringTokenizer (tagLists [0]' "'()");  		while (tagTokenizer.HasMoreTokens) {  			System.String tagToken = tagTokenizer.NextToken;  			StringTokenizer tok = new StringTokenizer (tagToken' "-");  			while (tok.HasMoreTokens) {  				System.String t = tok.NextToken;  				int[] fullTagIDSet = tagSet.getTags (t);  				if (fullTagIDSet != null) {  					for (int i = 0; i < fullTagIDSet.Length; i++) {  						tagSetA.Add (fullTagIDSet [i]);  					}  				}  				else {  					tagSetA.Add (tagSet.getTagID (t));  				}  				while (tok.HasMoreTokens) {  					tagSetA.Remove (tagSet.getTagID (tok.NextToken));  				}  			}  		}  		tagTokenizer = new StringTokenizer (tagLists [1]' "'()");  		while (tagTokenizer.HasMoreTokens) {  			System.String tagToken = tagTokenizer.NextToken;  			StringTokenizer tok = new StringTokenizer (tagToken' "-");  			while (tok.HasMoreTokens) {  				System.String t = tok.NextToken;  				int[] fullTagIDSet = tagSet.getTags (t);  				if (fullTagIDSet != null) {  					for (int i = 0; i < fullTagIDSet.Length; i++) {  						tagSetB.Add (fullTagIDSet [i]);  					}  				}  				else {  					tagSetB.Add (tagSet.getTagID (t));  				}  				while (tok.HasMoreTokens) {  					tagSetB.Remove (tagSet.getTagID (tok.NextToken));  				}  			}  		}  		IEnumerator<int> iterA = tagSetA.GetEnumerator ();  		while (iterA.MoveNext ()) {  			int leftSide = iterA.Current;  			IEnumerator<int> iterB = tagSetB.GetEnumerator ();  			while (iterB.MoveNext ()) {  				connectionTable [leftSide] [iterB.Current] = true;  			}  		}  		tagSetA.Clear ();  		tagSetB.Clear ();  	}  	else if ("START_TAG".Equals (lineToken)) {  		startTag = lineTokenizer.NextToken;  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,readFile,The following statement contains a magic number: if (lineToken.StartsWith ("@")) {  	if ("@title".Equals (lineToken)) {  		title = lineTokenizer.NextToken;  	}  	else if ("@version".Equals (lineToken)) {  		version = lineTokenizer.NextToken;  	}  	else if ("@copyright".Equals (lineToken)) {  		copyright = lineTokenizer.NextToken;  	}  	else if ("@author".Equals (lineToken)) {  		author = lineTokenizer.NextToken;  	}  	else if ("@date".Equals (lineToken)) {  		date = lineTokenizer.NextToken;  	}  	else if ("@editor".Equals (lineToken)) {  		editor = lineTokenizer.NextToken;  	}  }  else if ("CONNECTION".Equals (lineToken)) {  	lineToken = lineTokenizer.NextToken;  	System.String[] tagLists = lineToken.Split ("\\*"' 2);  	StringTokenizer tagTokenizer = new StringTokenizer (tagLists [0]' "'()");  	while (tagTokenizer.HasMoreTokens) {  		System.String tagToken = tagTokenizer.NextToken;  		StringTokenizer tok = new StringTokenizer (tagToken' "-");  		while (tok.HasMoreTokens) {  			System.String t = tok.NextToken;  			int[] fullTagIDSet = tagSet.getTags (t);  			if (fullTagIDSet != null) {  				for (int i = 0; i < fullTagIDSet.Length; i++) {  					tagSetA.Add (fullTagIDSet [i]);  				}  			}  			else {  				tagSetA.Add (tagSet.getTagID (t));  			}  			while (tok.HasMoreTokens) {  				tagSetA.Remove (tagSet.getTagID (tok.NextToken));  			}  		}  	}  	tagTokenizer = new StringTokenizer (tagLists [1]' "'()");  	while (tagTokenizer.HasMoreTokens) {  		System.String tagToken = tagTokenizer.NextToken;  		StringTokenizer tok = new StringTokenizer (tagToken' "-");  		while (tok.HasMoreTokens) {  			System.String t = tok.NextToken;  			int[] fullTagIDSet = tagSet.getTags (t);  			if (fullTagIDSet != null) {  				for (int i = 0; i < fullTagIDSet.Length; i++) {  					tagSetB.Add (fullTagIDSet [i]);  				}  			}  			else {  				tagSetB.Add (tagSet.getTagID (t));  			}  			while (tok.HasMoreTokens) {  				tagSetB.Remove (tagSet.getTagID (tok.NextToken));  			}  		}  	}  	IEnumerator<int> iterA = tagSetA.GetEnumerator ();  	while (iterA.MoveNext ()) {  		int leftSide = iterA.Current;  		IEnumerator<int> iterB = tagSetB.GetEnumerator ();  		while (iterB.MoveNext ()) {  			connectionTable [leftSide] [iterB.Current] = true;  		}  	}  	tagSetA.Clear ();  	tagSetB.Clear ();  }  else if ("START_TAG".Equals (lineToken)) {  	startTag = lineTokenizer.NextToken;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Connection,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Connection.cs,readFile,The following statement contains a magic number: if ("CONNECTION".Equals (lineToken)) {  	lineToken = lineTokenizer.NextToken;  	System.String[] tagLists = lineToken.Split ("\\*"' 2);  	StringTokenizer tagTokenizer = new StringTokenizer (tagLists [0]' "'()");  	while (tagTokenizer.HasMoreTokens) {  		System.String tagToken = tagTokenizer.NextToken;  		StringTokenizer tok = new StringTokenizer (tagToken' "-");  		while (tok.HasMoreTokens) {  			System.String t = tok.NextToken;  			int[] fullTagIDSet = tagSet.getTags (t);  			if (fullTagIDSet != null) {  				for (int i = 0; i < fullTagIDSet.Length; i++) {  					tagSetA.Add (fullTagIDSet [i]);  				}  			}  			else {  				tagSetA.Add (tagSet.getTagID (t));  			}  			while (tok.HasMoreTokens) {  				tagSetA.Remove (tagSet.getTagID (tok.NextToken));  			}  		}  	}  	tagTokenizer = new StringTokenizer (tagLists [1]' "'()");  	while (tagTokenizer.HasMoreTokens) {  		System.String tagToken = tagTokenizer.NextToken;  		StringTokenizer tok = new StringTokenizer (tagToken' "-");  		while (tok.HasMoreTokens) {  			System.String t = tok.NextToken;  			int[] fullTagIDSet = tagSet.getTags (t);  			if (fullTagIDSet != null) {  				for (int i = 0; i < fullTagIDSet.Length; i++) {  					tagSetB.Add (fullTagIDSet [i]);  				}  			}  			else {  				tagSetB.Add (tagSet.getTagID (t));  			}  			while (tok.HasMoreTokens) {  				tagSetB.Remove (tagSet.getTagID (tok.NextToken));  			}  		}  	}  	IEnumerator<int> iterA = tagSetA.GetEnumerator ();  	while (iterA.MoveNext ()) {  		int leftSide = iterA.Current;  		IEnumerator<int> iterB = tagSetB.GetEnumerator ();  		while (iterB.MoveNext ()) {  			connectionTable [leftSide] [iterB.Current] = true;  		}  	}  	tagSetA.Clear ();  	tagSetB.Clear ();  }  else if ("START_TAG".Equals (lineToken)) {  	startTag = lineTokenizer.NextToken;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,ConnectionNot,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\ConnectionNot.cs,readFile,The following statement contains a magic number: for (int i = 0; i < ruleCount; i++) {  	notTagTable [i] = new int[2];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,ConnectionNot,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\ConnectionNot.cs,readFile,The following statement contains a magic number: notTagTable [i] = new int[2];  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,ConnectionNot,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\ConnectionNot.cs,readFile,The following statement contains a magic number: for (int i2 = 0; i2 < ruleCount; i2++) {  	notMorphTable [i2] = new System.String[2];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,ConnectionNot,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\ConnectionNot.cs,readFile,The following statement contains a magic number: notMorphTable [i2] = new System.String[2];  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_eomi_u,The following statement contains a magic number: if ((cur > 0 && pcheck (str' cur - 1' "l54") != 0) && strncmp (str' cur' "ᆸ니"' 0' 3) == 0) {  	new_str = insert (str' cur' "스");  	buf = new_str.Substring (0' (cur) - (0));  	buf2 = new_str.Substring (cur);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_eomi_u,The following statement contains a magic number: if ((cur > 0 && pcheck (str' cur - 1' "l54") != 0) && strncmp (str' cur' "ᆫ다"' 0' 3) == 0) {  	new_str = insert (str' cur' "느");  	buf = new_str.Substring (0' (cur) - (0));  	buf2 = new_str.Substring (cur);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The following statement contains a magic number: if (cur > 1 && strncmp (str' cur - 2' "거"' 0' 2) == 0 && pcheck (str' cur' "rule_것") != 0) {  	if (str [cur] == 'ᆸ') {  		if (strncmp (str' cur' "ᆸ니"' 0' 3) == 0) {  			new_str = insert (str' cur' "ᆺ이");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  		}  	}  	else {  		if (strncmp (str' cur' "ᆯ로"' 0' 3) == 0) {  			new_str = replace (str' cur' "ᆺ");  			new_str = insert (new_str' cur + 1' "으");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  		}  		else if (str [cur] == 'ᆯ' || str [cur] == 'ᆫ') {  			if (str.Length != cur + 1) {  				new_str = insert (str' cur' "ᆺ이");  				buf = new_str.Substring (0' (cur + 1) - (0));  				buf2 = new_str.Substring (cur + 1);  				// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  				mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  			}  			new_str = insert (str' cur' "ᆺ으");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  		}  		else {  			new_str = insert (str' cur' "ᆺ이");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The following statement contains a magic number: if (cur > 1 && strncmp (str' cur - 2' "거"' 0' 2) == 0 && pcheck (str' cur' "rule_것") != 0) {  	if (str [cur] == 'ᆸ') {  		if (strncmp (str' cur' "ᆸ니"' 0' 3) == 0) {  			new_str = insert (str' cur' "ᆺ이");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  		}  	}  	else {  		if (strncmp (str' cur' "ᆯ로"' 0' 3) == 0) {  			new_str = replace (str' cur' "ᆺ");  			new_str = insert (new_str' cur + 1' "으");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  		}  		else if (str [cur] == 'ᆯ' || str [cur] == 'ᆫ') {  			if (str.Length != cur + 1) {  				new_str = insert (str' cur' "ᆺ이");  				buf = new_str.Substring (0' (cur + 1) - (0));  				buf2 = new_str.Substring (cur + 1);  				// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  				mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  			}  			new_str = insert (str' cur' "ᆺ으");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  		}  		else {  			new_str = insert (str' cur' "ᆺ이");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The following statement contains a magic number: if (cur > 1 && strncmp (str' cur - 2' "거"' 0' 2) == 0 && pcheck (str' cur' "rule_것") != 0) {  	if (str [cur] == 'ᆸ') {  		if (strncmp (str' cur' "ᆸ니"' 0' 3) == 0) {  			new_str = insert (str' cur' "ᆺ이");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  		}  	}  	else {  		if (strncmp (str' cur' "ᆯ로"' 0' 3) == 0) {  			new_str = replace (str' cur' "ᆺ");  			new_str = insert (new_str' cur + 1' "으");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  		}  		else if (str [cur] == 'ᆯ' || str [cur] == 'ᆫ') {  			if (str.Length != cur + 1) {  				new_str = insert (str' cur' "ᆺ이");  				buf = new_str.Substring (0' (cur + 1) - (0));  				buf2 = new_str.Substring (cur + 1);  				// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  				mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  			}  			new_str = insert (str' cur' "ᆺ으");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  		}  		else {  			new_str = insert (str' cur' "ᆺ이");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The following statement contains a magic number: if (cur > 1 && strncmp (str' cur - 2' "거"' 0' 2) == 0 && pcheck (str' cur' "rule_것") != 0) {  	if (str [cur] == 'ᆸ') {  		if (strncmp (str' cur' "ᆸ니"' 0' 3) == 0) {  			new_str = insert (str' cur' "ᆺ이");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  		}  	}  	else {  		if (strncmp (str' cur' "ᆯ로"' 0' 3) == 0) {  			new_str = replace (str' cur' "ᆺ");  			new_str = insert (new_str' cur + 1' "으");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  		}  		else if (str [cur] == 'ᆯ' || str [cur] == 'ᆫ') {  			if (str.Length != cur + 1) {  				new_str = insert (str' cur' "ᆺ이");  				buf = new_str.Substring (0' (cur + 1) - (0));  				buf2 = new_str.Substring (cur + 1);  				// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  				mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  			}  			new_str = insert (str' cur' "ᆺ으");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  		}  		else {  			new_str = insert (str' cur' "ᆺ이");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The following statement contains a magic number: if (str [cur] == 'ᆸ') {  	if (strncmp (str' cur' "ᆸ니"' 0' 3) == 0) {  		new_str = insert (str' cur' "ᆺ이");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  	}  }  else {  	if (strncmp (str' cur' "ᆯ로"' 0' 3) == 0) {  		new_str = replace (str' cur' "ᆺ");  		new_str = insert (new_str' cur + 1' "으");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str [cur] == 'ᆯ' || str [cur] == 'ᆫ') {  		if (str.Length != cur + 1) {  			new_str = insert (str' cur' "ᆺ이");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  		}  		new_str = insert (str' cur' "ᆺ으");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else {  		new_str = insert (str' cur' "ᆺ이");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The following statement contains a magic number: if (str [cur] == 'ᆸ') {  	if (strncmp (str' cur' "ᆸ니"' 0' 3) == 0) {  		new_str = insert (str' cur' "ᆺ이");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  	}  }  else {  	if (strncmp (str' cur' "ᆯ로"' 0' 3) == 0) {  		new_str = replace (str' cur' "ᆺ");  		new_str = insert (new_str' cur + 1' "으");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str [cur] == 'ᆯ' || str [cur] == 'ᆫ') {  		if (str.Length != cur + 1) {  			new_str = insert (str' cur' "ᆺ이");  			buf = new_str.Substring (0' (cur + 1) - (0));  			buf2 = new_str.Substring (cur + 1);  			// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  			mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  		}  		new_str = insert (str' cur' "ᆺ으");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else {  		new_str = insert (str' cur' "ᆺ이");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The following statement contains a magic number: if (strncmp (str' cur' "ᆸ니"' 0' 3) == 0) {  	new_str = insert (str' cur' "ᆺ이");  	buf = new_str.Substring (0' (cur + 1) - (0));  	buf2 = new_str.Substring (cur + 1);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_gut,The following statement contains a magic number: if (strncmp (str' cur' "ᆯ로"' 0' 3) == 0) {  	new_str = replace (str' cur' "ᆺ");  	new_str = insert (new_str' cur + 1' "으");  	buf = new_str.Substring (0' (cur + 1) - (0));  	buf2 = new_str.Substring (cur + 1);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str [cur] == 'ᆯ' || str [cur] == 'ᆫ') {  	if (str.Length != cur + 1) {  		new_str = insert (str' cur' "ᆺ이");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  	}  	new_str = insert (str' cur' "ᆺ으");  	buf = new_str.Substring (0' (cur + 1) - (0));  	buf2 = new_str.Substring (cur + 1);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else {  	new_str = insert (str' cur' "ᆺ이");  	buf = new_str.Substring (0' (cur + 1) - (0));  	buf2 = new_str.Substring (cur + 1);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JP' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (cur + 2 > str.Length) {  	return;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if ((prev != null && prev.Length != 0 && cur == 0) && pcheck (prev' prev.Length - 1' "중성") != 0) {  	if (strncmp (str' 0' "여"' 0' 2) == 0) {  		new_str = replace (str' cur + 1' "ᅥ");  		new_str = insert (new_str' cur + 1' "ᅵᄋ");  		buf = new_str.Substring (0' (cur + 2) - (0));  		buf2 = new_str.Substring (cur + 2);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else {  		if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  			return;  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  		buf = "이" + str;  		rule_eomi_u (from' prev' buf' cur + 2);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if ((prev != null && prev.Length != 0 && cur == 0) && pcheck (prev' prev.Length - 1' "중성") != 0) {  	if (strncmp (str' 0' "여"' 0' 2) == 0) {  		new_str = replace (str' cur + 1' "ᅥ");  		new_str = insert (new_str' cur + 1' "ᅵᄋ");  		buf = new_str.Substring (0' (cur + 2) - (0));  		buf2 = new_str.Substring (cur + 2);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else {  		if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  			return;  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  		buf = "이" + str;  		rule_eomi_u (from' prev' buf' cur + 2);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if ((prev != null && prev.Length != 0 && cur == 0) && pcheck (prev' prev.Length - 1' "중성") != 0) {  	if (strncmp (str' 0' "여"' 0' 2) == 0) {  		new_str = replace (str' cur + 1' "ᅥ");  		new_str = insert (new_str' cur + 1' "ᅵᄋ");  		buf = new_str.Substring (0' (cur + 2) - (0));  		buf2 = new_str.Substring (cur + 2);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else {  		if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  			return;  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  		buf = "이" + str;  		rule_eomi_u (from' prev' buf' cur + 2);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if ((prev != null && prev.Length != 0 && cur == 0) && pcheck (prev' prev.Length - 1' "중성") != 0) {  	if (strncmp (str' 0' "여"' 0' 2) == 0) {  		new_str = replace (str' cur + 1' "ᅥ");  		new_str = insert (new_str' cur + 1' "ᅵᄋ");  		buf = new_str.Substring (0' (cur + 2) - (0));  		buf2 = new_str.Substring (cur + 2);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else {  		if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  			return;  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  		buf = "이" + str;  		rule_eomi_u (from' prev' buf' cur + 2);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if ((prev != null && prev.Length != 0 && cur == 0) && pcheck (prev' prev.Length - 1' "중성") != 0) {  	if (strncmp (str' 0' "여"' 0' 2) == 0) {  		new_str = replace (str' cur + 1' "ᅥ");  		new_str = insert (new_str' cur + 1' "ᅵᄋ");  		buf = new_str.Substring (0' (cur + 2) - (0));  		buf2 = new_str.Substring (cur + 2);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else {  		if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  			return;  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  		buf = "이" + str;  		rule_eomi_u (from' prev' buf' cur + 2);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if ((prev != null && prev.Length != 0 && cur == 0) && pcheck (prev' prev.Length - 1' "중성") != 0) {  	if (strncmp (str' 0' "여"' 0' 2) == 0) {  		new_str = replace (str' cur + 1' "ᅥ");  		new_str = insert (new_str' cur + 1' "ᅵᄋ");  		buf = new_str.Substring (0' (cur + 2) - (0));  		buf2 = new_str.Substring (cur + 2);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else {  		if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  			return;  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  		buf = "이" + str;  		rule_eomi_u (from' prev' buf' cur + 2);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if ((prev != null && prev.Length != 0 && cur == 0) && pcheck (prev' prev.Length - 1' "중성") != 0) {  	if (strncmp (str' 0' "여"' 0' 2) == 0) {  		new_str = replace (str' cur + 1' "ᅥ");  		new_str = insert (new_str' cur + 1' "ᅵᄋ");  		buf = new_str.Substring (0' (cur + 2) - (0));  		buf2 = new_str.Substring (cur + 2);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else {  		if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  			return;  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  		buf = "이" + str;  		rule_eomi_u (from' prev' buf' cur + 2);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if ((prev != null && prev.Length != 0 && cur == 0) && pcheck (prev' prev.Length - 1' "중성") != 0) {  	if (strncmp (str' 0' "여"' 0' 2) == 0) {  		new_str = replace (str' cur + 1' "ᅥ");  		new_str = insert (new_str' cur + 1' "ᅵᄋ");  		buf = new_str.Substring (0' (cur + 2) - (0));  		buf2 = new_str.Substring (cur + 2);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else {  		if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  			return;  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  		buf = "이" + str;  		rule_eomi_u (from' prev' buf' cur + 2);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if ((prev != null && prev.Length != 0 && cur == 0) && pcheck (prev' prev.Length - 1' "중성") != 0) {  	if (strncmp (str' 0' "여"' 0' 2) == 0) {  		new_str = replace (str' cur + 1' "ᅥ");  		new_str = insert (new_str' cur + 1' "ᅵᄋ");  		buf = new_str.Substring (0' (cur + 2) - (0));  		buf2 = new_str.Substring (cur + 2);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else {  		if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  			return;  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  		buf = "이" + str;  		rule_eomi_u (from' prev' buf' cur + 2);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (strncmp (str' 0' "여"' 0' 2) == 0) {  	new_str = replace (str' cur + 1' "ᅥ");  	new_str = insert (new_str' cur + 1' "ᅵᄋ");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  }  else {  	if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  		return;  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	buf = "이" + str;  	rule_eomi_u (from' prev' buf' cur + 2);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (strncmp (str' 0' "여"' 0' 2) == 0) {  	new_str = replace (str' cur + 1' "ᅥ");  	new_str = insert (new_str' cur + 1' "ᅵᄋ");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  }  else {  	if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  		return;  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	buf = "이" + str;  	rule_eomi_u (from' prev' buf' cur + 2);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (strncmp (str' 0' "여"' 0' 2) == 0) {  	new_str = replace (str' cur + 1' "ᅥ");  	new_str = insert (new_str' cur + 1' "ᅵᄋ");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  }  else {  	if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  		return;  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	buf = "이" + str;  	rule_eomi_u (from' prev' buf' cur + 2);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (strncmp (str' 0' "여"' 0' 2) == 0) {  	new_str = replace (str' cur + 1' "ᅥ");  	new_str = insert (new_str' cur + 1' "ᅵᄋ");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  }  else {  	if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  		return;  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	buf = "이" + str;  	rule_eomi_u (from' prev' buf' cur + 2);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (strncmp (str' 0' "여"' 0' 2) == 0) {  	new_str = replace (str' cur + 1' "ᅥ");  	new_str = insert (new_str' cur + 1' "ᅵᄋ");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  }  else {  	if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  		return;  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	buf = "이" + str;  	rule_eomi_u (from' prev' buf' cur + 2);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (strncmp (str' 0' "여"' 0' 2) == 0) {  	new_str = replace (str' cur + 1' "ᅥ");  	new_str = insert (new_str' cur + 1' "ᅵᄋ");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  }  else {  	if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  		return;  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	buf = "이" + str;  	rule_eomi_u (from' prev' buf' cur + 2);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (strncmp (str' 0' "여"' 0' 2) == 0) {  	new_str = replace (str' cur + 1' "ᅥ");  	new_str = insert (new_str' cur + 1' "ᅵᄋ");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  }  else {  	if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  		return;  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	buf = "이" + str;  	rule_eomi_u (from' prev' buf' cur + 2);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (strncmp (str' 0' "여"' 0' 2) == 0) {  	new_str = replace (str' cur + 1' "ᅥ");  	new_str = insert (new_str' cur + 1' "ᅵᄋ");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  }  else {  	if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  		return;  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	buf = "이" + str;  	rule_eomi_u (from' prev' buf' cur + 2);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (strncmp (str' 0' "여"' 0' 2) == 0) {  	new_str = replace (str' cur + 1' "ᅥ");  	new_str = insert (new_str' cur + 1' "ᅵᄋ");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  }  else {  	if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  		return;  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' "이"' str' TagSet.TAG_TYPE_JP' TagSet.TAG_TYPE_EOMIES' 0);  	buf = "이" + str;  	rule_eomi_u (from' prev' buf' cur + 2);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: buf = new_str.Substring (0' (cur + 2) - (0));  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: buf2 = new_str.Substring (cur + 2);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  	return;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  	return;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  	return;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  	return;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: if (pcheck (str' 0' "종성") != 0 || strncmp (str' 0' "는"' 0' 3) == 0 || strncmp (str' 0' "은"' 0' 3) == 0 || strncmp (str' 0' "음"' 0' 3) == 0 || strncmp (str' 2' "는"' 0' 3) == 0)  	return;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_i,The following statement contains a magic number: rule_eomi_u (from' prev' buf' cur + 2);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if ((cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l26") != 0) && pcheck (str' cur' "26") != 0 && pcheck (str' cur + 1' "r26") != 0) {  	new_str = insert (str' cur + 1' "ᇂ으");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if ((cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l26") != 0) && pcheck (str' cur' "26") != 0 && pcheck (str' cur + 1' "r26") != 0) {  	new_str = insert (str' cur + 1' "ᇂ으");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: buf = new_str.Substring (0' (cur + 2) - (0));  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: buf2 = new_str.Substring (cur + 2);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if ((cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l27") != 0) && pcheck (str' cur' "27") != 0 && pcheck (str' cur + 1' "r27") != 0) {  	if (str [cur] == 'ᅢ') {  		new_str = replace (str' cur' "ᅡ");  	}  	else {  		new_str = replace (str' cur' "ᅣ");  	}  	new_str = insert (new_str' cur + 1' "ᇂ어");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  	//			이운재 추가  	if (str [cur] == 'ᅢ') {  		new_str = replace (str' cur' "ᅥ");  	}  	else {  		new_str = replace (str' cur' "ᅧ");  	}  	new_str = insert (new_str' cur + 1' "ᇂ어");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if ((cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l27") != 0) && pcheck (str' cur' "27") != 0 && pcheck (str' cur + 1' "r27") != 0) {  	if (str [cur] == 'ᅢ') {  		new_str = replace (str' cur' "ᅡ");  	}  	else {  		new_str = replace (str' cur' "ᅣ");  	}  	new_str = insert (new_str' cur + 1' "ᇂ어");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  	//			이운재 추가  	if (str [cur] == 'ᅢ') {  		new_str = replace (str' cur' "ᅥ");  	}  	else {  		new_str = replace (str' cur' "ᅧ");  	}  	new_str = insert (new_str' cur + 1' "ᇂ어");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if ((cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l27") != 0) && pcheck (str' cur' "27") != 0 && pcheck (str' cur + 1' "r27") != 0) {  	if (str [cur] == 'ᅢ') {  		new_str = replace (str' cur' "ᅡ");  	}  	else {  		new_str = replace (str' cur' "ᅣ");  	}  	new_str = insert (new_str' cur + 1' "ᇂ어");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  	//			이운재 추가  	if (str [cur] == 'ᅢ') {  		new_str = replace (str' cur' "ᅥ");  	}  	else {  		new_str = replace (str' cur' "ᅧ");  	}  	new_str = insert (new_str' cur + 1' "ᇂ어");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if ((cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l27") != 0) && pcheck (str' cur' "27") != 0 && pcheck (str' cur + 1' "r27") != 0) {  	if (str [cur] == 'ᅢ') {  		new_str = replace (str' cur' "ᅡ");  	}  	else {  		new_str = replace (str' cur' "ᅣ");  	}  	new_str = insert (new_str' cur + 1' "ᇂ어");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  	//			이운재 추가  	if (str [cur] == 'ᅢ') {  		new_str = replace (str' cur' "ᅥ");  	}  	else {  		new_str = replace (str' cur' "ᅧ");  	}  	new_str = insert (new_str' cur + 1' "ᇂ어");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: buf = new_str.Substring (0' (cur + 2) - (0));  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: buf2 = new_str.Substring (cur + 2);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: buf = new_str.Substring (0' (cur + 2) - (0));  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: buf2 = new_str.Substring (cur + 2);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if ((cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l28") != 0) && pcheck (str' cur' "28") != 0 && pcheck (str' cur + 1' "r28") != 0) {  	new_str = replace (str' cur' "ᅥ");  	new_str = insert (new_str' cur + 1' "ᇂᄋ");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if ((cur > 0 && cur + 1 < len && pcheck (str' cur - 1' "l28") != 0) && pcheck (str' cur' "28") != 0 && pcheck (str' cur + 1' "r28") != 0) {  	new_str = replace (str' cur' "ᅥ");  	new_str = insert (new_str' cur + 1' "ᇂᄋ");  	buf = new_str.Substring (0' (cur + 2) - (0));  	buf2 = new_str.Substring (cur + 2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_H);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: buf = new_str.Substring (0' (cur + 2) - (0));  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: buf2 = new_str.Substring (cur + 2);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if ((cur > 0 && cur < len && pcheck (str' cur - 1' "l29") != 0) && pcheck (str' cur' "29") != 0 && pcheck (str' cur + 1' "r29") != 0) {  	new_str = replace (str' cur' "ᅳ");  	if (new_str [cur + 1] == 'ᅡ')  		new_str = new_str.Substring (0' (cur + 1) - (0)) + 'ᅥ' + new_str.Substring (cur + 2);  	new_str = insert (new_str' cur + 1' "ᄋ");  	new_str = new_str.Substring (0' (cur - 1) - (0)) + Code.toChoseong (new_str [cur - 1]) + new_str.Substring (cur);  	buf = new_str.Substring (0' (cur + 1) - (0));  	buf2 = new_str.Substring (cur + 1);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_REU);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if (new_str [cur + 1] == 'ᅡ')  	new_str = new_str.Substring (0' (cur + 1) - (0)) + 'ᅥ' + new_str.Substring (cur + 2);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: new_str = new_str.Substring (0' (cur + 1) - (0)) + 'ᅥ' + new_str.Substring (cur + 2);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if ((cur > 0 && cur <= len && pcheck (str' cur - 1' "l30") != 0) && pcheck (str' cur' "30") != 0 && pcheck (str' cur + 1' "r30") != 0 && (cur - 2 >= 0 && str [cur - 2] == 'ᄅ')) {  	new_str = replace (str' cur' "ᄋ");  	buf = new_str.Substring (0' (cur) - (0));  	buf2 = new_str.Substring (cur);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_REO);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word,The following statement contains a magic number: if ((cur > 0 && cur <= len && pcheck (str' cur - 1' "l30") != 0) && pcheck (str' cur' "30") != 0 && pcheck (str' cur + 1' "r30") != 0 && (cur - 2 >= 0 && str [cur - 2] == 'ᄅ')) {  	new_str = replace (str' cur' "ᄋ");  	buf = new_str.Substring (0' (cur) - (0));  	buf2 = new_str.Substring (cur);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' tagSet.IRR_TYPE_REO);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The following statement contains a magic number: if ((cur > 0 && pcheck (str' cur - 1' "l32") != 0) && pcheck (str' cur' "32") != 0 && pcheck (str' cur + 1' "r32") != 0 && str [cur + 2] == 'ᅧ') {  	new_str = replace (str' cur + 2' "ᅥ");  	buf = new_str.Substring (0' (cur + 1) - (0));  	buf2 = new_str.Substring (cur + 1);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The following statement contains a magic number: if ((cur > 0 && pcheck (str' cur - 1' "l32") != 0) && pcheck (str' cur' "32") != 0 && pcheck (str' cur + 1' "r32") != 0 && str [cur + 2] == 'ᅧ') {  	new_str = replace (str' cur + 2' "ᅥ");  	buf = new_str.Substring (0' (cur + 1) - (0));  	buf2 = new_str.Substring (cur + 1);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_irr_word2,The following statement contains a magic number: new_str = replace (str' cur + 2' "ᅥ");  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_johwa,The following statement contains a magic number: if (cur > 0 && pcheck (str' cur - 1' "양성모음") != 0) {  	if (cur + 2 < str.Length && str [cur + 1] == 'ᄋ' && str [cur + 2] == 'ᅡ') {  		new_str = replace (str' cur + 2' "ᅥ");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else if (cur + 1 < str.Length && str [cur] == 'ᄋ' && str [cur + 1] == 'ᅡ') {  		new_str = replace (str' cur + 1' "ᅥ");  		buf = new_str.Substring (0' (cur) - (0));  		buf2 = new_str.Substring (cur);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_johwa,The following statement contains a magic number: if (cur > 0 && pcheck (str' cur - 1' "양성모음") != 0) {  	if (cur + 2 < str.Length && str [cur + 1] == 'ᄋ' && str [cur + 2] == 'ᅡ') {  		new_str = replace (str' cur + 2' "ᅥ");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else if (cur + 1 < str.Length && str [cur] == 'ᄋ' && str [cur + 1] == 'ᅡ') {  		new_str = replace (str' cur + 1' "ᅥ");  		buf = new_str.Substring (0' (cur) - (0));  		buf2 = new_str.Substring (cur);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_johwa,The following statement contains a magic number: if (cur > 0 && pcheck (str' cur - 1' "양성모음") != 0) {  	if (cur + 2 < str.Length && str [cur + 1] == 'ᄋ' && str [cur + 2] == 'ᅡ') {  		new_str = replace (str' cur + 2' "ᅥ");  		buf = new_str.Substring (0' (cur + 1) - (0));  		buf2 = new_str.Substring (cur + 1);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  	}  	else if (cur + 1 < str.Length && str [cur] == 'ᄋ' && str [cur + 1] == 'ᅡ') {  		new_str = replace (str' cur + 1' "ᅥ");  		buf = new_str.Substring (0' (cur) - (0));  		buf2 = new_str.Substring (cur);  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  		mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_johwa,The following statement contains a magic number: if (cur + 2 < str.Length && str [cur + 1] == 'ᄋ' && str [cur + 2] == 'ᅡ') {  	new_str = replace (str' cur + 2' "ᅥ");  	buf = new_str.Substring (0' (cur + 1) - (0));  	buf2 = new_str.Substring (cur + 1);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  }  else if (cur + 1 < str.Length && str [cur] == 'ᄋ' && str [cur + 1] == 'ᅡ') {  	new_str = replace (str' cur + 1' "ᅥ");  	buf = new_str.Substring (0' (cur) - (0));  	buf2 = new_str.Substring (cur);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_johwa,The following statement contains a magic number: if (cur + 2 < str.Length && str [cur + 1] == 'ᄋ' && str [cur + 2] == 'ᅡ') {  	new_str = replace (str' cur + 2' "ᅥ");  	buf = new_str.Substring (0' (cur + 1) - (0));  	buf2 = new_str.Substring (cur + 1);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  }  else if (cur + 1 < str.Length && str [cur] == 'ᄋ' && str [cur + 1] == 'ᅡ') {  	new_str = replace (str' cur + 1' "ᅥ");  	buf = new_str.Substring (0' (cur) - (0));  	buf2 = new_str.Substring (cur);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_johwa,The following statement contains a magic number: if (cur + 2 < str.Length && str [cur + 1] == 'ᄋ' && str [cur + 2] == 'ᅡ') {  	new_str = replace (str' cur + 2' "ᅥ");  	buf = new_str.Substring (0' (cur + 1) - (0));  	buf2 = new_str.Substring (cur + 1);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  }  else if (cur + 1 < str.Length && str [cur] == 'ᄋ' && str [cur + 1] == 'ᅡ') {  	new_str = replace (str' cur + 1' "ᅥ");  	buf = new_str.Substring (0' (cur) - (0));  	buf2 = new_str.Substring (cur);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_johwa,The following statement contains a magic number: new_str = replace (str' cur + 2' "ᅥ");  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: mc.phonemeChange (from' "나"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: mc.phonemeChange (from' "너"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제가"' 0' 4) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: mc.phonemeChange (from' "저"' str + 2' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "내"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "네"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strcmp (str' 0' "제"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' "의"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "내게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: buf = "에" + str.Substring (2);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "네게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: buf = "에" + str.Substring (2);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "제게"' 0' 4) == 0) {  	buf = "에" + str.Substring (2);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "저"' buf' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: buf = "에" + str.Substring (2);  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "나"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "나"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "너"' 0' 2) == 0) {  	if (str.Length == 3 && str [2] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 3 && str [2] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 3 && str [2] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "너"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (strncmp (str' 0' "누구"' 0' 4) == 0) {  	if (str.Length == 5 && str [4] == 'ᆫ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  	else if (str.Length == 5 && str [4] == 'ᆯ') {  		// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  		mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  	}  }  else if (strcmp (str' 0' "무언가"' 0) == 0) {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "무엇"' "인가"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 5 && str [4] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 5 && str [4] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 5 && str [4] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 5 && str [4] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 5 && str [4] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 5 && str [4] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 5 && str [4] == 'ᆫ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "누구"' "는"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  else if (str.Length == 5 && str [4] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 5 && str [4] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_NP,The following statement contains a magic number: if (str.Length == 5 && str [4] == 'ᆯ') {  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()));  	mc.phonemeChange (from' "누구"' "를"' TagSet.TAG_TYPE_NBNP' TagSet.TAG_TYPE_JOSA' 0);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Exp,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Exp.cs,rule_rem,The following statement contains a magic number: if ((cur > 0 && pcheck (str' cur - 1' "l11") != 0) && (pcheck (str' cur' "11") != 0 || strncmp (str' cur' "오"' 0' 2) == 0) && pcheck (str' cur + 1' "r11") != 0) {  	System.String buf3;  	new_str = insert (str' cur' "ᆯ");  	buf3 = new_str;  	buf = new_str.Substring (0' (cur + 1) - (0));  	buf2 = new_str.Substring (cur + 1);  	// System.out.println("Prev: " + Code.toString(prev.toCharArray()) + "' " + "Str: " + Code.toString(str.toCharArray()) + "' " + "Cur: " + cur);  	mc.phonemeChange (from' buf' buf2' TagSet.TAG_TYPE_YONGS' TagSet.TAG_TYPE_EOMIES' 0);  	rule_eomi_u (from' prev' buf3' cur + 1);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: switch (c) {  case '+':  	inp = 1;  	break;  case '-':  	inp = 2;  	break;  case '.':  	inp = 3;  	break;  case ''':  	inp = 4;  	break;  default:  	if (char.IsDigit ((char)c))  		inp = 5;  	else  		inp = 6;  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: switch (c) {  case '+':  	inp = 1;  	break;  case '-':  	inp = 2;  	break;  case '.':  	inp = 3;  	break;  case ''':  	inp = 4;  	break;  default:  	if (char.IsDigit ((char)c))  		inp = 5;  	else  		inp = 6;  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: switch (c) {  case '+':  	inp = 1;  	break;  case '-':  	inp = 2;  	break;  case '.':  	inp = 3;  	break;  case ''':  	inp = 4;  	break;  default:  	if (char.IsDigit ((char)c))  		inp = 5;  	else  		inp = 6;  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: switch (c) {  case '+':  	inp = 1;  	break;  case '-':  	inp = 2;  	break;  case '.':  	inp = 3;  	break;  case ''':  	inp = 4;  	break;  default:  	if (char.IsDigit ((char)c))  		inp = 5;  	else  		inp = 6;  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: switch (c) {  case '+':  	inp = 1;  	break;  case '-':  	inp = 2;  	break;  case '.':  	inp = 3;  	break;  case ''':  	inp = 4;  	break;  default:  	if (char.IsDigit ((char)c))  		inp = 5;  	else  		inp = 6;  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: inp = 2;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: inp = 3;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: inp = 4;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: if (char.IsDigit ((char)c))  	inp = 5;  else  	inp = 6;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: if (char.IsDigit ((char)c))  	inp = 5;  else  	inp = 6;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: inp = 5;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,NumberDic,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\NumberDic.cs,node_look,The following statement contains a magic number: inp = 6;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: while (iter.MoveNext ()) {  	Eojeol[] eojeolSet = iter.Current;  	System.String prevMorph = "";  	for (int i = 0; i < eojeolSet.Length; i++) {  		Eojeol eojeol = eojeolSet [i];  		System.String[] morphemes = eojeol.Morphemes;  		System.String[] tags = eojeol.Tags;  		for (int j = 0; j < eojeol.length; j++) {  			System.String tri = Code.toTripleString (morphemes [j]);  			if (tags [j].StartsWith ("e")) {  				int prevLen = prevMorph.Length;  				if (tri.StartsWith (A_)) {  					/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  					else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  						/* for 'ㅂ' irregular */}  					else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  					}  					else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  						// final consonant or not  						morphemes [j] = Code.toString (AR.ToCharArray ());  					}  				}  				else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  					/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  						morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  					}  				}  			}  			prevMorph = Code.toTripleString (morphemes [j]);  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int i = 0; i < eojeolSet.Length; i++) {  	Eojeol eojeol = eojeolSet [i];  	System.String[] morphemes = eojeol.Morphemes;  	System.String[] tags = eojeol.Tags;  	for (int j = 0; j < eojeol.length; j++) {  		System.String tri = Code.toTripleString (morphemes [j]);  		if (tags [j].StartsWith ("e")) {  			int prevLen = prevMorph.Length;  			if (tri.StartsWith (A_)) {  				/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  				else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  					/* for 'ㅂ' irregular */}  				else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  				}  				else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  					// final consonant or not  					morphemes [j] = Code.toString (AR.ToCharArray ());  				}  			}  			else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  				/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  					morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  				}  			}  		}  		prevMorph = Code.toTripleString (morphemes [j]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: for (int j = 0; j < eojeol.length; j++) {  	System.String tri = Code.toTripleString (morphemes [j]);  	if (tags [j].StartsWith ("e")) {  		int prevLen = prevMorph.Length;  		if (tri.StartsWith (A_)) {  			/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  			else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  				/* for 'ㅂ' irregular */}  			else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  			}  			else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  				// final consonant or not  				morphemes [j] = Code.toString (AR.ToCharArray ());  			}  		}  		else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  			/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  				morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  			}  		}  	}  	prevMorph = Code.toTripleString (morphemes [j]);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tags [j].StartsWith ("e")) {  	int prevLen = prevMorph.Length;  	if (tri.StartsWith (A_)) {  		/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  		else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  			/* for 'ㅂ' irregular */}  		else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  		}  		else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  			// final consonant or not  			morphemes [j] = Code.toString (AR.ToCharArray ());  		}  	}  	else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  		/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  			morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (A_)) {  	/* 어 -> 아 */if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  	else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  		/* for 'ㅂ' irregular */}  	else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  	}  	else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  		// final consonant or not  		morphemes [j] = Code.toString (AR.ToCharArray ());  	}  }  else if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 4 && prevMorph [prevLen - 1] == EU [1] && !isXEU (prevMorph [prevLen - 2]) && ((Code.isJungseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 3])) || (Code.isJongseong (prevMorph [prevLen - 3]) && isPV (prevMorph [prevLen - 4])))) {  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  else if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 3 && prevMorph [prevLen - 1] == DOB [2] && (prevMorph.Substring (prevLen - 3).Equals (DOB) == false || prevMorph.Substring (prevLen - 3).Equals (GOB) == false)) {  	/* for 'ㅂ' irregular */}  else if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 2 && prevMorph.Substring (prevLen - 2).Equals (HA)) {  }  else if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 2 && ((Code.isJungseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 1])) || (Code.isJongseong (prevMorph [prevLen - 1]) && isPV (prevMorph [prevLen - 2])))) {  	// final consonant or not  	morphemes [j] = Code.toString (AR.ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (tri.StartsWith (EU.Substring (0' (2) - (0))) || tri.StartsWith (SU.Substring (0' (4) - (0))) || tri.StartsWith (NU.Substring (0' (4) - (0)))) {  	/* elision of '으'' '스'' '느' */if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  		morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  	morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: if (prevLen >= 2 && (Code.isJungseong (prevMorph [prevLen - 1]) || prevMorph [prevLen - 1] == 0x11AF)) {  	morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,PostProcessor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\PostProcessor.cs,doPostProcessing,The following statement contains a magic number: morphemes [j] = Code.toString (tri.Substring (2).ToCharArray ());  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,binary_search,The following statement contains a magic number: while (left <= right) {  	middle = (left + right) / 2;  	node = this.nf [middle + idx].node;  	if (key > node.K)  		left = middle + 1;  	else if (key < node.K)  		right = middle - 1;  	else  		return (idx + middle);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,binary_search,The following statement contains a magic number: middle = (left + right) / 2;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,nextkey,The following statement contains a magic number: if (i == 1)  	parent = this.head.s_node;  else  	parent = this.nf [this.search_idx [i - 2]].node;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,nextkey,The following statement contains a magic number: parent = this.nf [this.search_idx [i - 2]].node;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,nextkey,The following statement contains a magic number: while (i > 0) {  	if (cs != 0) {  		// there is a child  		parent = this.nf [index].node;  		index = this.nf [index].node.child;  		cs = this.nf [index].node.CS;  		word [i] = this.search_word [i] = this.nf [index].node.K;  		this.search_idx [i] = index;  		i++;  		if (this.nf [index].node.I != 0) {  			break;  		}  	}  	else if (index < parent.child + parent.CS - 1) {  		// there is a sibling  		index++;  		cs = this.nf [index].node.CS;  		word [i - 1] = this.search_word [i - 1] = this.nf [index].node.K;  		this.search_idx [i - 1] = index;  		if (this.nf [index].node.I != 0) {  			break;  		}  	}  	else {  		// there is no child and sibling  		i--;  		if (i <= 0) {  			i = 0;  			break;  		}  		index = this.search_idx [i - 1];  		if (i == 1) {  			parent = this.head.s_node;  		}  		else {  			parent = this.nf [this.search_idx [i - 2]].node;  		}  		cs = 0;  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,nextkey,The following statement contains a magic number: if (cs != 0) {  	// there is a child  	parent = this.nf [index].node;  	index = this.nf [index].node.child;  	cs = this.nf [index].node.CS;  	word [i] = this.search_word [i] = this.nf [index].node.K;  	this.search_idx [i] = index;  	i++;  	if (this.nf [index].node.I != 0) {  		break;  	}  }  else if (index < parent.child + parent.CS - 1) {  	// there is a sibling  	index++;  	cs = this.nf [index].node.CS;  	word [i - 1] = this.search_word [i - 1] = this.nf [index].node.K;  	this.search_idx [i - 1] = index;  	if (this.nf [index].node.I != 0) {  		break;  	}  }  else {  	// there is no child and sibling  	i--;  	if (i <= 0) {  		i = 0;  		break;  	}  	index = this.search_idx [i - 1];  	if (i == 1) {  		parent = this.head.s_node;  	}  	else {  		parent = this.nf [this.search_idx [i - 2]].node;  	}  	cs = 0;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,nextkey,The following statement contains a magic number: if (index < parent.child + parent.CS - 1) {  	// there is a sibling  	index++;  	cs = this.nf [index].node.CS;  	word [i - 1] = this.search_word [i - 1] = this.nf [index].node.K;  	this.search_idx [i - 1] = index;  	if (this.nf [index].node.I != 0) {  		break;  	}  }  else {  	// there is no child and sibling  	i--;  	if (i <= 0) {  		i = 0;  		break;  	}  	index = this.search_idx [i - 1];  	if (i == 1) {  		parent = this.head.s_node;  	}  	else {  		parent = this.nf [this.search_idx [i - 2]].node;  	}  	cs = 0;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,nextkey,The following statement contains a magic number: if (i == 1) {  	parent = this.head.s_node;  }  else {  	parent = this.nf [this.search_idx [i - 2]].node;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Simti,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Simti.cs,nextkey,The following statement contains a magic number: parent = this.nf [this.search_idx [i - 2]].node;  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Trie,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Trie.cs,Trie,The following statement contains a magic number: search_idx = new int[256];  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Trie,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Trie.cs,Trie,The following statement contains a magic number: search_key = new char[256];  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer,Trie,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\MorphAnalyzer\ChartMorphAnalyzer\Trie.cs,read_dic,The following statement contains a magic number: for (int i = 0; i < 255; i++) {  	info_list [i] = new INFO (this);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,HMMTagger,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\HMMTagger.cs,initialize,The following statement contains a magic number: wp = new WPhead[5000];  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,HMMTagger,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\HMMTagger.cs,initialize,The following statement contains a magic number: for (int i = 0; i < 5000; i++) {  	wp [i] = new WPhead (this);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,HMMTagger,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\HMMTagger.cs,initialize,The following statement contains a magic number: mn = new MNode[10000];  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,HMMTagger,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\HMMTagger.cs,initialize,The following statement contains a magic number: for (int i = 0; i < 10000; i++) {  	mn [i] = new MNode (this);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags.Length < 4) {  	System.String[] tmp = new System.String[] {  		""'  		""'  		""'  		""  	};  	/* 초기화 */for (int i = 0; i < tags.Length; i++) {  		tmp [i] = tags [i];  	}  	tags = tmp;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: switch (tags [0] [0]) {  case 'm':  	if (tags [0].StartsWith ("ma")) {  		if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("x")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("jcp")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'A';  		}  	}  	else if (tags [0].Matches ("m^a.*")) {  		if (tags [end].StartsWith ("j")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("n")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'M';  		}  	}  	break;  case 'e':  	if (tags [0].StartsWith ("ecc") || tags [0].StartsWith ("ecs")) {  		res [0] = 'C';  	}  	break;  case 'f':  	res [0] = 'N';  	break;  case 'i':  	if (tags [1].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'I';  	}  	break;  case 'n':  	if (tags [1].Matches ("x.(v|m).*")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else if (tags [1].Matches ("x.n.*")) {  		res [0] = 'N';  	}  	else if (tags [1].StartsWith ("p")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else {  		res [0] = 'N';  	}  	break;  case 'p':  	if (tags [1].StartsWith ("xsa")) {  		res [0] = 'A';  	}  	else if (tags [1].StartsWith ("etn") || tags [2].StartsWith ("n")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  	break;  case 's':  	if (tags [1].StartsWith ("su") || tags [2].StartsWith ("j")) {  		res [0] = 'N';  	}  	else if (tags [2].StartsWith ("n") || tags [end].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'S';  	}  	if (tags [0].StartsWith ("sf") || tags [1].StartsWith ("s")) {  		res [1] = 'F';  	}  	break;  case 'x':  	if (tags [0].StartsWith ("xsn") || tags [0].StartsWith ("xp")) {  		res [0] = 'N';  	}  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: switch (tags [0] [0]) {  case 'm':  	if (tags [0].StartsWith ("ma")) {  		if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("x")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("jcp")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'A';  		}  	}  	else if (tags [0].Matches ("m^a.*")) {  		if (tags [end].StartsWith ("j")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("n")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'M';  		}  	}  	break;  case 'e':  	if (tags [0].StartsWith ("ecc") || tags [0].StartsWith ("ecs")) {  		res [0] = 'C';  	}  	break;  case 'f':  	res [0] = 'N';  	break;  case 'i':  	if (tags [1].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'I';  	}  	break;  case 'n':  	if (tags [1].Matches ("x.(v|m).*")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else if (tags [1].Matches ("x.n.*")) {  		res [0] = 'N';  	}  	else if (tags [1].StartsWith ("p")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else {  		res [0] = 'N';  	}  	break;  case 'p':  	if (tags [1].StartsWith ("xsa")) {  		res [0] = 'A';  	}  	else if (tags [1].StartsWith ("etn") || tags [2].StartsWith ("n")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  	break;  case 's':  	if (tags [1].StartsWith ("su") || tags [2].StartsWith ("j")) {  		res [0] = 'N';  	}  	else if (tags [2].StartsWith ("n") || tags [end].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'S';  	}  	if (tags [0].StartsWith ("sf") || tags [1].StartsWith ("s")) {  		res [1] = 'F';  	}  	break;  case 'x':  	if (tags [0].StartsWith ("xsn") || tags [0].StartsWith ("xp")) {  		res [0] = 'N';  	}  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: switch (tags [0] [0]) {  case 'm':  	if (tags [0].StartsWith ("ma")) {  		if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("x")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("jcp")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'A';  		}  	}  	else if (tags [0].Matches ("m^a.*")) {  		if (tags [end].StartsWith ("j")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("n")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'M';  		}  	}  	break;  case 'e':  	if (tags [0].StartsWith ("ecc") || tags [0].StartsWith ("ecs")) {  		res [0] = 'C';  	}  	break;  case 'f':  	res [0] = 'N';  	break;  case 'i':  	if (tags [1].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'I';  	}  	break;  case 'n':  	if (tags [1].Matches ("x.(v|m).*")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else if (tags [1].Matches ("x.n.*")) {  		res [0] = 'N';  	}  	else if (tags [1].StartsWith ("p")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else {  		res [0] = 'N';  	}  	break;  case 'p':  	if (tags [1].StartsWith ("xsa")) {  		res [0] = 'A';  	}  	else if (tags [1].StartsWith ("etn") || tags [2].StartsWith ("n")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  	break;  case 's':  	if (tags [1].StartsWith ("su") || tags [2].StartsWith ("j")) {  		res [0] = 'N';  	}  	else if (tags [2].StartsWith ("n") || tags [end].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'S';  	}  	if (tags [0].StartsWith ("sf") || tags [1].StartsWith ("s")) {  		res [1] = 'F';  	}  	break;  case 'x':  	if (tags [0].StartsWith ("xsn") || tags [0].StartsWith ("xp")) {  		res [0] = 'N';  	}  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: switch (tags [0] [0]) {  case 'm':  	if (tags [0].StartsWith ("ma")) {  		if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("x")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("jcp")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'A';  		}  	}  	else if (tags [0].Matches ("m^a.*")) {  		if (tags [end].StartsWith ("j")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("n")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'M';  		}  	}  	break;  case 'e':  	if (tags [0].StartsWith ("ecc") || tags [0].StartsWith ("ecs")) {  		res [0] = 'C';  	}  	break;  case 'f':  	res [0] = 'N';  	break;  case 'i':  	if (tags [1].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'I';  	}  	break;  case 'n':  	if (tags [1].Matches ("x.(v|m).*")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else if (tags [1].Matches ("x.n.*")) {  		res [0] = 'N';  	}  	else if (tags [1].StartsWith ("p")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else {  		res [0] = 'N';  	}  	break;  case 'p':  	if (tags [1].StartsWith ("xsa")) {  		res [0] = 'A';  	}  	else if (tags [1].StartsWith ("etn") || tags [2].StartsWith ("n")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  	break;  case 's':  	if (tags [1].StartsWith ("su") || tags [2].StartsWith ("j")) {  		res [0] = 'N';  	}  	else if (tags [2].StartsWith ("n") || tags [end].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'S';  	}  	if (tags [0].StartsWith ("sf") || tags [1].StartsWith ("s")) {  		res [1] = 'F';  	}  	break;  case 'x':  	if (tags [0].StartsWith ("xsn") || tags [0].StartsWith ("xp")) {  		res [0] = 'N';  	}  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: switch (tags [0] [0]) {  case 'm':  	if (tags [0].StartsWith ("ma")) {  		if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("x")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("jcp")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'A';  		}  	}  	else if (tags [0].Matches ("m^a.*")) {  		if (tags [end].StartsWith ("j")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("n")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'M';  		}  	}  	break;  case 'e':  	if (tags [0].StartsWith ("ecc") || tags [0].StartsWith ("ecs")) {  		res [0] = 'C';  	}  	break;  case 'f':  	res [0] = 'N';  	break;  case 'i':  	if (tags [1].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'I';  	}  	break;  case 'n':  	if (tags [1].Matches ("x.(v|m).*")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else if (tags [1].Matches ("x.n.*")) {  		res [0] = 'N';  	}  	else if (tags [1].StartsWith ("p")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else {  		res [0] = 'N';  	}  	break;  case 'p':  	if (tags [1].StartsWith ("xsa")) {  		res [0] = 'A';  	}  	else if (tags [1].StartsWith ("etn") || tags [2].StartsWith ("n")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  	break;  case 's':  	if (tags [1].StartsWith ("su") || tags [2].StartsWith ("j")) {  		res [0] = 'N';  	}  	else if (tags [2].StartsWith ("n") || tags [end].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'S';  	}  	if (tags [0].StartsWith ("sf") || tags [1].StartsWith ("s")) {  		res [1] = 'F';  	}  	break;  case 'x':  	if (tags [0].StartsWith ("xsn") || tags [0].StartsWith ("xp")) {  		res [0] = 'N';  	}  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: switch (tags [0] [0]) {  case 'm':  	if (tags [0].StartsWith ("ma")) {  		if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("x")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("jcp")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'A';  		}  	}  	else if (tags [0].Matches ("m^a.*")) {  		if (tags [end].StartsWith ("j")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("n")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'M';  		}  	}  	break;  case 'e':  	if (tags [0].StartsWith ("ecc") || tags [0].StartsWith ("ecs")) {  		res [0] = 'C';  	}  	break;  case 'f':  	res [0] = 'N';  	break;  case 'i':  	if (tags [1].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'I';  	}  	break;  case 'n':  	if (tags [1].Matches ("x.(v|m).*")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else if (tags [1].Matches ("x.n.*")) {  		res [0] = 'N';  	}  	else if (tags [1].StartsWith ("p")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else {  		res [0] = 'N';  	}  	break;  case 'p':  	if (tags [1].StartsWith ("xsa")) {  		res [0] = 'A';  	}  	else if (tags [1].StartsWith ("etn") || tags [2].StartsWith ("n")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  	break;  case 's':  	if (tags [1].StartsWith ("su") || tags [2].StartsWith ("j")) {  		res [0] = 'N';  	}  	else if (tags [2].StartsWith ("n") || tags [end].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'S';  	}  	if (tags [0].StartsWith ("sf") || tags [1].StartsWith ("s")) {  		res [1] = 'F';  	}  	break;  case 'x':  	if (tags [0].StartsWith ("xsn") || tags [0].StartsWith ("xp")) {  		res [0] = 'N';  	}  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: switch (tags [0] [0]) {  case 'm':  	if (tags [0].StartsWith ("ma")) {  		if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("x")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("jcp")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'A';  		}  	}  	else if (tags [0].Matches ("m^a.*")) {  		if (tags [end].StartsWith ("j")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("n")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'M';  		}  	}  	break;  case 'e':  	if (tags [0].StartsWith ("ecc") || tags [0].StartsWith ("ecs")) {  		res [0] = 'C';  	}  	break;  case 'f':  	res [0] = 'N';  	break;  case 'i':  	if (tags [1].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'I';  	}  	break;  case 'n':  	if (tags [1].Matches ("x.(v|m).*")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else if (tags [1].Matches ("x.n.*")) {  		res [0] = 'N';  	}  	else if (tags [1].StartsWith ("p")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else {  		res [0] = 'N';  	}  	break;  case 'p':  	if (tags [1].StartsWith ("xsa")) {  		res [0] = 'A';  	}  	else if (tags [1].StartsWith ("etn") || tags [2].StartsWith ("n")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  	break;  case 's':  	if (tags [1].StartsWith ("su") || tags [2].StartsWith ("j")) {  		res [0] = 'N';  	}  	else if (tags [2].StartsWith ("n") || tags [end].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'S';  	}  	if (tags [0].StartsWith ("sf") || tags [1].StartsWith ("s")) {  		res [1] = 'F';  	}  	break;  case 'x':  	if (tags [0].StartsWith ("xsn") || tags [0].StartsWith ("xp")) {  		res [0] = 'N';  	}  	break;  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].Matches ("x.(v|m).*")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else if (tags [1].Matches ("x.n.*")) {  	res [0] = 'N';  }  else if (tags [1].StartsWith ("p")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else {  	res [0] = 'N';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].Matches ("x.(v|m).*")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else if (tags [1].Matches ("x.n.*")) {  	res [0] = 'N';  }  else if (tags [1].StartsWith ("p")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else {  	res [0] = 'N';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].Matches ("x.(v|m).*")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else if (tags [1].Matches ("x.n.*")) {  	res [0] = 'N';  }  else if (tags [1].StartsWith ("p")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else {  	res [0] = 'N';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].Matches ("x.(v|m).*")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else if (tags [1].Matches ("x.n.*")) {  	res [0] = 'N';  }  else if (tags [1].StartsWith ("p")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else {  	res [0] = 'N';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  	res [0] = 'N';  }  else {  	res [0] = 'P';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  	res [0] = 'N';  }  else {  	res [0] = 'P';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].Matches ("x.n.*")) {  	res [0] = 'N';  }  else if (tags [1].StartsWith ("p")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else {  	res [0] = 'N';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].Matches ("x.n.*")) {  	res [0] = 'N';  }  else if (tags [1].StartsWith ("p")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else {  	res [0] = 'N';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].StartsWith ("p")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else {  	res [0] = 'N';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].StartsWith ("p")) {  	if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  }  else {  	res [0] = 'N';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  	res [0] = 'N';  }  else {  	res [0] = 'P';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  	res [0] = 'N';  }  else {  	res [0] = 'P';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].StartsWith ("xsa")) {  	res [0] = 'A';  }  else if (tags [1].StartsWith ("etn") || tags [2].StartsWith ("n")) {  	res [0] = 'N';  }  else {  	res [0] = 'P';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].StartsWith ("etn") || tags [2].StartsWith ("n")) {  	res [0] = 'N';  }  else {  	res [0] = 'P';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].StartsWith ("su") || tags [2].StartsWith ("j")) {  	res [0] = 'N';  }  else if (tags [2].StartsWith ("n") || tags [end].StartsWith ("j")) {  	res [0] = 'N';  }  else {  	res [0] = 'S';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [1].StartsWith ("su") || tags [2].StartsWith ("j")) {  	res [0] = 'N';  }  else if (tags [2].StartsWith ("n") || tags [end].StartsWith ("j")) {  	res [0] = 'N';  }  else {  	res [0] = 'S';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following statement contains a magic number: if (tags [2].StartsWith ("n") || tags [end].StartsWith ("j")) {  	res [0] = 'N';  }  else {  	res [0] = 'S';  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112) {  		cho = c - 0x1100;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			if (++i < len) {  				c = tripleArray [i];  			}  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				if (++i < len) {  					c = tripleArray [i];  				}  			}  			else {  				// choseong + jungseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		result += c;  		if (++i < len) {  			c = tripleArray [i];  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112) {  		cho = c - 0x1100;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			if (++i < len) {  				c = tripleArray [i];  			}  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				if (++i < len) {  					c = tripleArray [i];  				}  			}  			else {  				// choseong + jungseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		result += c;  		if (++i < len) {  			c = tripleArray [i];  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112) {  		cho = c - 0x1100;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			if (++i < len) {  				c = tripleArray [i];  			}  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				if (++i < len) {  					c = tripleArray [i];  				}  			}  			else {  				// choseong + jungseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		result += c;  		if (++i < len) {  			c = tripleArray [i];  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112) {  		cho = c - 0x1100;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			if (++i < len) {  				c = tripleArray [i];  			}  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				if (++i < len) {  					c = tripleArray [i];  				}  			}  			else {  				// choseong + jungseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		result += c;  		if (++i < len) {  			c = tripleArray [i];  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112) {  		cho = c - 0x1100;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			if (++i < len) {  				c = tripleArray [i];  			}  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				if (++i < len) {  					c = tripleArray [i];  				}  			}  			else {  				// choseong + jungseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		result += c;  		if (++i < len) {  			c = tripleArray [i];  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112) {  		cho = c - 0x1100;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			if (++i < len) {  				c = tripleArray [i];  			}  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				if (++i < len) {  					c = tripleArray [i];  				}  			}  			else {  				// choseong + jungseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		result += c;  		if (++i < len) {  			c = tripleArray [i];  		}  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112) {  	cho = c - 0x1100;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			if (++i < len) {  				c = tripleArray [i];  			}  		}  		else {  			// choseong + jungseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	result += c;  	if (++i < len) {  		c = tripleArray [i];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112) {  	cho = c - 0x1100;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			if (++i < len) {  				c = tripleArray [i];  			}  		}  		else {  			// choseong + jungseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	result += c;  	if (++i < len) {  		c = tripleArray [i];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112) {  	cho = c - 0x1100;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			if (++i < len) {  				c = tripleArray [i];  			}  		}  		else {  			// choseong + jungseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	result += c;  	if (++i < len) {  		c = tripleArray [i];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112) {  	cho = c - 0x1100;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			if (++i < len) {  				c = tripleArray [i];  			}  		}  		else {  			// choseong + jungseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	result += c;  	if (++i < len) {  		c = tripleArray [i];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112) {  	cho = c - 0x1100;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			if (++i < len) {  				c = tripleArray [i];  			}  		}  		else {  			// choseong + jungseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	result += c;  	if (++i < len) {  		c = tripleArray [i];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112) {  	cho = c - 0x1100;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		if (++i < len) {  			c = tripleArray [i];  		}  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			if (++i < len) {  				c = tripleArray [i];  			}  		}  		else {  			// choseong + jungseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	result += c;  	if (++i < len) {  		c = tripleArray [i];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		// choseong + jungseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		// choseong + jungseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		// choseong + jungseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		// choseong + jungseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		// choseong + jungseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	if (++i < len) {  		c = tripleArray [i];  	}  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		if (++i < len) {  			c = tripleArray [i];  		}  	}  	else {  		// choseong + jungseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	// choseong + jungseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	// choseong + jungseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	// choseong + jungseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	// choseong + jungseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	// choseong + jungseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	if (++i < len) {  		c = tripleArray [i];  	}  }  else {  	// choseong + jungseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112 && i < len) {  		cho = c - 0x1100;  		c = tripleArray [i++];  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			c = tripleArray [i++];  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				c = tripleArray [i++];  			}  			else {  				// choseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		c = tripleArray [i++];  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		c = tripleArray [i++];  	}  	else {  		result += c;  		c = tripleArray [i++];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112 && i < len) {  		cho = c - 0x1100;  		c = tripleArray [i++];  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			c = tripleArray [i++];  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				c = tripleArray [i++];  			}  			else {  				// choseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		c = tripleArray [i++];  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		c = tripleArray [i++];  	}  	else {  		result += c;  		c = tripleArray [i++];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112 && i < len) {  		cho = c - 0x1100;  		c = tripleArray [i++];  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			c = tripleArray [i++];  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				c = tripleArray [i++];  			}  			else {  				// choseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		c = tripleArray [i++];  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		c = tripleArray [i++];  	}  	else {  		result += c;  		c = tripleArray [i++];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112 && i < len) {  		cho = c - 0x1100;  		c = tripleArray [i++];  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			c = tripleArray [i++];  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				c = tripleArray [i++];  			}  			else {  				// choseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		c = tripleArray [i++];  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		c = tripleArray [i++];  	}  	else {  		result += c;  		c = tripleArray [i++];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112 && i < len) {  		cho = c - 0x1100;  		c = tripleArray [i++];  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			c = tripleArray [i++];  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				c = tripleArray [i++];  			}  			else {  				// choseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		c = tripleArray [i++];  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		c = tripleArray [i++];  	}  	else {  		result += c;  		c = tripleArray [i++];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: while (i < len) {  	if (c >= 0x1100 && c <= 0x1112 && i < len) {  		cho = c - 0x1100;  		c = tripleArray [i++];  		if (c >= 0x1161 && c <= 0x1175 && i < len) {  			jung = c - 0x1161;  			c = tripleArray [i++];  			if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  				jong = c - 0x11A7;  				// choseong + jungseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  				c = tripleArray [i++];  			}  			else {  				// choseong + jongseong  				result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  			}  		}  		else {  			// choseong: a single choseong is represented as ^consonant  			char tmp = CHOSEONG_LIST [cho];  			if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  				result += CHOSEONG_LIST [cho];  			}  			else {  				result += ("^" + CHOSEONG_LIST [cho]);  			}  		}  	}  	else if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		// jungseong  		result += (char)(jung + 0x314F);  		c = tripleArray [i++];  	}  	else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// jongseong  		result += JONGSEONG_LIST [jong];  		c = tripleArray [i++];  	}  	else {  		result += c;  		c = tripleArray [i++];  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112 && i < len) {  	cho = c - 0x1100;  	c = tripleArray [i++];  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		c = tripleArray [i++];  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			c = tripleArray [i++];  		}  		else {  			// choseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	c = tripleArray [i++];  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	c = tripleArray [i++];  }  else {  	result += c;  	c = tripleArray [i++];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112 && i < len) {  	cho = c - 0x1100;  	c = tripleArray [i++];  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		c = tripleArray [i++];  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			c = tripleArray [i++];  		}  		else {  			// choseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	c = tripleArray [i++];  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	c = tripleArray [i++];  }  else {  	result += c;  	c = tripleArray [i++];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112 && i < len) {  	cho = c - 0x1100;  	c = tripleArray [i++];  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		c = tripleArray [i++];  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			c = tripleArray [i++];  		}  		else {  			// choseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	c = tripleArray [i++];  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	c = tripleArray [i++];  }  else {  	result += c;  	c = tripleArray [i++];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112 && i < len) {  	cho = c - 0x1100;  	c = tripleArray [i++];  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		c = tripleArray [i++];  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			c = tripleArray [i++];  		}  		else {  			// choseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	c = tripleArray [i++];  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	c = tripleArray [i++];  }  else {  	result += c;  	c = tripleArray [i++];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112 && i < len) {  	cho = c - 0x1100;  	c = tripleArray [i++];  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		c = tripleArray [i++];  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			c = tripleArray [i++];  		}  		else {  			// choseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	c = tripleArray [i++];  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	c = tripleArray [i++];  }  else {  	result += c;  	c = tripleArray [i++];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1100 && c <= 0x1112 && i < len) {  	cho = c - 0x1100;  	c = tripleArray [i++];  	if (c >= 0x1161 && c <= 0x1175 && i < len) {  		jung = c - 0x1161;  		c = tripleArray [i++];  		if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  			jong = c - 0x11A7;  			// choseong + jungseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  			c = tripleArray [i++];  		}  		else {  			// choseong + jongseong  			result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong: a single choseong is represented as ^consonant  		char tmp = CHOSEONG_LIST [cho];  		if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  			result += CHOSEONG_LIST [cho];  		}  		else {  			result += ("^" + CHOSEONG_LIST [cho]);  		}  	}  }  else if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	// jungseong  	result += (char)(jung + 0x314F);  	c = tripleArray [i++];  }  else if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// jongseong  	result += JONGSEONG_LIST [jong];  	c = tripleArray [i++];  }  else {  	result += c;  	c = tripleArray [i++];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	c = tripleArray [i++];  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		c = tripleArray [i++];  	}  	else {  		// choseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	c = tripleArray [i++];  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		c = tripleArray [i++];  	}  	else {  		// choseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	c = tripleArray [i++];  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		c = tripleArray [i++];  	}  	else {  		// choseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	c = tripleArray [i++];  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		c = tripleArray [i++];  	}  	else {  		// choseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	c = tripleArray [i++];  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		c = tripleArray [i++];  	}  	else {  		// choseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x1161 && c <= 0x1175 && i < len) {  	jung = c - 0x1161;  	c = tripleArray [i++];  	if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  		jong = c - 0x11A7;  		// choseong + jungseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		c = tripleArray [i++];  	}  	else {  		// choseong + jongseong  		result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong: a single choseong is represented as ^consonant  	char tmp = CHOSEONG_LIST [cho];  	if (tmp == 'ㅃ' || tmp == 'ㅉ' || tmp == 'ㄸ') {  		result += CHOSEONG_LIST [cho];  	}  	else {  		result += ("^" + CHOSEONG_LIST [cho]);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	c = tripleArray [i++];  }  else {  	// choseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	c = tripleArray [i++];  }  else {  	// choseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	c = tripleArray [i++];  }  else {  	// choseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	c = tripleArray [i++];  }  else {  	// choseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	c = tripleArray [i++];  }  else {  	// choseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: if (c >= 0x11A8 && c <= 0x11C2 && i < len) {  	jong = c - 0x11A7;  	// choseong + jungseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	c = tripleArray [i++];  }  else {  	// choseong + jongseong  	result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toString,The following statement contains a magic number: result += (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (cho >= 0x1100 && cho <= 0x1112) {  	cho -= (char)(0x1100);  	if (jung >= 0x1161 && jung <= 0x1175) {  		jung -= (char)(0x1161);  		if (jong >= 0x11A8 && jong <= 0x11C2) {  			jong -= (char)(0x11A8);  			// choseong + jungseong + jongseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		}  		else {  			// choseong + jungseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong  		return CHOSEONG_LIST [cho];  	}  }  else if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	// jungseong  	return (char)(jung + 0x314F);  }  else if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A);  	// jongseong  	return JONGSEONG_LIST [jong];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (cho >= 0x1100 && cho <= 0x1112) {  	cho -= (char)(0x1100);  	if (jung >= 0x1161 && jung <= 0x1175) {  		jung -= (char)(0x1161);  		if (jong >= 0x11A8 && jong <= 0x11C2) {  			jong -= (char)(0x11A8);  			// choseong + jungseong + jongseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		}  		else {  			// choseong + jungseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong  		return CHOSEONG_LIST [cho];  	}  }  else if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	// jungseong  	return (char)(jung + 0x314F);  }  else if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A);  	// jongseong  	return JONGSEONG_LIST [jong];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (cho >= 0x1100 && cho <= 0x1112) {  	cho -= (char)(0x1100);  	if (jung >= 0x1161 && jung <= 0x1175) {  		jung -= (char)(0x1161);  		if (jong >= 0x11A8 && jong <= 0x11C2) {  			jong -= (char)(0x11A8);  			// choseong + jungseong + jongseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		}  		else {  			// choseong + jungseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong  		return CHOSEONG_LIST [cho];  	}  }  else if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	// jungseong  	return (char)(jung + 0x314F);  }  else if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A);  	// jongseong  	return JONGSEONG_LIST [jong];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (cho >= 0x1100 && cho <= 0x1112) {  	cho -= (char)(0x1100);  	if (jung >= 0x1161 && jung <= 0x1175) {  		jung -= (char)(0x1161);  		if (jong >= 0x11A8 && jong <= 0x11C2) {  			jong -= (char)(0x11A8);  			// choseong + jungseong + jongseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		}  		else {  			// choseong + jungseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong  		return CHOSEONG_LIST [cho];  	}  }  else if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	// jungseong  	return (char)(jung + 0x314F);  }  else if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A);  	// jongseong  	return JONGSEONG_LIST [jong];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (cho >= 0x1100 && cho <= 0x1112) {  	cho -= (char)(0x1100);  	if (jung >= 0x1161 && jung <= 0x1175) {  		jung -= (char)(0x1161);  		if (jong >= 0x11A8 && jong <= 0x11C2) {  			jong -= (char)(0x11A8);  			// choseong + jungseong + jongseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		}  		else {  			// choseong + jungseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong  		return CHOSEONG_LIST [cho];  	}  }  else if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	// jungseong  	return (char)(jung + 0x314F);  }  else if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A);  	// jongseong  	return JONGSEONG_LIST [jong];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (cho >= 0x1100 && cho <= 0x1112) {  	cho -= (char)(0x1100);  	if (jung >= 0x1161 && jung <= 0x1175) {  		jung -= (char)(0x1161);  		if (jong >= 0x11A8 && jong <= 0x11C2) {  			jong -= (char)(0x11A8);  			// choseong + jungseong + jongseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  		}  		else {  			// choseong + jungseong  			return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  		}  	}  	else {  		// choseong  		return CHOSEONG_LIST [cho];  	}  }  else if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	// jungseong  	return (char)(jung + 0x314F);  }  else if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A);  	// jongseong  	return JONGSEONG_LIST [jong];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	if (jong >= 0x11A8 && jong <= 0x11C2) {  		jong -= (char)(0x11A8);  		// choseong + jungseong + jongseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	}  	else {  		// choseong + jungseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong  	return CHOSEONG_LIST [cho];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	if (jong >= 0x11A8 && jong <= 0x11C2) {  		jong -= (char)(0x11A8);  		// choseong + jungseong + jongseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	}  	else {  		// choseong + jungseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong  	return CHOSEONG_LIST [cho];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	if (jong >= 0x11A8 && jong <= 0x11C2) {  		jong -= (char)(0x11A8);  		// choseong + jungseong + jongseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	}  	else {  		// choseong + jungseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong  	return CHOSEONG_LIST [cho];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	if (jong >= 0x11A8 && jong <= 0x11C2) {  		jong -= (char)(0x11A8);  		// choseong + jungseong + jongseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	}  	else {  		// choseong + jungseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong  	return CHOSEONG_LIST [cho];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	if (jong >= 0x11A8 && jong <= 0x11C2) {  		jong -= (char)(0x11A8);  		// choseong + jungseong + jongseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	}  	else {  		// choseong + jungseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong  	return CHOSEONG_LIST [cho];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jung >= 0x1161 && jung <= 0x1175) {  	jung -= (char)(0x1161);  	if (jong >= 0x11A8 && jong <= 0x11C2) {  		jong -= (char)(0x11A8);  		// choseong + jungseong + jongseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  	}  	else {  		// choseong + jungseong  		return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  	}  }  else {  	// choseong  	return CHOSEONG_LIST [cho];  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A8);  	// choseong + jungseong + jongseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  }  else {  	// choseong + jungseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A8);  	// choseong + jungseong + jongseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  }  else {  	// choseong + jungseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A8);  	// choseong + jungseong + jongseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  }  else {  	// choseong + jungseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A8);  	// choseong + jungseong + jongseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  }  else {  	// choseong + jungseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A8);  	// choseong + jungseong + jongseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  }  else {  	// choseong + jungseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: if (jong >= 0x11A8 && jong <= 0x11C2) {  	jong -= (char)(0x11A8);  	// choseong + jungseong + jongseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  }  else {  	// choseong + jungseong  	return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28) + jong);  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toSyllable,The following statement contains a magic number: return (char)(0xAC00 + (cho * 21 * 28) + (jung * 28));  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: for (int i = 0; i < str.Length; i++) {  	c = str [i];  	if (c >= 0xAC00 && c <= 0xD7AF) {  		int combined = c - 0xAC00;  		if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  			charList.Add (cho);  		}  		combined %= (21 * 28);  		if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  			charList.Add (jung);  		}  		if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  			charList.Add (jong);  		}  	}  	else if (c >= 0x3131 && c <= 0x314E) {  		c -= (char)(0x3131);  		if (JONGSEONG_LIST_REV [c] != -1) {  			// a single consonant is regarded as a final consonant  			charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  		}  		else if (CHOSEONG_LIST_REV [c] != -1) {  			// a single consonant which can not be a final consonant becomes a beginning consonant  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		}  		else {  			// exception (if it occur' the conversion array has some problem)  			charList.Add ((char)(c + 0x3131));  		}  	}  	else if (c >= 0x314F && c <= 0x3163) {  		// a single vowel changes jungseong  		charList.Add ((char)(c - 0x314F + 0x1161));  	}  	else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  		// ^consonant changes to choseong  		c = (char)(str [i + 1] - 0x3131);  		if (CHOSEONG_LIST_REV [c] != -1) {  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  			i++;  		}  		else {  			charList.Add ('^');  		}  	}  	else {  		// other characters  		charList.Add (c);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: for (int i = 0; i < str.Length; i++) {  	c = str [i];  	if (c >= 0xAC00 && c <= 0xD7AF) {  		int combined = c - 0xAC00;  		if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  			charList.Add (cho);  		}  		combined %= (21 * 28);  		if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  			charList.Add (jung);  		}  		if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  			charList.Add (jong);  		}  	}  	else if (c >= 0x3131 && c <= 0x314E) {  		c -= (char)(0x3131);  		if (JONGSEONG_LIST_REV [c] != -1) {  			// a single consonant is regarded as a final consonant  			charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  		}  		else if (CHOSEONG_LIST_REV [c] != -1) {  			// a single consonant which can not be a final consonant becomes a beginning consonant  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		}  		else {  			// exception (if it occur' the conversion array has some problem)  			charList.Add ((char)(c + 0x3131));  		}  	}  	else if (c >= 0x314F && c <= 0x3163) {  		// a single vowel changes jungseong  		charList.Add ((char)(c - 0x314F + 0x1161));  	}  	else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  		// ^consonant changes to choseong  		c = (char)(str [i + 1] - 0x3131);  		if (CHOSEONG_LIST_REV [c] != -1) {  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  			i++;  		}  		else {  			charList.Add ('^');  		}  	}  	else {  		// other characters  		charList.Add (c);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: for (int i = 0; i < str.Length; i++) {  	c = str [i];  	if (c >= 0xAC00 && c <= 0xD7AF) {  		int combined = c - 0xAC00;  		if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  			charList.Add (cho);  		}  		combined %= (21 * 28);  		if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  			charList.Add (jung);  		}  		if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  			charList.Add (jong);  		}  	}  	else if (c >= 0x3131 && c <= 0x314E) {  		c -= (char)(0x3131);  		if (JONGSEONG_LIST_REV [c] != -1) {  			// a single consonant is regarded as a final consonant  			charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  		}  		else if (CHOSEONG_LIST_REV [c] != -1) {  			// a single consonant which can not be a final consonant becomes a beginning consonant  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		}  		else {  			// exception (if it occur' the conversion array has some problem)  			charList.Add ((char)(c + 0x3131));  		}  	}  	else if (c >= 0x314F && c <= 0x3163) {  		// a single vowel changes jungseong  		charList.Add ((char)(c - 0x314F + 0x1161));  	}  	else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  		// ^consonant changes to choseong  		c = (char)(str [i + 1] - 0x3131);  		if (CHOSEONG_LIST_REV [c] != -1) {  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  			i++;  		}  		else {  			charList.Add ('^');  		}  	}  	else {  		// other characters  		charList.Add (c);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: for (int i = 0; i < str.Length; i++) {  	c = str [i];  	if (c >= 0xAC00 && c <= 0xD7AF) {  		int combined = c - 0xAC00;  		if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  			charList.Add (cho);  		}  		combined %= (21 * 28);  		if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  			charList.Add (jung);  		}  		if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  			charList.Add (jong);  		}  	}  	else if (c >= 0x3131 && c <= 0x314E) {  		c -= (char)(0x3131);  		if (JONGSEONG_LIST_REV [c] != -1) {  			// a single consonant is regarded as a final consonant  			charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  		}  		else if (CHOSEONG_LIST_REV [c] != -1) {  			// a single consonant which can not be a final consonant becomes a beginning consonant  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		}  		else {  			// exception (if it occur' the conversion array has some problem)  			charList.Add ((char)(c + 0x3131));  		}  	}  	else if (c >= 0x314F && c <= 0x3163) {  		// a single vowel changes jungseong  		charList.Add ((char)(c - 0x314F + 0x1161));  	}  	else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  		// ^consonant changes to choseong  		c = (char)(str [i + 1] - 0x3131);  		if (CHOSEONG_LIST_REV [c] != -1) {  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  			i++;  		}  		else {  			charList.Add ('^');  		}  	}  	else {  		// other characters  		charList.Add (c);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: for (int i = 0; i < str.Length; i++) {  	c = str [i];  	if (c >= 0xAC00 && c <= 0xD7AF) {  		int combined = c - 0xAC00;  		if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  			charList.Add (cho);  		}  		combined %= (21 * 28);  		if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  			charList.Add (jung);  		}  		if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  			charList.Add (jong);  		}  	}  	else if (c >= 0x3131 && c <= 0x314E) {  		c -= (char)(0x3131);  		if (JONGSEONG_LIST_REV [c] != -1) {  			// a single consonant is regarded as a final consonant  			charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  		}  		else if (CHOSEONG_LIST_REV [c] != -1) {  			// a single consonant which can not be a final consonant becomes a beginning consonant  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		}  		else {  			// exception (if it occur' the conversion array has some problem)  			charList.Add ((char)(c + 0x3131));  		}  	}  	else if (c >= 0x314F && c <= 0x3163) {  		// a single vowel changes jungseong  		charList.Add ((char)(c - 0x314F + 0x1161));  	}  	else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  		// ^consonant changes to choseong  		c = (char)(str [i + 1] - 0x3131);  		if (CHOSEONG_LIST_REV [c] != -1) {  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  			i++;  		}  		else {  			charList.Add ('^');  		}  	}  	else {  		// other characters  		charList.Add (c);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: for (int i = 0; i < str.Length; i++) {  	c = str [i];  	if (c >= 0xAC00 && c <= 0xD7AF) {  		int combined = c - 0xAC00;  		if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  			charList.Add (cho);  		}  		combined %= (21 * 28);  		if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  			charList.Add (jung);  		}  		if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  			charList.Add (jong);  		}  	}  	else if (c >= 0x3131 && c <= 0x314E) {  		c -= (char)(0x3131);  		if (JONGSEONG_LIST_REV [c] != -1) {  			// a single consonant is regarded as a final consonant  			charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  		}  		else if (CHOSEONG_LIST_REV [c] != -1) {  			// a single consonant which can not be a final consonant becomes a beginning consonant  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		}  		else {  			// exception (if it occur' the conversion array has some problem)  			charList.Add ((char)(c + 0x3131));  		}  	}  	else if (c >= 0x314F && c <= 0x3163) {  		// a single vowel changes jungseong  		charList.Add ((char)(c - 0x314F + 0x1161));  	}  	else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  		// ^consonant changes to choseong  		c = (char)(str [i + 1] - 0x3131);  		if (CHOSEONG_LIST_REV [c] != -1) {  			charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  			i++;  		}  		else {  			charList.Add ('^');  		}  	}  	else {  		// other characters  		charList.Add (c);  	}  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: if (c >= 0xAC00 && c <= 0xD7AF) {  	int combined = c - 0xAC00;  	if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  		charList.Add (cho);  	}  	combined %= (21 * 28);  	if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  		charList.Add (jung);  	}  	if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  		charList.Add (jong);  	}  }  else if (c >= 0x3131 && c <= 0x314E) {  	c -= (char)(0x3131);  	if (JONGSEONG_LIST_REV [c] != -1) {  		// a single consonant is regarded as a final consonant  		charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  	}  	else if (CHOSEONG_LIST_REV [c] != -1) {  		// a single consonant which can not be a final consonant becomes a beginning consonant  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  	}  	else {  		// exception (if it occur' the conversion array has some problem)  		charList.Add ((char)(c + 0x3131));  	}  }  else if (c >= 0x314F && c <= 0x3163) {  	// a single vowel changes jungseong  	charList.Add ((char)(c - 0x314F + 0x1161));  }  else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  	// ^consonant changes to choseong  	c = (char)(str [i + 1] - 0x3131);  	if (CHOSEONG_LIST_REV [c] != -1) {  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		i++;  	}  	else {  		charList.Add ('^');  	}  }  else {  	// other characters  	charList.Add (c);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: if (c >= 0xAC00 && c <= 0xD7AF) {  	int combined = c - 0xAC00;  	if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  		charList.Add (cho);  	}  	combined %= (21 * 28);  	if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  		charList.Add (jung);  	}  	if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  		charList.Add (jong);  	}  }  else if (c >= 0x3131 && c <= 0x314E) {  	c -= (char)(0x3131);  	if (JONGSEONG_LIST_REV [c] != -1) {  		// a single consonant is regarded as a final consonant  		charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  	}  	else if (CHOSEONG_LIST_REV [c] != -1) {  		// a single consonant which can not be a final consonant becomes a beginning consonant  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  	}  	else {  		// exception (if it occur' the conversion array has some problem)  		charList.Add ((char)(c + 0x3131));  	}  }  else if (c >= 0x314F && c <= 0x3163) {  	// a single vowel changes jungseong  	charList.Add ((char)(c - 0x314F + 0x1161));  }  else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  	// ^consonant changes to choseong  	c = (char)(str [i + 1] - 0x3131);  	if (CHOSEONG_LIST_REV [c] != -1) {  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		i++;  	}  	else {  		charList.Add ('^');  	}  }  else {  	// other characters  	charList.Add (c);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: if (c >= 0xAC00 && c <= 0xD7AF) {  	int combined = c - 0xAC00;  	if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  		charList.Add (cho);  	}  	combined %= (21 * 28);  	if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  		charList.Add (jung);  	}  	if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  		charList.Add (jong);  	}  }  else if (c >= 0x3131 && c <= 0x314E) {  	c -= (char)(0x3131);  	if (JONGSEONG_LIST_REV [c] != -1) {  		// a single consonant is regarded as a final consonant  		charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  	}  	else if (CHOSEONG_LIST_REV [c] != -1) {  		// a single consonant which can not be a final consonant becomes a beginning consonant  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  	}  	else {  		// exception (if it occur' the conversion array has some problem)  		charList.Add ((char)(c + 0x3131));  	}  }  else if (c >= 0x314F && c <= 0x3163) {  	// a single vowel changes jungseong  	charList.Add ((char)(c - 0x314F + 0x1161));  }  else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  	// ^consonant changes to choseong  	c = (char)(str [i + 1] - 0x3131);  	if (CHOSEONG_LIST_REV [c] != -1) {  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		i++;  	}  	else {  		charList.Add ('^');  	}  }  else {  	// other characters  	charList.Add (c);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: if (c >= 0xAC00 && c <= 0xD7AF) {  	int combined = c - 0xAC00;  	if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  		charList.Add (cho);  	}  	combined %= (21 * 28);  	if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  		charList.Add (jung);  	}  	if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  		charList.Add (jong);  	}  }  else if (c >= 0x3131 && c <= 0x314E) {  	c -= (char)(0x3131);  	if (JONGSEONG_LIST_REV [c] != -1) {  		// a single consonant is regarded as a final consonant  		charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  	}  	else if (CHOSEONG_LIST_REV [c] != -1) {  		// a single consonant which can not be a final consonant becomes a beginning consonant  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  	}  	else {  		// exception (if it occur' the conversion array has some problem)  		charList.Add ((char)(c + 0x3131));  	}  }  else if (c >= 0x314F && c <= 0x3163) {  	// a single vowel changes jungseong  	charList.Add ((char)(c - 0x314F + 0x1161));  }  else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  	// ^consonant changes to choseong  	c = (char)(str [i + 1] - 0x3131);  	if (CHOSEONG_LIST_REV [c] != -1) {  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		i++;  	}  	else {  		charList.Add ('^');  	}  }  else {  	// other characters  	charList.Add (c);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: if (c >= 0xAC00 && c <= 0xD7AF) {  	int combined = c - 0xAC00;  	if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  		charList.Add (cho);  	}  	combined %= (21 * 28);  	if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  		charList.Add (jung);  	}  	if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  		charList.Add (jong);  	}  }  else if (c >= 0x3131 && c <= 0x314E) {  	c -= (char)(0x3131);  	if (JONGSEONG_LIST_REV [c] != -1) {  		// a single consonant is regarded as a final consonant  		charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  	}  	else if (CHOSEONG_LIST_REV [c] != -1) {  		// a single consonant which can not be a final consonant becomes a beginning consonant  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  	}  	else {  		// exception (if it occur' the conversion array has some problem)  		charList.Add ((char)(c + 0x3131));  	}  }  else if (c >= 0x314F && c <= 0x3163) {  	// a single vowel changes jungseong  	charList.Add ((char)(c - 0x314F + 0x1161));  }  else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  	// ^consonant changes to choseong  	c = (char)(str [i + 1] - 0x3131);  	if (CHOSEONG_LIST_REV [c] != -1) {  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		i++;  	}  	else {  		charList.Add ('^');  	}  }  else {  	// other characters  	charList.Add (c);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: if (c >= 0xAC00 && c <= 0xD7AF) {  	int combined = c - 0xAC00;  	if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  		charList.Add (cho);  	}  	combined %= (21 * 28);  	if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  		charList.Add (jung);  	}  	if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  		charList.Add (jong);  	}  }  else if (c >= 0x3131 && c <= 0x314E) {  	c -= (char)(0x3131);  	if (JONGSEONG_LIST_REV [c] != -1) {  		// a single consonant is regarded as a final consonant  		charList.Add ((char)(JONGSEONG_LIST_REV [c] + 0x11A7));  	}  	else if (CHOSEONG_LIST_REV [c] != -1) {  		// a single consonant which can not be a final consonant becomes a beginning consonant  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  	}  	else {  		// exception (if it occur' the conversion array has some problem)  		charList.Add ((char)(c + 0x3131));  	}  }  else if (c >= 0x314F && c <= 0x3163) {  	// a single vowel changes jungseong  	charList.Add ((char)(c - 0x314F + 0x1161));  }  else if (c == '^' && str.Length > i + 1 && str [i + 1] >= 0x3131 && str [i + 1] <= 0x314E) {  	// ^consonant changes to choseong  	c = (char)(str [i + 1] - 0x3131);  	if (CHOSEONG_LIST_REV [c] != -1) {  		charList.Add ((char)(CHOSEONG_LIST_REV [c] + 0x1100));  		i++;  	}  	else {  		charList.Add ('^');  	}  }  else {  	// other characters  	charList.Add (c);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  	charList.Add (cho);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: if ((cho = toJamo ((char)(combined / (21 * 28))' JAMO_CHOSEONG)) != 0) {  	charList.Add (cho);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: combined %= (21 * 28);  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: combined %= (21 * 28);  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: if ((jung = toJamo ((char)(combined / 28)' JAMO_JUNGSEONG)) != 0) {  	charList.Add (jung);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toTripleArray,The following statement contains a magic number: if ((jong = toJamo ((char)(combined % 28)' JAMO_JONGSEONG)) != 0) {  	charList.Add (jong);  }  
Magic Number,kr.ac.kaist.swrc.jhannanum.share,TagMapper,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\TagMapper.cs,getKaistTagOnLevel,The following statement contains a magic number: if (tag == null || level > 4 || level < 1) {  	return null;  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: for (int i = 0; i < methods.Length; i += 1) {  	try {  		System.Reflection.MethodInfo method = methods [i];  		if (method.IsPublic) {  			System.String name = method.Name;  			System.String key = "";  			if (name.StartsWith ("get")) {  				if (name.Equals ("getClass") || name.Equals ("getDeclaringClass")) {  					key = "";  				}  				else {  					key = name.Substring (3);  				}  			}  			else if (name.StartsWith ("is")) {  				key = name.Substring (2);  			}  			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.reflect.Method.getParameterTypes' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  			if (key.Length > 0 && System.Char.IsUpper (key [0]) && method.GetParameters ().Length == 0) {  				if (key.Length == 1) {  					key = key.ToLower ();  				}  				else if (!System.Char.IsUpper (key [1])) {  					key = key.Substring (0' (1) - (0)).ToLower () + key.Substring (1);  				}  				System.Object result = method.Invoke (bean' (System.Object[])null);  				map [key] = wrap (result);  			}  		}  	}  	catch (System.Exception ignore) {  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: for (int i = 0; i < methods.Length; i += 1) {  	try {  		System.Reflection.MethodInfo method = methods [i];  		if (method.IsPublic) {  			System.String name = method.Name;  			System.String key = "";  			if (name.StartsWith ("get")) {  				if (name.Equals ("getClass") || name.Equals ("getDeclaringClass")) {  					key = "";  				}  				else {  					key = name.Substring (3);  				}  			}  			else if (name.StartsWith ("is")) {  				key = name.Substring (2);  			}  			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.reflect.Method.getParameterTypes' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  			if (key.Length > 0 && System.Char.IsUpper (key [0]) && method.GetParameters ().Length == 0) {  				if (key.Length == 1) {  					key = key.ToLower ();  				}  				else if (!System.Char.IsUpper (key [1])) {  					key = key.Substring (0' (1) - (0)).ToLower () + key.Substring (1);  				}  				System.Object result = method.Invoke (bean' (System.Object[])null);  				map [key] = wrap (result);  			}  		}  	}  	catch (System.Exception ignore) {  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: try {  	System.Reflection.MethodInfo method = methods [i];  	if (method.IsPublic) {  		System.String name = method.Name;  		System.String key = "";  		if (name.StartsWith ("get")) {  			if (name.Equals ("getClass") || name.Equals ("getDeclaringClass")) {  				key = "";  			}  			else {  				key = name.Substring (3);  			}  		}  		else if (name.StartsWith ("is")) {  			key = name.Substring (2);  		}  		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.reflect.Method.getParameterTypes' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  		if (key.Length > 0 && System.Char.IsUpper (key [0]) && method.GetParameters ().Length == 0) {  			if (key.Length == 1) {  				key = key.ToLower ();  			}  			else if (!System.Char.IsUpper (key [1])) {  				key = key.Substring (0' (1) - (0)).ToLower () + key.Substring (1);  			}  			System.Object result = method.Invoke (bean' (System.Object[])null);  			map [key] = wrap (result);  		}  	}  }  catch (System.Exception ignore) {  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: try {  	System.Reflection.MethodInfo method = methods [i];  	if (method.IsPublic) {  		System.String name = method.Name;  		System.String key = "";  		if (name.StartsWith ("get")) {  			if (name.Equals ("getClass") || name.Equals ("getDeclaringClass")) {  				key = "";  			}  			else {  				key = name.Substring (3);  			}  		}  		else if (name.StartsWith ("is")) {  			key = name.Substring (2);  		}  		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.reflect.Method.getParameterTypes' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  		if (key.Length > 0 && System.Char.IsUpper (key [0]) && method.GetParameters ().Length == 0) {  			if (key.Length == 1) {  				key = key.ToLower ();  			}  			else if (!System.Char.IsUpper (key [1])) {  				key = key.Substring (0' (1) - (0)).ToLower () + key.Substring (1);  			}  			System.Object result = method.Invoke (bean' (System.Object[])null);  			map [key] = wrap (result);  		}  	}  }  catch (System.Exception ignore) {  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: if (method.IsPublic) {  	System.String name = method.Name;  	System.String key = "";  	if (name.StartsWith ("get")) {  		if (name.Equals ("getClass") || name.Equals ("getDeclaringClass")) {  			key = "";  		}  		else {  			key = name.Substring (3);  		}  	}  	else if (name.StartsWith ("is")) {  		key = name.Substring (2);  	}  	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.reflect.Method.getParameterTypes' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  	if (key.Length > 0 && System.Char.IsUpper (key [0]) && method.GetParameters ().Length == 0) {  		if (key.Length == 1) {  			key = key.ToLower ();  		}  		else if (!System.Char.IsUpper (key [1])) {  			key = key.Substring (0' (1) - (0)).ToLower () + key.Substring (1);  		}  		System.Object result = method.Invoke (bean' (System.Object[])null);  		map [key] = wrap (result);  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: if (method.IsPublic) {  	System.String name = method.Name;  	System.String key = "";  	if (name.StartsWith ("get")) {  		if (name.Equals ("getClass") || name.Equals ("getDeclaringClass")) {  			key = "";  		}  		else {  			key = name.Substring (3);  		}  	}  	else if (name.StartsWith ("is")) {  		key = name.Substring (2);  	}  	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.reflect.Method.getParameterTypes' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  	if (key.Length > 0 && System.Char.IsUpper (key [0]) && method.GetParameters ().Length == 0) {  		if (key.Length == 1) {  			key = key.ToLower ();  		}  		else if (!System.Char.IsUpper (key [1])) {  			key = key.Substring (0' (1) - (0)).ToLower () + key.Substring (1);  		}  		System.Object result = method.Invoke (bean' (System.Object[])null);  		map [key] = wrap (result);  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: if (name.StartsWith ("get")) {  	if (name.Equals ("getClass") || name.Equals ("getDeclaringClass")) {  		key = "";  	}  	else {  		key = name.Substring (3);  	}  }  else if (name.StartsWith ("is")) {  	key = name.Substring (2);  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: if (name.StartsWith ("get")) {  	if (name.Equals ("getClass") || name.Equals ("getDeclaringClass")) {  		key = "";  	}  	else {  		key = name.Substring (3);  	}  }  else if (name.StartsWith ("is")) {  	key = name.Substring (2);  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: if (name.Equals ("getClass") || name.Equals ("getDeclaringClass")) {  	key = "";  }  else {  	key = name.Substring (3);  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: key = name.Substring (3);  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: if (name.StartsWith ("is")) {  	key = name.Substring (2);  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,populateMap,The following statement contains a magic number: key = name.Substring (2);  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,quote,The following statement contains a magic number: for (i = 0; i < len; i += 1) {  	b = c;  	c = string_Renamed [i];  	switch (c) {  	case '\\':  	case '"':  		sb.Append ('\\');  		sb.Append (c);  		break;  	case '/':  		if (b == '<') {  			sb.Append ('\\');  		}  		sb.Append (c);  		break;  	case '\b':  		sb.Append ("\\b");  		break;  	case '\t':  		sb.Append ("\\t");  		break;  	case '\n':  		sb.Append ("\\n");  		break;  	case '\f':  		sb.Append ("\\f");  		break;  	case '\r':  		sb.Append ("\\r");  		break;  	default:  		if (c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')) {  			t = "000" + System.Convert.ToString (c' 16);  			sb.Append ("\\u" + t.Substring (t.Length - 4));  		}  		else {  			sb.Append (c);  		}  		break;  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,quote,The following statement contains a magic number: for (i = 0; i < len; i += 1) {  	b = c;  	c = string_Renamed [i];  	switch (c) {  	case '\\':  	case '"':  		sb.Append ('\\');  		sb.Append (c);  		break;  	case '/':  		if (b == '<') {  			sb.Append ('\\');  		}  		sb.Append (c);  		break;  	case '\b':  		sb.Append ("\\b");  		break;  	case '\t':  		sb.Append ("\\t");  		break;  	case '\n':  		sb.Append ("\\n");  		break;  	case '\f':  		sb.Append ("\\f");  		break;  	case '\r':  		sb.Append ("\\r");  		break;  	default:  		if (c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')) {  			t = "000" + System.Convert.ToString (c' 16);  			sb.Append ("\\u" + t.Substring (t.Length - 4));  		}  		else {  			sb.Append (c);  		}  		break;  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,quote,The following statement contains a magic number: switch (c) {  case '\\':  case '"':  	sb.Append ('\\');  	sb.Append (c);  	break;  case '/':  	if (b == '<') {  		sb.Append ('\\');  	}  	sb.Append (c);  	break;  case '\b':  	sb.Append ("\\b");  	break;  case '\t':  	sb.Append ("\\t");  	break;  case '\n':  	sb.Append ("\\n");  	break;  case '\f':  	sb.Append ("\\f");  	break;  case '\r':  	sb.Append ("\\r");  	break;  default:  	if (c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')) {  		t = "000" + System.Convert.ToString (c' 16);  		sb.Append ("\\u" + t.Substring (t.Length - 4));  	}  	else {  		sb.Append (c);  	}  	break;  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,quote,The following statement contains a magic number: switch (c) {  case '\\':  case '"':  	sb.Append ('\\');  	sb.Append (c);  	break;  case '/':  	if (b == '<') {  		sb.Append ('\\');  	}  	sb.Append (c);  	break;  case '\b':  	sb.Append ("\\b");  	break;  case '\t':  	sb.Append ("\\t");  	break;  case '\n':  	sb.Append ("\\n");  	break;  case '\f':  	sb.Append ("\\f");  	break;  case '\r':  	sb.Append ("\\r");  	break;  default:  	if (c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')) {  		t = "000" + System.Convert.ToString (c' 16);  		sb.Append ("\\u" + t.Substring (t.Length - 4));  	}  	else {  		sb.Append (c);  	}  	break;  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,quote,The following statement contains a magic number: if (c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')) {  	t = "000" + System.Convert.ToString (c' 16);  	sb.Append ("\\u" + t.Substring (t.Length - 4));  }  else {  	sb.Append (c);  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,quote,The following statement contains a magic number: if (c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')) {  	t = "000" + System.Convert.ToString (c' 16);  	sb.Append ("\\u" + t.Substring (t.Length - 4));  }  else {  	sb.Append (c);  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,quote,The following statement contains a magic number: t = "000" + System.Convert.ToString (c' 16);  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,quote,The following statement contains a magic number: sb.Append ("\\u" + t.Substring (t.Length - 4));  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The following statement contains a magic number: if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {  	if (b == '0' && s.Length > 2 && (s [1] == 'x' || s [1] == 'X')) {  		try {  			//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  			return (System.Int32)System.Convert.ToInt32 (s.Substring (2)' 16);  		}  		catch (System.Exception ignore) {  		}  	}  	try {  		if (s.IndexOf ('.') > -1 || s.IndexOf ('e') > -1 || s.IndexOf ('E') > -1) {  			return System.Double.Parse (s);  		}  		else {  			System.Int64 myLong = System.Int64.Parse (s);  			if ((long)myLong == (int)myLong) {  				return (System.Int32)myLong;  			}  			else {  				return myLong;  			}  		}  	}  	catch (System.Exception ignore) {  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The following statement contains a magic number: if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {  	if (b == '0' && s.Length > 2 && (s [1] == 'x' || s [1] == 'X')) {  		try {  			//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  			return (System.Int32)System.Convert.ToInt32 (s.Substring (2)' 16);  		}  		catch (System.Exception ignore) {  		}  	}  	try {  		if (s.IndexOf ('.') > -1 || s.IndexOf ('e') > -1 || s.IndexOf ('E') > -1) {  			return System.Double.Parse (s);  		}  		else {  			System.Int64 myLong = System.Int64.Parse (s);  			if ((long)myLong == (int)myLong) {  				return (System.Int32)myLong;  			}  			else {  				return myLong;  			}  		}  	}  	catch (System.Exception ignore) {  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The following statement contains a magic number: if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {  	if (b == '0' && s.Length > 2 && (s [1] == 'x' || s [1] == 'X')) {  		try {  			//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  			return (System.Int32)System.Convert.ToInt32 (s.Substring (2)' 16);  		}  		catch (System.Exception ignore) {  		}  	}  	try {  		if (s.IndexOf ('.') > -1 || s.IndexOf ('e') > -1 || s.IndexOf ('E') > -1) {  			return System.Double.Parse (s);  		}  		else {  			System.Int64 myLong = System.Int64.Parse (s);  			if ((long)myLong == (int)myLong) {  				return (System.Int32)myLong;  			}  			else {  				return myLong;  			}  		}  	}  	catch (System.Exception ignore) {  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The following statement contains a magic number: if (b == '0' && s.Length > 2 && (s [1] == 'x' || s [1] == 'X')) {  	try {  		//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  		return (System.Int32)System.Convert.ToInt32 (s.Substring (2)' 16);  	}  	catch (System.Exception ignore) {  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The following statement contains a magic number: if (b == '0' && s.Length > 2 && (s [1] == 'x' || s [1] == 'X')) {  	try {  		//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  		return (System.Int32)System.Convert.ToInt32 (s.Substring (2)' 16);  	}  	catch (System.Exception ignore) {  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The following statement contains a magic number: if (b == '0' && s.Length > 2 && (s [1] == 'x' || s [1] == 'X')) {  	try {  		//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  		return (System.Int32)System.Convert.ToInt32 (s.Substring (2)' 16);  	}  	catch (System.Exception ignore) {  	}  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The following statement contains a magic number: try {  	//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  	return (System.Int32)System.Convert.ToInt32 (s.Substring (2)' 16);  }  catch (System.Exception ignore) {  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The following statement contains a magic number: try {  	//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  	return (System.Int32)System.Convert.ToInt32 (s.Substring (2)' 16);  }  catch (System.Exception ignore) {  }  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The following statement contains a magic number: return (System.Int32)System.Convert.ToInt32 (s.Substring (2)' 16);  
Magic Number,org.json,JSONObject,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONObject.cs,stringToValue,The following statement contains a magic number: return (System.Int32)System.Convert.ToInt32 (s.Substring (2)' 16);  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,dehexchar,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	return c - ('A' - 10);  }  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,dehexchar,The following statement contains a magic number: return c - ('A' - 10);  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,dehexchar,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	return c - ('a' - 10);  }  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,dehexchar,The following statement contains a magic number: return c - ('a' - 10);  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextString,The following statement contains a magic number: for (; ;) {  	c = next ();  	switch (c) {  	case (char)(0):  	case '\n':  	case '\r':  		throw syntaxError ("Unterminated string");  	case '\\':  		c = next ();  		switch (c) {  		case 'b':  			sb.Append ('\b');  			break;  		case 't':  			sb.Append ('\t');  			break;  		case 'n':  			sb.Append ('\n');  			break;  		case 'f':  			sb.Append ('\f');  			break;  		case 'r':  			sb.Append ('\r');  			break;  		case 'u':  			//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  			sb.Append ((char)System.Convert.ToInt32 (next (4)' 16));  			break;  		case '"':  		case '\'':  		case '\\':  		case '/':  			sb.Append (c);  			break;  		default:  			throw syntaxError ("Illegal escape.");  		}  		break;  	default:  		if (c == quote) {  			return sb.ToString ();  		}  		sb.Append (c);  		break;  	}  }  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextString,The following statement contains a magic number: for (; ;) {  	c = next ();  	switch (c) {  	case (char)(0):  	case '\n':  	case '\r':  		throw syntaxError ("Unterminated string");  	case '\\':  		c = next ();  		switch (c) {  		case 'b':  			sb.Append ('\b');  			break;  		case 't':  			sb.Append ('\t');  			break;  		case 'n':  			sb.Append ('\n');  			break;  		case 'f':  			sb.Append ('\f');  			break;  		case 'r':  			sb.Append ('\r');  			break;  		case 'u':  			//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  			sb.Append ((char)System.Convert.ToInt32 (next (4)' 16));  			break;  		case '"':  		case '\'':  		case '\\':  		case '/':  			sb.Append (c);  			break;  		default:  			throw syntaxError ("Illegal escape.");  		}  		break;  	default:  		if (c == quote) {  			return sb.ToString ();  		}  		sb.Append (c);  		break;  	}  }  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextString,The following statement contains a magic number: switch (c) {  case (char)(0):  case '\n':  case '\r':  	throw syntaxError ("Unterminated string");  case '\\':  	c = next ();  	switch (c) {  	case 'b':  		sb.Append ('\b');  		break;  	case 't':  		sb.Append ('\t');  		break;  	case 'n':  		sb.Append ('\n');  		break;  	case 'f':  		sb.Append ('\f');  		break;  	case 'r':  		sb.Append ('\r');  		break;  	case 'u':  		//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  		sb.Append ((char)System.Convert.ToInt32 (next (4)' 16));  		break;  	case '"':  	case '\'':  	case '\\':  	case '/':  		sb.Append (c);  		break;  	default:  		throw syntaxError ("Illegal escape.");  	}  	break;  default:  	if (c == quote) {  		return sb.ToString ();  	}  	sb.Append (c);  	break;  }  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextString,The following statement contains a magic number: switch (c) {  case (char)(0):  case '\n':  case '\r':  	throw syntaxError ("Unterminated string");  case '\\':  	c = next ();  	switch (c) {  	case 'b':  		sb.Append ('\b');  		break;  	case 't':  		sb.Append ('\t');  		break;  	case 'n':  		sb.Append ('\n');  		break;  	case 'f':  		sb.Append ('\f');  		break;  	case 'r':  		sb.Append ('\r');  		break;  	case 'u':  		//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  		sb.Append ((char)System.Convert.ToInt32 (next (4)' 16));  		break;  	case '"':  	case '\'':  	case '\\':  	case '/':  		sb.Append (c);  		break;  	default:  		throw syntaxError ("Illegal escape.");  	}  	break;  default:  	if (c == quote) {  		return sb.ToString ();  	}  	sb.Append (c);  	break;  }  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextString,The following statement contains a magic number: switch (c) {  case 'b':  	sb.Append ('\b');  	break;  case 't':  	sb.Append ('\t');  	break;  case 'n':  	sb.Append ('\n');  	break;  case 'f':  	sb.Append ('\f');  	break;  case 'r':  	sb.Append ('\r');  	break;  case 'u':  	//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  	sb.Append ((char)System.Convert.ToInt32 (next (4)' 16));  	break;  case '"':  case '\'':  case '\\':  case '/':  	sb.Append (c);  	break;  default:  	throw syntaxError ("Illegal escape.");  }  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextString,The following statement contains a magic number: switch (c) {  case 'b':  	sb.Append ('\b');  	break;  case 't':  	sb.Append ('\t');  	break;  case 'n':  	sb.Append ('\n');  	break;  case 'f':  	sb.Append ('\f');  	break;  case 'r':  	sb.Append ('\r');  	break;  case 'u':  	//UPGRADE_TODO: Method 'java.lang.Integer.parseInt' was converted to 'System.Convert.ToInt32' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"  	sb.Append ((char)System.Convert.ToInt32 (next (4)' 16));  	break;  case '"':  case '\'':  case '\\':  case '/':  	sb.Append (c);  	break;  default:  	throw syntaxError ("Illegal escape.");  }  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextString,The following statement contains a magic number: sb.Append ((char)System.Convert.ToInt32 (next (4)' 16));  
Magic Number,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextString,The following statement contains a magic number: sb.Append ((char)System.Convert.ToInt32 (next (4)' 16));  
Missing Default,kr.ac.kaist.swrc.jhannanum.hannanum,WorkflowFactory,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\hannanum\WorkflowFactory.cs,getPredefinedWorkflow,The following switch statement is missing a default case: switch (workflowFlag) {  case WORKFLOW_HMM_POS_TAGGER:  	workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor.SentenceSegmentor ()' null);  	workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.InformalSentenceFilter.InformalSentenceFilter ()' null);  	workflow.setMorphAnalyzer (new kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer.ChartMorphAnalyzer ()' "conf/plugin/MajorPlugin/MorphAnalyzer/ChartMorphAnalyzer.json");  	workflow.appendMorphemeProcessor (new UnknownProcessor ()' null);  	workflow.setPosTagger (new HMMTagger ()' "conf/plugin/MajorPlugin/PosTagger/HmmPosTagger.json");  	break;  case WORKFLOW_MORPH_ANALYZER:  	workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor.SentenceSegmentor ()' null);  	workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.InformalSentenceFilter.InformalSentenceFilter ()' null);  	workflow.setMorphAnalyzer (new kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer.ChartMorphAnalyzer ()' "conf/plugin/MajorPlugin/MorphAnalyzer/ChartMorphAnalyzer.json");  	workflow.appendMorphemeProcessor (new UnknownProcessor ()' null);  	break;  case WORKFLOW_NOUN_EXTRACTOR:  	workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor.SentenceSegmentor ()' null);  	workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.InformalSentenceFilter.InformalSentenceFilter ()' null);  	workflow.setMorphAnalyzer (new kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer.ChartMorphAnalyzer ()' "conf/plugin/MajorPlugin/MorphAnalyzer/ChartMorphAnalyzer.json");  	workflow.appendMorphemeProcessor (new UnknownProcessor ()' null);  	workflow.setPosTagger (new HMMTagger ()' "conf/plugin/MajorPlugin/PosTagger/HmmPosTagger.json");  	workflow.appendPosProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PosProcessor.NounExtractor.NounExtractor ()' null);  	break;  case WORKFLOW_POS_SIMPLE_22:  	workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor.SentenceSegmentor ()' null);  	workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.InformalSentenceFilter.InformalSentenceFilter ()' null);  	workflow.setMorphAnalyzer (new kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer.ChartMorphAnalyzer ()' "conf/plugin/MajorPlugin/MorphAnalyzer/ChartMorphAnalyzer.json");  	workflow.appendMorphemeProcessor (new UnknownProcessor ()' null);  	workflow.setPosTagger (new HMMTagger ()' "conf/plugin/MajorPlugin/PosTagger/HmmPosTagger.json");  	workflow.appendPosProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PosProcessor.SimplePOSResult22.SimplePOSResult22 ()' null);  	break;  case WORKFLOW_POS_SIMPLE_09:  	workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor.SentenceSegmentor ()' null);  	workflow.appendPlainTextProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.InformalSentenceFilter.InformalSentenceFilter ()' null);  	workflow.setMorphAnalyzer (new kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer.ChartMorphAnalyzer ()' "conf/plugin/MajorPlugin/MorphAnalyzer/ChartMorphAnalyzer.json");  	workflow.appendMorphemeProcessor (new UnknownProcessor ()' null);  	workflow.setPosTagger (new HMMTagger ()' "conf/plugin/MajorPlugin/PosTagger/HmmPosTagger.json");  	workflow.appendPosProcessor (new kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PosProcessor.SimplePOSResult09.SimplePOSResult09 ()' null);  	break;  }  
Missing Default,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following switch statement is missing a default case: switch (tags [0] [0]) {  case 'm':  	if (tags [0].StartsWith ("ma")) {  		if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("x")) {  			res [0] = 'P';  		}  		else if (tags [1].StartsWith ("jcp")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'A';  		}  	}  	else if (tags [0].Matches ("m^a.*")) {  		if (tags [end].StartsWith ("j")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("n")) {  			res [0] = 'N';  		}  		else if (tags [1].StartsWith ("p")) {  			res [0] = 'P';  		}  		else {  			res [0] = 'M';  		}  	}  	break;  case 'e':  	if (tags [0].StartsWith ("ecc") || tags [0].StartsWith ("ecs")) {  		res [0] = 'C';  	}  	break;  case 'f':  	res [0] = 'N';  	break;  case 'i':  	if (tags [1].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'I';  	}  	break;  case 'n':  	if (tags [1].Matches ("x.(v|m).*")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else if (tags [1].Matches ("x.n.*")) {  		res [0] = 'N';  	}  	else if (tags [1].StartsWith ("p")) {  		if (tags [2].Matches ("..n.*") || tags [3].Matches ("..n.*")) {  			res [0] = 'N';  		}  		else {  			res [0] = 'P';  		}  	}  	else {  		res [0] = 'N';  	}  	break;  case 'p':  	if (tags [1].StartsWith ("xsa")) {  		res [0] = 'A';  	}  	else if (tags [1].StartsWith ("etn") || tags [2].StartsWith ("n")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'P';  	}  	break;  case 's':  	if (tags [1].StartsWith ("su") || tags [2].StartsWith ("j")) {  		res [0] = 'N';  	}  	else if (tags [2].StartsWith ("n") || tags [end].StartsWith ("j")) {  		res [0] = 'N';  	}  	else {  		res [0] = 'S';  	}  	if (tags [0].StartsWith ("sf") || tags [1].StartsWith ("s")) {  		res [1] = 'F';  	}  	break;  case 'x':  	if (tags [0].StartsWith ("xsn") || tags [0].StartsWith ("xp")) {  		res [0] = 'N';  	}  	break;  }  
Missing Default,kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger,PhraseTag,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\MajorPlugin\PosTagger\HmmPosTagger\PhraseTag.cs,getPhraseTag,The following switch statement is missing a default case: switch (lastTag [0]) {  case 'e':  	if (lastTag.StartsWith ("ecc") || lastTag.StartsWith ("ecs") || lastTag.StartsWith ("ecx")) {  		res [1] = 'C';  	}  	else if (lastTag.StartsWith ("ef")) {  		res [1] = 'F';  	}  	else if (lastTag.StartsWith ("etm")) {  		res [1] = 'M';  	}  	else if (lastTag.StartsWith ("etn")) {  		res [1] = 'N';  	}  	break;  case 'j':  	if (lastTag.StartsWith ("jcv")) {  		res [0] = 'I';  	}  	else if (lastTag.StartsWith ("jx")) {  		if (res [0] == 'A') {  			res [1] = 'J';  		}  		else {  			res [1] = 'X';  		}  	}  	else if (lastTag.StartsWith ("jcj")) {  		if (res [0] == 'A') {  			res [1] = 'J';  		}  		else {  			res [1] = 'Y';  		}  	}  	else if (lastTag.StartsWith ("jca")) {  		res [1] = 'A';  	}  	else if (lastTag.StartsWith ("jcm")) {  		if (res [0] == 'A') {  			res [1] = 'J';  		}  		else {  			res [1] = 'M';  		}  	}  	else if (lastTag.StartsWith ("jc")) {  		res [1] = 'J';  	}  	break;  case 'm':  	if (lastTag.Matches ("m^a.*")) {  		res [1] = 'M';  	}  	else if (lastTag.StartsWith ("mag")) {  		res [1] = 'A';  	}  	break;  case 'n':  	if (lastTag.StartsWith ("n")) {  		res [0] = 'N';  	}  	break;  case 'x':  	if (lastTag.StartsWith ("xsa")) {  		res [1] = 'A';  	}  	break;  }  
Missing Default,kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor,SentenceSegmentor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\SupplementPlugin\PlainTextProcessor\SentenceSegmentor\SentenceSegmentor.cs,isSym,The following switch statement is missing a default case: switch (c) {  case ')':  	return true;  case ']':  	return true;  case '}':  	return true;  case '?':  	return true;  case '!':  	return true;  case '.':  	return true;  case '\'':  	return true;  case '\"':  	return true;  }  
Missing Default,kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor,SentenceSegmentor,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\plugin\SupplementPlugin\PlainTextProcessor\SentenceSegmentor\SentenceSegmentor.cs,doProcess,The following switch statement is missing a default case: switch (ca [j]) {  case '.':  	if (j == 1) {  		// ellipsis  		continue;  	}  	if (j > 0) {  		// abbreviation  		if (System.Char.IsLower (ca [j - 1]) || System.Char.IsUpper (ca [j - 1])) {  			continue;  		}  	}  	if (j < ca.Length - 1) {  		// number  		if (System.Char.IsDigit (ca [j + 1])) {  			continue;  		}  	}  	isEOS = true;  	break;  case '!':  	isEOS = true;  	break;  case '?':  	isEOS = true;  	break;  }  
Missing Default,kr.ac.kaist.swrc.jhannanum.share,Code,C:\repos\stjeong_NHanNanum\NHanNanum\kr\ac\kaist\swrc\jhannanum\share\Code.cs,toJamo,The following switch statement is missing a default case: switch (flag) {  case JAMO_CHOSEONG:  	if (jamo >= 0 && jamo <= 0x12) {  		result = (char)(jamo + 0x1100);  	}  	break;  case JAMO_JUNGSEONG:  	if (jamo >= 0 && jamo <= 0x14) {  		result = (char)(jamo + 0x1161);  	}  	break;  case JAMO_JONGSEONG:  	if (jamo >= 1 && jamo <= 0x1B) {  		result = (char)(jamo + 0x11A7);  	}  	break;  }  
Missing Default,org.json,JSONTokener,C:\repos\stjeong_NHanNanum\NHanNanum\org\json\JSONTokener.cs,nextValue,The following switch statement is missing a default case: switch (c) {  case '"':  case '\'':  	return nextString (c);  case '{':  	back ();  	return new JSONObject (this);  case '[':  case '(':  	back ();  	return new JSONArray (this);  }  
