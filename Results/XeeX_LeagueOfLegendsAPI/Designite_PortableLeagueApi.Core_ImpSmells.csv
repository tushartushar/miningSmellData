Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,PortableLeagueApi.Core.Services,AutoMapperService,C:\repos\XeeX_LeagueOfLegendsAPI\PortableLeagueApi.Core\Services\AutoMapperService.cs,Dispose,The length of the parameter canCleanUpManagedandNativeRessources is 36.
Long Identifier,PortableLeagueApi.Core.Services,BaseService,C:\repos\XeeX_LeagueOfLegendsAPI\PortableLeagueApi.Core\Services\BaseService.cs,Dispose,The length of the parameter canCleanUpManagedandNativeRessources is 36.
Magic Number,PortableLeagueApi.Core.Services,BaseService,C:\repos\XeeX_LeagueOfLegendsAPI\PortableLeagueApi.Core\Services\BaseService.cs,BaseService,The following statement contains a magic number: AutoMapperService.CreateMap<long' DateTime>()                  .ConvertUsing(x => new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddMilliseconds(x));
Magic Number,PortableLeagueApi.Core.Services,BaseService,C:\repos\XeeX_LeagueOfLegendsAPI\PortableLeagueApi.Core\Services\BaseService.cs,GetResponseAsync,The following statement contains a magic number: if (response.IsSuccessStatusCode)              {                  result = JsonConvert.DeserializeObject<T>(content' new JsonSerializerSettings                                                                     {  #if DEBUG                                                                         MissingMemberHandling =                                                                             MissingMemberHandling.Error  #endif                                                                     });              }              else              {                  var url = uri.ToString();                    Debug.WriteLine(url);                    APIRequestError apiRequestError;                    if (response.StatusCode == HttpStatusCode.NotFound)                  {                      apiRequestError = new APIRequestError                                        {                                            Status = new APIRequestErrorStatus                                                     {                                                         Message = "Not found"'                                                         StatusCode = 404                                                     }                                        };                  }                  else                  {                      apiRequestError = JsonConvert.DeserializeObject<APIRequestError>(content);                  }                    throw new APIRequestException(apiRequestError' url);              }
Magic Number,PortableLeagueApi.Core.Services,BaseService,C:\repos\XeeX_LeagueOfLegendsAPI\PortableLeagueApi.Core\Services\BaseService.cs,ManageRateLimit,The following statement contains a magic number: if (_apiConfiguration.WaitToAvoidRateLimit && _isLimitedByRateLimit)              {                  LastRequests[_apiConfiguration.Key].Add(DateTime.Now);                    var tenMinutesAgo = DateTime.Now.AddMinutes(-10);                  LastRequests[_apiConfiguration.Key].RemoveAll(x => x < tenMinutesAgo);                    delayInMs = CalculateDelay(MaxRequestsPer10Min' 600' delayInMs);                  delayInMs = CalculateDelay(MaxRequestsPer10Sec' 10' delayInMs);                    // Add 1s to be sure                  if (delayInMs > 0)                      delayInMs += 1000;                    Debug.WriteLine(delayInMs);              }
Magic Number,PortableLeagueApi.Core.Services,BaseService,C:\repos\XeeX_LeagueOfLegendsAPI\PortableLeagueApi.Core\Services\BaseService.cs,ManageRateLimit,The following statement contains a magic number: if (_apiConfiguration.WaitToAvoidRateLimit && _isLimitedByRateLimit)              {                  LastRequests[_apiConfiguration.Key].Add(DateTime.Now);                    var tenMinutesAgo = DateTime.Now.AddMinutes(-10);                  LastRequests[_apiConfiguration.Key].RemoveAll(x => x < tenMinutesAgo);                    delayInMs = CalculateDelay(MaxRequestsPer10Min' 600' delayInMs);                  delayInMs = CalculateDelay(MaxRequestsPer10Sec' 10' delayInMs);                    // Add 1s to be sure                  if (delayInMs > 0)                      delayInMs += 1000;                    Debug.WriteLine(delayInMs);              }
Magic Number,PortableLeagueApi.Core.Services,BaseService,C:\repos\XeeX_LeagueOfLegendsAPI\PortableLeagueApi.Core\Services\BaseService.cs,ManageRateLimit,The following statement contains a magic number: if (_apiConfiguration.WaitToAvoidRateLimit && _isLimitedByRateLimit)              {                  LastRequests[_apiConfiguration.Key].Add(DateTime.Now);                    var tenMinutesAgo = DateTime.Now.AddMinutes(-10);                  LastRequests[_apiConfiguration.Key].RemoveAll(x => x < tenMinutesAgo);                    delayInMs = CalculateDelay(MaxRequestsPer10Min' 600' delayInMs);                  delayInMs = CalculateDelay(MaxRequestsPer10Sec' 10' delayInMs);                    // Add 1s to be sure                  if (delayInMs > 0)                      delayInMs += 1000;                    Debug.WriteLine(delayInMs);              }
Magic Number,PortableLeagueApi.Core.Services,BaseService,C:\repos\XeeX_LeagueOfLegendsAPI\PortableLeagueApi.Core\Services\BaseService.cs,ManageRateLimit,The following statement contains a magic number: if (_apiConfiguration.WaitToAvoidRateLimit && _isLimitedByRateLimit)              {                  LastRequests[_apiConfiguration.Key].Add(DateTime.Now);                    var tenMinutesAgo = DateTime.Now.AddMinutes(-10);                  LastRequests[_apiConfiguration.Key].RemoveAll(x => x < tenMinutesAgo);                    delayInMs = CalculateDelay(MaxRequestsPer10Min' 600' delayInMs);                  delayInMs = CalculateDelay(MaxRequestsPer10Sec' 10' delayInMs);                    // Add 1s to be sure                  if (delayInMs > 0)                      delayInMs += 1000;                    Debug.WriteLine(delayInMs);              }
