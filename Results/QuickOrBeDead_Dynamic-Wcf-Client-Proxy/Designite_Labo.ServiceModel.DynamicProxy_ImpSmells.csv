Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Labo.ServiceModel.DynamicProxy,ServiceMetadataImporter,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataImporter.cs,ImportMetadata,Cyclomatic complexity of the method is 15
Long Identifier,Labo.ServiceModel.DynamicProxy,ServiceClientProxyFactory,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyFactory.cs,GetServiceContractType,The length of the parameter xmlQualifiedServiceContractName is 31.
Long Identifier,Labo.ServiceModel.DynamicProxy,ServiceMetadataDownloader,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataDownloader.cs,DownloadMetadata,The length of the parameter supporstDiscoveryClientProtocol is 31.
Long Identifier,Labo.ServiceModel.DynamicProxy,ServiceMetadataImporter,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataImporter.cs,AddStateForDataContractSerializerImport,The length of the parameter dataContractSerializerMessageContractImporter is 45.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceClientProxyCompiler,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyCompiler.cs,CompileProxy,The length of the statement  "	ServiceContractGenerator contractGenerator = new ServiceContractGenerator (codeCompileUnit' CreateConfig (new FileInfo (tempConfigFileName))); " is 142.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceClientProxyCompiler,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyCompiler.cs,CompileProxy,The length of the statement  "	AddAssemblyReference (typeof(System.Web.Services.Description.ServiceDescription).Assembly' compilerParameters.ReferencedAssemblies); " is 132.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceClientProxyCompiler,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyCompiler.cs,CompileProxy,The length of the statement  "	return new ServiceClientProxyCompileResult (serviceMetadataInfo' compiledAssembly' GenerateConfig (contractGenerator' serviceMetadataInfo.Endpoints' tempConfigFileName)); " is 170.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceClientProxyCompiler,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyCompiler.cs,CreateTempConfigFile,The length of the statement  "	File.WriteAllText (tempConfigFileName' "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<configuration>\r\n</configuration>"); " is 125.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceClientProxyCompiler,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyCompiler.cs,CreateConfig,The length of the statement  "	Configuration configuration = ConfigurationManager.OpenMappedExeConfiguration (exeConfigurationFileMap' ConfigurationUserLevel.None); " is 133.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceClientProxyFactory,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyFactory.cs,GetEndpoint,The length of the statement  "		if (string.Compare (endpoint.Contract.Name' contractName' StringComparison.OrdinalIgnoreCase) == 0 && string.Compare (endpoint.Contract.Namespace' contractNamespace' StringComparison.OrdinalIgnoreCase) == 0) { " is 209.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceClientProxyFactory,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyFactory.cs,GetServiceContractType,The length of the statement  "		ServiceContractAttribute serviceContractAttribute = ReflectionUtils.GetCustomAttribute<ServiceContractAttribute> (type); " is 120.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceClientProxyFactory,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyFactory.cs,GetServiceContractType,The length of the statement  "		XmlQualifiedName xmlQualifiedServiceContractName = GetServiceContractName (type' serviceContractAttribute.Name' serviceContractAttribute.Namespace); " is 148.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceClientProxyFactory,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyFactory.cs,GetServiceContractType,The length of the statement  "		if (string.Compare (xmlQualifiedServiceContractName.Name' contractName' StringComparison.OrdinalIgnoreCase) == 0 && string.Compare (xmlQualifiedServiceContractName.Namespace' contractNamespace' StringComparison.OrdinalIgnoreCase) == 0) { " is 237.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceClientProxyFactoryGenerator,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyFactoryGenerator.cs,GenerateProxyFactory,The length of the statement  "	ServiceMetadataInformation metadataInformation = m_ServiceMetadataImporter.ImportMetadata (metadataSections' MetadataImporterSerializerFormatMode.DataContractSerializer); " is 170.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceClientProxyFactoryGenerator,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceClientProxyFactoryGenerator.cs,GenerateProxyFactory,The length of the statement  "	ServiceClientProxyCompileResult clientProxyCompileResult = m_ServiceClientProxyCompiler.CompileProxy (metadataInformation); " is 123.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceMetadataDownloader,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataDownloader.cs,DownloadMetadata,The length of the statement  "	bool supporstDiscoveryClientProtocol = serviceUri.Scheme == Uri.UriSchemeHttp || serviceUri.Scheme == Uri.UriSchemeHttps; " is 121.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceMetadataDownloader,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataDownloader.cs,AddDocumentToResults,The length of the statement  "	else if (xmlElement != null && (xmlElement.NamespaceURI == "http://schemas.xmlsoap.org/ws/2004/09/policy" || xmlElement.NamespaceURI == "http://www.w3.org/ns/ws-policy") && xmlElement.LocalName == "Policy") { " is 208.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceMetadataImporter,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataImporter.cs,AddStateForXmlSerializerImport,The length of the statement  "	importOptions.WebReferenceOptions.CodeGenerationOptions = CodeGenerationOptions.GenerateProperties | CodeGenerationOptions.GenerateOrder; " is 137.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceMetadataImporter,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataImporter.cs,AddStateForXmlSerializerImport,The length of the statement  "	importOptions.WebReferenceOptions.SchemaImporterExtensions.Add (typeof(TypedDataSetSchemaImporterExtension).AssemblyQualifiedName); " is 131.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceMetadataImporter,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataImporter.cs,AddStateForXmlSerializerImport,The length of the statement  "	importOptions.WebReferenceOptions.SchemaImporterExtensions.Add (typeof(DataSetSchemaImporterExtension).AssemblyQualifiedName); " is 126.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceMetadataImporter,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataImporter.cs,AddStateForDataContractSerializerImport,The length of the statement  "		DataContractSerializerMessageContractImporter dataContractSerializerMessageContractImporter = importExtension as DataContractSerializerMessageContractImporter; " is 159.
Long Statement,Labo.ServiceModel.DynamicProxy,ServiceMetadataImporter,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataImporter.cs,AddStateForDataContractSerializerImport,The length of the statement  "			dataContractSerializerMessageContractImporter.Enabled = formatMode != MetadataImporterSerializerFormatMode.XmlSerializer; " is 121.
Complex Conditional,Labo.ServiceModel.DynamicProxy,ServiceMetadataDownloader,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataDownloader.cs,AddDocumentToResults,The conditional expression  "xmlElement != null && (xmlElement.NamespaceURI == "http://schemas.xmlsoap.org/ws/2004/09/policy" || xmlElement.NamespaceURI == "http://www.w3.org/ns/ws-policy") && xmlElement.LocalName == "Policy""  is complex.
Magic Number,Labo.ServiceModel.DynamicProxy,ServiceMetadataDownloader,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataDownloader.cs,TryDownloadByMetadataExchangeClient,The following statement contains a magic number: try {  	MetadataExchangeClient mexClient = CreateMetadataExchangeClient (serviceUri);  	mexClient.OperationTimeout = TimeSpan.FromMinutes (5.0);  	metadataSections = mexClient.GetMetadata ().MetadataSections;  	return true;  }  catch {  	metadataSections = null;  	return false;  }  
Magic Number,Labo.ServiceModel.DynamicProxy,ServiceMetadataDownloader,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataDownloader.cs,TryDownloadByMetadataExchangeClient,The following statement contains a magic number: mexClient.OperationTimeout = TimeSpan.FromMinutes (5.0);  
Magic Number,Labo.ServiceModel.DynamicProxy,ServiceMetadataDownloader,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataDownloader.cs,CreateMetadataExchangeClient,The following statement contains a magic number: if (string.Compare (scheme' Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) == 0) {  	WSHttpBinding wSHttpBinding = (WSHttpBinding)MetadataExchangeBindings.CreateMexHttpBinding ();  	wSHttpBinding.MaxReceivedMessageSize = 67108864L;  	wSHttpBinding.ReaderQuotas.MaxNameTableCharCount = 1048576;  	result = new MetadataExchangeClient (wSHttpBinding);  }  else {  	if (string.Compare (scheme' Uri.UriSchemeHttps' StringComparison.OrdinalIgnoreCase) == 0) {  		WSHttpBinding wSHttpBinding2 = (WSHttpBinding)MetadataExchangeBindings.CreateMexHttpsBinding ();  		wSHttpBinding2.MaxReceivedMessageSize = 67108864L;  		wSHttpBinding2.ReaderQuotas.MaxNameTableCharCount = 1048576;  		result = new MetadataExchangeClient (wSHttpBinding2);  	}  	else {  		if (string.Compare (scheme' Uri.UriSchemeNetTcp' StringComparison.OrdinalIgnoreCase) == 0) {  			CustomBinding tcpBinding = (CustomBinding)MetadataExchangeBindings.CreateMexTcpBinding ();  			tcpBinding.Elements.Find<TcpTransportBindingElement> ().MaxReceivedMessageSize = 67108864L;  			result = new MetadataExchangeClient (tcpBinding);  		}  		else if (string.Compare (scheme' Uri.UriSchemeNetPipe' StringComparison.OrdinalIgnoreCase) != 0) {  			CustomBinding namedPipeBinding = (CustomBinding)MetadataExchangeBindings.CreateMexNamedPipeBinding ();  			namedPipeBinding.Elements.Find<NamedPipeTransportBindingElement> ().MaxReceivedMessageSize = 67108864L;  			result = new MetadataExchangeClient (namedPipeBinding);  		}  	}  }  
Magic Number,Labo.ServiceModel.DynamicProxy,ServiceMetadataDownloader,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataDownloader.cs,CreateMetadataExchangeClient,The following statement contains a magic number: if (string.Compare (scheme' Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) == 0) {  	WSHttpBinding wSHttpBinding = (WSHttpBinding)MetadataExchangeBindings.CreateMexHttpBinding ();  	wSHttpBinding.MaxReceivedMessageSize = 67108864L;  	wSHttpBinding.ReaderQuotas.MaxNameTableCharCount = 1048576;  	result = new MetadataExchangeClient (wSHttpBinding);  }  else {  	if (string.Compare (scheme' Uri.UriSchemeHttps' StringComparison.OrdinalIgnoreCase) == 0) {  		WSHttpBinding wSHttpBinding2 = (WSHttpBinding)MetadataExchangeBindings.CreateMexHttpsBinding ();  		wSHttpBinding2.MaxReceivedMessageSize = 67108864L;  		wSHttpBinding2.ReaderQuotas.MaxNameTableCharCount = 1048576;  		result = new MetadataExchangeClient (wSHttpBinding2);  	}  	else {  		if (string.Compare (scheme' Uri.UriSchemeNetTcp' StringComparison.OrdinalIgnoreCase) == 0) {  			CustomBinding tcpBinding = (CustomBinding)MetadataExchangeBindings.CreateMexTcpBinding ();  			tcpBinding.Elements.Find<TcpTransportBindingElement> ().MaxReceivedMessageSize = 67108864L;  			result = new MetadataExchangeClient (tcpBinding);  		}  		else if (string.Compare (scheme' Uri.UriSchemeNetPipe' StringComparison.OrdinalIgnoreCase) != 0) {  			CustomBinding namedPipeBinding = (CustomBinding)MetadataExchangeBindings.CreateMexNamedPipeBinding ();  			namedPipeBinding.Elements.Find<NamedPipeTransportBindingElement> ().MaxReceivedMessageSize = 67108864L;  			result = new MetadataExchangeClient (namedPipeBinding);  		}  	}  }  
Magic Number,Labo.ServiceModel.DynamicProxy,ServiceMetadataDownloader,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataDownloader.cs,CreateMetadataExchangeClient,The following statement contains a magic number: wSHttpBinding.ReaderQuotas.MaxNameTableCharCount = 1048576;  
Magic Number,Labo.ServiceModel.DynamicProxy,ServiceMetadataDownloader,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataDownloader.cs,CreateMetadataExchangeClient,The following statement contains a magic number: if (string.Compare (scheme' Uri.UriSchemeHttps' StringComparison.OrdinalIgnoreCase) == 0) {  	WSHttpBinding wSHttpBinding2 = (WSHttpBinding)MetadataExchangeBindings.CreateMexHttpsBinding ();  	wSHttpBinding2.MaxReceivedMessageSize = 67108864L;  	wSHttpBinding2.ReaderQuotas.MaxNameTableCharCount = 1048576;  	result = new MetadataExchangeClient (wSHttpBinding2);  }  else {  	if (string.Compare (scheme' Uri.UriSchemeNetTcp' StringComparison.OrdinalIgnoreCase) == 0) {  		CustomBinding tcpBinding = (CustomBinding)MetadataExchangeBindings.CreateMexTcpBinding ();  		tcpBinding.Elements.Find<TcpTransportBindingElement> ().MaxReceivedMessageSize = 67108864L;  		result = new MetadataExchangeClient (tcpBinding);  	}  	else if (string.Compare (scheme' Uri.UriSchemeNetPipe' StringComparison.OrdinalIgnoreCase) != 0) {  		CustomBinding namedPipeBinding = (CustomBinding)MetadataExchangeBindings.CreateMexNamedPipeBinding ();  		namedPipeBinding.Elements.Find<NamedPipeTransportBindingElement> ().MaxReceivedMessageSize = 67108864L;  		result = new MetadataExchangeClient (namedPipeBinding);  	}  }  
Magic Number,Labo.ServiceModel.DynamicProxy,ServiceMetadataDownloader,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataDownloader.cs,CreateMetadataExchangeClient,The following statement contains a magic number: wSHttpBinding2.ReaderQuotas.MaxNameTableCharCount = 1048576;  
Missing Default,Labo.ServiceModel.DynamicProxy,ServiceMetadataImporter,C:\repos\QuickOrBeDead_Dynamic-Wcf-Client-Proxy\Labo.ServiceModel.DynamicProxy\ServiceMetadataImporter.cs,ImportMetadata,The following switch statement is missing a default case: switch (formatMode) {  case MetadataImporterSerializerFormatMode.DataContractSerializer:  	AddStateForDataContractSerializerImport (importer' formatMode' codeCompileUnit' codeDomProvider);  	break;  case MetadataImporterSerializerFormatMode.XmlSerializer:  	AddStateForXmlSerializerImport (importer' codeCompileUnit' codeDomProvider);  	break;  case MetadataImporterSerializerFormatMode.Auto:  	AddStateForDataContractSerializerImport (importer' formatMode' codeCompileUnit' codeDomProvider);  	AddStateForXmlSerializerImport (importer' codeCompileUnit' codeDomProvider);  	break;  }  
