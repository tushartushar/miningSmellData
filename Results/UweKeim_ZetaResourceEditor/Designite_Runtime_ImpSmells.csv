Implementation smell,Namespace,Class,File,Method,Description
Long Method,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The method has 120 lines of code.
Long Parameter List,ZetaResourceEditor.Runtime.Events,WeakEventHandler,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\Events\WeakEventHandler.cs,Register,The method has 5 parameters. Parameters: senderObject' registerEvent' deregisterEvent' listeningObject' forwarderAction
Long Parameter List,ZetaResourceEditor.Runtime.Events,WeakEventHandler<TEventArgs>,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\Events\WeakEventHandler.cs,Register,The method has 5 parameters. Parameters: senderObject' registerEvent' deregisterEvent' listeningObject' forwarderAction
Long Statement,ZetaResourceEditor.Runtime.Events,WeakEventHandler,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\Events\WeakEventHandler.cs,VerifyDelegate,The length of the statement  "				throw new ArgumentException( "Delegates used for WeakEventHandler must not capture any variables (must point to static methods)"' parameterName ); " is 146.
Complex Conditional,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,isValidFileNameChar,The conditional expression  "!((ch >= 'a' && ch <= 'z') ||  				(ch >= 'A' && ch <= 'Z') ||  				(ch >= '0' && ch <= '9') ||  				(ch == '$') ||  				(ch == '-') ||  				(ch == '_') ||  				(ch == '.') ||  				(ch == '+') ||  				(ch == '!') ||  				(ch == '\'') ||  				(ch == '(') ||  				(ch == ')') ||  				(ch == '{') ||  				(ch == '}') ||  				(ch == '''))"  is complex.
Magic Number,ZetaResourceEditor.Runtime.Events,FastSmartWeakEvent<T>,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\Events\FastSmartWeakEvent.cs,FastSmartWeakEvent,The following statement contains a magic number: if ( invoke == null || invoke.GetParameters().Length != 2 )  			{  				throw new ArgumentException( @"T must be a delegate type taking 2 parameters." );  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
Magic Number,ZetaResourceEditor.Runtime.FileAccess,ZrePathHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\Runtime\FileAccess\ZrePathHelper.cs,ShortenPathName,The following statement contains a magic number: if ( string.IsNullOrEmpty( pathName ) )  			{  				return pathName;  			}  			else  			{  				pathName = pathName.Trim();    				if ( pathName.Length <= maximumPathLength )  				{  					return pathName;  				}  				else  				{  					var root = ZlpPathHelper.GetPathRoot( pathName );  					if ( root.Length > 3 )  					{  						root += Path.DirectorySeparatorChar;  					}    					var elements = pathName.Substring( root.Length ).Split(  						Path.DirectorySeparatorChar'  						Path.AltDirectorySeparatorChar );    					var filenameIndex = elements.GetLength( 0 ) - 1;    					// pathname is just a root and fileName  					if ( elements.GetLength( 0 ) == 1 )  					{  						if ( elements[0].Length > 5 ) // long enough to shorten  						{  							// if path is a UNC path' root may be rather long  							if ( root.Length + 6 >= maximumPathLength )  							{  								return root + elements[0].Substring( 0' 3 ) + @"...";  							}  							else  							{  								return pathName.Substring( 0' maximumPathLength - 3 ) + @"...";  							}  						}  						else  						{  							return pathName;  						}  					}  					// pathname is just a root and fileName  					else if ( (root.Length + 4 + elements[filenameIndex].Length) >  						maximumPathLength )  					{  						root += @"...\";    						var len = elements[filenameIndex].Length;  						if ( len < 6 )  						{  							return root + elements[filenameIndex];  						}  						else  						{  							if ( (root.Length + 6) >= maximumPathLength )  							{  								len = 3;  							}  							else  							{  								len = maximumPathLength - root.Length - 3;  							}    							return root + elements[filenameIndex].Substring( 0' len ) +  								@"...";  						}  					}  					else if ( elements.GetLength( 0 ) == 2 )  					{  						return root + @"...\" + elements[1];  					}  					// More elements.  					else  					{  						var len = 0;  						var begin = 0;    						for ( var i = 0; i < filenameIndex; i++ )  						{  							if ( elements[i].Length > len )  							{  								begin = i;  								len = elements[i].Length;  							}  						}    						var totalLength = pathName.Length - len + 3;  						var end = begin + 1;    						while ( totalLength > maximumPathLength )  						{  							if ( begin > 0 )  							{  								totalLength -= elements[--begin].Length - 1;  							}    							if ( totalLength <= maximumPathLength )  							{  								break;  							}    							if ( end < filenameIndex )  							{  								totalLength -= elements[++end].Length - 1;  							}    							if ( begin == 0 && end == filenameIndex )  							{  								break;  							}  						}    						// assemble final string    						for ( var i = 0; i < begin; i++ )  						{  							root += elements[i] + '\\';  						}    						root += @"...\";    						for ( var i = end; i < filenameIndex; i++ )  						{  							root += elements[i] + '\\';  						}    						return root + elements[filenameIndex];  					}  				}  			}
