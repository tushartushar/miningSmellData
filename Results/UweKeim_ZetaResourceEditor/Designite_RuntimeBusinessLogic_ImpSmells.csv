Implementation smell,Namespace,Class,File,Method,Description
Long Method,ZetaResourceEditor.RuntimeBusinessLogic.BL,DataProcessing,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\BL\DataProcessing.cs,getTable,The method has 127 lines of code.
Long Method,ZetaResourceEditor.RuntimeBusinessLogic.BL,DataProcessing,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\BL\DataProcessing.cs,saveTable,The method has 189 lines of code.
Long Method,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,Prepare,The method has 145 lines of code.
Long Method,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,doProcess,The method has 314 lines of code.
Long Method,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,processTableFileIntelligent,The method has 208 lines of code.
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.BL,DataProcessing,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\BL\DataProcessing.cs,getTable,Cyclomatic complexity of the method is 12
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.BL,DataProcessing,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\BL\DataProcessing.cs,saveTable,Cyclomatic complexity of the method is 14
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,doProcess,Cyclomatic complexity of the method is 35
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,wantExportRow,Cyclomatic complexity of the method is 8
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,removeUnusedColumns,Cyclomatic complexity of the method is 11
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,processTableFileIntelligent,Cyclomatic complexity of the method is 18
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,CreateAndAddNewFile,Cyclomatic complexity of the method is 8
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,CreateCultureErrorTolerant,Cyclomatic complexity of the method is 9
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.Projects,Project,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Projects\Project.cs,loadFromXml,Cyclomatic complexity of the method is 13
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.Projects,SendProjectController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Projects\SendProjectController.cs,SendProject,Cyclomatic complexity of the method is 8
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.Projects,VisualStudioImporter,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Projects\VisualStudioImporter.cs,doAutomaticallyAddResourceFilesFromVSSolution,Cyclomatic complexity of the method is 8
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.SpecificResourceAccess,ResourceFileHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\SpecificResourceAccess\ResourceFileHelper.cs,doGetAllTypes,Cyclomatic complexity of the method is 8
Complex Method,ZetaResourceEditor.RuntimeBusinessLogic.Translation,TranslationHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\TranslationHelper.cs,GetTranslationEngine,Cyclomatic complexity of the method is 8
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.BL,DataProcessing,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\BL\DataProcessing.cs,setAtCultureCaption,The method has 5 parameters. Parameters: captionIndexCache' columns' row' cultureCaption' text
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,wantExportRow,The method has 5 parameters. Parameters: ssc' preparedInformation' settings' row' commentVisibilityScope
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,hasValueChanged,The method has 5 parameters. Parameters: ssc' fileGroup' tagName' languageCode' languageValue
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,processTableFileIntelligent,The method has 5 parameters. Parameters: result' tableIndex' dataSet' table' bw
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,getDestinationTableRowsByTagName,The method has 5 parameters. Parameters: table' tagName' allowCreateNewIfNotFound' languageValueForNewRow' destinationColumnIndex
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,CreateAndAddNewFile,The method has 9 parameters. Parameters: sourceFilePath' newFileName' sourceLanguageCode' newLanguageCode' copyTextsFromSource' automaticallyTranslateTexts' prefix' includeFileInCsProj' includeFileAsDependantUpon
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,translateTexts,The method has 5 parameters. Parameters: project' destinationFfi' sourceLanguageCode' destinationLanguageCode' prefix
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Projects,VisualStudioImporter,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Projects\VisualStudioImporter.cs,DoAutomaticallyAddResourceFilesFromVsProject,The method has 5 parameters. Parameters: backgroundWorker' parentProjectFolder' fileGroupCount' fileCount' vsProjectPath
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Projects,VisualStudioImporter,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Projects\VisualStudioImporter.cs,DoAutomaticallyAddResourceFilesFromList,The method has 5 parameters. Parameters: backgroundWorker' parentProjectFolder' fileGroupCount' fileCount' fileList
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Projects,VisualStudioImporter,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Projects\VisualStudioImporter.cs,doAutomaticallyAddResourceFilesFromVSSolution,The method has 5 parameters. Parameters: backgroundWorker' parentProjectFolder' fileGroupCount' fileCount' vsSolutionPath
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Snapshots,InMemoryTranslationSnapshotController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Snapshots\InMemoryTranslationSnapshotController.cs,doTakeSnapshot,The method has 5 parameters. Parameters: imss' project' fileGroup' languageCodes' bw
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Translation.Azure,AzureTranslationEngine,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\Azure\AzureTranslationEngine.cs,Translate,The method has 7 parameters. Parameters: appID' appID2' text' sourceLanguageCode' destinationLanguageCode' wordsToProtect' wordsToRemove
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Translation.Azure,AzureTranslationEngine,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\Azure\AzureTranslationEngine.cs,TranslateArray,The method has 7 parameters. Parameters: appID' appID2' texts' sourceLanguageCode' destinationLanguageCode' wordsToProtect' wordsToRemove
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Translation.Bing,BingSoapTranslationEngine,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\Bing\BingSoapTranslationEngine.cs,TranslateArray,The method has 7 parameters. Parameters: appID' appID2' texts' sourceLanguageCode' destinationLanguageCode' wordsToProtect' wordsToRemove
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Translation.Bing,BingSoapTranslationEngine,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\Bing\BingSoapTranslationEngine.cs,Translate,The method has 7 parameters. Parameters: appID' appID2' text' sourceLanguageCode' destinationLanguageCode' wordsToProtect' wordsToRemove
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Translation.Google,GoogleRestfulTranslationEngine,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\Google\GoogleRestfulTranslationEngine.cs,TranslateArray,The method has 7 parameters. Parameters: appID' appID2' texts' sourceLanguageCode' destinationLanguageCode' wordsToProtect' wordsToRemove
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Translation.Google,GoogleRestfulTranslationEngine,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\Google\GoogleRestfulTranslationEngine.cs,Translate,The method has 7 parameters. Parameters: appID' appID2' text' sourceLanguageCode' destinationLanguageCode' wordsToProtect' wordsToRemove
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Translation,ITranslationEngine,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\ITranslationEngine.cs,Translate,The method has 7 parameters. Parameters: appID' appID2' text' sourceLanguageCode' destinationLanguageCode' wordsToProtect' wordsToRemove
Long Parameter List,ZetaResourceEditor.RuntimeBusinessLogic.Translation,ITranslationEngine,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\ITranslationEngine.cs,TranslateArray,The method has 7 parameters. Parameters: appID' appID2' texts' sourceLanguageCode' destinationLanguageCode' wordsToProtect' wordsToRemove
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,doProcess,The length of the parameter exportedReferenceLanguageValues is 31.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,doProcess,The length of the parameter suggestedWorkSheetNamesToRemove is 31.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,doProcess,The length of the parameter effectiveDestinationColumnIndex is 31.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,wasAlreadyExported,The length of the parameter exportedReferenceLanguageValues is 31.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,processTableFileIntelligent,The length of the parameter refLanguageDestinationColumnIndex is 33.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,getDestinationTableRowsByReferenceLanguageValue,The length of the parameter referenceLanguageDestinationColumnIndex is 39.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Helpers,CsProjHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Helpers\CsProjHelper.cs,,The length of the parameter RegexFindMainResourceFileReplacePattern is 39.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,GetSupportedUICultureFromThreeLetterWindowsLanguageName,The length of the parameter threeLetterWindowsLanguageName is 30.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,doGetCultureFromThreeLetterWindowsLanguageName,The length of the parameter threeLetterWindowsLanguageName is 30.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Projects,Project,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Projects\Project.cs,,The length of the parameter _dynamicSettingsGlobalHierarchical is 34.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Projects,Project,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Projects\Project.cs,,The length of the parameter _dynamicSettingsUserHierarchical is 32.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.SpecificResourceAccess,ResourceFileHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\SpecificResourceAccess\ResourceFileHelper.cs,,The length of the parameter _cacheForAllAvailableResourceFileAccessors is 42.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateCheckerService,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,,The length of the parameter IsUpdateAvailable2OperationCompleted is 36.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateCheckerService,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,,The length of the parameter DownloadUpdate2OperationCompleted is 33.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateCheckerService,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,,The length of the parameter IsUpdateAvailableOperationCompleted is 35.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateCheckerService,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,,The length of the parameter useDefaultCredentialsSetExplicitly is 34.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateInformationResult2,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,,The length of the parameter alternativeFallbackDownloadUrlField is 35.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.ZetaUploader,ZetaUploaderCommunication,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\ZetaUploader\Reference.cs,,The length of the parameter useDefaultCredentialsSetExplicitly is 34.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.ZetaUploader,ZetaUploaderCommunicationClientTransferInformation,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\ZetaUploader\Reference.cs,,The length of the parameter eMailSenderReplyToAddressField is 30.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.ZetaUploader,ZetaUploaderCommunicationClientTransferResult2,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\ZetaUploader\Reference.cs,,The length of the parameter downloadUrlExpirationDateField is 30.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.ZetaUploader,ZetaUploaderCommunicationClientTransferInformation2,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\ZetaUploader\Reference.cs,,The length of the parameter eMailSenderReplyToAddressField is 30.
Long Identifier,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.ZetaUploader,ZetaUploaderCommunicationClientTransferResult,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\ZetaUploader\Reference.cs,,The length of the parameter downloadUrlExpirationDateField is 30.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.BL,DataProcessing,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\BL\DataProcessing.cs,getTable,The length of the statement  "                //Member 802361: only file names are loaded if same culture is not added first. there are no references any more to other files with same culture. So we name each column by culture and not by file name. " is 202.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,replaceEMailPlaceholders,The length of the statement  "                text = text.Replace(@"{SafeProjectName}"' ZrePathHelper.MakeValidObjectID(_preparedInformations.OriginalInformation.Project.Name)); " is 131.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,doProcess,The length of the statement  "                                sourceColumnIndex < table.Columns.Count - (preparedInformation.ExportCommentColumn ? 1 : 0); // Subtract 1' because last column is ALWAYS the comment. " is 150.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,processTableFileIntelligent,The length of the statement  "                                        Resources.ExcelImportController_processWorkSheetFileIntelligent_Neither_name_column_nor_reference_language_column_present_); " is 124.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,getNameTableColumnIndex,The length of the statement  "                if (string.Compare(headerCaption' Resources.SR_CommandProcessorSend_Process_Name' StringComparison.OrdinalIgnoreCase) == 0) " is 123.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,getChecksumTableColumnIndex,The length of the statement  "            // The following was set to compare totalChecksumRows to count -1 but the header row is already removed in the ExcelLibrary.DatasetHelper.CreateDataSet (using PopulateDataTable(ws) method) " is 188.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,getDestinationTableRowsByTagName,The length of the statement  "                    Resources.ExcelImportController_getDestinationTableRowsByTagName_Reference_tag_name_must_be_provided_but_is_currently_NULL_or_empty_' " is 133.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroupsMerger,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroupsMerger.cs,ensureSameLanguages,The length of the statement  "                    $"File group '{fileGroup1.GetNameIntelligent(_project)}' and file group '{fileGroup2.GetFullNameIntelligent(_project)}' have different languages " + " is 148.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroupsMerger,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroupsMerger.cs,checkUniqueIDs,The length of the statement  "                            $"File group '{fileGroupDst.GetNameIntelligent(_project)}' and file group '{fileGroupSrc.GetFullNameIntelligent(_project)}' contains the same " + " is 145.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Language,LanguageCodeDetection,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\LanguageCodeDetection.cs,IsValidCultureName,The length of the statement  "                        string.Compare(cultureName' Resources.SR_CommandProcessorSend_Process_Group' StringComparison.OrdinalIgnoreCase) == 0 || " is 120.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Projects,VisualStudioImporter,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Projects\VisualStudioImporter.cs,doAutomaticallyAddResourceFilesFromVSSolution,The length of the statement  "                //Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ZetaResourceEditor"' "Main\ZetaResourceEditor.csproj"' "{367758E7-0435-440A-AC76-1F30ABBA3ED8}" " is 150.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Projects,VisualStudioImporter,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Projects\VisualStudioImporter.cs,doAutomaticallyAddResourceFilesFromVSSolution,The length of the statement  "                    @"Project\(""{(?<projectType>[^}]*)}""\)\s*=\s*""(?<projectName>[^""]*)""'\s*""(?<projectRelPath>[^""]*)""'\s*""{(?<projectID>[^}]*)}"""; " is 137.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Translation.Azure,AzureTranslationEngine,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\Azure\AzureTranslationEngine.cs,TranslateArray,The length of the statement  "                       @"<ContentType xmlns=""http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2"">text/plain</ContentType>" + " is 120.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Translation.Bing,BingTranslationHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\Bing\BingTranslationHelper.cs,TranslateArray,The length of the statement  "            //The request body is a xml string generated according to the schema specified at http://api.microsofttranslator.com/v2/Http.svc/help. " is 134.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateCheckerService,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,IsUpdateAvailable2Async,The length of the statement  "                this.IsUpdateAvailable2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUpdateAvailable2OperationCompleted); " is 129.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateCheckerService,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,OnIsUpdateAvailable2OperationCompleted,The length of the statement  "                this.IsUpdateAvailable2Completed(this' new IsUpdateAvailable2CompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 163.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateCheckerService,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,DownloadUpdate2Async,The length of the statement  "                this.DownloadUpdate2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadUpdate2OperationCompleted); " is 123.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateCheckerService,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,OnDownloadUpdate2OperationCompleted,The length of the statement  "                this.DownloadUpdate2Completed(this' new DownloadUpdate2CompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 157.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateCheckerService,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,IsUpdateAvailableAsync,The length of the statement  "                this.IsUpdateAvailableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUpdateAvailableOperationCompleted); " is 127.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateCheckerService,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,OnIsUpdateAvailableOperationCompleted,The length of the statement  "                this.IsUpdateAvailableCompleted(this' new IsUpdateAvailableCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 161.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.ZetaUploader,ZetaUploaderCommunication,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\ZetaUploader\Reference.cs,OnSendFileOperationCompleted,The length of the statement  "                this.SendFileCompleted(this' new SendFileCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 143.
Long Statement,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.ZetaUploader,ZetaUploaderCommunication,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\ZetaUploader\Reference.cs,OnSendFile2OperationCompleted,The length of the statement  "                this.SendFile2Completed(this' new SendFile2CompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 145.
Complex Conditional,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,IsInternalRow,The conditional expression  "string.IsNullOrEmpty(name) ||                  name.StartsWith(@">>") ||                  (!name.Equals(@"$this.Text") && name.StartsWith(@"$this."))"  is complex.
Complex Conditional,ZetaResourceEditor.RuntimeBusinessLogic.FileInformations,FileInformation,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileInformations\FileInformation.cs,CompareTo,The conditional expression  "x.Contains(@".") && y.Contains(@".") ||                  !x.Contains(@".") && !y.Contains(@".")"  is complex.
Complex Conditional,ZetaResourceEditor.RuntimeBusinessLogic.Translation,TranslationHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\TranslationHelper.cs,RemoveWords,The conditional expression  "texts == null || texts.Length <= 0 || wordsToRemove == null || wordsToRemove.Length <= 0"  is complex.
Complex Conditional,ZetaResourceEditor.RuntimeBusinessLogic.Translation,TranslationHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\TranslationHelper.cs,ProtectWords,The conditional expression  "texts == null || texts.Length <= 0 || wordsToProtect == null || wordsToProtect.Length <= 0"  is complex.
Empty Catch Block,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.CoreExcel2,CoreExcelExporter,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\CoreExcel2\CoreExcelExporter.cs,ExportToExcelFile,The method has an empty catch block.
Empty Catch Block,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.CoreExcel2,CoreExcelExporter,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\CoreExcel2\CoreExcelExporter.cs,ExportToExcelFile,The method has an empty catch block.
Empty Catch Block,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,CreateAndAddNewFile,The method has an empty catch block.
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.CoreExcel2,CoreExcelExporter,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\CoreExcel2\CoreExcelExporter.cs,ExportToExcelFile,The following statement contains a magic number: while (wb.Worksheets.Count > 0 && loopCount++ < 100)              {                  try                  {                      wb.Worksheets.Delete(0);                  }                  catch (KeyNotFoundException)                  {                      // Ignore.                  }                    try                  {                      wb.Worksheets.Delete(1);                  }                  catch (KeyNotFoundException)                  {                      // Ignore.                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,ensureFileNamesUnique,The following statement contains a magic number: foreach (var preparedInformation in preparedInformations)              {                  var dp = preparedInformation.DestinationFilePath;                  var dpl = dp.ToLowerInvariant();                    if (prevFilePaths.Contains(dpl))                  {                      var index = 1;                      var guidCount = 0;                      while (prevFilePaths.Contains(dpl))                      {                          var dir = ZlpPathHelper.GetDirectoryPathNameFromFilePath(dp);                          var fn = ZlpPathHelper.GetFileNameWithoutExtension(dp);                          var ext = ZlpPathHelper.GetExtension(dp);                            dp = ZlpPathHelper.Combine(dir' $@"{fn}{index}{ext}");                            dpl = dp.ToLowerInvariant();                            if (!prevFilePaths.Contains(dpl))                          {                              prevFilePaths.Add(dpl);                              preparedInformation.DestinationFilePath = dp;                              break;                          }                          else                          {                              index++;                                if (index > 100)                              {                                  index = Math.Abs(Guid.NewGuid().GetHashCode());                                  guidCount++;                                    if (guidCount > 100) throw new Exception(Resources.FailedToGenerateUniqueFileNames);                              }                          }                      }                  }                  else                  {                      prevFilePaths.Add(dpl);                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,ensureFileNamesUnique,The following statement contains a magic number: foreach (var preparedInformation in preparedInformations)              {                  var dp = preparedInformation.DestinationFilePath;                  var dpl = dp.ToLowerInvariant();                    if (prevFilePaths.Contains(dpl))                  {                      var index = 1;                      var guidCount = 0;                      while (prevFilePaths.Contains(dpl))                      {                          var dir = ZlpPathHelper.GetDirectoryPathNameFromFilePath(dp);                          var fn = ZlpPathHelper.GetFileNameWithoutExtension(dp);                          var ext = ZlpPathHelper.GetExtension(dp);                            dp = ZlpPathHelper.Combine(dir' $@"{fn}{index}{ext}");                            dpl = dp.ToLowerInvariant();                            if (!prevFilePaths.Contains(dpl))                          {                              prevFilePaths.Add(dpl);                              preparedInformation.DestinationFilePath = dp;                              break;                          }                          else                          {                              index++;                                if (index > 100)                              {                                  index = Math.Abs(Guid.NewGuid().GetHashCode());                                  guidCount++;                                    if (guidCount > 100) throw new Exception(Resources.FailedToGenerateUniqueFileNames);                              }                          }                      }                  }                  else                  {                      prevFilePaths.Add(dpl);                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,doProcess,The following statement contains a magic number: foreach (var fileGroup in preparedInformation.FileGroups)              {                  if (bw.CancellationPending)                  {                      throw new OperationCanceledException();                  }                    var isFirstFileGroup = fileGroupIndex == 0;                  var isLastFileGroup = fileGroupIndex == preparedInformation.FileGroups.Length - 1;                    var worksheetIndex = -1;                    if (preparedInformation.ExportAllGroups)                  {                      if (dataTable == null)                      {                          dataSet.Tables.Add();                          worksheetIndex = dataSet.Tables.Count - 1;                          dataTable = dataSet.Tables[worksheetIndex];                          dataTable.TableName = Resources.SR_CommandProcessorSend_Process_ZRE_Export;                      }                  }                  else                  {                      dataSet.Tables.Add();                      worksheetIndex = dataSet.Tables.Count - 1;                      dataTable = dataSet.Tables[worksheetIndex];                      dataTable.TableName = generateWorksheetName(preparedInformation' fileGroup' preparedInformation.Project);                  }                    var rows = dataTable.Rows;                    var wantNewSheet = !preparedInformation.ExportAllGroups || isFirstFileGroup;                    // --                  // Header.                    const int headerStartRowIndex = 0;                  const int columnStartIndex = 0;                    if (wantNewSheet)                  {                      if (preparedInformation.ExportFileGroupColumn)                      {                          // Checksum.                          // 2014-06-25 Krickbaum - Corrected type to double                          dataTable.Columns.Add(Resources.SR_CommandProcessorSend_Process_Group' typeof(double));                      }                      if (preparedInformation.ExportNameColumn)                      {                          // String name.                          dataTable.Columns.Add(Resources.SR_CommandProcessorSend_Process_Name' typeof(string));                      }                      if (preparedInformation.ExportReferenceLanguageColumn)                      {                          // Reference language.                          dataTable.Columns.Add(preparedInformation.ReferenceLanguageCode' typeof(string));                      }                        // Destination languages.                      // ReSharper disable ForCanBeConvertedToForeach                      for (var runningColIndex = 0;                           // ReSharper restore ForCanBeConvertedToForeach                           runningColIndex < preparedInformation.DestinationLanguageCodes.Length;                           ++runningColIndex)                      {                          var destinationLanguageCode =                              preparedInformation.DestinationLanguageCodes[runningColIndex];                            if (string.Compare(preparedInformation.ReferenceLanguageCode' destinationLanguageCode'                              StringComparison.OrdinalIgnoreCase) != 0)                          {                              dataTable.Columns.Add(destinationLanguageCode' typeof(string));                          }                      }                        if (preparedInformation.ExportCommentColumn)                      {                          // String name.                          dataTable.Columns.Add(Resources.SR_CommandProcessorSend_Process_Comment' typeof(string));                      }                        currentRowIndex = headerStartRowIndex;                  }                    // --                  // Content.                    var dp = new DataProcessing(fileGroup);                  var table =                      dp.GetDataTableFromResxFiles(preparedInformation.Project' preparedInformation.ExportCommentColumn);                  table =                      removeUnusedColumns(                          preparedInformation'                          fileGroup.ParentSettings'                          table);                    var rowIndex = 0;                    foreach (DataRow row in table.Rows)                  {                      if ((rowIndex + 1) % 20 == 0)                      {                          bw.ReportProgress(                              0'                              new ExcelProgressInformation                              {                                  TemporaryProgressMessage =                                          string.Format(                                              Resources.SR_CommandProcessorSend_Process_ProcessingFileGroupOfRowOf'                                              fileGroupIndex + 1'                                              fileGroupsLength'                                              rowIndex + 1'                                              table.Rows.Count'                                              (int)(((rowIndex + 1.0) /                                                      (table.Rows.Count) *                                                      ((fileGroupIndex + 1.0) /                                                       (fileGroupsLength))) * 100))                              });                            if (bw.CancellationPending)                          {                              throw new OperationCanceledException();                          }                      }                        if (wantExportRow(                          ssc'                          preparedInformation'                          fileGroup.ParentSettings'                          row'                          CommentVisibilityScope.InMemory))                      {                          if (!wasAlreadyExported(                              exportedReferenceLanguageValues'                              preparedInformation'                              fileGroup.ParentSettings'                              row))                          {                              var offset = 0;                                if (preparedInformation.ExportFileGroupColumn)                              {                                  // Checksum.                                  checkEnsureRowPresent(dataTable' currentRowIndex);                                  rows[currentRowIndex][columnStartIndex] = fileGroup.GetChecksum(preparedInformation.Project);                                  makeCellReadOnly(dataTable.Columns[columnStartIndex]);                                  offset++;                              }                              if (preparedInformation.ExportNameColumn)                              {                                  // String name.                                  checkEnsureRowPresent(dataTable' currentRowIndex);                                  rows[currentRowIndex][columnStartIndex + offset] = row[1]; // Column 0=FileGroup checksum' column 1=Tag name.                                  makeCellReadOnly(dataTable.Columns[columnStartIndex + offset]);                                    offset++;                              }                                var effectiveDestinationColumnIndex = 1;                              // Column 0=FileGroup checksum' column 1=Tag name.                              for (var sourceColumnIndex = 2;                                  sourceColumnIndex < table.Columns.Count - (preparedInformation.ExportCommentColumn ? 1 : 0); // Subtract 1' because last column is ALWAYS the comment.                                  ++sourceColumnIndex)                              {                                  var languageValue = row[sourceColumnIndex] as string;                                  var languageCode =                                      IsFileName(table.Columns[sourceColumnIndex].ColumnName)                                          ? new LanguageCodeDetection(preparedInformation.Project)                                              .DetectLanguageCodeFromFileName(                                                  fileGroup.ParentSettings'                                                  table.Columns[sourceColumnIndex].ColumnName)                                          : table.Columns[sourceColumnIndex].ColumnName;                                  var isReferenceLanguage =                                      string.Compare(preparedInformation.ReferenceLanguageCode' languageCode'                                      StringComparison.OrdinalIgnoreCase) == 0;                                    if (isReferenceLanguage && preparedInformation.ExportReferenceLanguageColumn ||                                      !isReferenceLanguage)                                  {                                      checkEnsureRowPresent(dataTable' currentRowIndex);                                      var columnIndex = (columnStartIndex - 1) + effectiveDestinationColumnIndex + offset;                                      rows[currentRowIndex][columnIndex] = languageValue;                                        if (isReferenceLanguage)                                      {                                          makeCellReadOnly(dataTable.Columns[columnIndex]);                                            exportedReferenceLanguageValues.Add(                                              string.IsNullOrEmpty(languageValue)                                                  ? string.Empty                                                  : languageValue);                                      }                                        effectiveDestinationColumnIndex++;                                  }                              }                                if (preparedInformation.ExportCommentColumn)                              {                                  // Comment.                                  checkEnsureRowPresent(dataTable' currentRowIndex);                                  rows[currentRowIndex][(columnStartIndex - 1) + effectiveDestinationColumnIndex + offset]                                      = DataProcessing.GetComment(preparedInformation.Project' row);                                    /*offset++;*/                              }                                currentRowIndex++;                          }                      }                        // In every loop' check again.                      suggestedWorkSheetNamesToRemove.Remove(dataTable.TableName);                        //CHANGED if worksheet empty: remove it)                      if (currentRowIndex == headerStartRowIndex + 1 &&                          !preparedInformation.ExportAllGroups)                      {                          // http://www.codeproject.com/Messages/3539004/Export-to-Excel-bug.aspx                          if (worksheetIndex < dataSet.Tables.Count)                          {                              suggestedWorkSheetNamesToRemove.Add(dataTable.TableName);                          }                      }                        rowIndex++;                  }                    //dataTable.AutoFitRow(currentRowIndex - 1);                    if (bw.CancellationPending)                  {                      throw new OperationCanceledException();                  }                    // --                    if (!preparedInformation.ExportAllGroups ||                      isLastFileGroup)                  {                      var offset = 0;                        if (preparedInformation.ExportFileGroupColumn)                      {                          // Checksum.                          //dataTable.AutoFitColumn(                          //    columnStartIndex'                          //    headerStartRowIndex'                          //    currentRowIndex);                          offset++;                      }                      if (preparedInformation.ExportNameColumn)                      {                          // String name.                          //dataTable.AutoFitColumn(                          //    columnStartIndex + offset'                          //    headerStartRowIndex'                          //    currentRowIndex);                          offset++;                      }                      if (preparedInformation.ExportReferenceLanguageColumn)                      {                          // Reference language.                          //dataTable.AutoFitColumn(                          //    columnStartIndex + offset'                          //    headerStartRowIndex'                          //    currentRowIndex);                          offset++;                      }                        // Destination languages.                      int runningColIndex;                      for (runningColIndex = 0;                           runningColIndex < preparedInformation.DestinationLanguageCodes.Length;                           ++runningColIndex)                      {                          //dataTable.AutoFitColumn(                          //    columnStartIndex + runningColIndex + offset'                          //    headerStartRowIndex'                          //    currentRowIndex);                      }                        if (preparedInformation.ExportCommentColumn)                      {                          // Comment.                          //dataTable.AutoFitColumn(                          //    columnStartIndex + offset + runningColIndex'                          //    headerStartRowIndex'                          //    currentRowIndex);                          /*offset++;*/                      }                  }                    // --                    fileGroupIndex++;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,doProcess,The following statement contains a magic number: foreach (var fileGroup in preparedInformation.FileGroups)              {                  if (bw.CancellationPending)                  {                      throw new OperationCanceledException();                  }                    var isFirstFileGroup = fileGroupIndex == 0;                  var isLastFileGroup = fileGroupIndex == preparedInformation.FileGroups.Length - 1;                    var worksheetIndex = -1;                    if (preparedInformation.ExportAllGroups)                  {                      if (dataTable == null)                      {                          dataSet.Tables.Add();                          worksheetIndex = dataSet.Tables.Count - 1;                          dataTable = dataSet.Tables[worksheetIndex];                          dataTable.TableName = Resources.SR_CommandProcessorSend_Process_ZRE_Export;                      }                  }                  else                  {                      dataSet.Tables.Add();                      worksheetIndex = dataSet.Tables.Count - 1;                      dataTable = dataSet.Tables[worksheetIndex];                      dataTable.TableName = generateWorksheetName(preparedInformation' fileGroup' preparedInformation.Project);                  }                    var rows = dataTable.Rows;                    var wantNewSheet = !preparedInformation.ExportAllGroups || isFirstFileGroup;                    // --                  // Header.                    const int headerStartRowIndex = 0;                  const int columnStartIndex = 0;                    if (wantNewSheet)                  {                      if (preparedInformation.ExportFileGroupColumn)                      {                          // Checksum.                          // 2014-06-25 Krickbaum - Corrected type to double                          dataTable.Columns.Add(Resources.SR_CommandProcessorSend_Process_Group' typeof(double));                      }                      if (preparedInformation.ExportNameColumn)                      {                          // String name.                          dataTable.Columns.Add(Resources.SR_CommandProcessorSend_Process_Name' typeof(string));                      }                      if (preparedInformation.ExportReferenceLanguageColumn)                      {                          // Reference language.                          dataTable.Columns.Add(preparedInformation.ReferenceLanguageCode' typeof(string));                      }                        // Destination languages.                      // ReSharper disable ForCanBeConvertedToForeach                      for (var runningColIndex = 0;                           // ReSharper restore ForCanBeConvertedToForeach                           runningColIndex < preparedInformation.DestinationLanguageCodes.Length;                           ++runningColIndex)                      {                          var destinationLanguageCode =                              preparedInformation.DestinationLanguageCodes[runningColIndex];                            if (string.Compare(preparedInformation.ReferenceLanguageCode' destinationLanguageCode'                              StringComparison.OrdinalIgnoreCase) != 0)                          {                              dataTable.Columns.Add(destinationLanguageCode' typeof(string));                          }                      }                        if (preparedInformation.ExportCommentColumn)                      {                          // String name.                          dataTable.Columns.Add(Resources.SR_CommandProcessorSend_Process_Comment' typeof(string));                      }                        currentRowIndex = headerStartRowIndex;                  }                    // --                  // Content.                    var dp = new DataProcessing(fileGroup);                  var table =                      dp.GetDataTableFromResxFiles(preparedInformation.Project' preparedInformation.ExportCommentColumn);                  table =                      removeUnusedColumns(                          preparedInformation'                          fileGroup.ParentSettings'                          table);                    var rowIndex = 0;                    foreach (DataRow row in table.Rows)                  {                      if ((rowIndex + 1) % 20 == 0)                      {                          bw.ReportProgress(                              0'                              new ExcelProgressInformation                              {                                  TemporaryProgressMessage =                                          string.Format(                                              Resources.SR_CommandProcessorSend_Process_ProcessingFileGroupOfRowOf'                                              fileGroupIndex + 1'                                              fileGroupsLength'                                              rowIndex + 1'                                              table.Rows.Count'                                              (int)(((rowIndex + 1.0) /                                                      (table.Rows.Count) *                                                      ((fileGroupIndex + 1.0) /                                                       (fileGroupsLength))) * 100))                              });                            if (bw.CancellationPending)                          {                              throw new OperationCanceledException();                          }                      }                        if (wantExportRow(                          ssc'                          preparedInformation'                          fileGroup.ParentSettings'                          row'                          CommentVisibilityScope.InMemory))                      {                          if (!wasAlreadyExported(                              exportedReferenceLanguageValues'                              preparedInformation'                              fileGroup.ParentSettings'                              row))                          {                              var offset = 0;                                if (preparedInformation.ExportFileGroupColumn)                              {                                  // Checksum.                                  checkEnsureRowPresent(dataTable' currentRowIndex);                                  rows[currentRowIndex][columnStartIndex] = fileGroup.GetChecksum(preparedInformation.Project);                                  makeCellReadOnly(dataTable.Columns[columnStartIndex]);                                  offset++;                              }                              if (preparedInformation.ExportNameColumn)                              {                                  // String name.                                  checkEnsureRowPresent(dataTable' currentRowIndex);                                  rows[currentRowIndex][columnStartIndex + offset] = row[1]; // Column 0=FileGroup checksum' column 1=Tag name.                                  makeCellReadOnly(dataTable.Columns[columnStartIndex + offset]);                                    offset++;                              }                                var effectiveDestinationColumnIndex = 1;                              // Column 0=FileGroup checksum' column 1=Tag name.                              for (var sourceColumnIndex = 2;                                  sourceColumnIndex < table.Columns.Count - (preparedInformation.ExportCommentColumn ? 1 : 0); // Subtract 1' because last column is ALWAYS the comment.                                  ++sourceColumnIndex)                              {                                  var languageValue = row[sourceColumnIndex] as string;                                  var languageCode =                                      IsFileName(table.Columns[sourceColumnIndex].ColumnName)                                          ? new LanguageCodeDetection(preparedInformation.Project)                                              .DetectLanguageCodeFromFileName(                                                  fileGroup.ParentSettings'                                                  table.Columns[sourceColumnIndex].ColumnName)                                          : table.Columns[sourceColumnIndex].ColumnName;                                  var isReferenceLanguage =                                      string.Compare(preparedInformation.ReferenceLanguageCode' languageCode'                                      StringComparison.OrdinalIgnoreCase) == 0;                                    if (isReferenceLanguage && preparedInformation.ExportReferenceLanguageColumn ||                                      !isReferenceLanguage)                                  {                                      checkEnsureRowPresent(dataTable' currentRowIndex);                                      var columnIndex = (columnStartIndex - 1) + effectiveDestinationColumnIndex + offset;                                      rows[currentRowIndex][columnIndex] = languageValue;                                        if (isReferenceLanguage)                                      {                                          makeCellReadOnly(dataTable.Columns[columnIndex]);                                            exportedReferenceLanguageValues.Add(                                              string.IsNullOrEmpty(languageValue)                                                  ? string.Empty                                                  : languageValue);                                      }                                        effectiveDestinationColumnIndex++;                                  }                              }                                if (preparedInformation.ExportCommentColumn)                              {                                  // Comment.                                  checkEnsureRowPresent(dataTable' currentRowIndex);                                  rows[currentRowIndex][(columnStartIndex - 1) + effectiveDestinationColumnIndex + offset]                                      = DataProcessing.GetComment(preparedInformation.Project' row);                                    /*offset++;*/                              }                                currentRowIndex++;                          }                      }                        // In every loop' check again.                      suggestedWorkSheetNamesToRemove.Remove(dataTable.TableName);                        //CHANGED if worksheet empty: remove it)                      if (currentRowIndex == headerStartRowIndex + 1 &&                          !preparedInformation.ExportAllGroups)                      {                          // http://www.codeproject.com/Messages/3539004/Export-to-Excel-bug.aspx                          if (worksheetIndex < dataSet.Tables.Count)                          {                              suggestedWorkSheetNamesToRemove.Add(dataTable.TableName);                          }                      }                        rowIndex++;                  }                    //dataTable.AutoFitRow(currentRowIndex - 1);                    if (bw.CancellationPending)                  {                      throw new OperationCanceledException();                  }                    // --                    if (!preparedInformation.ExportAllGroups ||                      isLastFileGroup)                  {                      var offset = 0;                        if (preparedInformation.ExportFileGroupColumn)                      {                          // Checksum.                          //dataTable.AutoFitColumn(                          //    columnStartIndex'                          //    headerStartRowIndex'                          //    currentRowIndex);                          offset++;                      }                      if (preparedInformation.ExportNameColumn)                      {                          // String name.                          //dataTable.AutoFitColumn(                          //    columnStartIndex + offset'                          //    headerStartRowIndex'                          //    currentRowIndex);                          offset++;                      }                      if (preparedInformation.ExportReferenceLanguageColumn)                      {                          // Reference language.                          //dataTable.AutoFitColumn(                          //    columnStartIndex + offset'                          //    headerStartRowIndex'                          //    currentRowIndex);                          offset++;                      }                        // Destination languages.                      int runningColIndex;                      for (runningColIndex = 0;                           runningColIndex < preparedInformation.DestinationLanguageCodes.Length;                           ++runningColIndex)                      {                          //dataTable.AutoFitColumn(                          //    columnStartIndex + runningColIndex + offset'                          //    headerStartRowIndex'                          //    currentRowIndex);                      }                        if (preparedInformation.ExportCommentColumn)                      {                          // Comment.                          //dataTable.AutoFitColumn(                          //    columnStartIndex + offset + runningColIndex'                          //    headerStartRowIndex'                          //    currentRowIndex);                          /*offset++;*/                      }                  }                    // --                    fileGroupIndex++;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,doProcess,The following statement contains a magic number: foreach (var fileGroup in preparedInformation.FileGroups)              {                  if (bw.CancellationPending)                  {                      throw new OperationCanceledException();                  }                    var isFirstFileGroup = fileGroupIndex == 0;                  var isLastFileGroup = fileGroupIndex == preparedInformation.FileGroups.Length - 1;                    var worksheetIndex = -1;                    if (preparedInformation.ExportAllGroups)                  {                      if (dataTable == null)                      {                          dataSet.Tables.Add();                          worksheetIndex = dataSet.Tables.Count - 1;                          dataTable = dataSet.Tables[worksheetIndex];                          dataTable.TableName = Resources.SR_CommandProcessorSend_Process_ZRE_Export;                      }                  }                  else                  {                      dataSet.Tables.Add();                      worksheetIndex = dataSet.Tables.Count - 1;                      dataTable = dataSet.Tables[worksheetIndex];                      dataTable.TableName = generateWorksheetName(preparedInformation' fileGroup' preparedInformation.Project);                  }                    var rows = dataTable.Rows;                    var wantNewSheet = !preparedInformation.ExportAllGroups || isFirstFileGroup;                    // --                  // Header.                    const int headerStartRowIndex = 0;                  const int columnStartIndex = 0;                    if (wantNewSheet)                  {                      if (preparedInformation.ExportFileGroupColumn)                      {                          // Checksum.                          // 2014-06-25 Krickbaum - Corrected type to double                          dataTable.Columns.Add(Resources.SR_CommandProcessorSend_Process_Group' typeof(double));                      }                      if (preparedInformation.ExportNameColumn)                      {                          // String name.                          dataTable.Columns.Add(Resources.SR_CommandProcessorSend_Process_Name' typeof(string));                      }                      if (preparedInformation.ExportReferenceLanguageColumn)                      {                          // Reference language.                          dataTable.Columns.Add(preparedInformation.ReferenceLanguageCode' typeof(string));                      }                        // Destination languages.                      // ReSharper disable ForCanBeConvertedToForeach                      for (var runningColIndex = 0;                           // ReSharper restore ForCanBeConvertedToForeach                           runningColIndex < preparedInformation.DestinationLanguageCodes.Length;                           ++runningColIndex)                      {                          var destinationLanguageCode =                              preparedInformation.DestinationLanguageCodes[runningColIndex];                            if (string.Compare(preparedInformation.ReferenceLanguageCode' destinationLanguageCode'                              StringComparison.OrdinalIgnoreCase) != 0)                          {                              dataTable.Columns.Add(destinationLanguageCode' typeof(string));                          }                      }                        if (preparedInformation.ExportCommentColumn)                      {                          // String name.                          dataTable.Columns.Add(Resources.SR_CommandProcessorSend_Process_Comment' typeof(string));                      }                        currentRowIndex = headerStartRowIndex;                  }                    // --                  // Content.                    var dp = new DataProcessing(fileGroup);                  var table =                      dp.GetDataTableFromResxFiles(preparedInformation.Project' preparedInformation.ExportCommentColumn);                  table =                      removeUnusedColumns(                          preparedInformation'                          fileGroup.ParentSettings'                          table);                    var rowIndex = 0;                    foreach (DataRow row in table.Rows)                  {                      if ((rowIndex + 1) % 20 == 0)                      {                          bw.ReportProgress(                              0'                              new ExcelProgressInformation                              {                                  TemporaryProgressMessage =                                          string.Format(                                              Resources.SR_CommandProcessorSend_Process_ProcessingFileGroupOfRowOf'                                              fileGroupIndex + 1'                                              fileGroupsLength'                                              rowIndex + 1'                                              table.Rows.Count'                                              (int)(((rowIndex + 1.0) /                                                      (table.Rows.Count) *                                                      ((fileGroupIndex + 1.0) /                                                       (fileGroupsLength))) * 100))                              });                            if (bw.CancellationPending)                          {                              throw new OperationCanceledException();                          }                      }                        if (wantExportRow(                          ssc'                          preparedInformation'                          fileGroup.ParentSettings'                          row'                          CommentVisibilityScope.InMemory))                      {                          if (!wasAlreadyExported(                              exportedReferenceLanguageValues'                              preparedInformation'                              fileGroup.ParentSettings'                              row))                          {                              var offset = 0;                                if (preparedInformation.ExportFileGroupColumn)                              {                                  // Checksum.                                  checkEnsureRowPresent(dataTable' currentRowIndex);                                  rows[currentRowIndex][columnStartIndex] = fileGroup.GetChecksum(preparedInformation.Project);                                  makeCellReadOnly(dataTable.Columns[columnStartIndex]);                                  offset++;                              }                              if (preparedInformation.ExportNameColumn)                              {                                  // String name.                                  checkEnsureRowPresent(dataTable' currentRowIndex);                                  rows[currentRowIndex][columnStartIndex + offset] = row[1]; // Column 0=FileGroup checksum' column 1=Tag name.                                  makeCellReadOnly(dataTable.Columns[columnStartIndex + offset]);                                    offset++;                              }                                var effectiveDestinationColumnIndex = 1;                              // Column 0=FileGroup checksum' column 1=Tag name.                              for (var sourceColumnIndex = 2;                                  sourceColumnIndex < table.Columns.Count - (preparedInformation.ExportCommentColumn ? 1 : 0); // Subtract 1' because last column is ALWAYS the comment.                                  ++sourceColumnIndex)                              {                                  var languageValue = row[sourceColumnIndex] as string;                                  var languageCode =                                      IsFileName(table.Columns[sourceColumnIndex].ColumnName)                                          ? new LanguageCodeDetection(preparedInformation.Project)                                              .DetectLanguageCodeFromFileName(                                                  fileGroup.ParentSettings'                                                  table.Columns[sourceColumnIndex].ColumnName)                                          : table.Columns[sourceColumnIndex].ColumnName;                                  var isReferenceLanguage =                                      string.Compare(preparedInformation.ReferenceLanguageCode' languageCode'                                      StringComparison.OrdinalIgnoreCase) == 0;                                    if (isReferenceLanguage && preparedInformation.ExportReferenceLanguageColumn ||                                      !isReferenceLanguage)                                  {                                      checkEnsureRowPresent(dataTable' currentRowIndex);                                      var columnIndex = (columnStartIndex - 1) + effectiveDestinationColumnIndex + offset;                                      rows[currentRowIndex][columnIndex] = languageValue;                                        if (isReferenceLanguage)                                      {                                          makeCellReadOnly(dataTable.Columns[columnIndex]);                                            exportedReferenceLanguageValues.Add(                                              string.IsNullOrEmpty(languageValue)                                                  ? string.Empty                                                  : languageValue);                                      }                                        effectiveDestinationColumnIndex++;                                  }                              }                                if (preparedInformation.ExportCommentColumn)                              {                                  // Comment.                                  checkEnsureRowPresent(dataTable' currentRowIndex);                                  rows[currentRowIndex][(columnStartIndex - 1) + effectiveDestinationColumnIndex + offset]                                      = DataProcessing.GetComment(preparedInformation.Project' row);                                    /*offset++;*/                              }                                currentRowIndex++;                          }                      }                        // In every loop' check again.                      suggestedWorkSheetNamesToRemove.Remove(dataTable.TableName);                        //CHANGED if worksheet empty: remove it)                      if (currentRowIndex == headerStartRowIndex + 1 &&                          !preparedInformation.ExportAllGroups)                      {                          // http://www.codeproject.com/Messages/3539004/Export-to-Excel-bug.aspx                          if (worksheetIndex < dataSet.Tables.Count)                          {                              suggestedWorkSheetNamesToRemove.Add(dataTable.TableName);                          }                      }                        rowIndex++;                  }                    //dataTable.AutoFitRow(currentRowIndex - 1);                    if (bw.CancellationPending)                  {                      throw new OperationCanceledException();                  }                    // --                    if (!preparedInformation.ExportAllGroups ||                      isLastFileGroup)                  {                      var offset = 0;                        if (preparedInformation.ExportFileGroupColumn)                      {                          // Checksum.                          //dataTable.AutoFitColumn(                          //    columnStartIndex'                          //    headerStartRowIndex'                          //    currentRowIndex);                          offset++;                      }                      if (preparedInformation.ExportNameColumn)                      {                          // String name.                          //dataTable.AutoFitColumn(                          //    columnStartIndex + offset'                          //    headerStartRowIndex'                          //    currentRowIndex);                          offset++;                      }                      if (preparedInformation.ExportReferenceLanguageColumn)                      {                          // Reference language.                          //dataTable.AutoFitColumn(                          //    columnStartIndex + offset'                          //    headerStartRowIndex'                          //    currentRowIndex);                          offset++;                      }                        // Destination languages.                      int runningColIndex;                      for (runningColIndex = 0;                           runningColIndex < preparedInformation.DestinationLanguageCodes.Length;                           ++runningColIndex)                      {                          //dataTable.AutoFitColumn(                          //    columnStartIndex + runningColIndex + offset'                          //    headerStartRowIndex'                          //    currentRowIndex);                      }                        if (preparedInformation.ExportCommentColumn)                      {                          // Comment.                          //dataTable.AutoFitColumn(                          //    columnStartIndex + offset + runningColIndex'                          //    headerStartRowIndex'                          //    currentRowIndex);                          /*offset++;*/                      }                  }                    // --                    fileGroupIndex++;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,wasAlreadyExported,The following statement contains a magic number: if (preparedInformation.EliminateDuplicateRows)              {                  // Column 0=FileGroup checksum' column 1=Tag name.                  for (var columnIndex = 2; columnIndex < row.Table.Columns.Count; ++columnIndex)                  {                      var languageCode =                          IsFileName(row.Table.Columns[columnIndex].ColumnName)                              ? new LanguageCodeDetection(preparedInformation.Project).DetectLanguageCodeFromFileName(                                  parentSettings'                                  row.Table.Columns[columnIndex].ColumnName)                              : row.Table.Columns[columnIndex].ColumnName;                        if (string.Compare(preparedInformation.ReferenceLanguageCode' languageCode'                          StringComparison.OrdinalIgnoreCase) == 0)                      {                          var languageValue = ConvertHelper.ToString(row[columnIndex]);                          return exportedReferenceLanguageValues.Contains(languageValue);                      }                  }                    return false;              }              else              {                  return false;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Export,ExcelExportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Export\ExcelExportController.cs,generateWorksheetName,The following statement contains a magic number: const int maxLength = 31;
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,extractColumnCheckSums,The following statement contains a magic number: if (table.Columns.Count >= 1)              {                  for (var rowIndex = 0/*1*/; rowIndex < table.Rows.Count; rowIndex++)                  {                      // Could have column 0 or column 1 (or none at all) as the checksum.                      for (var columnIndex = 0; columnIndex < 2; ++columnIndex)                      {                          var cellValue = ConvertHelper.ToString(table.Rows[rowIndex][columnIndex]);                            // First blank line to stop.                          if (string.IsNullOrEmpty(cellValue))                          {                              break;                          }                          else                          {                              var checkSum = ConvertHelper.ToInt64(cellValue);                              if (checkSum > 0)                              {                                  totalChecksumRows++;                                  var found = false;                                    // ReSharper disable LoopCanBeConvertedToQuery                                  foreach (var pair in result)                                  // ReSharper restore LoopCanBeConvertedToQuery                                  {                                      if (pair.Item1 == checkSum)                                      {                                          found = true;                                          break;                                      }                                  }                                    if (!found)                                  {                                      result.Add(new MyTuple<long' int>(checkSum' columnIndex));                                  }                              }                          }                      }                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,processTableFileIntelligent,The following statement contains a magic number: for (var sourceRowIndex = 0; sourceRowIndex < sourceRowCount; ++sourceRowIndex)              {                  // Need to process all file groups if not has any specified.                  var fileGroups =                      _information.HasFileGroups                          ? _information.FileGroups                          : _information.Project.FileGroups.ToArray();                    foreach (var fileGroup in fileGroups)                  {                      var checksum = fileGroup.GetChecksum(_information.Project);                        // --                        DBFileGroupCacheHelper ch;                        if (!fgCache.TryGetValue(fileGroup.UniqueID' out ch))                      {                          ch = new DBFileGroupCacheHelper                                  {                                      DB = new DataProcessing(fileGroup)                                  };                            ch.Table = ch.DB.GetDataTableFromResxFiles(_information.Project);                            fgCache[fileGroup.UniqueID] = ch;                      }                        // --                        foreach (var languageCode in _information.LanguageCodes)                      {                          // UI progress and cancelation handling.                          if ((sourceRowIndex + 1) % 20 == 0)                          {                              if (bw.CancellationPending)                              {                                  throw new OperationCanceledException();                              }                                bw.ReportProgress(                                  0'                                  string.Format(                                      Resources.SR_CommandProcessorReceive_Process_ProcessingWorkSheetOfRowOf'                                      tableIndex + 1'                                      dataSet.Tables.Count'                                      sourceRowIndex + 1'                                      sourceRowCount'                                      (int)                                      (((sourceRowIndex + 1.0) /                                        (table.Rows.Count) *                                        ((tableIndex + 1.0) /                                         (dataSet.Tables.Count))) * 100)));                          }                            // --                            var destinationTableColumnIndex =                              getDestinationTableColumnIndex(                                  fileGroup.ParentSettings'                                  ch.Table'                                  languageCode);                            // Column 0=FileGroup checksum' column 1=Tag name.                          if (destinationTableColumnIndex > 1)                          {                              // We now have multiple possible options' based on the                              // source lookup information provided. A maximum number                              // of provided source information is:                              //                              //     - A file group checksum column.                              //     - A name column.                              //     - A reference language column.                              //                              // These information are calculated above. Decide now                              // which actually to use.                                var passedChecksum =                                  hasChecksumColumn &&                                  checksum == ConvertHelper.ToInt64(sourceRows[sourceRowIndex][checksumColumnIndex]) ||                                  !hasChecksumColumn;                                if (passedChecksum)                              {                                  List<DataRow> destinationRows;                                    if (hasNameColumn)                                  {                                      var tagName =                                          ConvertHelper.ToString(sourceRows[sourceRowIndex][nameColumnIndex]);                                        if (string.IsNullOrEmpty(tagName))                                      {                                          // Skip empty table rows.                                          destinationRows = null;                                      }                                      else                                      {                                          var destinationColumnIndex =                                              getDestinationTableColumnIndex(                                                  fileGroup.ParentSettings'                                                  ch.Table'                                                  hasReferenceLanguageColumn                                                      ? referenceLanguageName                                                      : _information.Project.NeutralLanguageCode);                                            destinationRows =                                              getDestinationTableRowsByTagName(                                                  ch.Table'                                                  tagName'                                                  hasChecksumColumn'                                                  languageCode'                                                  destinationColumnIndex);                                      }                                  }                                  else if (hasReferenceLanguageColumn)                                  {                                      var refLanguageValue =                                          ConvertHelper.ToString(                                              sourceRows[sourceRowIndex][referenceLanguageColumnIndex]);                                        if (string.IsNullOrEmpty(refLanguageValue))                                      {                                          // Skip empty table rows.                                          destinationRows = null;                                      }                                      else                                      {                                          var refLanguageDestinationColumnIndex =                                              getDestinationTableColumnIndex(                                                  fileGroup.ParentSettings'                                                  ch.Table'                                                  referenceLanguageName);                                            // 2011-01-24' Uwe Keim:                                          // If for one file' the language does not exist' simply skip.                                          if (refLanguageDestinationColumnIndex < 0)                                          {                                              destinationRows = null;                                          }                                          else                                          {                                              destinationRows =                                                  getDestinationTableRowsByReferenceLanguageValue(                                                      ch.Table'                                                      refLanguageValue'                                                      refLanguageDestinationColumnIndex'                                                      hasChecksumColumn);                                          }                                      }                                  }                                  else                                  {                                      throw new Exception(                                          Resources.ExcelImportController_processWorkSheetFileIntelligent_Neither_name_column_nor_reference_language_column_present_);                                  }                                    // --                                    if (destinationRows != null && destinationRows.Count > 0)                                  {                                      foreach (var row in destinationRows)                                      {                                          var tableSourceColumnIndex =                                              getTableColumnIndex(table' languageCode);                                            var sourceValue =                                              ConvertHelper.ToString(                                                  sourceRows[sourceRowIndex][tableSourceColumnIndex]'                                                  string.Empty);                                            if (!string.IsNullOrEmpty(sourceValue))                                          {                                              var originalValue =                                                  ConvertHelper.ToString(                                                      row[destinationTableColumnIndex]'                                                      string.Empty);                                                if (originalValue != sourceValue)                                              {                                                  row[destinationTableColumnIndex] = sourceValue;                                                  result.ImportedRowCount++;                                                  ch.HasAnychanges = true;                                              }                                          }                                      }                                  }                              }                          }                      }                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.ExportImportExcel.Import,ExcelImportController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\ExportImportExcel\Import\ExcelImportController.cs,processTableFileIntelligent,The following statement contains a magic number: for (var sourceRowIndex = 0; sourceRowIndex < sourceRowCount; ++sourceRowIndex)              {                  // Need to process all file groups if not has any specified.                  var fileGroups =                      _information.HasFileGroups                          ? _information.FileGroups                          : _information.Project.FileGroups.ToArray();                    foreach (var fileGroup in fileGroups)                  {                      var checksum = fileGroup.GetChecksum(_information.Project);                        // --                        DBFileGroupCacheHelper ch;                        if (!fgCache.TryGetValue(fileGroup.UniqueID' out ch))                      {                          ch = new DBFileGroupCacheHelper                                  {                                      DB = new DataProcessing(fileGroup)                                  };                            ch.Table = ch.DB.GetDataTableFromResxFiles(_information.Project);                            fgCache[fileGroup.UniqueID] = ch;                      }                        // --                        foreach (var languageCode in _information.LanguageCodes)                      {                          // UI progress and cancelation handling.                          if ((sourceRowIndex + 1) % 20 == 0)                          {                              if (bw.CancellationPending)                              {                                  throw new OperationCanceledException();                              }                                bw.ReportProgress(                                  0'                                  string.Format(                                      Resources.SR_CommandProcessorReceive_Process_ProcessingWorkSheetOfRowOf'                                      tableIndex + 1'                                      dataSet.Tables.Count'                                      sourceRowIndex + 1'                                      sourceRowCount'                                      (int)                                      (((sourceRowIndex + 1.0) /                                        (table.Rows.Count) *                                        ((tableIndex + 1.0) /                                         (dataSet.Tables.Count))) * 100)));                          }                            // --                            var destinationTableColumnIndex =                              getDestinationTableColumnIndex(                                  fileGroup.ParentSettings'                                  ch.Table'                                  languageCode);                            // Column 0=FileGroup checksum' column 1=Tag name.                          if (destinationTableColumnIndex > 1)                          {                              // We now have multiple possible options' based on the                              // source lookup information provided. A maximum number                              // of provided source information is:                              //                              //     - A file group checksum column.                              //     - A name column.                              //     - A reference language column.                              //                              // These information are calculated above. Decide now                              // which actually to use.                                var passedChecksum =                                  hasChecksumColumn &&                                  checksum == ConvertHelper.ToInt64(sourceRows[sourceRowIndex][checksumColumnIndex]) ||                                  !hasChecksumColumn;                                if (passedChecksum)                              {                                  List<DataRow> destinationRows;                                    if (hasNameColumn)                                  {                                      var tagName =                                          ConvertHelper.ToString(sourceRows[sourceRowIndex][nameColumnIndex]);                                        if (string.IsNullOrEmpty(tagName))                                      {                                          // Skip empty table rows.                                          destinationRows = null;                                      }                                      else                                      {                                          var destinationColumnIndex =                                              getDestinationTableColumnIndex(                                                  fileGroup.ParentSettings'                                                  ch.Table'                                                  hasReferenceLanguageColumn                                                      ? referenceLanguageName                                                      : _information.Project.NeutralLanguageCode);                                            destinationRows =                                              getDestinationTableRowsByTagName(                                                  ch.Table'                                                  tagName'                                                  hasChecksumColumn'                                                  languageCode'                                                  destinationColumnIndex);                                      }                                  }                                  else if (hasReferenceLanguageColumn)                                  {                                      var refLanguageValue =                                          ConvertHelper.ToString(                                              sourceRows[sourceRowIndex][referenceLanguageColumnIndex]);                                        if (string.IsNullOrEmpty(refLanguageValue))                                      {                                          // Skip empty table rows.                                          destinationRows = null;                                      }                                      else                                      {                                          var refLanguageDestinationColumnIndex =                                              getDestinationTableColumnIndex(                                                  fileGroup.ParentSettings'                                                  ch.Table'                                                  referenceLanguageName);                                            // 2011-01-24' Uwe Keim:                                          // If for one file' the language does not exist' simply skip.                                          if (refLanguageDestinationColumnIndex < 0)                                          {                                              destinationRows = null;                                          }                                          else                                          {                                              destinationRows =                                                  getDestinationTableRowsByReferenceLanguageValue(                                                      ch.Table'                                                      refLanguageValue'                                                      refLanguageDestinationColumnIndex'                                                      hasChecksumColumn);                                          }                                      }                                  }                                  else                                  {                                      throw new Exception(                                          Resources.ExcelImportController_processWorkSheetFileIntelligent_Neither_name_column_nor_reference_language_column_present_);                                  }                                    // --                                    if (destinationRows != null && destinationRows.Count > 0)                                  {                                      foreach (var row in destinationRows)                                      {                                          var tableSourceColumnIndex =                                              getTableColumnIndex(table' languageCode);                                            var sourceValue =                                              ConvertHelper.ToString(                                                  sourceRows[sourceRowIndex][tableSourceColumnIndex]'                                                  string.Empty);                                            if (!string.IsNullOrEmpty(sourceValue))                                          {                                              var originalValue =                                                  ConvertHelper.ToString(                                                      row[destinationTableColumnIndex]'                                                      string.Empty);                                                if (originalValue != sourceValue)                                              {                                                  row[destinationTableColumnIndex] = sourceValue;                                                  result.ImportedRowCount++;                                                  ch.HasAnychanges = true;                                              }                                          }                                      }                                  }                              }                          }                      }                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,doesAutomaticTranslationsExist,The following statement contains a magic number: for (var i = 2;                  i < row.Table.Columns.Count -                  (DataProcessing.CommentsAreVisible(project' row' commentVisibilityScope) ? 1 : 0);                  ++i)              {                  var s = ConvertHelper.ToString(row[i]' string.Empty);                  if (s.StartsWith(DefaultTranslatedPrefix)) return true;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,areTranslationsMissing,The following statement contains a magic number: for (var i = 2;                  i < row.Table.Columns.Count -                  (DataProcessing.CommentsAreVisible(project' row' commentVisibilityScope) ? 1 : 0);                  ++i)              {                  var s = ConvertHelper.ToString(row[i]' string.Empty);                    if (string.IsNullOrEmpty(s))                  {                      hasEmpty = true;                  }                  else                  {                      hasNonEmpty = true;                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,hasPlaceholderMismatch,The following statement contains a magic number: var neutralColumnIndex = findColumnIndex(row.Table' neutralCode' 2);
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,hasPlaceholderMismatch,The following statement contains a magic number: for (var i = 2;                  i < columnCount -                  (DataProcessing.CommentsAreVisible(project' row' commentVisibilityScope) ? 1 : 0);                  ++i)              {                  if (i != neutralColumnIndex)                  {                      var s = ConvertHelper.ToString(row[i]' string.Empty);                        // 2011-11-16' Uwe Keim: Only check if non-empty' non-default-language.                      if (!string.IsNullOrEmpty(s))                      {                          var other = ExtractPlaceholders(s);                            if (other != firstPlaceholderCount)                          {                              return true;                          }                      }                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,IsCompleteRowEmpty,The following statement contains a magic number: for (var i = 2; i < row.Table.Columns.Count; ++i)              {                  if (ConvertHelper.ToString(row[i]' string.Empty).Trim().Length > 0)                  {                      return false;                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,sortFiles,The following statement contains a magic number: if (filePaths == null || filePaths.Count < 2)              {                  return filePaths;              }              else              {                  var sortableP = new List<FileInformation>(filePaths);                    sortableP.Sort();                    return sortableP.ToArray();              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,shortenFilePath,The following statement contains a magic number: return ShortenFilePath(filePath' 150);
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,clearAllTexts,The following statement contains a magic number: foreach (DataRow row in table.Rows)              {                  // Clear.                  // Column 0=FileGroup checksum' column 1=Tag name.                  row[2] = null;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,translateTexts,The following statement contains a magic number: if (ti.IsSourceLanguageSupported(appID' appID2' sourceLanguageCode) &&                  ti.IsDestinationLanguageSupported(appID' appID2' destinationLanguageCode))              {                  var slc =                      ti.MapCultureToSourceLanguageCode(                          appID' appID2'                          CultureHelper.CreateCultureErrorTolerant(sourceLanguageCode));                  var dlc =                      ti.MapCultureToDestinationLanguageCode(                          appID' appID2'                          CultureHelper.CreateCultureErrorTolerant(destinationLanguageCode));                    // --                    foreach (DataRow row in table.Rows)                  {                      var sourceText = ConvertHelper.ToString(row[2]);                        if (!string.IsNullOrEmpty(sourceText))                      {                          if (delayMilliseconds > 0)                          {                              Thread.Sleep(delayMilliseconds);                          }                            try                          {                              var destinationText =                                  prefix +                                  ti.Translate(                                      appID'                                      appID2'                                      sourceText'                                      slc'                                      dlc'                                      project.TranslationWordsToProtect'                                      project.TranslationWordsToRemove);                                row[2] = destinationText;                                translationSuccessCount++;                          }                          catch (Exception x)                          {                              translationErrorCount++;                                if (continueOnErrors)                              {                                  var prefixError = DefaultTranslationErrorPrefix.Trim() + @" ";                                    var destinationText = prefixError + x.Message;                                    if (row[2] != null)                                  {                                      row[2] = destinationText;                                  }                              }                              else                              {                                  throw;                              }                          }                            translationCount++;                      }                  }                    // Write back.                  data.SaveDataTableToResxFiles(project' table' false' false);              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,translateTexts,The following statement contains a magic number: if (ti.IsSourceLanguageSupported(appID' appID2' sourceLanguageCode) &&                  ti.IsDestinationLanguageSupported(appID' appID2' destinationLanguageCode))              {                  var slc =                      ti.MapCultureToSourceLanguageCode(                          appID' appID2'                          CultureHelper.CreateCultureErrorTolerant(sourceLanguageCode));                  var dlc =                      ti.MapCultureToDestinationLanguageCode(                          appID' appID2'                          CultureHelper.CreateCultureErrorTolerant(destinationLanguageCode));                    // --                    foreach (DataRow row in table.Rows)                  {                      var sourceText = ConvertHelper.ToString(row[2]);                        if (!string.IsNullOrEmpty(sourceText))                      {                          if (delayMilliseconds > 0)                          {                              Thread.Sleep(delayMilliseconds);                          }                            try                          {                              var destinationText =                                  prefix +                                  ti.Translate(                                      appID'                                      appID2'                                      sourceText'                                      slc'                                      dlc'                                      project.TranslationWordsToProtect'                                      project.TranslationWordsToRemove);                                row[2] = destinationText;                                translationSuccessCount++;                          }                          catch (Exception x)                          {                              translationErrorCount++;                                if (continueOnErrors)                              {                                  var prefixError = DefaultTranslationErrorPrefix.Trim() + @" ";                                    var destinationText = prefixError + x.Message;                                    if (row[2] != null)                                  {                                      row[2] = destinationText;                                  }                              }                              else                              {                                  throw;                              }                          }                            translationCount++;                      }                  }                    // Write back.                  data.SaveDataTableToResxFiles(project' table' false' false);              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,translateTexts,The following statement contains a magic number: if (ti.IsSourceLanguageSupported(appID' appID2' sourceLanguageCode) &&                  ti.IsDestinationLanguageSupported(appID' appID2' destinationLanguageCode))              {                  var slc =                      ti.MapCultureToSourceLanguageCode(                          appID' appID2'                          CultureHelper.CreateCultureErrorTolerant(sourceLanguageCode));                  var dlc =                      ti.MapCultureToDestinationLanguageCode(                          appID' appID2'                          CultureHelper.CreateCultureErrorTolerant(destinationLanguageCode));                    // --                    foreach (DataRow row in table.Rows)                  {                      var sourceText = ConvertHelper.ToString(row[2]);                        if (!string.IsNullOrEmpty(sourceText))                      {                          if (delayMilliseconds > 0)                          {                              Thread.Sleep(delayMilliseconds);                          }                            try                          {                              var destinationText =                                  prefix +                                  ti.Translate(                                      appID'                                      appID2'                                      sourceText'                                      slc'                                      dlc'                                      project.TranslationWordsToProtect'                                      project.TranslationWordsToRemove);                                row[2] = destinationText;                                translationSuccessCount++;                          }                          catch (Exception x)                          {                              translationErrorCount++;                                if (continueOnErrors)                              {                                  var prefixError = DefaultTranslationErrorPrefix.Trim() + @" ";                                    var destinationText = prefixError + x.Message;                                    if (row[2] != null)                                  {                                      row[2] = destinationText;                                  }                              }                              else                              {                                  throw;                              }                          }                            translationCount++;                      }                  }                    // Write back.                  data.SaveDataTableToResxFiles(project' table' false' false);              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,translateTexts,The following statement contains a magic number: if (ti.IsSourceLanguageSupported(appID' appID2' sourceLanguageCode) &&                  ti.IsDestinationLanguageSupported(appID' appID2' destinationLanguageCode))              {                  var slc =                      ti.MapCultureToSourceLanguageCode(                          appID' appID2'                          CultureHelper.CreateCultureErrorTolerant(sourceLanguageCode));                  var dlc =                      ti.MapCultureToDestinationLanguageCode(                          appID' appID2'                          CultureHelper.CreateCultureErrorTolerant(destinationLanguageCode));                    // --                    foreach (DataRow row in table.Rows)                  {                      var sourceText = ConvertHelper.ToString(row[2]);                        if (!string.IsNullOrEmpty(sourceText))                      {                          if (delayMilliseconds > 0)                          {                              Thread.Sleep(delayMilliseconds);                          }                            try                          {                              var destinationText =                                  prefix +                                  ti.Translate(                                      appID'                                      appID2'                                      sourceText'                                      slc'                                      dlc'                                      project.TranslationWordsToProtect'                                      project.TranslationWordsToRemove);                                row[2] = destinationText;                                translationSuccessCount++;                          }                          catch (Exception x)                          {                              translationErrorCount++;                                if (continueOnErrors)                              {                                  var prefixError = DefaultTranslationErrorPrefix.Trim() + @" ";                                    var destinationText = prefixError + x.Message;                                    if (row[2] != null)                                  {                                      row[2] = destinationText;                                  }                              }                              else                              {                                  throw;                              }                          }                            translationCount++;                      }                  }                    // Write back.                  data.SaveDataTableToResxFiles(project' table' false' false);              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.FileGroups,FileGroup,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\FileGroups\FileGroup.cs,GetConnectedCsProject,The following statement contains a magic number: if (FilePaths != null && FilePaths.Length >= 2)              {                  var notDefaultLanguageVersion = FilePaths                      .Select(t => new                      {                          Replaced = CsProjHelper.RegexFindMainResourceFile.Replace(t'                              CsProjHelper.RegexFindMainResourceFileReplacePattern)'                          Original = t                      }).FirstOrDefault(t => t.Original != t.Replaced)?.Original;                  csProjResult = CsProjHelper.GetProjectContainingFile(new ZlpFileInfo(notDefaultLanguageVersion));              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Helpers,CsProjHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Helpers\CsProjHelper.cs,GetProjectContainingFile,The following statement contains a magic number: var maxRecursionLevelForProject = 5;
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,doHasDictionariesForCulture,The following statement contains a magic number: var cultureNameShort = culture.Name.Substring(0' 2);
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,doHasDictionariesForCulture,The following statement contains a magic number: foreach (var fileName in fileNames)  			{  				if (fileName.Length >= 2)  				{  					var normalizedFileName = fileName.Substring(0' 2);    					if (string.Equals(  						cultureNameShort'  						normalizedFileName'  						StringComparison.InvariantCultureIgnoreCase))  					{  						return  							new CacheItem  							{  								Available = true'  								DictionaryFilePath = ZlpPathHelper.Combine(dictionaryBaseFolderPath.FullName' fileName + @".dic")'  								GrammarFilePath = ZlpPathHelper.Combine(dictionaryBaseFolderPath.FullName' fileName + @".aff")  							};  					}  				}  			}
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,doHasDictionariesForCulture,The following statement contains a magic number: foreach (var fileName in fileNames)  			{  				if (fileName.Length >= 2)  				{  					var normalizedFileName = fileName.Substring(0' 2);    					if (string.Equals(  						cultureNameShort'  						normalizedFileName'  						StringComparison.InvariantCultureIgnoreCase))  					{  						return  							new CacheItem  							{  								Available = true'  								DictionaryFilePath = ZlpPathHelper.Combine(dictionaryBaseFolderPath.FullName' fileName + @".dic")'  								GrammarFilePath = ZlpPathHelper.Combine(dictionaryBaseFolderPath.FullName' fileName + @".aff")  							};  					}  				}  			}
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,GetSupportedLanguage3,The following statement contains a magic number: var twoLetterWindowsLanguageName =  				cultureInfo.Name.Substring(0' 2);
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,GetSupportedLanguage3,The following statement contains a magic number: foreach (var ci in SupportedUICultures)  			{  				var l2 = ci.Name.Substring(0' 2);    				// 2007-11-26' only compare the first TWO' to allow  				// e.g. Austria (DEA) to still load German.  				if (string.Compare(l2' twoLetterWindowsLanguageName' StringComparison.OrdinalIgnoreCase) == 0)  				{  					return ci.ThreeLetterWindowsLanguageName;  				}  			}
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,doGetCultureFromTwoLetterWindowsLanguageName,The following statement contains a magic number: if (twoLetterWindowsLanguageName.Length != 2)  			{  				throw new ArgumentException();  			}  			else  			{  				foreach (var ci in cultureToSearchIn)  				{  					if (string.Compare(ci.TwoLetterISOLanguageName' twoLetterWindowsLanguageName'   						StringComparison.OrdinalIgnoreCase) == 0)  					{  						return ci;  					}  				}    				// Fallback.  				return cultureToSearchIn[0];  			}
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,doGetCultureFromThreeLetterWindowsLanguageName,The following statement contains a magic number: if (threeLetterWindowsLanguageName.Length != 3)  			{  				throw new ArgumentException();  			}  			else  			{  				var twoLetterWindowsLanguageName =  					threeLetterWindowsLanguageName.Substring(0' 2);    				foreach (var ci in cultureToSearchIn)  				{  					// 2007-11-26' only compare the first TWO' to allow  					// e.g. Austria (DEA) to still load German.  					if (string.Compare(ci.TwoLetterISOLanguageName' twoLetterWindowsLanguageName'   						StringComparison.OrdinalIgnoreCase) == 0)  					{  						return ci;  					}  				}    				// Fallback.  				return cultureToSearchIn[0];  			}
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,doGetCultureFromThreeLetterWindowsLanguageName,The following statement contains a magic number: if (threeLetterWindowsLanguageName.Length != 3)  			{  				throw new ArgumentException();  			}  			else  			{  				var twoLetterWindowsLanguageName =  					threeLetterWindowsLanguageName.Substring(0' 2);    				foreach (var ci in cultureToSearchIn)  				{  					// 2007-11-26' only compare the first TWO' to allow  					// e.g. Austria (DEA) to still load German.  					if (string.Compare(ci.TwoLetterISOLanguageName' twoLetterWindowsLanguageName'   						StringComparison.OrdinalIgnoreCase) == 0)  					{  						return ci;  					}  				}    				// Fallback.  				return cultureToSearchIn[0];  			}
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Language,CultureHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\CultureHelper.cs,CreateCultureErrorTolerant,The following statement contains a magic number: var l2 = languageCode.Substring(0' 2).ToLowerInvariant();
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Language,LanguageCodeDetection,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Language\LanguageCodeDetection.cs,IsValidCultureName,The following statement contains a magic number: if (string.IsNullOrEmpty(cultureName))              {                  return false;              }              else              {                  if (CultureCache.Contains(cultureName))                  {                      return true;                  }                  else                  {                      // http://www.codeproject.com/Messages/3453976/IsValidCultureName-validation-error.aspx                      if (cultureName.Length > 10 ||                          string.Compare(cultureName' Resources.SR_CommandProcessorSend_Process_Group' StringComparison.OrdinalIgnoreCase) == 0 ||                          string.Compare(cultureName' Resources.SR_CommandProcessorSend_Process_Name' StringComparison.OrdinalIgnoreCase) == 0)                      {                          return false;                      }                      else                      {                          string longCultureName;                          if (isValueCultureName(cultureName' out longCultureName))                          {                              try                              {                                  // ReSharper disable once ReturnValueOfPureMethodIsNotUsed                                  CultureInfo.GetCultureInfo(longCultureName);                                  CultureCache.Add(longCultureName);                                  return true;                              }                              catch (ArgumentException)                              {                                  // Found no CultureInfo.TryParse' therefore use the catch.                                  return false;                              }                          }                          else                          {                              return false;                          }                      }                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Snapshots,InMemoryTranslationSnapshotController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Snapshots\InMemoryTranslationSnapshotController.cs,doTakeSnapshot,The following statement contains a magic number: foreach (DataRow row in table.Rows)              {                  if (rowIndex % 25 == 0 && (bw?.CancellationPending ?? false)) throw new OperationCanceledException();                    var dic = new Dictionary<string' string>();                    for (var sourceColumnIndex = 2;                      sourceColumnIndex <                      table.Columns.Count - 1; // Subtract 1' because last column is ALWAYS the comment.                      ++sourceColumnIndex)                  {                      var languageValue = row[sourceColumnIndex] as string;                      var languageCode =                          ExcelExportController.IsFileName(table.Columns[sourceColumnIndex].ColumnName)                              ? new LanguageCodeDetection(project)                                  .DetectLanguageCodeFromFileName(                                      fileGroup.ParentSettings'                                      table.Columns[sourceColumnIndex].ColumnName)                              : table.Columns[sourceColumnIndex].ColumnName;                      languageCode = languageCode.ToLowerInvariant();                        if (lcs.Contains(languageCode))                      {                          dic[languageCode] = languageValue;                      }                  }                    imss.AddBatchTranslation(dic);                    rowIndex++;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Snapshots,InMemoryTranslationSnapshotController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Snapshots\InMemoryTranslationSnapshotController.cs,doTakeSnapshot,The following statement contains a magic number: foreach (DataRow row in table.Rows)              {                  if (rowIndex % 25 == 0 && (bw?.CancellationPending ?? false)) throw new OperationCanceledException();                    var dic = new Dictionary<string' string>();                    for (var sourceColumnIndex = 2;                      sourceColumnIndex <                      table.Columns.Count - 1; // Subtract 1' because last column is ALWAYS the comment.                      ++sourceColumnIndex)                  {                      var languageValue = row[sourceColumnIndex] as string;                      var languageCode =                          ExcelExportController.IsFileName(table.Columns[sourceColumnIndex].ColumnName)                              ? new LanguageCodeDetection(project)                                  .DetectLanguageCodeFromFileName(                                      fileGroup.ParentSettings'                                      table.Columns[sourceColumnIndex].ColumnName)                              : table.Columns[sourceColumnIndex].ColumnName;                      languageCode = languageCode.ToLowerInvariant();                        if (lcs.Contains(languageCode))                      {                          dic[languageCode] = languageValue;                      }                  }                    imss.AddBatchTranslation(dic);                    rowIndex++;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Snapshots,SnapshotController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Snapshots\SnapshotController.cs,doTakeSnapshot,The following statement contains a magic number: foreach (DataRow row in table.Rows)              {                  if (rowIndex % 25 == 0 && (bw?.CancellationPending ?? false)) throw new OperationCanceledException();                    // Column 0=FileGroup checksum' column 1=Tag name.                  var baseKey = MakeBaseKey(row[0]' row[1]);                    for (var sourceColumnIndex = 2;                      sourceColumnIndex < table.Columns.Count - 1; // Subtract 1' because last column is ALWAYS the comment.                      ++sourceColumnIndex)                  {                      var languageValue = row[sourceColumnIndex] as string;                      var languageCode =                          ExcelExportController.IsFileName(table.Columns[sourceColumnIndex].ColumnName)                              ? new LanguageCodeDetection(Project)                                  .DetectLanguageCodeFromFileName(                                      fileGroup.ParentSettings'                                      table.Columns[sourceColumnIndex].ColumnName)                              : table.Columns[sourceColumnIndex].ColumnName;                      languageCode = languageCode.ToLowerInvariant();                        if (/*lcs.Contains(languageCode.Substring(0' 2))||*/                          lcs.Contains(languageCode))                      {                          var key = MakeFullKey(baseKey' languageCode);                          PutSettingValue(key' languageValue);                      }                  }                    rowIndex++;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Snapshots,SnapshotController,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Snapshots\SnapshotController.cs,doTakeSnapshot,The following statement contains a magic number: foreach (DataRow row in table.Rows)              {                  if (rowIndex % 25 == 0 && (bw?.CancellationPending ?? false)) throw new OperationCanceledException();                    // Column 0=FileGroup checksum' column 1=Tag name.                  var baseKey = MakeBaseKey(row[0]' row[1]);                    for (var sourceColumnIndex = 2;                      sourceColumnIndex < table.Columns.Count - 1; // Subtract 1' because last column is ALWAYS the comment.                      ++sourceColumnIndex)                  {                      var languageValue = row[sourceColumnIndex] as string;                      var languageCode =                          ExcelExportController.IsFileName(table.Columns[sourceColumnIndex].ColumnName)                              ? new LanguageCodeDetection(Project)                                  .DetectLanguageCodeFromFileName(                                      fileGroup.ParentSettings'                                      table.Columns[sourceColumnIndex].ColumnName)                              : table.Columns[sourceColumnIndex].ColumnName;                      languageCode = languageCode.ToLowerInvariant();                        if (/*lcs.Contains(languageCode.Substring(0' 2))||*/                          lcs.Contains(languageCode))                      {                          var key = MakeFullKey(baseKey' languageCode);                          PutSettingValue(key' languageValue);                      }                  }                    rowIndex++;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Translation.Azure,AzureAuthToken,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\Azure\AzureAuthToken.cs,GetAccessTokenAsync,The following statement contains a magic number: using (var client = new HttpClient())              using (var request = new HttpRequestMessage())              {                  request.Method = HttpMethod.Post;                  request.RequestUri = ServiceUrl;                  request.Content = new StringContent(string.Empty);                  request.Headers.TryAddWithoutValidation(OcpApimSubscriptionKeyHeader' this.SubscriptionKey);                  client.Timeout = TimeSpan.FromSeconds(2);                  var response = await client.SendAsync(request);                  this.RequestStatusCode = response.StatusCode;                  response.EnsureSuccessStatusCode();                  var token = await response.Content.ReadAsStringAsync();                  _storedTokenTime = DateTime.Now;                  _storedTokenValue = "Bearer " + token;                  return _storedTokenValue;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Translation.Bing,BingTranslationHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\Bing\BingTranslationHelper.cs,GetAccessToken,The following statement contains a magic number: if (accessTokenNode == null)              {                  throw new Exception(                      Resources.BingTranslationHelper_GetAccessToken_No_access_token_value_can_be_read_from_access_token_);              }              else              {                  var expirationNode = xml.SelectSingleNode(@"/root/expires_in");                  if (expirationNode == null)                  {                      throw new Exception(                          Resources.BingTranslationHelper_GetAccessToken_No_expiration_date_can_be_read_from_access_token_);                  }                  else                  {                      var result =                          new AccessToken                          {                              Token = accessTokenNode.InnerText'                              ValidUntil = DateTime.Now.AddSeconds(                                  Convert.ToInt32(expirationNode.InnerText) - 5)                          };                        return result;                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Translation,TranslationHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\TranslationHelper.cs,IsSupportedLanguage,The following statement contains a magic number: return languageInfos.Any(                  translationLanguageInfo =>                      translationLanguageInfo.LanguageCode.EqualsNoCase(ci.TwoLetterISOLanguageName) ||                        CultureHelper.CreateCultureErrorTolerant(translationLanguageInfo.LanguageCode).Name                          .EqualsNoCase(ci.Name) ||                        CultureHelper.CreateCultureErrorTolerant(translationLanguageInfo.LanguageCode).Name                          .SubstringIntelligent(0' 2).EqualsNoCase(ci.Name.SubstringIntelligent(0' 2)));
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Translation,TranslationHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\TranslationHelper.cs,IsSupportedLanguage,The following statement contains a magic number: return languageInfos.Any(                  translationLanguageInfo =>                      translationLanguageInfo.LanguageCode.EqualsNoCase(ci.TwoLetterISOLanguageName) ||                        CultureHelper.CreateCultureErrorTolerant(translationLanguageInfo.LanguageCode).Name                          .EqualsNoCase(ci.Name) ||                        CultureHelper.CreateCultureErrorTolerant(translationLanguageInfo.LanguageCode).Name                          .SubstringIntelligent(0' 2).EqualsNoCase(ci.Name.SubstringIntelligent(0' 2)));
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Translation,TranslationHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\TranslationHelper.cs,DoMapCultureToLanguageCode,The following statement contains a magic number: foreach (var translationLanguageInfo in availableLanguageInfos)              {                  if (                      translationLanguageInfo.LanguageCode.EqualsNoCase(cultureInfo.TwoLetterISOLanguageName) ||                        CultureHelper.CreateCultureErrorTolerant(translationLanguageInfo.LanguageCode).Name.EqualsNoCase(                          cultureInfo.Name) ||                        CultureHelper.CreateCultureErrorTolerant(translationLanguageInfo.LanguageCode).Name                          .SubstringIntelligent(0' 2).EqualsNoCase(cultureInfo.Name.SubstringIntelligent(0' 2)))                  {                      return translationLanguageInfo.LanguageCode;                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Translation,TranslationHelper,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Translation\TranslationHelper.cs,DoMapCultureToLanguageCode,The following statement contains a magic number: foreach (var translationLanguageInfo in availableLanguageInfos)              {                  if (                      translationLanguageInfo.LanguageCode.EqualsNoCase(cultureInfo.TwoLetterISOLanguageName) ||                        CultureHelper.CreateCultureErrorTolerant(translationLanguageInfo.LanguageCode).Name.EqualsNoCase(                          cultureInfo.Name) ||                        CultureHelper.CreateCultureErrorTolerant(translationLanguageInfo.LanguageCode).Name                          .SubstringIntelligent(0' 2).EqualsNoCase(cultureInfo.Name.SubstringIntelligent(0' 2)))                  {                      return translationLanguageInfo.LanguageCode;                  }              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.UpdateChecker,UpdateCheckerService,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\UpdateChecker\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024)                          && (string.Compare(wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0)))              {                  return true;              }
Magic Number,ZetaResourceEditor.RuntimeBusinessLogic.Web_References.ZetaUploader,ZetaUploaderCommunication,C:\repos\UweKeim_ZetaResourceEditor\Source\RuntimeBusinessLogic\Web References\ZetaUploader\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024)                          && (string.Compare(wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0)))              {                  return true;              }
