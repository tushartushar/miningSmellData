Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The method has 201 lines of code.
Long Method,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,InitializeComponent,The method has 111 lines of code.
Complex Method,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,adjustSize,Cyclomatic complexity of the method is 8
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,AutoWidthHyperLinkEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\AutoWidthHyperLinkEdit.cs,OnMouseLeave,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyBoldHyperLinkEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyBoldHyperLinkEdit.cs,OnCreateControl,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyColoredHyperLinkEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyColoredHyperLinkEdit.cs,OnCreateControl,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyFullHyperLinkEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyFullHyperLinkEdit.cs,OnCreateControl,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyFullHyperLinkEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyFullHyperLinkEdit.cs,OnMouseLeave,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyHyperLinkEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyHyperLinkEdit.cs,OnCreateControl,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyLargeHyperLinkEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyLargeHyperLinkEdit.cs,OnCreateControl,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomMemoEdit,MemoEditScrollbarAdjuster,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomMemoEdit\MemoEditScrollbarAdjuster.cs,adjustScrollbars,The length of the statement  "			// http://stackoverflow.com/questions/73110/how-can-i-show-scrollbars-on-a-system-windows-forms-textbox-only-when-the-text-d " is 124.
Long Statement,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,checkEnsureInsidePanel,The length of the statement  "                    throw new Exception(@"Please place the wizard inside a panel that is set to a transparent background color' and no border."); " is 125.
Long Statement,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The length of the statement  "						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort); " is 126.
Long Statement,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The length of the statement  "						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry); " is 126.
Long Statement,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The length of the statement  "						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel); " is 123.
Long Statement,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MyMessageBoxTemplateForm)); " is 144.
Long Statement,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,InitializeComponent,The length of the statement  "            this.panelControl1.Appearance.BackColor = ((System.Drawing.Color)(resources.GetObject("panelControl1.Appearance.BackColor"))); " is 126.
Complex Conditional,ExtendedControlsLibrary.General.Base,DevExpressRibbonFormBase,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\Base\DevExpressRibbonFormBase.cs,OnKeyDown,The conditional expression  "e.KeyCode == Keys.F1 && !e.Alt && !e.Control && !e.Shift"  is complex.
Complex Conditional,ExtendedControlsLibrary.General.Base,DevExpressXtraFormBase,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\Base\DevExpressXtraFormBase.cs,OnKeyDown,The conditional expression  "!e.Handled && e.KeyCode == Keys.F1 && !e.Alt && !e.Control && !e.Shift"  is complex.
Magic Number,ExtendedControlsLibrary,DesignModeHelper,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\DesignModeHelper.cs,IsFontInstalled,The following statement contains a magic number: using (var testFont = new Font(fontName' 8))              {                  return 0 == String.Compare(                      fontName'                      testFont.Name'                      StringComparison.InvariantCultureIgnoreCase);              }
Magic Number,ExtendedControlsLibrary.General.Base,DevExpressXtraFormBase,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\Base\DevExpressXtraFormBase.cs,saveState,The following statement contains a magic number: if (c.Horizontal)              {                  if (c.FixedPanel == SplitFixedPanel.Panel1 ||                      c.FixedPanel == SplitFixedPanel.None)                  {                      realDistance = c.SplitterPosition;                  }                  else                  {                      if (c.FixedPanel != SplitFixedPanel.Panel2)                      {                          throw new Exception(@"FixedPanel must be Panel2.");                      }                        realDistance = c.Width - c.SplitterPosition;                  }                    percentageDistance = ((double)c.SplitterPosition / c.Width) * 100.0;              }              else              {                  if (c.FixedPanel == SplitFixedPanel.Panel1 ||                      c.FixedPanel == SplitFixedPanel.None)                  {                      realDistance = c.SplitterPosition;                  }                  else                  {                      if (c.FixedPanel != SplitFixedPanel.Panel2)                      {                          throw new Exception(@"FixedPanel must be Panel2.");                      }                        realDistance = c.Height - c.SplitterPosition;                  }                    percentageDistance = ((double)c.SplitterPosition / c.Height) * 100.0;              }
Magic Number,ExtendedControlsLibrary.General.Base,DevExpressXtraFormBase,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\Base\DevExpressXtraFormBase.cs,saveState,The following statement contains a magic number: if (c.Horizontal)              {                  if (c.FixedPanel == SplitFixedPanel.Panel1 ||                      c.FixedPanel == SplitFixedPanel.None)                  {                      realDistance = c.SplitterPosition;                  }                  else                  {                      if (c.FixedPanel != SplitFixedPanel.Panel2)                      {                          throw new Exception(@"FixedPanel must be Panel2.");                      }                        realDistance = c.Width - c.SplitterPosition;                  }                    percentageDistance = ((double)c.SplitterPosition / c.Width) * 100.0;              }              else              {                  if (c.FixedPanel == SplitFixedPanel.Panel1 ||                      c.FixedPanel == SplitFixedPanel.None)                  {                      realDistance = c.SplitterPosition;                  }                  else                  {                      if (c.FixedPanel != SplitFixedPanel.Panel2)                      {                          throw new Exception(@"FixedPanel must be Panel2.");                      }                        realDistance = c.Height - c.SplitterPosition;                  }                    percentageDistance = ((double)c.SplitterPosition / c.Height) * 100.0;              }
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueButtonEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueButtonEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)              {                  using (new ExtendedManagedCueTextEdit.FocusPreserver(this))                  {                      var dx = Math.Max(3' Controls[0].Top);                      var dy = Math.Max(3' Controls[0].Left) * 2;                        _cueLabel.Top = Top + dx;                      _cueLabel.Left = Left + dy;                        _cueLabel.Width = Width - 4 * dx - buttonsWidths;                      _cueLabel.Height = Height - 2 * dy;                  }              }
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueButtonEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueButtonEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)              {                  using (new ExtendedManagedCueTextEdit.FocusPreserver(this))                  {                      var dx = Math.Max(3' Controls[0].Top);                      var dy = Math.Max(3' Controls[0].Left) * 2;                        _cueLabel.Top = Top + dx;                      _cueLabel.Left = Left + dy;                        _cueLabel.Width = Width - 4 * dx - buttonsWidths;                      _cueLabel.Height = Height - 2 * dy;                  }              }
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueButtonEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueButtonEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)              {                  using (new ExtendedManagedCueTextEdit.FocusPreserver(this))                  {                      var dx = Math.Max(3' Controls[0].Top);                      var dy = Math.Max(3' Controls[0].Left) * 2;                        _cueLabel.Top = Top + dx;                      _cueLabel.Left = Left + dy;                        _cueLabel.Width = Width - 4 * dx - buttonsWidths;                      _cueLabel.Height = Height - 2 * dy;                  }              }
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueButtonEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueButtonEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)              {                  using (new ExtendedManagedCueTextEdit.FocusPreserver(this))                  {                      var dx = Math.Max(3' Controls[0].Top);                      var dy = Math.Max(3' Controls[0].Left) * 2;                        _cueLabel.Top = Top + dx;                      _cueLabel.Left = Left + dy;                        _cueLabel.Width = Width - 4 * dx - buttonsWidths;                      _cueLabel.Height = Height - 2 * dy;                  }              }
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueButtonEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueButtonEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)              {                  using (new ExtendedManagedCueTextEdit.FocusPreserver(this))                  {                      var dx = Math.Max(3' Controls[0].Top);                      var dy = Math.Max(3' Controls[0].Left) * 2;                        _cueLabel.Top = Top + dx;                      _cueLabel.Left = Left + dy;                        _cueLabel.Width = Width - 4 * dx - buttonsWidths;                      _cueLabel.Height = Height - 2 * dy;                  }              }
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueComboBoxEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueComboBoxEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)              {                  using (new ExtendedManagedCueTextEdit.FocusPreserver(this))                  {                      var dx = Math.Max(3' Controls[0].Top);                      var dy = Math.Max(3' Controls[0].Left) * 2;                        _cueLabel.Top = Top + dx;                      _cueLabel.Left = Left + dy;                        _cueLabel.Width = Width - 4 * dx - buttonsWidths;                      _cueLabel.Height = Height - 2 * dy;                  }              }
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueComboBoxEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueComboBoxEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)              {                  using (new ExtendedManagedCueTextEdit.FocusPreserver(this))                  {                      var dx = Math.Max(3' Controls[0].Top);                      var dy = Math.Max(3' Controls[0].Left) * 2;                        _cueLabel.Top = Top + dx;                      _cueLabel.Left = Left + dy;                        _cueLabel.Width = Width - 4 * dx - buttonsWidths;                      _cueLabel.Height = Height - 2 * dy;                  }              }
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueComboBoxEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueComboBoxEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)              {                  using (new ExtendedManagedCueTextEdit.FocusPreserver(this))                  {                      var dx = Math.Max(3' Controls[0].Top);                      var dy = Math.Max(3' Controls[0].Left) * 2;                        _cueLabel.Top = Top + dx;                      _cueLabel.Left = Left + dy;                        _cueLabel.Width = Width - 4 * dx - buttonsWidths;                      _cueLabel.Height = Height - 2 * dy;                  }              }
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueComboBoxEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueComboBoxEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)              {                  using (new ExtendedManagedCueTextEdit.FocusPreserver(this))                  {                      var dx = Math.Max(3' Controls[0].Top);                      var dy = Math.Max(3' Controls[0].Left) * 2;                        _cueLabel.Top = Top + dx;                      _cueLabel.Left = Left + dy;                        _cueLabel.Width = Width - 4 * dx - buttonsWidths;                      _cueLabel.Height = Height - 2 * dy;                  }              }
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueComboBoxEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueComboBoxEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)              {                  using (new ExtendedManagedCueTextEdit.FocusPreserver(this))                  {                      var dx = Math.Max(3' Controls[0].Top);                      var dy = Math.Max(3' Controls[0].Left) * 2;                        _cueLabel.Top = Top + dx;                      _cueLabel.Left = Left + dy;                        _cueLabel.Width = Width - 4 * dx - buttonsWidths;                      _cueLabel.Height = Height - 2 * dy;                  }              }
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueMemoEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueMemoEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)  			{  				using (new ExtendedManagedCueTextEdit.FocusPreserver(this))  				{  					var dx = Controls[0].Top + 3;  					var dy = (Controls[0].Left + 4) * 2;    					_cueLabel.Top = Top + dx;  					_cueLabel.Left = Left + dy;    					_cueLabel.Width = Width - 5 * dx - scrollHelper.VScroll.GetWidth();  					_cueLabel.Height = Height - 2 * dy;  				}  			}
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueMemoEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueMemoEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)  			{  				using (new ExtendedManagedCueTextEdit.FocusPreserver(this))  				{  					var dx = Controls[0].Top + 3;  					var dy = (Controls[0].Left + 4) * 2;    					_cueLabel.Top = Top + dx;  					_cueLabel.Left = Left + dy;    					_cueLabel.Width = Width - 5 * dx - scrollHelper.VScroll.GetWidth();  					_cueLabel.Height = Height - 2 * dy;  				}  			}
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueMemoEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueMemoEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)  			{  				using (new ExtendedManagedCueTextEdit.FocusPreserver(this))  				{  					var dx = Controls[0].Top + 3;  					var dy = (Controls[0].Left + 4) * 2;    					_cueLabel.Top = Top + dx;  					_cueLabel.Left = Left + dy;    					_cueLabel.Width = Width - 5 * dx - scrollHelper.VScroll.GetWidth();  					_cueLabel.Height = Height - 2 * dy;  				}  			}
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueMemoEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueMemoEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)  			{  				using (new ExtendedManagedCueTextEdit.FocusPreserver(this))  				{  					var dx = Controls[0].Top + 3;  					var dy = (Controls[0].Left + 4) * 2;    					_cueLabel.Top = Top + dx;  					_cueLabel.Left = Left + dy;    					_cueLabel.Width = Width - 5 * dx - scrollHelper.VScroll.GetWidth();  					_cueLabel.Height = Height - 2 * dy;  				}  			}
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueMemoEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueMemoEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)  			{  				using (new ExtendedManagedCueTextEdit.FocusPreserver(this))  				{  					var dx = Controls[0].Top + 3;  					var dy = (Controls[0].Left + 4) * 2;    					_cueLabel.Top = Top + dx;  					_cueLabel.Left = Left + dy;    					_cueLabel.Width = Width - 5 * dx - scrollHelper.VScroll.GetWidth();  					_cueLabel.Height = Height - 2 * dy;  				}  			}
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueTextEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueTextEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)  			{  				using (new FocusPreserver(this))  				{  					var dx = Math.Max(3' Controls[0].Top);  					var dy = Math.Max(3' Controls[0].Left) * 2;    					_cueLabel.Top = Top + dx;  					_cueLabel.Left = Left + dy;    					_cueLabel.Width = Width - 4 * dx;  					_cueLabel.Height = Height - 2 * dy;  				}  			}
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueTextEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueTextEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)  			{  				using (new FocusPreserver(this))  				{  					var dx = Math.Max(3' Controls[0].Top);  					var dy = Math.Max(3' Controls[0].Left) * 2;    					_cueLabel.Top = Top + dx;  					_cueLabel.Left = Left + dy;    					_cueLabel.Width = Width - 4 * dx;  					_cueLabel.Height = Height - 2 * dy;  				}  			}
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueTextEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueTextEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)  			{  				using (new FocusPreserver(this))  				{  					var dx = Math.Max(3' Controls[0].Top);  					var dy = Math.Max(3' Controls[0].Left) * 2;    					_cueLabel.Top = Top + dx;  					_cueLabel.Left = Left + dy;    					_cueLabel.Width = Width - 4 * dx;  					_cueLabel.Height = Height - 2 * dy;  				}  			}
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueTextEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueTextEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)  			{  				using (new FocusPreserver(this))  				{  					var dx = Math.Max(3' Controls[0].Top);  					var dy = Math.Max(3' Controls[0].Left) * 2;    					_cueLabel.Top = Top + dx;  					_cueLabel.Left = Left + dy;    					_cueLabel.Width = Width - 4 * dx;  					_cueLabel.Height = Height - 2 * dy;  				}  			}
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueTextEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueTextEdit.cs,repositionLabel,The following statement contains a magic number: if (_cueLabel != null)  			{  				using (new FocusPreserver(this))  				{  					var dx = Math.Max(3' Controls[0].Top);  					var dy = Math.Max(3' Controls[0].Left) * 2;    					_cueLabel.Top = Top + dx;  					_cueLabel.Left = Left + dy;    					_cueLabel.Width = Width - 4 * dx;  					_cueLabel.Height = Height - 2 * dy;  				}  			}
Magic Number,ExtendedControlsLibrary.General.ExtendedTree,ExtendedTreeListControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedTree\ExtendedTreeListControl.cs,RaiseCustomDrawEmptyArea,The following statement contains a magic number: if (!string.IsNullOrEmpty(EmptyText))              {                  if (VisibleNodesCount > 0) return;                    // http://www.devexpress.com/Support/Center/Question/Details/Q496805                    e.Graphics.FillRectangle(SystemBrushes.Window' e.Bounds);                  e.Graphics.DrawString(EmptyText' Font' SystemBrushes.ControlDark'                      new PointF(e.Bounds.Width/2 - 40' e.Bounds.Height/2.0f));                    e.Handled = true;              }
Magic Number,ExtendedControlsLibrary.General.ExtendedTree,ExtendedTreeListControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedTree\ExtendedTreeListControl.cs,RaiseCustomDrawEmptyArea,The following statement contains a magic number: if (!string.IsNullOrEmpty(EmptyText))              {                  if (VisibleNodesCount > 0) return;                    // http://www.devexpress.com/Support/Center/Question/Details/Q496805                    e.Graphics.FillRectangle(SystemBrushes.Window' e.Bounds);                  e.Graphics.DrawString(EmptyText' Font' SystemBrushes.ControlDark'                      new PointF(e.Bounds.Width/2 - 40' e.Bounds.Height/2.0f));                    e.Handled = true;              }
Magic Number,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,AutoWidthHyperLinkEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\AutoWidthHyperLinkEdit.cs,GetWidth,The following statement contains a magic number: var s = ViewInfo.PaintAppearance.CalcTextSize(  				Graphics.FromImage(new Bitmap(10' 10))'  				ViewInfo.DisplayText'  				1000);
Magic Number,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,AutoWidthHyperLinkEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\AutoWidthHyperLinkEdit.cs,GetWidth,The following statement contains a magic number: var s = ViewInfo.PaintAppearance.CalcTextSize(  				Graphics.FromImage(new Bitmap(10' 10))'  				ViewInfo.DisplayText'  				1000);
Magic Number,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,AutoWidthHyperLinkEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\AutoWidthHyperLinkEdit.cs,GetWidth,The following statement contains a magic number: var s = ViewInfo.PaintAppearance.CalcTextSize(  				Graphics.FromImage(new Bitmap(10' 10))'  				ViewInfo.DisplayText'  				1000);
Magic Number,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,AutoWidthHyperLinkEdit,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\AutoWidthHyperLinkEdit.cs,GetWidth,The following statement contains a magic number: return s.ToSize().Width + 8;
Magic Number,ExtendedControlsLibrary.Skinning.CustomPropertyGrid,MyPropertyGridControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomPropertyGrid\MyPropertyGridControl.cs,MyPropertyGridControl_CustomDrawRowHeaderIndent,The following statement contains a magic number: if (applyDrawing(e))              {                  if (e.Row.VisibleIndex%2 == 0)                  {                      foreach (IndentInfo info in e.RowIndents)                      {                          info.Style.Combine(_alternatingRowStyle);                      }                  }                  else                  {                      foreach (IndentInfo info in e.RowIndents)                      {                          info.Style.Combine(checkGetNormalRowStyle(e.Row));                      }                  }              }
Magic Number,ExtendedControlsLibrary.Skinning.CustomPropertyGrid,MyPropertyGridControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomPropertyGrid\MyPropertyGridControl.cs,applyDrawing,The following statement contains a magic number: if (WantAlternatingRows && !(e.Row is CategoryRow) && FocusedRow != e.Row)              {                  if (e.Row.VisibleIndex%2 == 0)                  {                      e.Appearance.Combine(_alternatingRowStyle);                  }                  else                  {                      e.Appearance.Combine(checkGetNormalRowStyle(e.Row));                  }                    return true;              }              else              {                  return false;              }
Magic Number,ExtendedControlsLibrary.Skinning.CustomTabControl,MyHelperXtraTabControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomTabControl\MyHelperXtraTabControl.cs,makeTabControlInvisible,The following statement contains a magic number: tabControl.Padding = new Padding(9);
Magic Number,ExtendedControlsLibrary.Skinning.CustomTabControl,MyHelperXtraTabControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomTabControl\MyHelperXtraTabControl.cs,makeTabControlInvisible,The following statement contains a magic number: tabControl.Margin = new Padding(9);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetBackButtonBounds,The following statement contains a magic number: return new Rectangle(-50' -50' 32' 32);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetBackButtonBounds,The following statement contains a magic number: return new Rectangle(-50' -50' 32' 32);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetBackButtonBounds,The following statement contains a magic number: return new Rectangle(-50' -50' 32' 32);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetBackButtonBounds,The following statement contains a magic number: return new Rectangle(-50' -50' 32' 32);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,UpdateButtonsLocation,The following statement contains a magic number: prevButtonInfo.Location = new Point(                  nextButtonInfo.Location.X - prevButtonInfo.Size.Width - 4'                  GetCommandButtonTopLocation(prevButtonInfo));
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetCommandButtonTopLocation,The following statement contains a magic number: return ((NoHeaderWizardViewInfo) ViewInfo).GetOwnerInternal().ClientRectangle.Bottom -                     WizardBaseConsts.CommandAreaHeight/2 - button.Size.Height/2;
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetCommandButtonTopLocation,The following statement contains a magic number: return ((NoHeaderWizardViewInfo) ViewInfo).GetOwnerInternal().ClientRectangle.Bottom -                     WizardBaseConsts.CommandAreaHeight/2 - button.Size.Height/2;
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,RaiseCustomizeCommandButtons,The following statement contains a magic number: if (WizardStyle == WizardStyle.WizardAero)              {                  var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);                  const int buttonDistanceX = 5;                    var orderedButtons =                      new List<ButtonInfo>                  {                      e.PrevButton'                      e.NextButton'                      e.CancelButton'                      e.FinishButton'                      e.HelpButton                  };                    var orderedVisibleButtons =                      orderedButtons.Where(b => b.Visible).ToArray();                    // Lückenlos platzieren.                    var startX =                      _lowerRight.X -                      (orderedVisibleButtons.Length * buttonSize.Width +                               (orderedVisibleButtons.Length - 1) * buttonDistanceX);                  var startY = _lowerRight.Y - buttonSize.Height;                    foreach (var button in orderedVisibleButtons)                  {                      button.Location = new Point(startX' startY);                        var b = getButton(button);                      b.Size = buttonSize;                        startX += buttonSize.Width + buttonDistanceX;                  }                    /*                  var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);                    var prevButton = getButton(e.PrevButton);                  var nextButton = getButton(e.NextButton);                  var cancelButton = getButton(e.CancelButton);                  var finishButton = getButton(e.FinishButton);                  var helpButton = getButton(e.HelpButton);                    var delta = new Size(buttonSize.Width - nextButton.Width' buttonSize.Height - nextButton.Height);                    if (delta.Width > 0 || delta.Height > 0)                  {                      prevButton.Size = buttonSize;                      nextButton.Size = buttonSize;                      cancelButton.Size = buttonSize;                      finishButton.Size = buttonSize;                      helpButton.Size = buttonSize;                        // --                        changeLocation(e.CancelButton' -0 * delta.Width' -delta.Height / 2);                      changeLocation(e.FinishButton' -1 * delta.Width' -delta.Height / 2);                      changeLocation(e.NextButton' -1 * delta.Width' -delta.Height / 2);                  }                    // --                    if (e.PrevButton.Visible)                  {                      var leftmostLoc = getLeftmostLocation(e);                        e.PrevButton.Location = new Point(                          leftmostLoc - e.NextButton.Size.Width - WizardAeroConsts.CommandButtonSpacing'                          e.NextButton.Location.Y);                  }                  */              }
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,RaiseCustomizeCommandButtons,The following statement contains a magic number: if (WizardStyle == WizardStyle.WizardAero)              {                  var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);                  const int buttonDistanceX = 5;                    var orderedButtons =                      new List<ButtonInfo>                  {                      e.PrevButton'                      e.NextButton'                      e.CancelButton'                      e.FinishButton'                      e.HelpButton                  };                    var orderedVisibleButtons =                      orderedButtons.Where(b => b.Visible).ToArray();                    // Lückenlos platzieren.                    var startX =                      _lowerRight.X -                      (orderedVisibleButtons.Length * buttonSize.Width +                               (orderedVisibleButtons.Length - 1) * buttonDistanceX);                  var startY = _lowerRight.Y - buttonSize.Height;                    foreach (var button in orderedVisibleButtons)                  {                      button.Location = new Point(startX' startY);                        var b = getButton(button);                      b.Size = buttonSize;                        startX += buttonSize.Width + buttonDistanceX;                  }                    /*                  var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);                    var prevButton = getButton(e.PrevButton);                  var nextButton = getButton(e.NextButton);                  var cancelButton = getButton(e.CancelButton);                  var finishButton = getButton(e.FinishButton);                  var helpButton = getButton(e.HelpButton);                    var delta = new Size(buttonSize.Width - nextButton.Width' buttonSize.Height - nextButton.Height);                    if (delta.Width > 0 || delta.Height > 0)                  {                      prevButton.Size = buttonSize;                      nextButton.Size = buttonSize;                      cancelButton.Size = buttonSize;                      finishButton.Size = buttonSize;                      helpButton.Size = buttonSize;                        // --                        changeLocation(e.CancelButton' -0 * delta.Width' -delta.Height / 2);                      changeLocation(e.FinishButton' -1 * delta.Width' -delta.Height / 2);                      changeLocation(e.NextButton' -1 * delta.Width' -delta.Height / 2);                  }                    // --                    if (e.PrevButton.Visible)                  {                      var leftmostLoc = getLeftmostLocation(e);                        e.PrevButton.Location = new Point(                          leftmostLoc - e.NextButton.Size.Width - WizardAeroConsts.CommandButtonSpacing'                          e.NextButton.Location.Y);                  }                  */              }
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,RaiseCustomizeCommandButtons,The following statement contains a magic number: if (WizardStyle == WizardStyle.WizardAero)              {                  var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);                  const int buttonDistanceX = 5;                    var orderedButtons =                      new List<ButtonInfo>                  {                      e.PrevButton'                      e.NextButton'                      e.CancelButton'                      e.FinishButton'                      e.HelpButton                  };                    var orderedVisibleButtons =                      orderedButtons.Where(b => b.Visible).ToArray();                    // Lückenlos platzieren.                    var startX =                      _lowerRight.X -                      (orderedVisibleButtons.Length * buttonSize.Width +                               (orderedVisibleButtons.Length - 1) * buttonDistanceX);                  var startY = _lowerRight.Y - buttonSize.Height;                    foreach (var button in orderedVisibleButtons)                  {                      button.Location = new Point(startX' startY);                        var b = getButton(button);                      b.Size = buttonSize;                        startX += buttonSize.Width + buttonDistanceX;                  }                    /*                  var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);                    var prevButton = getButton(e.PrevButton);                  var nextButton = getButton(e.NextButton);                  var cancelButton = getButton(e.CancelButton);                  var finishButton = getButton(e.FinishButton);                  var helpButton = getButton(e.HelpButton);                    var delta = new Size(buttonSize.Width - nextButton.Width' buttonSize.Height - nextButton.Height);                    if (delta.Width > 0 || delta.Height > 0)                  {                      prevButton.Size = buttonSize;                      nextButton.Size = buttonSize;                      cancelButton.Size = buttonSize;                      finishButton.Size = buttonSize;                      helpButton.Size = buttonSize;                        // --                        changeLocation(e.CancelButton' -0 * delta.Width' -delta.Height / 2);                      changeLocation(e.FinishButton' -1 * delta.Width' -delta.Height / 2);                      changeLocation(e.NextButton' -1 * delta.Width' -delta.Height / 2);                  }                    // --                    if (e.PrevButton.Visible)                  {                      var leftmostLoc = getLeftmostLocation(e);                        e.PrevButton.Location = new Point(                          leftmostLoc - e.NextButton.Size.Width - WizardAeroConsts.CommandButtonSpacing'                          e.NextButton.Location.Y);                  }                  */              }
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,RaiseCustomizeCommandButtons,The following statement contains a magic number: if (WizardStyle == WizardStyle.WizardAero)              {                  var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);                  const int buttonDistanceX = 5;                    var orderedButtons =                      new List<ButtonInfo>                  {                      e.PrevButton'                      e.NextButton'                      e.CancelButton'                      e.FinishButton'                      e.HelpButton                  };                    var orderedVisibleButtons =                      orderedButtons.Where(b => b.Visible).ToArray();                    // Lückenlos platzieren.                    var startX =                      _lowerRight.X -                      (orderedVisibleButtons.Length * buttonSize.Width +                               (orderedVisibleButtons.Length - 1) * buttonDistanceX);                  var startY = _lowerRight.Y - buttonSize.Height;                    foreach (var button in orderedVisibleButtons)                  {                      button.Location = new Point(startX' startY);                        var b = getButton(button);                      b.Size = buttonSize;                        startX += buttonSize.Width + buttonDistanceX;                  }                    /*                  var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);                    var prevButton = getButton(e.PrevButton);                  var nextButton = getButton(e.NextButton);                  var cancelButton = getButton(e.CancelButton);                  var finishButton = getButton(e.FinishButton);                  var helpButton = getButton(e.HelpButton);                    var delta = new Size(buttonSize.Width - nextButton.Width' buttonSize.Height - nextButton.Height);                    if (delta.Width > 0 || delta.Height > 0)                  {                      prevButton.Size = buttonSize;                      nextButton.Size = buttonSize;                      cancelButton.Size = buttonSize;                      finishButton.Size = buttonSize;                      helpButton.Size = buttonSize;                        // --                        changeLocation(e.CancelButton' -0 * delta.Width' -delta.Height / 2);                      changeLocation(e.FinishButton' -1 * delta.Width' -delta.Height / 2);                      changeLocation(e.NextButton' -1 * delta.Width' -delta.Height / 2);                  }                    // --                    if (e.PrevButton.Visible)                  {                      var leftmostLoc = getLeftmostLocation(e);                        e.PrevButton.Location = new Point(                          leftmostLoc - e.NextButton.Size.Width - WizardAeroConsts.CommandButtonSpacing'                          e.NextButton.Location.Y);                  }                  */              }
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,RaiseCustomizeCommandButtons,The following statement contains a magic number: if (WizardStyle == WizardStyle.WizardAero)              {                  var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);                  const int buttonDistanceX = 5;                    var orderedButtons =                      new List<ButtonInfo>                  {                      e.PrevButton'                      e.NextButton'                      e.CancelButton'                      e.FinishButton'                      e.HelpButton                  };                    var orderedVisibleButtons =                      orderedButtons.Where(b => b.Visible).ToArray();                    // Lückenlos platzieren.                    var startX =                      _lowerRight.X -                      (orderedVisibleButtons.Length * buttonSize.Width +                               (orderedVisibleButtons.Length - 1) * buttonDistanceX);                  var startY = _lowerRight.Y - buttonSize.Height;                    foreach (var button in orderedVisibleButtons)                  {                      button.Location = new Point(startX' startY);                        var b = getButton(button);                      b.Size = buttonSize;                        startX += buttonSize.Width + buttonDistanceX;                  }                    /*                  var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);                    var prevButton = getButton(e.PrevButton);                  var nextButton = getButton(e.NextButton);                  var cancelButton = getButton(e.CancelButton);                  var finishButton = getButton(e.FinishButton);                  var helpButton = getButton(e.HelpButton);                    var delta = new Size(buttonSize.Width - nextButton.Width' buttonSize.Height - nextButton.Height);                    if (delta.Width > 0 || delta.Height > 0)                  {                      prevButton.Size = buttonSize;                      nextButton.Size = buttonSize;                      cancelButton.Size = buttonSize;                      finishButton.Size = buttonSize;                      helpButton.Size = buttonSize;                        // --                        changeLocation(e.CancelButton' -0 * delta.Width' -delta.Height / 2);                      changeLocation(e.FinishButton' -1 * delta.Width' -delta.Height / 2);                      changeLocation(e.NextButton' -1 * delta.Width' -delta.Height / 2);                  }                    // --                    if (e.PrevButton.Visible)                  {                      var leftmostLoc = getLeftmostLocation(e);                        e.PrevButton.Location = new Point(                          leftmostLoc - e.NextButton.Size.Width - WizardAeroConsts.CommandButtonSpacing'                          e.NextButton.Location.Y);                  }                  */              }
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,getLeftmostLocation,The following statement contains a magic number: var left = 10000;
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,getLeftmostLocation,The following statement contains a magic number: return left == 10000 ? 0 : left;
Magic Number,ExtendedControlsLibrary.Skinning,SkinHelper,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\SkinHelper.cs,SkinHelper,The following statement contains a magic number: const int standardFontSizePixel = 13;
Magic Number,ExtendedControlsLibrary.Skinning,SkinHelper,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\SkinHelper.cs,SkinHelper,The following statement contains a magic number: var largeFontSizePixel = hasMainFont ? 17 : 16;
Magic Number,ExtendedControlsLibrary.Skinning,SkinHelper,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\SkinHelper.cs,SkinHelper,The following statement contains a magic number: var largeFontSizePixel = hasMainFont ? 17 : 16;
Magic Number,ExtendedControlsLibrary.Skinning,SkinHelper,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\SkinHelper.cs,SkinHelper,The following statement contains a magic number: const int smallFontSizePixel = 11;
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,MyMessageBoxTemplateForm_Load,The following statement contains a magic number: if (_info.CloseCountDown > TimeSpan.Zero && AcceptButton != null)              {                  // 1 Sekunde weniger' damit "0" nicht mehr angezeigt wird.                  const int subs = 1000;                    closeCountDownTimer.Interval = (int)_info.CloseCountDown.TotalMilliseconds - subs;                    _countdownStartedAt = DateTime.Now;                    closeCountDownTimer.Start();                    if (_info.VisualCloseCountDown)                  {                      updateVisualCountDownTimer.Start();                  }              }
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: if (buttonCount == 2)  			{  				Width -= buttonDelta;  				//_minWidth -= buttonDelta;  			}  			else if (buttonCount == 1)  			{  				Width -= buttonDelta * 2;  				//_minWidth -= buttonDelta * 2;  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: if (buttonCount == 2)  			{  				Width -= buttonDelta;  				//_minWidth -= buttonDelta;  			}  			else if (buttonCount == 1)  			{  				Width -= buttonDelta * 2;  				//_minWidth -= buttonDelta * 2;  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,resizeButton,The following statement contains a magic number: if (button.Visible)  			{  				using (var g = CreateGraphics())  				{  					var size = g.MeasureString(button.Text' SkinHelper.StandardFont);    					var borderDistance = button.Height * 0.5; // One height as distance.  					if (button.Width - 2 * borderDistance - size.Width < 0)  					{  						button.Width = (int)(size.Width + 2 * borderDistance);  					}  				}  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,resizeButton,The following statement contains a magic number: if (button.Visible)  			{  				using (var g = CreateGraphics())  				{  					var size = g.MeasureString(button.Text' SkinHelper.StandardFont);    					var borderDistance = button.Height * 0.5; // One height as distance.  					if (button.Width - 2 * borderDistance - size.Width < 0)  					{  						button.Width = (int)(size.Width + 2 * borderDistance);  					}  				}  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,resizeButton,The following statement contains a magic number: if (button.Visible)  			{  				using (var g = CreateGraphics())  				{  					var size = g.MeasureString(button.Text' SkinHelper.StandardFont);    					var borderDistance = button.Height * 0.5; // One height as distance.  					if (button.Width - 2 * borderDistance - size.Width < 0)  					{  						button.Width = (int)(size.Width + 2 * borderDistance);  					}  				}  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,adjustSize,The following statement contains a magic number: if (_info.Text != null)  			{  				for (var i = 0; i < 2; ++i)  				{  					var maxFormWidth = MaximumFormWidth;  					var maxTextBoxWidth = maxFormWidth - (Width - textControl.Width);    					var maxFormHeight = MaximumFormHeight;  					var maxTextBoxHeight = maxFormHeight - (Height - textControl.Height);    					// --                        //SizeF s;                      //using (var graphics = CreateGraphics())                      //{                      //    s = graphics.MeasureString(                      //        _info.Text'                      //        SkinHelper.StandardFont'                      //        new SizeF(maxTextBoxWidth' maxTextBoxHeight));                      //}                        // 2013-09-23' Uwe Keim: Geändert von Graphics.MeasureString zu TextRenderer.MeasureText'                      // weil lange Texte irgendwie abgeschnitten wurden.                      var s = TextRenderer.MeasureText(                          _info.Text'                          SkinHelper.StandardFont'                          new Size(maxTextBoxWidth' maxTextBoxHeight)'                          TextFormatFlags.WordBreak | TextFormatFlags.PreserveGraphicsClipping);    					var deltaWidth = s.Width - textControl.Width;  					if (deltaWidth > 0) Width += deltaWidth;    					var deltaHeight = s.Height - textControl.Height;  					if (deltaHeight > 0) Height += deltaHeight;    					// --  					// Buttons must be visible.    					var anotherPass = false;    					if (button1.Visible)  					{  						if (button1.Left < _buttonBorderDistance)  						{  							Width += _buttonBorderDistance - button1.Left;  							anotherPass = true;  						}  					}  					else if (button2.Visible)  					{  						if (button2.Left < _buttonBorderDistance)  						{  							Width += _buttonBorderDistance - button2.Left;  							anotherPass = true;  						}  					}  					else  					{  						if (button3.Left < _buttonBorderDistance)  						{  							Width += _buttonBorderDistance - button3.Left;  							anotherPass = true;  						}  					}    					// --    					if (anotherPass)  					{  						Height = _initialHeight;  					}  					else  					{  						break;  					}  				}  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.updateVisualCountDownTimer.Interval = 200;
Duplicate Code,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The method contains a code clone-set at the following line numbers (starting from the method definition): ((33' 52)' (181' 200))
Duplicate Code,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,C:\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The method contains a code clone-set at the following line numbers (starting from the method definition): ((69' 94)' (109' 134))
