Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The method has 201 lines of code.
Long Method,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,InitializeComponent,The method has 111 lines of code.
Complex Method,ExtendedControlsLibrary.General.Base,DevExpressXtraFormBase,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\Base\DevExpressXtraFormBase.cs,restoreState,Cyclomatic complexity of the method is 12
Complex Method,ExtendedControlsLibrary.General.Base,DevExpressXtraFormBase,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\Base\DevExpressXtraFormBase.cs,saveState,Cyclomatic complexity of the method is 9
Complex Method,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,Cyclomatic complexity of the method is 22
Complex Method,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,findButtonKey,Cyclomatic complexity of the method is 8
Complex Method,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,adjustSize,Cyclomatic complexity of the method is 11
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,AutoWidthHyperLinkEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\AutoWidthHyperLinkEdit.cs,OnMouseLeave,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyBoldHyperLinkEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyBoldHyperLinkEdit.cs,OnCreateControl,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyColoredHyperLinkEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyColoredHyperLinkEdit.cs,OnCreateControl,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyFullHyperLinkEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyFullHyperLinkEdit.cs,OnCreateControl,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyFullHyperLinkEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyFullHyperLinkEdit.cs,OnMouseLeave,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyHyperLinkEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyHyperLinkEdit.cs,OnCreateControl,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,MyLargeHyperLinkEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\MyLargeHyperLinkEdit.cs,OnCreateControl,The length of the statement  "			Properties.Appearance.Font = new Font(Properties.Appearance.Font' Properties.Appearance.Font.Style & ~FontStyle.Underline); " is 123.
Long Statement,ExtendedControlsLibrary.Skinning.CustomMemoEdit,MemoEditScrollbarAdjuster,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomMemoEdit\MemoEditScrollbarAdjuster.cs,adjustScrollbars,The length of the statement  "			// http://stackoverflow.com/questions/73110/how-can-i-show-scrollbars-on-a-system-windows-forms-textbox-only-when-the-text-d " is 124.
Long Statement,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,checkEnsureInsidePanel,The length of the statement  "                    throw new Exception(@"Please place the wizard inside a panel that is set to a transparent background color' and no border."); " is 125.
Long Statement,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The length of the statement  "						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort); " is 126.
Long Statement,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The length of the statement  "						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry); " is 126.
Long Statement,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The length of the statement  "						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel); " is 123.
Long Statement,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MyMessageBoxTemplateForm)); " is 144.
Long Statement,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,InitializeComponent,The length of the statement  "            this.panelControl1.Appearance.BackColor = ((System.Drawing.Color)(resources.GetObject("panelControl1.Appearance.BackColor"))); " is 126.
Complex Conditional,ExtendedControlsLibrary.General.Base,DevExpressRibbonFormBase,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\Base\DevExpressRibbonFormBase.cs,OnKeyDown,The conditional expression  "e.KeyCode == Keys.F1 && !e.Alt && !e.Control && !e.Shift"  is complex.
Complex Conditional,ExtendedControlsLibrary.General.Base,DevExpressXtraFormBase,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\Base\DevExpressXtraFormBase.cs,OnKeyDown,The conditional expression  "!e.Handled && e.KeyCode == Keys.F1 && !e.Alt && !e.Control && !e.Shift"  is complex.
Magic Number,ExtendedControlsLibrary.General.Base,DevExpressXtraFormBase,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\Base\DevExpressXtraFormBase.cs,saveState,The following statement contains a magic number: percentageDistance = ((double)c.SplitterPosition / c.Width) * 100.0;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueButtonEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueButtonEdit.cs,repositionLabel,The following statement contains a magic number: var dx = Math.Max(3' Controls[0].Top);
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueButtonEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueButtonEdit.cs,repositionLabel,The following statement contains a magic number: var dy = Math.Max(3' Controls[0].Left) * 2;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueButtonEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueButtonEdit.cs,repositionLabel,The following statement contains a magic number: var dy = Math.Max(3' Controls[0].Left) * 2;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueButtonEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueButtonEdit.cs,repositionLabel,The following statement contains a magic number: _cueLabel.Width = Width - 4 * dx - buttonsWidths;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueButtonEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueButtonEdit.cs,repositionLabel,The following statement contains a magic number: _cueLabel.Height = Height - 2 * dy;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueComboBoxEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueComboBoxEdit.cs,repositionLabel,The following statement contains a magic number: var dx = Math.Max(3' Controls[0].Top);
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueComboBoxEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueComboBoxEdit.cs,repositionLabel,The following statement contains a magic number: var dy = Math.Max(3' Controls[0].Left) * 2;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueComboBoxEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueComboBoxEdit.cs,repositionLabel,The following statement contains a magic number: var dy = Math.Max(3' Controls[0].Left) * 2;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueComboBoxEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueComboBoxEdit.cs,repositionLabel,The following statement contains a magic number: _cueLabel.Width = Width - 4 * dx - buttonsWidths;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueComboBoxEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueComboBoxEdit.cs,repositionLabel,The following statement contains a magic number: _cueLabel.Height = Height - 2 * dy;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueMemoEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueMemoEdit.cs,repositionLabel,The following statement contains a magic number: var dx = Controls[0].Top + 3;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueMemoEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueMemoEdit.cs,repositionLabel,The following statement contains a magic number: var dy = (Controls[0].Left + 4) * 2;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueMemoEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueMemoEdit.cs,repositionLabel,The following statement contains a magic number: var dy = (Controls[0].Left + 4) * 2;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueMemoEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueMemoEdit.cs,repositionLabel,The following statement contains a magic number: _cueLabel.Width = Width - 5 * dx - scrollHelper.VScroll.GetWidth();
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueMemoEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueMemoEdit.cs,repositionLabel,The following statement contains a magic number: _cueLabel.Height = Height - 2 * dy;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueTextEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueTextEdit.cs,repositionLabel,The following statement contains a magic number: var dx = Math.Max(3' Controls[0].Top);
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueTextEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueTextEdit.cs,repositionLabel,The following statement contains a magic number: var dy = Math.Max(3' Controls[0].Left) * 2;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueTextEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueTextEdit.cs,repositionLabel,The following statement contains a magic number: var dy = Math.Max(3' Controls[0].Left) * 2;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueTextEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueTextEdit.cs,repositionLabel,The following statement contains a magic number: _cueLabel.Width = Width - 4 * dx;
Magic Number,ExtendedControlsLibrary.General,ExtendedManagedCueTextEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedManagedCueTextEdit.cs,repositionLabel,The following statement contains a magic number: _cueLabel.Height = Height - 2 * dy;
Magic Number,ExtendedControlsLibrary.General.ExtendedTree,ExtendedTreeListControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedTree\ExtendedTreeListControl.cs,RaiseCustomDrawEmptyArea,The following statement contains a magic number: e.Graphics.DrawString(EmptyText' Font' SystemBrushes.ControlDark'                      new PointF(e.Bounds.Width/2 - 40' e.Bounds.Height/2.0f));
Magic Number,ExtendedControlsLibrary.General.ExtendedTree,ExtendedTreeListControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedTree\ExtendedTreeListControl.cs,RaiseCustomDrawEmptyArea,The following statement contains a magic number: e.Graphics.DrawString(EmptyText' Font' SystemBrushes.ControlDark'                      new PointF(e.Bounds.Width/2 - 40' e.Bounds.Height/2.0f));
Magic Number,ExtendedControlsLibrary.General.ExtendedTree,ExtendedTreeListControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\General\ExtendedTree\ExtendedTreeListControl.cs,RaiseCustomDrawEmptyArea,The following statement contains a magic number: e.Graphics.DrawString(EmptyText' Font' SystemBrushes.ControlDark'                      new PointF(e.Bounds.Width/2 - 40' e.Bounds.Height/2.0f));
Magic Number,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,AutoWidthHyperLinkEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\AutoWidthHyperLinkEdit.cs,GetWidth,The following statement contains a magic number: var s = ViewInfo.PaintAppearance.CalcTextSize(  				Graphics.FromImage(new Bitmap(10' 10))'  				ViewInfo.DisplayText'  				1000);
Magic Number,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,AutoWidthHyperLinkEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\AutoWidthHyperLinkEdit.cs,GetWidth,The following statement contains a magic number: var s = ViewInfo.PaintAppearance.CalcTextSize(  				Graphics.FromImage(new Bitmap(10' 10))'  				ViewInfo.DisplayText'  				1000);
Magic Number,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,AutoWidthHyperLinkEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\AutoWidthHyperLinkEdit.cs,GetWidth,The following statement contains a magic number: var s = ViewInfo.PaintAppearance.CalcTextSize(  				Graphics.FromImage(new Bitmap(10' 10))'  				ViewInfo.DisplayText'  				1000);
Magic Number,ExtendedControlsLibrary.Skinning.CustomHyperLinkEdit,AutoWidthHyperLinkEdit,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomHyperLinkEdit\AutoWidthHyperLinkEdit.cs,GetWidth,The following statement contains a magic number: return s.ToSize().Width + 8;
Magic Number,ExtendedControlsLibrary.Skinning.CustomPropertyGrid,MyPropertyGridControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomPropertyGrid\MyPropertyGridControl.cs,MyPropertyGridControl_CustomDrawRowHeaderIndent,The following statement contains a magic number: e.Row.VisibleIndex%2 == 0
Magic Number,ExtendedControlsLibrary.Skinning.CustomPropertyGrid,MyPropertyGridControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomPropertyGrid\MyPropertyGridControl.cs,applyDrawing,The following statement contains a magic number: e.Row.VisibleIndex%2 == 0
Magic Number,ExtendedControlsLibrary.Skinning.CustomTabControl,MyHelperXtraTabControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomTabControl\MyHelperXtraTabControl.cs,makeTabControlInvisible,The following statement contains a magic number: tabControl.Padding = new Padding(9);
Magic Number,ExtendedControlsLibrary.Skinning.CustomTabControl,MyHelperXtraTabControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomTabControl\MyHelperXtraTabControl.cs,makeTabControlInvisible,The following statement contains a magic number: tabControl.Margin = new Padding(9);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetBackButtonBounds,The following statement contains a magic number: return new Rectangle(-50' -50' 32' 32);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetBackButtonBounds,The following statement contains a magic number: return new Rectangle(-50' -50' 32' 32);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetBackButtonBounds,The following statement contains a magic number: return new Rectangle(-50' -50' 32' 32);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetBackButtonBounds,The following statement contains a magic number: return new Rectangle(-50' -50' 32' 32);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,UpdateButtonsLocation,The following statement contains a magic number: prevButtonInfo.Location = new Point(                  nextButtonInfo.Location.X - prevButtonInfo.Size.Width - 4'                  GetCommandButtonTopLocation(prevButtonInfo));
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetCommandButtonTopLocation,The following statement contains a magic number: return ((NoHeaderWizardViewInfo) ViewInfo).GetOwnerInternal().ClientRectangle.Bottom -                     WizardBaseConsts.CommandAreaHeight/2 - button.Size.Height/2;
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardAeroModel,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardAeroModel.cs,GetCommandButtonTopLocation,The following statement contains a magic number: return ((NoHeaderWizardViewInfo) ViewInfo).GetOwnerInternal().ClientRectangle.Bottom -                     WizardBaseConsts.CommandAreaHeight/2 - button.Size.Height/2;
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,RaiseCustomizeCommandButtons,The following statement contains a magic number: var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,RaiseCustomizeCommandButtons,The following statement contains a magic number: var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,RaiseCustomizeCommandButtons,The following statement contains a magic number: var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,RaiseCustomizeCommandButtons,The following statement contains a magic number: var buttonSize = NoHeaderWizardAeroModel.IsGerman ? new Size(85' 28) : new Size(75' 28);
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,RaiseCustomizeCommandButtons,The following statement contains a magic number: const int buttonDistanceX = 5;
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,getLeftmostLocation,The following statement contains a magic number: var left = 10000;
Magic Number,ExtendedControlsLibrary.Skinning.CustomWizard,NoHeaderWizardControl,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\CustomWizard\NoHeaderWizardControl.cs,getLeftmostLocation,The following statement contains a magic number: return left == 10000 ? 0 : left;
Magic Number,ExtendedControlsLibrary.Skinning,SkinHelper,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\SkinHelper.cs,SkinHelper,The following statement contains a magic number: const int standardFontSizePixel = 13;
Magic Number,ExtendedControlsLibrary.Skinning,SkinHelper,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\SkinHelper.cs,SkinHelper,The following statement contains a magic number: var largeFontSizePixel = hasMainFont ? 17 : 16;
Magic Number,ExtendedControlsLibrary.Skinning,SkinHelper,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\SkinHelper.cs,SkinHelper,The following statement contains a magic number: var largeFontSizePixel = hasMainFont ? 17 : 16;
Magic Number,ExtendedControlsLibrary.Skinning,SkinHelper,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Skinning\SkinHelper.cs,SkinHelper,The following statement contains a magic number: const int smallFontSizePixel = 11;
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,MyMessageBoxTemplateForm_Load,The following statement contains a magic number: const int subs = 1000;
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: switch (_info.Buttons)  			{  				case MessageBoxButtons.OK:  					{  						button1.Visible = false;  						button2.Visible = false;    						button3.Text = _info.ButtonTexts[DialogResult.OK];  						button3.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK)' DialogResult.OK);  						AcceptButton = button3;  						CancelButton = button3;    						buttonCount = 1;  					}  					break;  				case MessageBoxButtons.OKCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.OK];  						button2.DialogResult = DialogResult.OK;  						addKeyMap(findButtonKey(DialogResult.OK' DialogResult.OK' DialogResult.Cancel)' DialogResult.OK);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.OK' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.AbortRetryIgnore:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Abort];  						button1.DialogResult = DialogResult.Abort;  						addKeyMap(findButtonKey(DialogResult.Abort' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Abort);  						CancelButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Ignore];  						button3.DialogResult = DialogResult.Ignore;  						addKeyMap(findButtonKey(DialogResult.Ignore' DialogResult.Abort' DialogResult.Retry' DialogResult.Ignore)'  								  DialogResult.Ignore);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNoCancel:  					{  						button1.Text = _info.ButtonTexts[DialogResult.Yes];  						button1.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Yes);  						AcceptButton = button1;    						button2.Text = _info.ButtonTexts[DialogResult.No];  						button2.DialogResult = DialogResult.No;  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.No);    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Yes' DialogResult.No' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button1;  								break;  							case MessageBoxDefaultButton.Button2:  								AcceptButton = button2;  								button1.TabIndex = 2;  								button2.TabIndex = 0;  								button3.TabIndex = 1;  								break;  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button1.TabIndex = 1;  								button2.TabIndex = 2;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 3;  					}  					break;  				case MessageBoxButtons.YesNo:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Yes];  						button2.DialogResult = DialogResult.Yes;  						addKeyMap(findButtonKey(DialogResult.Yes' DialogResult.Yes' DialogResult.No)' DialogResult.Yes);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.No];  						addKeyMap(findButtonKey(DialogResult.No' DialogResult.Yes' DialogResult.No)' DialogResult.No);  						button3.DialogResult = DialogResult.No;    						CancelButton = null;  						ControlBox = false;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;  				case MessageBoxButtons.RetryCancel:  					{  						button1.Visible = false;    						button2.Text = _info.ButtonTexts[DialogResult.Retry];  						button2.DialogResult = DialogResult.Retry;  						addKeyMap(findButtonKey(DialogResult.Retry' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Retry);  						AcceptButton = button2;    						button3.Text = _info.ButtonTexts[DialogResult.Cancel];  						button3.DialogResult = DialogResult.Cancel;  						addKeyMap(findButtonKey(DialogResult.Cancel' DialogResult.Retry' DialogResult.Cancel)' DialogResult.Cancel);  						CancelButton = button3;    						switch (_info.DefaultButton)  						{  							case MessageBoxDefaultButton.Button1:  								AcceptButton = button2;  								break;  							case MessageBoxDefaultButton.Button2:  							case MessageBoxDefaultButton.Button3:  								AcceptButton = button3;  								button2.TabIndex = 1;  								button3.TabIndex = 0;  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						buttonCount = 2;  					}  					break;    				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The following statement contains a magic number: buttonCount == 2
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,resizeButton,The following statement contains a magic number: var borderDistance = button.Height * 0.5;
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,resizeButton,The following statement contains a magic number: button.Width = (int)(size.Width + 2 * borderDistance);
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,resizeButton,The following statement contains a magic number: button.Width - 2 * borderDistance - size.Width < 0
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,adjustSize,The following statement contains a magic number: i < 2
Magic Number,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.updateVisualCountDownTimer.Interval = 200;
Duplicate Code,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The method contains a code clone-set at the following line numbers (starting from the method definition): ((33' 52)' (181' 200))
Duplicate Code,ExtendedControlsLibrary.Specialized.MessageBox,MyMessageBoxTemplateForm,D:\research\architectureSmells\repos\UweKeim_ZetaResourceEditor\Source-Skinning\ExtendedControlsLibrary\Specialized\MessageBox\MyMessageBoxTemplateForm.cs,buildButtons,The method contains a code clone-set at the following line numbers (starting from the method definition): ((69' 94)' (109' 134))
