Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,Cyclomatic complexity of the method is 10
Long Parameter List,BruTile.Samples.VectorTileToBitmap,HttpVectorTileSource,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\HttpVectorTileSource.cs,HttpVectorTileSource,The method has 7 parameters.
Long Parameter List,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,CreateTransformMatrix,The method has 6 parameters.
Long Statement,BruTile.Samples.VectorTileToBitmap,FrameBufferObjectHelper,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\FrameBufferObjectHelper.cs,StartFrameBufferObject,The length of the statement  "	GL.TexImage2D (TextureTarget.Texture2D' 0' PixelInternalFormat.Rgba' width' height' 0' PixelFormat.Rgba' PixelType.UnsignedByte' IntPtr.Zero); " is 142.
Long Statement,BruTile.Samples.VectorTileToBitmap,FrameBufferObjectHelper,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\FrameBufferObjectHelper.cs,StartFrameBufferObject,The length of the statement  "	GL.TexImage2D (TextureTarget.Texture2D' 0' (PixelInternalFormat)All.DepthComponent32Oes' width' height' 0' PixelFormat.DepthComponent' PixelType.UnsignedByte' IntPtr.Zero); " is 172.
Long Statement,BruTile.Samples.VectorTileToBitmap,FrameBufferObjectHelper,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\FrameBufferObjectHelper.cs,StartFrameBufferObject,The length of the statement  "	GL.FramebufferTexture2D (FramebufferTarget.Framebuffer' FramebufferSlot.ColorAttachment0' TextureTarget.Texture2D' (int)colorTexture' 0); " is 137.
Long Statement,BruTile.Samples.VectorTileToBitmap,FrameBufferObjectHelper,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\FrameBufferObjectHelper.cs,StartFrameBufferObject,The length of the statement  "	GL.FramebufferTexture2D (FramebufferTarget.Framebuffer' FramebufferSlot.DepthAttachment' TextureTarget.Texture2D' (int)depthTexture' 0); " is 136.
Long Statement,BruTile.Samples.VectorTileToBitmap,GeoJSONToOpenTKRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonToOpenTKRenderer.cs,Render,The length of the statement  "		// There needs to be a gamewindow even though we don't write to screen. It is created but not used explicitly in our code. " is 122.
Long Statement,BruTile.Samples.VectorTileToBitmap,GraphicsContextToBitmapConverter,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GraphicsContextToBitmapConverter.cs,GrabScreenshot,The length of the statement  "	BitmapData data = bitmap.LockBits (new Rectangle (0' 0' width' height)' ImageLockMode.WriteOnly' System.Drawing.Imaging.PixelFormat.Format24bppRgb); " is 148.
Long Statement,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The length of the statement  "							canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight); " is 126.
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONToOpenTKRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonToOpenTKRenderer.cs,GeoJSONToOpenTKRenderer,The following statement contains a magic number: _extentWidth = (float)boundingBox [2] - _extentMinX;  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONToOpenTKRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonToOpenTKRenderer.cs,GeoJSONToOpenTKRenderer,The following statement contains a magic number: _extentHeight = (float)boundingBox [3] - _extentMinY;  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONToOpenTKRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonToOpenTKRenderer.cs,RenderPolygon,The following statement contains a magic number: GL.Color4 (0' 0' 0' 255);  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONToOpenTKRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonToOpenTKRenderer.cs,RenderPolygon,The following statement contains a magic number: GL.VertexPointer (2' All.Float' 0' points);  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONToOpenTKRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonToOpenTKRenderer.cs,RenderPolygon,The following statement contains a magic number: GL.DrawArrays (All.LineLoop' 0' points.Length / 2);  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONToOpenTKRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonToOpenTKRenderer.cs,ToOpenTK,The following statement contains a magic number: foreach (var coordinate in lineString.Coordinates) {  	var position = (GeographicPosition)coordinate;  	var point = SphericalMercator.FromLonLat (position.Longitude' position.Latitude);  	points [counter * 2 + 0] = point.X;  	points [counter * 2 + 1] = point.Y;  	counter++;  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONToOpenTKRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonToOpenTKRenderer.cs,ToOpenTK,The following statement contains a magic number: foreach (var coordinate in lineString.Coordinates) {  	var position = (GeographicPosition)coordinate;  	var point = SphericalMercator.FromLonLat (position.Longitude' position.Latitude);  	points [counter * 2 + 0] = point.X;  	points [counter * 2 + 1] = point.Y;  	counter++;  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONToOpenTKRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonToOpenTKRenderer.cs,ToOpenTK,The following statement contains a magic number: points [counter * 2 + 0] = point.X;  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONToOpenTKRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonToOpenTKRenderer.cs,ToOpenTK,The following statement contains a magic number: points [counter * 2 + 1] = point.Y;  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,GeoJSONRenderer,The following statement contains a magic number: _extentWidth = (float)boundingBox [2] - _extentMinX;  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,GeoJSONRenderer,The following statement contains a magic number: _extentHeight = (float)boundingBox [3] - _extentMinY;  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: using (var bitmap = new Bitmap (_canvasWidth' _canvasHeight))  	using (var canvas = Graphics.FromImage (bitmap)) {  		foreach (var featureCollection in featureCollections) {  			foreach (var feature in featureCollection.Features) {  				if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  					var polygon = (Polygon)feature.Geometry;  					foreach (var lineString in polygon.Coordinates) {  						canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  						using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  							canvas.FillPolygon (brush' ToGdi (lineString));  						}  					}  				}  			}  		}  		return ToBytes (bitmap);  	}  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: using (var bitmap = new Bitmap (_canvasWidth' _canvasHeight))  	using (var canvas = Graphics.FromImage (bitmap)) {  		foreach (var featureCollection in featureCollections) {  			foreach (var feature in featureCollection.Features) {  				if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  					var polygon = (Polygon)feature.Geometry;  					foreach (var lineString in polygon.Coordinates) {  						canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  						using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  							canvas.FillPolygon (brush' ToGdi (lineString));  						}  					}  				}  			}  		}  		return ToBytes (bitmap);  	}  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: using (var bitmap = new Bitmap (_canvasWidth' _canvasHeight))  	using (var canvas = Graphics.FromImage (bitmap)) {  		foreach (var featureCollection in featureCollections) {  			foreach (var feature in featureCollection.Features) {  				if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  					var polygon = (Polygon)feature.Geometry;  					foreach (var lineString in polygon.Coordinates) {  						canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  						using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  							canvas.FillPolygon (brush' ToGdi (lineString));  						}  					}  				}  			}  		}  		return ToBytes (bitmap);  	}  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: using (var canvas = Graphics.FromImage (bitmap)) {  	foreach (var featureCollection in featureCollections) {  		foreach (var feature in featureCollection.Features) {  			if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  				var polygon = (Polygon)feature.Geometry;  				foreach (var lineString in polygon.Coordinates) {  					canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  					using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  						canvas.FillPolygon (brush' ToGdi (lineString));  					}  				}  			}  		}  	}  	return ToBytes (bitmap);  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: using (var canvas = Graphics.FromImage (bitmap)) {  	foreach (var featureCollection in featureCollections) {  		foreach (var feature in featureCollection.Features) {  			if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  				var polygon = (Polygon)feature.Geometry;  				foreach (var lineString in polygon.Coordinates) {  					canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  					using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  						canvas.FillPolygon (brush' ToGdi (lineString));  					}  				}  			}  		}  	}  	return ToBytes (bitmap);  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: using (var canvas = Graphics.FromImage (bitmap)) {  	foreach (var featureCollection in featureCollections) {  		foreach (var feature in featureCollection.Features) {  			if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  				var polygon = (Polygon)feature.Geometry;  				foreach (var lineString in polygon.Coordinates) {  					canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  					using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  						canvas.FillPolygon (brush' ToGdi (lineString));  					}  				}  			}  		}  	}  	return ToBytes (bitmap);  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: foreach (var featureCollection in featureCollections) {  	foreach (var feature in featureCollection.Features) {  		if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  			var polygon = (Polygon)feature.Geometry;  			foreach (var lineString in polygon.Coordinates) {  				canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  				using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  					canvas.FillPolygon (brush' ToGdi (lineString));  				}  			}  		}  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: foreach (var featureCollection in featureCollections) {  	foreach (var feature in featureCollection.Features) {  		if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  			var polygon = (Polygon)feature.Geometry;  			foreach (var lineString in polygon.Coordinates) {  				canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  				using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  					canvas.FillPolygon (brush' ToGdi (lineString));  				}  			}  		}  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: foreach (var featureCollection in featureCollections) {  	foreach (var feature in featureCollection.Features) {  		if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  			var polygon = (Polygon)feature.Geometry;  			foreach (var lineString in polygon.Coordinates) {  				canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  				using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  					canvas.FillPolygon (brush' ToGdi (lineString));  				}  			}  		}  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: foreach (var feature in featureCollection.Features) {  	if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  		var polygon = (Polygon)feature.Geometry;  		foreach (var lineString in polygon.Coordinates) {  			canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  			using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  				canvas.FillPolygon (brush' ToGdi (lineString));  			}  		}  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: foreach (var feature in featureCollection.Features) {  	if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  		var polygon = (Polygon)feature.Geometry;  		foreach (var lineString in polygon.Coordinates) {  			canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  			using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  				canvas.FillPolygon (brush' ToGdi (lineString));  			}  		}  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: foreach (var feature in featureCollection.Features) {  	if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  		var polygon = (Polygon)feature.Geometry;  		foreach (var lineString in polygon.Coordinates) {  			canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  			using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  				canvas.FillPolygon (brush' ToGdi (lineString));  			}  		}  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  	var polygon = (Polygon)feature.Geometry;  	foreach (var lineString in polygon.Coordinates) {  		canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  		using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  			canvas.FillPolygon (brush' ToGdi (lineString));  		}  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  	var polygon = (Polygon)feature.Geometry;  	foreach (var lineString in polygon.Coordinates) {  		canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  		using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  			canvas.FillPolygon (brush' ToGdi (lineString));  		}  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: if (feature.Geometry.Type == GeoJSONObjectType.Polygon) {  	var polygon = (Polygon)feature.Geometry;  	foreach (var lineString in polygon.Coordinates) {  		canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  		using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  			canvas.FillPolygon (brush' ToGdi (lineString));  		}  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: foreach (var lineString in polygon.Coordinates) {  	canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  	using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  		canvas.FillPolygon (brush' ToGdi (lineString));  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: foreach (var lineString in polygon.Coordinates) {  	canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  	using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  		canvas.FillPolygon (brush' ToGdi (lineString));  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: foreach (var lineString in polygon.Coordinates) {  	canvas.Transform = CreateTransformMatrix (_canvasWidth' _canvasHeight' _extentMinX' _extentMinY' _extentWidth' _extentHeight);  	using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  		canvas.FillPolygon (brush' ToGdi (lineString));  	}  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  	canvas.FillPolygon (brush' ToGdi (lineString));  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  	canvas.FillPolygon (brush' ToGdi (lineString));  }  
Magic Number,BruTile.Samples.VectorTileToBitmap,GeoJSONRenderer,F:\newReposMay17\BruTile_BruTile\Samples\BruTile.Samples.VectorTileToBitmap\GeoJsonRenderer.cs,Render,The following statement contains a magic number: using (var brush = new SolidBrush (Color.FromArgb (random.Next (256)' random.Next (256)' random.Next (256)))) {  	canvas.FillPolygon (brush' ToGdi (lineString));  }  
