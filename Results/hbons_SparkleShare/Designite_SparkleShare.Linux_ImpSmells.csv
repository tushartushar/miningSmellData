Implementation smell,Namespace,Class,File,Method,Description
Long Method,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The method has 496 lines of code.
Long Method,SparkleShare,StatusIcon,C:\repos\hbons_SparkleShare\SparkleShare\Linux\StatusIcon.cs,CreateMenu,The method has 124 lines of code.
Long Method,SparkleShare,EventLogController,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetHTMLLog,The method has 106 lines of code.
Complex Method,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,Cyclomatic complexity of the method is 19
Complex Method,SparkleShare,StatusIcon,C:\repos\hbons_SparkleShare\SparkleShare\Linux\StatusIcon.cs,CreateMenu,Cyclomatic complexity of the method is 11
Complex Method,SparkleShare,Avatars,C:\repos\hbons_SparkleShare\SparkleShare\Common\Avatars.cs,GetAvatar,Cyclomatic complexity of the method is 8
Complex Method,SparkleShare,EventLogController,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetHTMLLog,Cyclomatic complexity of the method is 14
Long Statement,SparkleShare,Controller,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Controller.cs,SetFolderIcon,The length of the statement  "            var gvfs_set_attribute = new Command ("gvfs-set-attribute"' "\"" + Configuration.DefaultConfiguration.FoldersPath + "\" " + " is 123.
Long Statement,SparkleShare,Controller,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Controller.cs,SetFolderIcon,The length of the statement  "            var gvfs_set_attribute = new Command ("gvfs-set-attribute"' "\"" + Configuration.DefaultConfiguration.FoldersPath + "\" " + " is 123.
Long Statement,SparkleShare,Controller,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Controller.cs,SetFolderIcon,The length of the statement  "            var gvfs_set_attribute = new Command ("gvfs-set-attribute"' "\"" + Configuration.DefaultConfiguration.FoldersPath + "\" " + " is 123.
Long Statement,SparkleShare,Controller,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Controller.cs,SetFolderIcon,The length of the statement  "            var gvfs_set_attribute = new Command ("gvfs-set-attribute"' "\"" + Configuration.DefaultConfiguration.FoldersPath + "\" " + " is 123.
Long Statement,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The length of the statement  "            html = html.Replace ("<!-- $body-font-size -->"' (double) (StyleContext.GetFont (StateFlags.Normal).Size / 1024 + 3) + "px"); " is 125.
Long Statement,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The length of the statement  "            html = html.Replace ("<!-- $body-color -->"' UserInterfaceHelpers.RGBAToHex (StyleContext.GetColor (StateFlags.Normal))); " is 121.
Long Statement,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The length of the statement  "            html = html.Replace ("<!-- $day-entry-header-font-size -->"' (StyleContext.GetFont (StateFlags.Normal).Size / 1024 + 3) + "px"); " is 128.
Long Statement,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The length of the statement  "            html = html.Replace ("<!-- $secondary-font-color -->"' UserInterfaceHelpers.RGBAToHex (StyleContext.GetColor (StateFlags.Insensitive))); " is 136.
Long Statement,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The length of the statement  "            html = html.Replace ("<!-- $small-color -->"' UserInterfaceHelpers.RGBAToHex (StyleContext.GetColor (StateFlags.Insensitive))); " is 127.
Long Statement,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The length of the statement  "			html = html.Replace ("<!-- $document-added-background-image -->"' "file://" + IO.Path.Combine (icons_path' "document-added.png")); " is 130.
Long Statement,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The length of the statement  "			html = html.Replace ("<!-- $document-edited-background-image -->"' "file://" + IO.Path.Combine (icons_path' "document-edited.png")); " is 132.
Long Statement,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The length of the statement  "			html = html.Replace ("<!-- $document-deleted-background-image -->"' "file://" + IO.Path.Combine (icons_path' "document-deleted.png")); " is 134.
Long Statement,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The length of the statement  "			html = html.Replace ("<!-- $document-moved-background-image -->"' "file://" + IO.Path.Combine (icons_path' "document-moved.png")); " is 130.
Long Statement,SparkleShare,Avatars,C:\repos\hbons_SparkleShare\SparkleShare\Common\Avatars.cs,GetAvatar,The length of the statement  "                if (client.ResponseHeaders ["content-type"].Equals (MediaTypeNames.Image.Jpeg' StringComparison.InvariantCultureIgnoreCase)) { " is 126.
Long Statement,SparkleShare,Avatars,C:\repos\hbons_SparkleShare\SparkleShare\Common\Avatars.cs,GetAvatar,The length of the statement  "                } else if (client.ResponseHeaders ["content-type"].Equals (MediaTypeNames.Image.Gif' StringComparison.InvariantCultureIgnoreCase)) { " is 132.
Complex Conditional,SparkleShare,SetupController,C:\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,SetupController,The conditional expression  "this.current_page == PageType.Syncing ||                      this.current_page == PageType.Finished ||                      this.current_page == PageType.CryptoSetup ||                      this.current_page == PageType.CryptoPassword"  is complex.
Complex Conditional,SparkleShare,SparkleShare,C:\repos\hbons_SparkleShare\SparkleShare\Common\SparkleShare.cs,Main,The conditional expression  "args.Length != 0 && (args [0].Equals ("help") || args [0].Equals ("version")) &&                  InstallationInfo.OperatingSystem != OS.Mac &&                  InstallationInfo.OperatingSystem != OS.Windows"  is complex.
Empty Catch Block,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The method has an empty catch block.
Magic Number,SparkleShare,Controller,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Controller.cs,CreateSparkleShareFolder,The following statement contains a magic number: if (!Directory.Exists (Configuration.DefaultConfiguration.FoldersPath)) {                  Directory.CreateDirectory (Configuration.DefaultConfiguration.FoldersPath);                  Syscall.chmod (Configuration.DefaultConfiguration.FoldersPath' (FilePermissions) 448); // 448 -> 700              }
Magic Number,SparkleShare,Controller,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Controller.cs,CreateSparkleShareFolder,The following statement contains a magic number: if (!Directory.Exists (Configuration.DefaultConfiguration.FoldersPath)) {                  Directory.CreateDirectory (Configuration.DefaultConfiguration.FoldersPath);                  Syscall.chmod (Configuration.DefaultConfiguration.FoldersPath' (FilePermissions) 448); // 448 -> 700              }
Magic Number,SparkleShare,Controller,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Controller.cs,CreateSparkleShareFolder,The following statement contains a magic number: if (!Directory.Exists (Configuration.DefaultConfiguration.FoldersPath)) {                  Directory.CreateDirectory (Configuration.DefaultConfiguration.FoldersPath);                  Syscall.chmod (Configuration.DefaultConfiguration.FoldersPath' (FilePermissions) 448); // 448 -> 700              }
Magic Number,SparkleShare,Controller,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Controller.cs,CreateSparkleShareFolder,The following statement contains a magic number: if (!Directory.Exists (Configuration.DefaultConfiguration.FoldersPath)) {                  Directory.CreateDirectory (Configuration.DefaultConfiguration.FoldersPath);                  Syscall.chmod (Configuration.DefaultConfiguration.FoldersPath' (FilePermissions) 448); // 448 -> 700              }
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,About,The following statement contains a magic number: SetSizeRequest (640' 260);
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,About,The following statement contains a magic number: SetSizeRequest (640' 260);
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,CreateAbout,The following statement contains a magic number: StyleContext.AddProvider (window_css_provider' 800);
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,CreateAbout,The following statement contains a magic number: var links_layout = new HBox (false' 16);
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,CreateAbout,The following statement contains a magic number: license.StyleContext.AddProvider (label_css_provider' 800);
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,CreateAbout,The following statement contains a magic number: updates.StyleContext.AddProvider (label_highlight_css_provider' 800);
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,CreateAbout,The following statement contains a magic number: version.StyleContext.AddProvider (label_css_provider' 800);
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,CreateAbout,The following statement contains a magic number: copyright.StyleContext.AddProvider (label_css_provider' 800);
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,CreateAbout,The following statement contains a magic number: layout_vertical.PackStart (copyright' false' false' 6);
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,CreateAbout,The following statement contains a magic number: layout_vertical.PackStart (license' false' false' 6);
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,CreateAbout,The following statement contains a magic number: layout_vertical.PackStart (links_layout' false' false' 16);
Magic Number,SparkleShare,About,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,CreateAbout,The following statement contains a magic number: layout_horizontal.PackStart (new Label ("")' false' false' 149);
Magic Number,SparkleShare,Link,C:\repos\hbons_SparkleShare\SparkleShare\Linux\About.cs,Link,The following statement contains a magic number: StyleContext.AddProvider (css_provider' 800);
Magic Number,SparkleShare,Bubbles,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Bubbles.cs,ShowBubbleEvent,The following statement contains a magic number: Application.Invoke (delegate {  				Notification notification = new Notification () {  					Summary = title'  					Body    = subtext'  					Timeout = 5 * 1000'  					Urgency = Urgency.Low  				};    				if (image_path != null)  					notification.Icon = new Gdk.Pixbuf (image_path);  				else  					notification.IconName = "org.sparkleshare.SparkleShare";    				try {  					notification.Show ();    				} catch (Exception e) {  					Logger.LogInfo ("Notification"' "Could not show notification: "' e);  				}  			});
Magic Number,SparkleShare,Bubbles,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Bubbles.cs,ShowBubbleEvent,The following statement contains a magic number: Application.Invoke (delegate {  				Notification notification = new Notification () {  					Summary = title'  					Body    = subtext'  					Timeout = 5 * 1000'  					Urgency = Urgency.Low  				};    				if (image_path != null)  					notification.Icon = new Gdk.Pixbuf (image_path);  				else  					notification.IconName = "org.sparkleshare.SparkleShare";    				try {  					notification.Show ();    				} catch (Exception e) {  					Logger.LogInfo ("Notification"' "Could not show notification: "' e);  				}  			});
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: SetSizeRequest (480' 640);
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: SetSizeRequest (480' 640);
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: pos_x = (int) (monitor_0_rect.Width * 0.61);
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: pos_y = (int) (monitor_0_rect.Height * 0.5 - (HeightRequest * 0.5));
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: pos_y = (int) (monitor_0_rect.Height * 0.5 - (HeightRequest * 0.5));
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: Resize (480' (int) (monitor_0_rect.Height * 0.8));
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: Resize (480' (int) (monitor_0_rect.Height * 0.8));
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: this.size_label.SetSizeRequest (100' 24);
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: this.size_label.SetSizeRequest (100' 24);
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: layout_sizes.PackStart (this.size_label' false' false' 12);
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: this.content_wrapper.StyleContext.AddProvider (css_provider' 800);
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: this.spinner.SetSizeRequest (24' 24);
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,EventLog,The following statement contains a magic number: this.spinner.SetSizeRequest (24' 24);
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The following statement contains a magic number: html = html.Replace ("<!-- $body-font-size -->"' (double) (StyleContext.GetFont (StateFlags.Normal).Size / 1024 + 3) + "px");
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The following statement contains a magic number: html = html.Replace ("<!-- $body-font-size -->"' (double) (StyleContext.GetFont (StateFlags.Normal).Size / 1024 + 3) + "px");
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The following statement contains a magic number: html = html.Replace ("<!-- $day-entry-header-font-size -->"' (StyleContext.GetFont (StateFlags.Normal).Size / 1024 + 3) + "px");
Magic Number,SparkleShare,EventLog,C:\repos\hbons_SparkleShare\SparkleShare\Linux\EventLog.cs,UpdateContent,The following statement contains a magic number: html = html.Replace ("<!-- $day-entry-header-font-size -->"' (StyleContext.GetFont (StateFlags.Normal).Size / 1024 + 3) + "px");
Magic Number,SparkleShare,Note,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Note.cs,Note,The following statement contains a magic number: BorderWidth    = 16;
Magic Number,SparkleShare,Note,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Note.cs,Note,The following statement contains a magic number: SetSizeRequest (480' 120);
Magic Number,SparkleShare,Note,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Note.cs,Note,The following statement contains a magic number: SetSizeRequest (480' 120);
Magic Number,SparkleShare,Note,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Note.cs,CreateNote,The following statement contains a magic number: var balloon = new Entry { MaxLength = 144 };
Magic Number,SparkleShare,Note,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Note.cs,CreateNote,The following statement contains a magic number: var layout_vertical   = new VBox (false' 16);
Magic Number,SparkleShare,Note,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Note.cs,CreateNote,The following statement contains a magic number: var layout_horizontal = new HBox (false' 16);
Magic Number,SparkleShare,Note,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Note.cs,CreateNote,The following statement contains a magic number: var buttons = new HBox {                  Homogeneous = false'                  Spacing     = 6              };
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Setup) {                  Header      = "Welcome to SparkleShare!";                  Description = "First off' what’s your name and email?\n(visible only to team members)";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label name_label = new Label ("<b>" + "Your Name:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry name_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };    		        try {                      UnixUserInfo user_info = UnixUserInfo.GetRealUser ();                                        if (user_info != null && user_info.RealName != null)                          // Some systems append a series of "'" for some reason' TODO: Report upstream                          name_entry.Text = user_info.RealName.TrimEnd ("'".ToCharArray ());                    } catch (ArgumentException) {                      // No username' not a big deal                  }                    Entry email_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };                                    Label email_label = new Label ("<b>" + "Email:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    table.Attach (name_label' 0' 1' 0' 1);                  table.Attach (name_entry' 1' 2' 0' 1);                  table.Attach (email_label' 0' 1' 1' 2);                  table.Attach (email_entry' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                      Controller.UpdateSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    name_entry.Changed    += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  email_entry.Changed   += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  cancel_button.Clicked += delegate { Controller.SetupPageCancelled (); };                                continue_button.Clicked += delegate {                      Controller.SetupPageCompleted (name_entry.Text' email_entry.Text);                  };                                     AddButton (cancel_button);                  AddButton (continue_button);                  Add (wrapper);                    Controller.CheckSetupPage (name_entry.Text' email_entry.Text);                    if (name_entry.Text.Equals (""))                      name_entry.GrabFocus ();                  else                      email_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Setup) {                  Header      = "Welcome to SparkleShare!";                  Description = "First off' what’s your name and email?\n(visible only to team members)";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label name_label = new Label ("<b>" + "Your Name:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry name_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };    		        try {                      UnixUserInfo user_info = UnixUserInfo.GetRealUser ();                                        if (user_info != null && user_info.RealName != null)                          // Some systems append a series of "'" for some reason' TODO: Report upstream                          name_entry.Text = user_info.RealName.TrimEnd ("'".ToCharArray ());                    } catch (ArgumentException) {                      // No username' not a big deal                  }                    Entry email_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };                                    Label email_label = new Label ("<b>" + "Email:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    table.Attach (name_label' 0' 1' 0' 1);                  table.Attach (name_entry' 1' 2' 0' 1);                  table.Attach (email_label' 0' 1' 1' 2);                  table.Attach (email_entry' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                      Controller.UpdateSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    name_entry.Changed    += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  email_entry.Changed   += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  cancel_button.Clicked += delegate { Controller.SetupPageCancelled (); };                                continue_button.Clicked += delegate {                      Controller.SetupPageCompleted (name_entry.Text' email_entry.Text);                  };                                     AddButton (cancel_button);                  AddButton (continue_button);                  Add (wrapper);                    Controller.CheckSetupPage (name_entry.Text' email_entry.Text);                    if (name_entry.Text.Equals (""))                      name_entry.GrabFocus ();                  else                      email_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Setup) {                  Header      = "Welcome to SparkleShare!";                  Description = "First off' what’s your name and email?\n(visible only to team members)";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label name_label = new Label ("<b>" + "Your Name:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry name_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };    		        try {                      UnixUserInfo user_info = UnixUserInfo.GetRealUser ();                                        if (user_info != null && user_info.RealName != null)                          // Some systems append a series of "'" for some reason' TODO: Report upstream                          name_entry.Text = user_info.RealName.TrimEnd ("'".ToCharArray ());                    } catch (ArgumentException) {                      // No username' not a big deal                  }                    Entry email_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };                                    Label email_label = new Label ("<b>" + "Email:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    table.Attach (name_label' 0' 1' 0' 1);                  table.Attach (name_entry' 1' 2' 0' 1);                  table.Attach (email_label' 0' 1' 1' 2);                  table.Attach (email_entry' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                      Controller.UpdateSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    name_entry.Changed    += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  email_entry.Changed   += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  cancel_button.Clicked += delegate { Controller.SetupPageCancelled (); };                                continue_button.Clicked += delegate {                      Controller.SetupPageCompleted (name_entry.Text' email_entry.Text);                  };                                     AddButton (cancel_button);                  AddButton (continue_button);                  Add (wrapper);                    Controller.CheckSetupPage (name_entry.Text' email_entry.Text);                    if (name_entry.Text.Equals (""))                      name_entry.GrabFocus ();                  else                      email_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Setup) {                  Header      = "Welcome to SparkleShare!";                  Description = "First off' what’s your name and email?\n(visible only to team members)";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label name_label = new Label ("<b>" + "Your Name:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry name_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };    		        try {                      UnixUserInfo user_info = UnixUserInfo.GetRealUser ();                                        if (user_info != null && user_info.RealName != null)                          // Some systems append a series of "'" for some reason' TODO: Report upstream                          name_entry.Text = user_info.RealName.TrimEnd ("'".ToCharArray ());                    } catch (ArgumentException) {                      // No username' not a big deal                  }                    Entry email_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };                                    Label email_label = new Label ("<b>" + "Email:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    table.Attach (name_label' 0' 1' 0' 1);                  table.Attach (name_entry' 1' 2' 0' 1);                  table.Attach (email_label' 0' 1' 1' 2);                  table.Attach (email_entry' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                      Controller.UpdateSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    name_entry.Changed    += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  email_entry.Changed   += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  cancel_button.Clicked += delegate { Controller.SetupPageCancelled (); };                                continue_button.Clicked += delegate {                      Controller.SetupPageCompleted (name_entry.Text' email_entry.Text);                  };                                     AddButton (cancel_button);                  AddButton (continue_button);                  Add (wrapper);                    Controller.CheckSetupPage (name_entry.Text' email_entry.Text);                    if (name_entry.Text.Equals (""))                      name_entry.GrabFocus ();                  else                      email_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Setup) {                  Header      = "Welcome to SparkleShare!";                  Description = "First off' what’s your name and email?\n(visible only to team members)";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label name_label = new Label ("<b>" + "Your Name:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry name_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };    		        try {                      UnixUserInfo user_info = UnixUserInfo.GetRealUser ();                                        if (user_info != null && user_info.RealName != null)                          // Some systems append a series of "'" for some reason' TODO: Report upstream                          name_entry.Text = user_info.RealName.TrimEnd ("'".ToCharArray ());                    } catch (ArgumentException) {                      // No username' not a big deal                  }                    Entry email_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };                                    Label email_label = new Label ("<b>" + "Email:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    table.Attach (name_label' 0' 1' 0' 1);                  table.Attach (name_entry' 1' 2' 0' 1);                  table.Attach (email_label' 0' 1' 1' 2);                  table.Attach (email_entry' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                      Controller.UpdateSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    name_entry.Changed    += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  email_entry.Changed   += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  cancel_button.Clicked += delegate { Controller.SetupPageCancelled (); };                                continue_button.Clicked += delegate {                      Controller.SetupPageCompleted (name_entry.Text' email_entry.Text);                  };                                     AddButton (cancel_button);                  AddButton (continue_button);                  Add (wrapper);                    Controller.CheckSetupPage (name_entry.Text' email_entry.Text);                    if (name_entry.Text.Equals (""))                      name_entry.GrabFocus ();                  else                      email_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Setup) {                  Header      = "Welcome to SparkleShare!";                  Description = "First off' what’s your name and email?\n(visible only to team members)";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label name_label = new Label ("<b>" + "Your Name:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry name_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };    		        try {                      UnixUserInfo user_info = UnixUserInfo.GetRealUser ();                                        if (user_info != null && user_info.RealName != null)                          // Some systems append a series of "'" for some reason' TODO: Report upstream                          name_entry.Text = user_info.RealName.TrimEnd ("'".ToCharArray ());                    } catch (ArgumentException) {                      // No username' not a big deal                  }                    Entry email_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };                                    Label email_label = new Label ("<b>" + "Email:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    table.Attach (name_label' 0' 1' 0' 1);                  table.Attach (name_entry' 1' 2' 0' 1);                  table.Attach (email_label' 0' 1' 1' 2);                  table.Attach (email_entry' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                      Controller.UpdateSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    name_entry.Changed    += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  email_entry.Changed   += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  cancel_button.Clicked += delegate { Controller.SetupPageCancelled (); };                                continue_button.Clicked += delegate {                      Controller.SetupPageCompleted (name_entry.Text' email_entry.Text);                  };                                     AddButton (cancel_button);                  AddButton (continue_button);                  Add (wrapper);                    Controller.CheckSetupPage (name_entry.Text' email_entry.Text);                    if (name_entry.Text.Equals (""))                      name_entry.GrabFocus ();                  else                      email_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Setup) {                  Header      = "Welcome to SparkleShare!";                  Description = "First off' what’s your name and email?\n(visible only to team members)";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label name_label = new Label ("<b>" + "Your Name:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry name_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };    		        try {                      UnixUserInfo user_info = UnixUserInfo.GetRealUser ();                                        if (user_info != null && user_info.RealName != null)                          // Some systems append a series of "'" for some reason' TODO: Report upstream                          name_entry.Text = user_info.RealName.TrimEnd ("'".ToCharArray ());                    } catch (ArgumentException) {                      // No username' not a big deal                  }                    Entry email_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };                                    Label email_label = new Label ("<b>" + "Email:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    table.Attach (name_label' 0' 1' 0' 1);                  table.Attach (name_entry' 1' 2' 0' 1);                  table.Attach (email_label' 0' 1' 1' 2);                  table.Attach (email_entry' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                      Controller.UpdateSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    name_entry.Changed    += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  email_entry.Changed   += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  cancel_button.Clicked += delegate { Controller.SetupPageCancelled (); };                                continue_button.Clicked += delegate {                      Controller.SetupPageCompleted (name_entry.Text' email_entry.Text);                  };                                     AddButton (cancel_button);                  AddButton (continue_button);                  Add (wrapper);                    Controller.CheckSetupPage (name_entry.Text' email_entry.Text);                    if (name_entry.Text.Equals (""))                      name_entry.GrabFocus ();                  else                      email_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Setup) {                  Header      = "Welcome to SparkleShare!";                  Description = "First off' what’s your name and email?\n(visible only to team members)";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label name_label = new Label ("<b>" + "Your Name:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry name_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };    		        try {                      UnixUserInfo user_info = UnixUserInfo.GetRealUser ();                                        if (user_info != null && user_info.RealName != null)                          // Some systems append a series of "'" for some reason' TODO: Report upstream                          name_entry.Text = user_info.RealName.TrimEnd ("'".ToCharArray ());                    } catch (ArgumentException) {                      // No username' not a big deal                  }                    Entry email_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };                                    Label email_label = new Label ("<b>" + "Email:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    table.Attach (name_label' 0' 1' 0' 1);                  table.Attach (name_entry' 1' 2' 0' 1);                  table.Attach (email_label' 0' 1' 1' 2);                  table.Attach (email_entry' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                      Controller.UpdateSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    name_entry.Changed    += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  email_entry.Changed   += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  cancel_button.Clicked += delegate { Controller.SetupPageCancelled (); };                                continue_button.Clicked += delegate {                      Controller.SetupPageCompleted (name_entry.Text' email_entry.Text);                  };                                     AddButton (cancel_button);                  AddButton (continue_button);                  Add (wrapper);                    Controller.CheckSetupPage (name_entry.Text' email_entry.Text);                    if (name_entry.Text.Equals (""))                      name_entry.GrabFocus ();                  else                      email_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Setup) {                  Header      = "Welcome to SparkleShare!";                  Description = "First off' what’s your name and email?\n(visible only to team members)";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label name_label = new Label ("<b>" + "Your Name:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry name_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };    		        try {                      UnixUserInfo user_info = UnixUserInfo.GetRealUser ();                                        if (user_info != null && user_info.RealName != null)                          // Some systems append a series of "'" for some reason' TODO: Report upstream                          name_entry.Text = user_info.RealName.TrimEnd ("'".ToCharArray ());                    } catch (ArgumentException) {                      // No username' not a big deal                  }                    Entry email_entry = new Entry () {                      Xalign = 0'                      ActivatesDefault = true                  };                                    Label email_label = new Label ("<b>" + "Email:" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    table.Attach (name_label' 0' 1' 0' 1);                  table.Attach (name_entry' 1' 2' 0' 1);                  table.Attach (email_label' 0' 1' 1' 2);                  table.Attach (email_entry' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                      Controller.UpdateSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    name_entry.Changed    += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  email_entry.Changed   += delegate { Controller.CheckSetupPage (name_entry.Text' email_entry.Text); };                  cancel_button.Clicked += delegate { Controller.SetupPageCancelled (); };                                continue_button.Clicked += delegate {                      Controller.SetupPageCompleted (name_entry.Text' email_entry.Text);                  };                                     AddButton (cancel_button);                  AddButton (continue_button);                  Add (wrapper);                    Controller.CheckSetupPage (name_entry.Text' email_entry.Text);                    if (name_entry.Text.Equals (""))                      name_entry.GrabFocus ();                  else                      email_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Add) {                  Header = "Where’s your project hosted?";                    VBox layout_vertical = new VBox (false' 16);                  HBox layout_fields   = new HBox (true' 32);                  VBox layout_address  = new VBox (true' 0);                  VBox layout_path     = new VBox (true' 0);                    ListStore store = new ListStore (typeof (string)' typeof (Gdk.Pixbuf)' typeof (string)' typeof (Preset));                    SparkleTreeView tree_view = new SparkleTreeView (store) {                      HeadersVisible = false'                      SearchColumn = -1'                      EnableSearch = false                  };                    ScrolledWindow scrolled_window = new ScrolledWindow () { ShadowType = ShadowType.In };                  scrolled_window.SetPolicy (PolicyType.Never' PolicyType.Automatic);                    // Padding column                  tree_view.AppendColumn ("Padding"' new Gtk.CellRendererText ()' "text"' 0);                  tree_view.Columns [0].Cells [0].Xpad = 4;                    // Icon column                  tree_view.AppendColumn ("Icon"' new Gtk.CellRendererPixbuf ()' "pixbuf"' 1);                  tree_view.Columns [1].Cells [0].Xpad = 4;                    // Service column                  TreeViewColumn service_column = new TreeViewColumn () { Title = "Service" };                  CellRendererText service_cell = new CellRendererText () { Ypad = 8 };                  service_column.PackStart (service_cell' true);                  service_column.SetCellDataFunc (service_cell' new TreeCellDataFunc (RenderServiceColumn));                    foreach (Preset preset in Controller.Presets) {                      store.AppendValues (""' new Gdk.Pixbuf (preset.ImagePath)'                          "<span size=\"small\"><b>" + preset.Name + "</b>\n" +                              "<span fgcolor=\"" + SparkleShare.UI.SecondaryTextColor + "\">" + preset.Description + "</span>" +                          "</span>"' preset);                  }                    tree_view.AppendColumn (service_column);                  scrolled_window.Add (tree_view);                    Entry address_entry = new Entry () {                      Text = Controller.PreviousAddress'                      Sensitive = (Controller.SelectedPreset.Address == null)'                      ActivatesDefault = true                  };                    Entry path_entry = new Entry () {                      Text = Controller.PreviousPath'                      Sensitive = (Controller.SelectedPreset.Path == null)'                      ActivatesDefault = true                  };                    tree_view.ButtonReleaseEvent += delegate {                      path_entry.GrabFocus ();                  };                    Label address_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.AddressExample + "</span>"                  };                    Label path_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.PathExample + "</span>"                  };                      TreeSelection default_selection = tree_view.Selection;                  TreePath default_path = new TreePath ("" + Controller.SelectedPresetIndex);                  default_selection.SelectPath (default_path);                    tree_view.Model.Foreach (new TreeModelForeachFunc (                      delegate (ITreeModel model' TreePath path' TreeIter iter) {                          string address;                            try {                              address = (model.GetValue (iter' 2) as Preset).Address;                            } catch (NullReferenceException) {                              address = "";                          }                            if (!string.IsNullOrEmpty (address) &&                              address.Equals (Controller.PreviousAddress)) {                                tree_view.SetCursor (path' service_column' false);                              Preset preset = (Preset) model.GetValue (iter' 2);                                if (preset.Address != null)                                  address_entry.Sensitive = false;                                if (preset.Path != null)                                  path_entry.Sensitive = false;                                return true;                                                        } else {                              return false;                          }                      }                  ));                    layout_address.PackStart (new Label () {                          Markup = "<b>" + "Address" + "</b>"'                          Xalign = 0                      }' true' true' 0);                    layout_address.PackStart (address_entry' false' false' 0);                  layout_address.PackStart (address_example' false' false' 0);                    path_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    layout_path.PackStart (new Label () {                      Markup = "<b>" + "Remote Path" + "</b>"'                      Xalign = 0                  }' true' true' 0);                                    layout_path.PackStart (path_entry' false' false' 0);                  layout_path.PackStart (path_example' false' false' 0);                    layout_fields.PackStart (layout_address' true' true' 0);                  layout_fields.PackStart (layout_path' true' true' 0);                    layout_vertical.PackStart (scrolled_window' true' true' 0);                  layout_vertical.PackStart (layout_fields' false' false' 0);                    tree_view.ScrollToCell (new TreePath ("" + Controller.SelectedPresetIndex)' null' true' 0' 0);                    Add (layout_vertical);                      if (string.IsNullOrEmpty (path_entry.Text)) {                      address_entry.GrabFocus ();                      address_entry.Position = -1;                  } else {                      path_entry.GrabFocus ();                      path_entry.Position = -1;                  }                    Button cancel_button = new Button ("Cancel");                  Button add_button = new Button ("Add") { Sensitive = false };                      Controller.ChangeAddressFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          address_entry.Text      = text;                          address_entry.Sensitive = (state == FieldState.Enabled);                          address_example.Markup  =  "<span size=\"small\" fgcolor=\"" +                              SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.ChangePathFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          path_entry.Text      = text;                          path_entry.Sensitive = (state == FieldState.Enabled);                          path_example.Markup  =  "<span size=\"small\" fgcolor=\""                              + SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { add_button.Sensitive = button_enabled; });                  };                      tree_view.CursorChanged += delegate (object sender' EventArgs e) {                      Controller.SelectedPresetChanged (tree_view.SelectedRow);                  };                    address_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.AddPageCompleted (address_entry.Text' path_entry.Text); };                      CheckButton check_button = new CheckButton ("Fetch prior revisions") { Active = false };                  check_button.Toggled += delegate { Controller.HistoryItemChanged (check_button.Active); };                    AddOption (check_button);                  AddButton (cancel_button);                  AddButton (add_button);                    Controller.HistoryItemChanged (check_button.Active);                  Controller.CheckAddPage (address_entry.Text' path_entry.Text' 1);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Add) {                  Header = "Where’s your project hosted?";                    VBox layout_vertical = new VBox (false' 16);                  HBox layout_fields   = new HBox (true' 32);                  VBox layout_address  = new VBox (true' 0);                  VBox layout_path     = new VBox (true' 0);                    ListStore store = new ListStore (typeof (string)' typeof (Gdk.Pixbuf)' typeof (string)' typeof (Preset));                    SparkleTreeView tree_view = new SparkleTreeView (store) {                      HeadersVisible = false'                      SearchColumn = -1'                      EnableSearch = false                  };                    ScrolledWindow scrolled_window = new ScrolledWindow () { ShadowType = ShadowType.In };                  scrolled_window.SetPolicy (PolicyType.Never' PolicyType.Automatic);                    // Padding column                  tree_view.AppendColumn ("Padding"' new Gtk.CellRendererText ()' "text"' 0);                  tree_view.Columns [0].Cells [0].Xpad = 4;                    // Icon column                  tree_view.AppendColumn ("Icon"' new Gtk.CellRendererPixbuf ()' "pixbuf"' 1);                  tree_view.Columns [1].Cells [0].Xpad = 4;                    // Service column                  TreeViewColumn service_column = new TreeViewColumn () { Title = "Service" };                  CellRendererText service_cell = new CellRendererText () { Ypad = 8 };                  service_column.PackStart (service_cell' true);                  service_column.SetCellDataFunc (service_cell' new TreeCellDataFunc (RenderServiceColumn));                    foreach (Preset preset in Controller.Presets) {                      store.AppendValues (""' new Gdk.Pixbuf (preset.ImagePath)'                          "<span size=\"small\"><b>" + preset.Name + "</b>\n" +                              "<span fgcolor=\"" + SparkleShare.UI.SecondaryTextColor + "\">" + preset.Description + "</span>" +                          "</span>"' preset);                  }                    tree_view.AppendColumn (service_column);                  scrolled_window.Add (tree_view);                    Entry address_entry = new Entry () {                      Text = Controller.PreviousAddress'                      Sensitive = (Controller.SelectedPreset.Address == null)'                      ActivatesDefault = true                  };                    Entry path_entry = new Entry () {                      Text = Controller.PreviousPath'                      Sensitive = (Controller.SelectedPreset.Path == null)'                      ActivatesDefault = true                  };                    tree_view.ButtonReleaseEvent += delegate {                      path_entry.GrabFocus ();                  };                    Label address_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.AddressExample + "</span>"                  };                    Label path_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.PathExample + "</span>"                  };                      TreeSelection default_selection = tree_view.Selection;                  TreePath default_path = new TreePath ("" + Controller.SelectedPresetIndex);                  default_selection.SelectPath (default_path);                    tree_view.Model.Foreach (new TreeModelForeachFunc (                      delegate (ITreeModel model' TreePath path' TreeIter iter) {                          string address;                            try {                              address = (model.GetValue (iter' 2) as Preset).Address;                            } catch (NullReferenceException) {                              address = "";                          }                            if (!string.IsNullOrEmpty (address) &&                              address.Equals (Controller.PreviousAddress)) {                                tree_view.SetCursor (path' service_column' false);                              Preset preset = (Preset) model.GetValue (iter' 2);                                if (preset.Address != null)                                  address_entry.Sensitive = false;                                if (preset.Path != null)                                  path_entry.Sensitive = false;                                return true;                                                        } else {                              return false;                          }                      }                  ));                    layout_address.PackStart (new Label () {                          Markup = "<b>" + "Address" + "</b>"'                          Xalign = 0                      }' true' true' 0);                    layout_address.PackStart (address_entry' false' false' 0);                  layout_address.PackStart (address_example' false' false' 0);                    path_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    layout_path.PackStart (new Label () {                      Markup = "<b>" + "Remote Path" + "</b>"'                      Xalign = 0                  }' true' true' 0);                                    layout_path.PackStart (path_entry' false' false' 0);                  layout_path.PackStart (path_example' false' false' 0);                    layout_fields.PackStart (layout_address' true' true' 0);                  layout_fields.PackStart (layout_path' true' true' 0);                    layout_vertical.PackStart (scrolled_window' true' true' 0);                  layout_vertical.PackStart (layout_fields' false' false' 0);                    tree_view.ScrollToCell (new TreePath ("" + Controller.SelectedPresetIndex)' null' true' 0' 0);                    Add (layout_vertical);                      if (string.IsNullOrEmpty (path_entry.Text)) {                      address_entry.GrabFocus ();                      address_entry.Position = -1;                  } else {                      path_entry.GrabFocus ();                      path_entry.Position = -1;                  }                    Button cancel_button = new Button ("Cancel");                  Button add_button = new Button ("Add") { Sensitive = false };                      Controller.ChangeAddressFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          address_entry.Text      = text;                          address_entry.Sensitive = (state == FieldState.Enabled);                          address_example.Markup  =  "<span size=\"small\" fgcolor=\"" +                              SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.ChangePathFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          path_entry.Text      = text;                          path_entry.Sensitive = (state == FieldState.Enabled);                          path_example.Markup  =  "<span size=\"small\" fgcolor=\""                              + SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { add_button.Sensitive = button_enabled; });                  };                      tree_view.CursorChanged += delegate (object sender' EventArgs e) {                      Controller.SelectedPresetChanged (tree_view.SelectedRow);                  };                    address_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.AddPageCompleted (address_entry.Text' path_entry.Text); };                      CheckButton check_button = new CheckButton ("Fetch prior revisions") { Active = false };                  check_button.Toggled += delegate { Controller.HistoryItemChanged (check_button.Active); };                    AddOption (check_button);                  AddButton (cancel_button);                  AddButton (add_button);                    Controller.HistoryItemChanged (check_button.Active);                  Controller.CheckAddPage (address_entry.Text' path_entry.Text' 1);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Add) {                  Header = "Where’s your project hosted?";                    VBox layout_vertical = new VBox (false' 16);                  HBox layout_fields   = new HBox (true' 32);                  VBox layout_address  = new VBox (true' 0);                  VBox layout_path     = new VBox (true' 0);                    ListStore store = new ListStore (typeof (string)' typeof (Gdk.Pixbuf)' typeof (string)' typeof (Preset));                    SparkleTreeView tree_view = new SparkleTreeView (store) {                      HeadersVisible = false'                      SearchColumn = -1'                      EnableSearch = false                  };                    ScrolledWindow scrolled_window = new ScrolledWindow () { ShadowType = ShadowType.In };                  scrolled_window.SetPolicy (PolicyType.Never' PolicyType.Automatic);                    // Padding column                  tree_view.AppendColumn ("Padding"' new Gtk.CellRendererText ()' "text"' 0);                  tree_view.Columns [0].Cells [0].Xpad = 4;                    // Icon column                  tree_view.AppendColumn ("Icon"' new Gtk.CellRendererPixbuf ()' "pixbuf"' 1);                  tree_view.Columns [1].Cells [0].Xpad = 4;                    // Service column                  TreeViewColumn service_column = new TreeViewColumn () { Title = "Service" };                  CellRendererText service_cell = new CellRendererText () { Ypad = 8 };                  service_column.PackStart (service_cell' true);                  service_column.SetCellDataFunc (service_cell' new TreeCellDataFunc (RenderServiceColumn));                    foreach (Preset preset in Controller.Presets) {                      store.AppendValues (""' new Gdk.Pixbuf (preset.ImagePath)'                          "<span size=\"small\"><b>" + preset.Name + "</b>\n" +                              "<span fgcolor=\"" + SparkleShare.UI.SecondaryTextColor + "\">" + preset.Description + "</span>" +                          "</span>"' preset);                  }                    tree_view.AppendColumn (service_column);                  scrolled_window.Add (tree_view);                    Entry address_entry = new Entry () {                      Text = Controller.PreviousAddress'                      Sensitive = (Controller.SelectedPreset.Address == null)'                      ActivatesDefault = true                  };                    Entry path_entry = new Entry () {                      Text = Controller.PreviousPath'                      Sensitive = (Controller.SelectedPreset.Path == null)'                      ActivatesDefault = true                  };                    tree_view.ButtonReleaseEvent += delegate {                      path_entry.GrabFocus ();                  };                    Label address_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.AddressExample + "</span>"                  };                    Label path_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.PathExample + "</span>"                  };                      TreeSelection default_selection = tree_view.Selection;                  TreePath default_path = new TreePath ("" + Controller.SelectedPresetIndex);                  default_selection.SelectPath (default_path);                    tree_view.Model.Foreach (new TreeModelForeachFunc (                      delegate (ITreeModel model' TreePath path' TreeIter iter) {                          string address;                            try {                              address = (model.GetValue (iter' 2) as Preset).Address;                            } catch (NullReferenceException) {                              address = "";                          }                            if (!string.IsNullOrEmpty (address) &&                              address.Equals (Controller.PreviousAddress)) {                                tree_view.SetCursor (path' service_column' false);                              Preset preset = (Preset) model.GetValue (iter' 2);                                if (preset.Address != null)                                  address_entry.Sensitive = false;                                if (preset.Path != null)                                  path_entry.Sensitive = false;                                return true;                                                        } else {                              return false;                          }                      }                  ));                    layout_address.PackStart (new Label () {                          Markup = "<b>" + "Address" + "</b>"'                          Xalign = 0                      }' true' true' 0);                    layout_address.PackStart (address_entry' false' false' 0);                  layout_address.PackStart (address_example' false' false' 0);                    path_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    layout_path.PackStart (new Label () {                      Markup = "<b>" + "Remote Path" + "</b>"'                      Xalign = 0                  }' true' true' 0);                                    layout_path.PackStart (path_entry' false' false' 0);                  layout_path.PackStart (path_example' false' false' 0);                    layout_fields.PackStart (layout_address' true' true' 0);                  layout_fields.PackStart (layout_path' true' true' 0);                    layout_vertical.PackStart (scrolled_window' true' true' 0);                  layout_vertical.PackStart (layout_fields' false' false' 0);                    tree_view.ScrollToCell (new TreePath ("" + Controller.SelectedPresetIndex)' null' true' 0' 0);                    Add (layout_vertical);                      if (string.IsNullOrEmpty (path_entry.Text)) {                      address_entry.GrabFocus ();                      address_entry.Position = -1;                  } else {                      path_entry.GrabFocus ();                      path_entry.Position = -1;                  }                    Button cancel_button = new Button ("Cancel");                  Button add_button = new Button ("Add") { Sensitive = false };                      Controller.ChangeAddressFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          address_entry.Text      = text;                          address_entry.Sensitive = (state == FieldState.Enabled);                          address_example.Markup  =  "<span size=\"small\" fgcolor=\"" +                              SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.ChangePathFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          path_entry.Text      = text;                          path_entry.Sensitive = (state == FieldState.Enabled);                          path_example.Markup  =  "<span size=\"small\" fgcolor=\""                              + SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { add_button.Sensitive = button_enabled; });                  };                      tree_view.CursorChanged += delegate (object sender' EventArgs e) {                      Controller.SelectedPresetChanged (tree_view.SelectedRow);                  };                    address_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.AddPageCompleted (address_entry.Text' path_entry.Text); };                      CheckButton check_button = new CheckButton ("Fetch prior revisions") { Active = false };                  check_button.Toggled += delegate { Controller.HistoryItemChanged (check_button.Active); };                    AddOption (check_button);                  AddButton (cancel_button);                  AddButton (add_button);                    Controller.HistoryItemChanged (check_button.Active);                  Controller.CheckAddPage (address_entry.Text' path_entry.Text' 1);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Add) {                  Header = "Where’s your project hosted?";                    VBox layout_vertical = new VBox (false' 16);                  HBox layout_fields   = new HBox (true' 32);                  VBox layout_address  = new VBox (true' 0);                  VBox layout_path     = new VBox (true' 0);                    ListStore store = new ListStore (typeof (string)' typeof (Gdk.Pixbuf)' typeof (string)' typeof (Preset));                    SparkleTreeView tree_view = new SparkleTreeView (store) {                      HeadersVisible = false'                      SearchColumn = -1'                      EnableSearch = false                  };                    ScrolledWindow scrolled_window = new ScrolledWindow () { ShadowType = ShadowType.In };                  scrolled_window.SetPolicy (PolicyType.Never' PolicyType.Automatic);                    // Padding column                  tree_view.AppendColumn ("Padding"' new Gtk.CellRendererText ()' "text"' 0);                  tree_view.Columns [0].Cells [0].Xpad = 4;                    // Icon column                  tree_view.AppendColumn ("Icon"' new Gtk.CellRendererPixbuf ()' "pixbuf"' 1);                  tree_view.Columns [1].Cells [0].Xpad = 4;                    // Service column                  TreeViewColumn service_column = new TreeViewColumn () { Title = "Service" };                  CellRendererText service_cell = new CellRendererText () { Ypad = 8 };                  service_column.PackStart (service_cell' true);                  service_column.SetCellDataFunc (service_cell' new TreeCellDataFunc (RenderServiceColumn));                    foreach (Preset preset in Controller.Presets) {                      store.AppendValues (""' new Gdk.Pixbuf (preset.ImagePath)'                          "<span size=\"small\"><b>" + preset.Name + "</b>\n" +                              "<span fgcolor=\"" + SparkleShare.UI.SecondaryTextColor + "\">" + preset.Description + "</span>" +                          "</span>"' preset);                  }                    tree_view.AppendColumn (service_column);                  scrolled_window.Add (tree_view);                    Entry address_entry = new Entry () {                      Text = Controller.PreviousAddress'                      Sensitive = (Controller.SelectedPreset.Address == null)'                      ActivatesDefault = true                  };                    Entry path_entry = new Entry () {                      Text = Controller.PreviousPath'                      Sensitive = (Controller.SelectedPreset.Path == null)'                      ActivatesDefault = true                  };                    tree_view.ButtonReleaseEvent += delegate {                      path_entry.GrabFocus ();                  };                    Label address_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.AddressExample + "</span>"                  };                    Label path_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.PathExample + "</span>"                  };                      TreeSelection default_selection = tree_view.Selection;                  TreePath default_path = new TreePath ("" + Controller.SelectedPresetIndex);                  default_selection.SelectPath (default_path);                    tree_view.Model.Foreach (new TreeModelForeachFunc (                      delegate (ITreeModel model' TreePath path' TreeIter iter) {                          string address;                            try {                              address = (model.GetValue (iter' 2) as Preset).Address;                            } catch (NullReferenceException) {                              address = "";                          }                            if (!string.IsNullOrEmpty (address) &&                              address.Equals (Controller.PreviousAddress)) {                                tree_view.SetCursor (path' service_column' false);                              Preset preset = (Preset) model.GetValue (iter' 2);                                if (preset.Address != null)                                  address_entry.Sensitive = false;                                if (preset.Path != null)                                  path_entry.Sensitive = false;                                return true;                                                        } else {                              return false;                          }                      }                  ));                    layout_address.PackStart (new Label () {                          Markup = "<b>" + "Address" + "</b>"'                          Xalign = 0                      }' true' true' 0);                    layout_address.PackStart (address_entry' false' false' 0);                  layout_address.PackStart (address_example' false' false' 0);                    path_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    layout_path.PackStart (new Label () {                      Markup = "<b>" + "Remote Path" + "</b>"'                      Xalign = 0                  }' true' true' 0);                                    layout_path.PackStart (path_entry' false' false' 0);                  layout_path.PackStart (path_example' false' false' 0);                    layout_fields.PackStart (layout_address' true' true' 0);                  layout_fields.PackStart (layout_path' true' true' 0);                    layout_vertical.PackStart (scrolled_window' true' true' 0);                  layout_vertical.PackStart (layout_fields' false' false' 0);                    tree_view.ScrollToCell (new TreePath ("" + Controller.SelectedPresetIndex)' null' true' 0' 0);                    Add (layout_vertical);                      if (string.IsNullOrEmpty (path_entry.Text)) {                      address_entry.GrabFocus ();                      address_entry.Position = -1;                  } else {                      path_entry.GrabFocus ();                      path_entry.Position = -1;                  }                    Button cancel_button = new Button ("Cancel");                  Button add_button = new Button ("Add") { Sensitive = false };                      Controller.ChangeAddressFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          address_entry.Text      = text;                          address_entry.Sensitive = (state == FieldState.Enabled);                          address_example.Markup  =  "<span size=\"small\" fgcolor=\"" +                              SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.ChangePathFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          path_entry.Text      = text;                          path_entry.Sensitive = (state == FieldState.Enabled);                          path_example.Markup  =  "<span size=\"small\" fgcolor=\""                              + SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { add_button.Sensitive = button_enabled; });                  };                      tree_view.CursorChanged += delegate (object sender' EventArgs e) {                      Controller.SelectedPresetChanged (tree_view.SelectedRow);                  };                    address_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.AddPageCompleted (address_entry.Text' path_entry.Text); };                      CheckButton check_button = new CheckButton ("Fetch prior revisions") { Active = false };                  check_button.Toggled += delegate { Controller.HistoryItemChanged (check_button.Active); };                    AddOption (check_button);                  AddButton (cancel_button);                  AddButton (add_button);                    Controller.HistoryItemChanged (check_button.Active);                  Controller.CheckAddPage (address_entry.Text' path_entry.Text' 1);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Add) {                  Header = "Where’s your project hosted?";                    VBox layout_vertical = new VBox (false' 16);                  HBox layout_fields   = new HBox (true' 32);                  VBox layout_address  = new VBox (true' 0);                  VBox layout_path     = new VBox (true' 0);                    ListStore store = new ListStore (typeof (string)' typeof (Gdk.Pixbuf)' typeof (string)' typeof (Preset));                    SparkleTreeView tree_view = new SparkleTreeView (store) {                      HeadersVisible = false'                      SearchColumn = -1'                      EnableSearch = false                  };                    ScrolledWindow scrolled_window = new ScrolledWindow () { ShadowType = ShadowType.In };                  scrolled_window.SetPolicy (PolicyType.Never' PolicyType.Automatic);                    // Padding column                  tree_view.AppendColumn ("Padding"' new Gtk.CellRendererText ()' "text"' 0);                  tree_view.Columns [0].Cells [0].Xpad = 4;                    // Icon column                  tree_view.AppendColumn ("Icon"' new Gtk.CellRendererPixbuf ()' "pixbuf"' 1);                  tree_view.Columns [1].Cells [0].Xpad = 4;                    // Service column                  TreeViewColumn service_column = new TreeViewColumn () { Title = "Service" };                  CellRendererText service_cell = new CellRendererText () { Ypad = 8 };                  service_column.PackStart (service_cell' true);                  service_column.SetCellDataFunc (service_cell' new TreeCellDataFunc (RenderServiceColumn));                    foreach (Preset preset in Controller.Presets) {                      store.AppendValues (""' new Gdk.Pixbuf (preset.ImagePath)'                          "<span size=\"small\"><b>" + preset.Name + "</b>\n" +                              "<span fgcolor=\"" + SparkleShare.UI.SecondaryTextColor + "\">" + preset.Description + "</span>" +                          "</span>"' preset);                  }                    tree_view.AppendColumn (service_column);                  scrolled_window.Add (tree_view);                    Entry address_entry = new Entry () {                      Text = Controller.PreviousAddress'                      Sensitive = (Controller.SelectedPreset.Address == null)'                      ActivatesDefault = true                  };                    Entry path_entry = new Entry () {                      Text = Controller.PreviousPath'                      Sensitive = (Controller.SelectedPreset.Path == null)'                      ActivatesDefault = true                  };                    tree_view.ButtonReleaseEvent += delegate {                      path_entry.GrabFocus ();                  };                    Label address_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.AddressExample + "</span>"                  };                    Label path_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.PathExample + "</span>"                  };                      TreeSelection default_selection = tree_view.Selection;                  TreePath default_path = new TreePath ("" + Controller.SelectedPresetIndex);                  default_selection.SelectPath (default_path);                    tree_view.Model.Foreach (new TreeModelForeachFunc (                      delegate (ITreeModel model' TreePath path' TreeIter iter) {                          string address;                            try {                              address = (model.GetValue (iter' 2) as Preset).Address;                            } catch (NullReferenceException) {                              address = "";                          }                            if (!string.IsNullOrEmpty (address) &&                              address.Equals (Controller.PreviousAddress)) {                                tree_view.SetCursor (path' service_column' false);                              Preset preset = (Preset) model.GetValue (iter' 2);                                if (preset.Address != null)                                  address_entry.Sensitive = false;                                if (preset.Path != null)                                  path_entry.Sensitive = false;                                return true;                                                        } else {                              return false;                          }                      }                  ));                    layout_address.PackStart (new Label () {                          Markup = "<b>" + "Address" + "</b>"'                          Xalign = 0                      }' true' true' 0);                    layout_address.PackStart (address_entry' false' false' 0);                  layout_address.PackStart (address_example' false' false' 0);                    path_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    layout_path.PackStart (new Label () {                      Markup = "<b>" + "Remote Path" + "</b>"'                      Xalign = 0                  }' true' true' 0);                                    layout_path.PackStart (path_entry' false' false' 0);                  layout_path.PackStart (path_example' false' false' 0);                    layout_fields.PackStart (layout_address' true' true' 0);                  layout_fields.PackStart (layout_path' true' true' 0);                    layout_vertical.PackStart (scrolled_window' true' true' 0);                  layout_vertical.PackStart (layout_fields' false' false' 0);                    tree_view.ScrollToCell (new TreePath ("" + Controller.SelectedPresetIndex)' null' true' 0' 0);                    Add (layout_vertical);                      if (string.IsNullOrEmpty (path_entry.Text)) {                      address_entry.GrabFocus ();                      address_entry.Position = -1;                  } else {                      path_entry.GrabFocus ();                      path_entry.Position = -1;                  }                    Button cancel_button = new Button ("Cancel");                  Button add_button = new Button ("Add") { Sensitive = false };                      Controller.ChangeAddressFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          address_entry.Text      = text;                          address_entry.Sensitive = (state == FieldState.Enabled);                          address_example.Markup  =  "<span size=\"small\" fgcolor=\"" +                              SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.ChangePathFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          path_entry.Text      = text;                          path_entry.Sensitive = (state == FieldState.Enabled);                          path_example.Markup  =  "<span size=\"small\" fgcolor=\""                              + SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { add_button.Sensitive = button_enabled; });                  };                      tree_view.CursorChanged += delegate (object sender' EventArgs e) {                      Controller.SelectedPresetChanged (tree_view.SelectedRow);                  };                    address_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.AddPageCompleted (address_entry.Text' path_entry.Text); };                      CheckButton check_button = new CheckButton ("Fetch prior revisions") { Active = false };                  check_button.Toggled += delegate { Controller.HistoryItemChanged (check_button.Active); };                    AddOption (check_button);                  AddButton (cancel_button);                  AddButton (add_button);                    Controller.HistoryItemChanged (check_button.Active);                  Controller.CheckAddPage (address_entry.Text' path_entry.Text' 1);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Add) {                  Header = "Where’s your project hosted?";                    VBox layout_vertical = new VBox (false' 16);                  HBox layout_fields   = new HBox (true' 32);                  VBox layout_address  = new VBox (true' 0);                  VBox layout_path     = new VBox (true' 0);                    ListStore store = new ListStore (typeof (string)' typeof (Gdk.Pixbuf)' typeof (string)' typeof (Preset));                    SparkleTreeView tree_view = new SparkleTreeView (store) {                      HeadersVisible = false'                      SearchColumn = -1'                      EnableSearch = false                  };                    ScrolledWindow scrolled_window = new ScrolledWindow () { ShadowType = ShadowType.In };                  scrolled_window.SetPolicy (PolicyType.Never' PolicyType.Automatic);                    // Padding column                  tree_view.AppendColumn ("Padding"' new Gtk.CellRendererText ()' "text"' 0);                  tree_view.Columns [0].Cells [0].Xpad = 4;                    // Icon column                  tree_view.AppendColumn ("Icon"' new Gtk.CellRendererPixbuf ()' "pixbuf"' 1);                  tree_view.Columns [1].Cells [0].Xpad = 4;                    // Service column                  TreeViewColumn service_column = new TreeViewColumn () { Title = "Service" };                  CellRendererText service_cell = new CellRendererText () { Ypad = 8 };                  service_column.PackStart (service_cell' true);                  service_column.SetCellDataFunc (service_cell' new TreeCellDataFunc (RenderServiceColumn));                    foreach (Preset preset in Controller.Presets) {                      store.AppendValues (""' new Gdk.Pixbuf (preset.ImagePath)'                          "<span size=\"small\"><b>" + preset.Name + "</b>\n" +                              "<span fgcolor=\"" + SparkleShare.UI.SecondaryTextColor + "\">" + preset.Description + "</span>" +                          "</span>"' preset);                  }                    tree_view.AppendColumn (service_column);                  scrolled_window.Add (tree_view);                    Entry address_entry = new Entry () {                      Text = Controller.PreviousAddress'                      Sensitive = (Controller.SelectedPreset.Address == null)'                      ActivatesDefault = true                  };                    Entry path_entry = new Entry () {                      Text = Controller.PreviousPath'                      Sensitive = (Controller.SelectedPreset.Path == null)'                      ActivatesDefault = true                  };                    tree_view.ButtonReleaseEvent += delegate {                      path_entry.GrabFocus ();                  };                    Label address_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.AddressExample + "</span>"                  };                    Label path_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.PathExample + "</span>"                  };                      TreeSelection default_selection = tree_view.Selection;                  TreePath default_path = new TreePath ("" + Controller.SelectedPresetIndex);                  default_selection.SelectPath (default_path);                    tree_view.Model.Foreach (new TreeModelForeachFunc (                      delegate (ITreeModel model' TreePath path' TreeIter iter) {                          string address;                            try {                              address = (model.GetValue (iter' 2) as Preset).Address;                            } catch (NullReferenceException) {                              address = "";                          }                            if (!string.IsNullOrEmpty (address) &&                              address.Equals (Controller.PreviousAddress)) {                                tree_view.SetCursor (path' service_column' false);                              Preset preset = (Preset) model.GetValue (iter' 2);                                if (preset.Address != null)                                  address_entry.Sensitive = false;                                if (preset.Path != null)                                  path_entry.Sensitive = false;                                return true;                                                        } else {                              return false;                          }                      }                  ));                    layout_address.PackStart (new Label () {                          Markup = "<b>" + "Address" + "</b>"'                          Xalign = 0                      }' true' true' 0);                    layout_address.PackStart (address_entry' false' false' 0);                  layout_address.PackStart (address_example' false' false' 0);                    path_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    layout_path.PackStart (new Label () {                      Markup = "<b>" + "Remote Path" + "</b>"'                      Xalign = 0                  }' true' true' 0);                                    layout_path.PackStart (path_entry' false' false' 0);                  layout_path.PackStart (path_example' false' false' 0);                    layout_fields.PackStart (layout_address' true' true' 0);                  layout_fields.PackStart (layout_path' true' true' 0);                    layout_vertical.PackStart (scrolled_window' true' true' 0);                  layout_vertical.PackStart (layout_fields' false' false' 0);                    tree_view.ScrollToCell (new TreePath ("" + Controller.SelectedPresetIndex)' null' true' 0' 0);                    Add (layout_vertical);                      if (string.IsNullOrEmpty (path_entry.Text)) {                      address_entry.GrabFocus ();                      address_entry.Position = -1;                  } else {                      path_entry.GrabFocus ();                      path_entry.Position = -1;                  }                    Button cancel_button = new Button ("Cancel");                  Button add_button = new Button ("Add") { Sensitive = false };                      Controller.ChangeAddressFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          address_entry.Text      = text;                          address_entry.Sensitive = (state == FieldState.Enabled);                          address_example.Markup  =  "<span size=\"small\" fgcolor=\"" +                              SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.ChangePathFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          path_entry.Text      = text;                          path_entry.Sensitive = (state == FieldState.Enabled);                          path_example.Markup  =  "<span size=\"small\" fgcolor=\""                              + SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { add_button.Sensitive = button_enabled; });                  };                      tree_view.CursorChanged += delegate (object sender' EventArgs e) {                      Controller.SelectedPresetChanged (tree_view.SelectedRow);                  };                    address_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.AddPageCompleted (address_entry.Text' path_entry.Text); };                      CheckButton check_button = new CheckButton ("Fetch prior revisions") { Active = false };                  check_button.Toggled += delegate { Controller.HistoryItemChanged (check_button.Active); };                    AddOption (check_button);                  AddButton (cancel_button);                  AddButton (add_button);                    Controller.HistoryItemChanged (check_button.Active);                  Controller.CheckAddPage (address_entry.Text' path_entry.Text' 1);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Add) {                  Header = "Where’s your project hosted?";                    VBox layout_vertical = new VBox (false' 16);                  HBox layout_fields   = new HBox (true' 32);                  VBox layout_address  = new VBox (true' 0);                  VBox layout_path     = new VBox (true' 0);                    ListStore store = new ListStore (typeof (string)' typeof (Gdk.Pixbuf)' typeof (string)' typeof (Preset));                    SparkleTreeView tree_view = new SparkleTreeView (store) {                      HeadersVisible = false'                      SearchColumn = -1'                      EnableSearch = false                  };                    ScrolledWindow scrolled_window = new ScrolledWindow () { ShadowType = ShadowType.In };                  scrolled_window.SetPolicy (PolicyType.Never' PolicyType.Automatic);                    // Padding column                  tree_view.AppendColumn ("Padding"' new Gtk.CellRendererText ()' "text"' 0);                  tree_view.Columns [0].Cells [0].Xpad = 4;                    // Icon column                  tree_view.AppendColumn ("Icon"' new Gtk.CellRendererPixbuf ()' "pixbuf"' 1);                  tree_view.Columns [1].Cells [0].Xpad = 4;                    // Service column                  TreeViewColumn service_column = new TreeViewColumn () { Title = "Service" };                  CellRendererText service_cell = new CellRendererText () { Ypad = 8 };                  service_column.PackStart (service_cell' true);                  service_column.SetCellDataFunc (service_cell' new TreeCellDataFunc (RenderServiceColumn));                    foreach (Preset preset in Controller.Presets) {                      store.AppendValues (""' new Gdk.Pixbuf (preset.ImagePath)'                          "<span size=\"small\"><b>" + preset.Name + "</b>\n" +                              "<span fgcolor=\"" + SparkleShare.UI.SecondaryTextColor + "\">" + preset.Description + "</span>" +                          "</span>"' preset);                  }                    tree_view.AppendColumn (service_column);                  scrolled_window.Add (tree_view);                    Entry address_entry = new Entry () {                      Text = Controller.PreviousAddress'                      Sensitive = (Controller.SelectedPreset.Address == null)'                      ActivatesDefault = true                  };                    Entry path_entry = new Entry () {                      Text = Controller.PreviousPath'                      Sensitive = (Controller.SelectedPreset.Path == null)'                      ActivatesDefault = true                  };                    tree_view.ButtonReleaseEvent += delegate {                      path_entry.GrabFocus ();                  };                    Label address_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.AddressExample + "</span>"                  };                    Label path_example = new Label () {                      Xalign = 0'                      UseMarkup = true'                      Markup = "<span size=\"small\" fgcolor=\"" +                          SparkleShare.UI.SecondaryTextColor + "\">" + Controller.SelectedPreset.PathExample + "</span>"                  };                      TreeSelection default_selection = tree_view.Selection;                  TreePath default_path = new TreePath ("" + Controller.SelectedPresetIndex);                  default_selection.SelectPath (default_path);                    tree_view.Model.Foreach (new TreeModelForeachFunc (                      delegate (ITreeModel model' TreePath path' TreeIter iter) {                          string address;                            try {                              address = (model.GetValue (iter' 2) as Preset).Address;                            } catch (NullReferenceException) {                              address = "";                          }                            if (!string.IsNullOrEmpty (address) &&                              address.Equals (Controller.PreviousAddress)) {                                tree_view.SetCursor (path' service_column' false);                              Preset preset = (Preset) model.GetValue (iter' 2);                                if (preset.Address != null)                                  address_entry.Sensitive = false;                                if (preset.Path != null)                                  path_entry.Sensitive = false;                                return true;                                                        } else {                              return false;                          }                      }                  ));                    layout_address.PackStart (new Label () {                          Markup = "<b>" + "Address" + "</b>"'                          Xalign = 0                      }' true' true' 0);                    layout_address.PackStart (address_entry' false' false' 0);                  layout_address.PackStart (address_example' false' false' 0);                    path_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    layout_path.PackStart (new Label () {                      Markup = "<b>" + "Remote Path" + "</b>"'                      Xalign = 0                  }' true' true' 0);                                    layout_path.PackStart (path_entry' false' false' 0);                  layout_path.PackStart (path_example' false' false' 0);                    layout_fields.PackStart (layout_address' true' true' 0);                  layout_fields.PackStart (layout_path' true' true' 0);                    layout_vertical.PackStart (scrolled_window' true' true' 0);                  layout_vertical.PackStart (layout_fields' false' false' 0);                    tree_view.ScrollToCell (new TreePath ("" + Controller.SelectedPresetIndex)' null' true' 0' 0);                    Add (layout_vertical);                      if (string.IsNullOrEmpty (path_entry.Text)) {                      address_entry.GrabFocus ();                      address_entry.Position = -1;                  } else {                      path_entry.GrabFocus ();                      path_entry.Position = -1;                  }                    Button cancel_button = new Button ("Cancel");                  Button add_button = new Button ("Add") { Sensitive = false };                      Controller.ChangeAddressFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          address_entry.Text      = text;                          address_entry.Sensitive = (state == FieldState.Enabled);                          address_example.Markup  =  "<span size=\"small\" fgcolor=\"" +                              SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.ChangePathFieldEvent += delegate (string text'                      string example_text' FieldState state) {                        Application.Invoke (delegate {                          path_entry.Text      = text;                          path_entry.Sensitive = (state == FieldState.Enabled);                          path_example.Markup  =  "<span size=\"small\" fgcolor=\""                              + SparkleShare.UI.SecondaryTextColor + "\">" + example_text + "</span>";                      });                  };                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { add_button.Sensitive = button_enabled; });                  };                      tree_view.CursorChanged += delegate (object sender' EventArgs e) {                      Controller.SelectedPresetChanged (tree_view.SelectedRow);                  };                    address_entry.Changed += delegate {                      Controller.CheckAddPage (address_entry.Text' path_entry.Text' tree_view.SelectedRow);                  };                    cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.AddPageCompleted (address_entry.Text' path_entry.Text); };                      CheckButton check_button = new CheckButton ("Fetch prior revisions") { Active = false };                  check_button.Toggled += delegate { Controller.HistoryItemChanged (check_button.Active); };                    AddOption (check_button);                  AddButton (cancel_button);                  AddButton (add_button);                    Controller.HistoryItemChanged (check_button.Active);                  Controller.CheckAddPage (address_entry.Text' path_entry.Text' 1);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Invite) {                  Header      = "You’ve received an invite!";                  Description = "Do you want to add this project to SparkleShare?";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label address_label = new Label ("Address:") { Xalign = 1 };                  Label path_label = new Label ("Remote Path:") { Xalign = 1 };                    Label address_value = new Label ("<b>" + Controller.PendingInvite.Address + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    Label path_value = new Label ("<b>" + Controller.PendingInvite.RemotePath + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    table.Attach (address_label' 0' 1' 0' 1);                  table.Attach (address_value' 1' 2' 0' 1);                  table.Attach (path_label' 0' 1' 1' 2);                  table.Attach (path_value' 1' 2' 1' 2);                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                    Button cancel_button = new Button ("Cancel");                  Button add_button    = new Button ("Add");                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.InvitePageCompleted (); };                      AddButton (cancel_button);                  AddButton (add_button);                  Add (wrapper);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Invite) {                  Header      = "You’ve received an invite!";                  Description = "Do you want to add this project to SparkleShare?";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label address_label = new Label ("Address:") { Xalign = 1 };                  Label path_label = new Label ("Remote Path:") { Xalign = 1 };                    Label address_value = new Label ("<b>" + Controller.PendingInvite.Address + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    Label path_value = new Label ("<b>" + Controller.PendingInvite.RemotePath + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    table.Attach (address_label' 0' 1' 0' 1);                  table.Attach (address_value' 1' 2' 0' 1);                  table.Attach (path_label' 0' 1' 1' 2);                  table.Attach (path_value' 1' 2' 1' 2);                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                    Button cancel_button = new Button ("Cancel");                  Button add_button    = new Button ("Add");                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.InvitePageCompleted (); };                      AddButton (cancel_button);                  AddButton (add_button);                  Add (wrapper);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Invite) {                  Header      = "You’ve received an invite!";                  Description = "Do you want to add this project to SparkleShare?";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label address_label = new Label ("Address:") { Xalign = 1 };                  Label path_label = new Label ("Remote Path:") { Xalign = 1 };                    Label address_value = new Label ("<b>" + Controller.PendingInvite.Address + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    Label path_value = new Label ("<b>" + Controller.PendingInvite.RemotePath + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    table.Attach (address_label' 0' 1' 0' 1);                  table.Attach (address_value' 1' 2' 0' 1);                  table.Attach (path_label' 0' 1' 1' 2);                  table.Attach (path_value' 1' 2' 1' 2);                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                    Button cancel_button = new Button ("Cancel");                  Button add_button    = new Button ("Add");                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.InvitePageCompleted (); };                      AddButton (cancel_button);                  AddButton (add_button);                  Add (wrapper);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Invite) {                  Header      = "You’ve received an invite!";                  Description = "Do you want to add this project to SparkleShare?";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label address_label = new Label ("Address:") { Xalign = 1 };                  Label path_label = new Label ("Remote Path:") { Xalign = 1 };                    Label address_value = new Label ("<b>" + Controller.PendingInvite.Address + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    Label path_value = new Label ("<b>" + Controller.PendingInvite.RemotePath + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    table.Attach (address_label' 0' 1' 0' 1);                  table.Attach (address_value' 1' 2' 0' 1);                  table.Attach (path_label' 0' 1' 1' 2);                  table.Attach (path_value' 1' 2' 1' 2);                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                    Button cancel_button = new Button ("Cancel");                  Button add_button    = new Button ("Add");                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.InvitePageCompleted (); };                      AddButton (cancel_button);                  AddButton (add_button);                  Add (wrapper);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Invite) {                  Header      = "You’ve received an invite!";                  Description = "Do you want to add this project to SparkleShare?";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label address_label = new Label ("Address:") { Xalign = 1 };                  Label path_label = new Label ("Remote Path:") { Xalign = 1 };                    Label address_value = new Label ("<b>" + Controller.PendingInvite.Address + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    Label path_value = new Label ("<b>" + Controller.PendingInvite.RemotePath + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    table.Attach (address_label' 0' 1' 0' 1);                  table.Attach (address_value' 1' 2' 0' 1);                  table.Attach (path_label' 0' 1' 1' 2);                  table.Attach (path_value' 1' 2' 1' 2);                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                    Button cancel_button = new Button ("Cancel");                  Button add_button    = new Button ("Add");                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.InvitePageCompleted (); };                      AddButton (cancel_button);                  AddButton (add_button);                  Add (wrapper);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Invite) {                  Header      = "You’ve received an invite!";                  Description = "Do you want to add this project to SparkleShare?";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label address_label = new Label ("Address:") { Xalign = 1 };                  Label path_label = new Label ("Remote Path:") { Xalign = 1 };                    Label address_value = new Label ("<b>" + Controller.PendingInvite.Address + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    Label path_value = new Label ("<b>" + Controller.PendingInvite.RemotePath + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    table.Attach (address_label' 0' 1' 0' 1);                  table.Attach (address_value' 1' 2' 0' 1);                  table.Attach (path_label' 0' 1' 1' 2);                  table.Attach (path_value' 1' 2' 1' 2);                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                    Button cancel_button = new Button ("Cancel");                  Button add_button    = new Button ("Add");                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.InvitePageCompleted (); };                      AddButton (cancel_button);                  AddButton (add_button);                  Add (wrapper);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Invite) {                  Header      = "You’ve received an invite!";                  Description = "Do you want to add this project to SparkleShare?";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label address_label = new Label ("Address:") { Xalign = 1 };                  Label path_label = new Label ("Remote Path:") { Xalign = 1 };                    Label address_value = new Label ("<b>" + Controller.PendingInvite.Address + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    Label path_value = new Label ("<b>" + Controller.PendingInvite.RemotePath + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    table.Attach (address_label' 0' 1' 0' 1);                  table.Attach (address_value' 1' 2' 0' 1);                  table.Attach (path_label' 0' 1' 1' 2);                  table.Attach (path_value' 1' 2' 1' 2);                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                    Button cancel_button = new Button ("Cancel");                  Button add_button    = new Button ("Add");                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.InvitePageCompleted (); };                      AddButton (cancel_button);                  AddButton (add_button);                  Add (wrapper);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Invite) {                  Header      = "You’ve received an invite!";                  Description = "Do you want to add this project to SparkleShare?";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label address_label = new Label ("Address:") { Xalign = 1 };                  Label path_label = new Label ("Remote Path:") { Xalign = 1 };                    Label address_value = new Label ("<b>" + Controller.PendingInvite.Address + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    Label path_value = new Label ("<b>" + Controller.PendingInvite.RemotePath + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    table.Attach (address_label' 0' 1' 0' 1);                  table.Attach (address_value' 1' 2' 0' 1);                  table.Attach (path_label' 0' 1' 1' 2);                  table.Attach (path_value' 1' 2' 1' 2);                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                    Button cancel_button = new Button ("Cancel");                  Button add_button    = new Button ("Add");                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.InvitePageCompleted (); };                      AddButton (cancel_button);                  AddButton (add_button);                  Add (wrapper);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Invite) {                  Header      = "You’ve received an invite!";                  Description = "Do you want to add this project to SparkleShare?";                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    Label address_label = new Label ("Address:") { Xalign = 1 };                  Label path_label = new Label ("Remote Path:") { Xalign = 1 };                    Label address_value = new Label ("<b>" + Controller.PendingInvite.Address + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    Label path_value = new Label ("<b>" + Controller.PendingInvite.RemotePath + "</b>") {                      UseMarkup = true'                      Xalign    = 0                  };                    table.Attach (address_label' 0' 1' 0' 1);                  table.Attach (address_value' 1' 2' 0' 1);                  table.Attach (path_label' 0' 1' 1' 2);                  table.Attach (path_value' 1' 2' 1' 2);                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                    Button cancel_button = new Button ("Cancel");                  Button add_button    = new Button ("Add");                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  add_button.Clicked += delegate { Controller.InvitePageCompleted (); };                      AddButton (cancel_button);                  AddButton (add_button);                  Add (wrapper);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Syncing) {                  Header      = String.Format ("Adding project ‘{0}’…"' Controller.SyncingFolder);                  Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                    ProgressBar progress_bar = new ProgressBar ();                  progress_bar.Fraction    = Controller.ProgressBarPercentage / 100;                    Button cancel_button = new Button () { Label = "Cancel" };                  Button finish_button = new Button ("Finish") { Sensitive = false };                                    Label progress_label = new Label ("Preparing to fetch files…") {                      Justify = Justification.Right'                      Xalign  = 1                  };                                      Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                      Application.Invoke (delegate {                          progress_bar.Fraction = percentage / 100;                          progress_label.Text   = speed;                      });                  };                                    cancel_button.Clicked += delegate { Controller.SyncingCancelled (); };                      VBox bar_wrapper = new VBox (false' 0);                  bar_wrapper.PackStart (progress_bar' false' false' 21);                  bar_wrapper.PackStart (progress_label' false' true' 0);                    Add (bar_wrapper);                  AddButton (cancel_button);                  AddButton (finish_button);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Syncing) {                  Header      = String.Format ("Adding project ‘{0}’…"' Controller.SyncingFolder);                  Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                    ProgressBar progress_bar = new ProgressBar ();                  progress_bar.Fraction    = Controller.ProgressBarPercentage / 100;                    Button cancel_button = new Button () { Label = "Cancel" };                  Button finish_button = new Button ("Finish") { Sensitive = false };                                    Label progress_label = new Label ("Preparing to fetch files…") {                      Justify = Justification.Right'                      Xalign  = 1                  };                                      Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                      Application.Invoke (delegate {                          progress_bar.Fraction = percentage / 100;                          progress_label.Text   = speed;                      });                  };                                    cancel_button.Clicked += delegate { Controller.SyncingCancelled (); };                      VBox bar_wrapper = new VBox (false' 0);                  bar_wrapper.PackStart (progress_bar' false' false' 21);                  bar_wrapper.PackStart (progress_label' false' true' 0);                    Add (bar_wrapper);                  AddButton (cancel_button);                  AddButton (finish_button);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Syncing) {                  Header      = String.Format ("Adding project ‘{0}’…"' Controller.SyncingFolder);                  Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                    ProgressBar progress_bar = new ProgressBar ();                  progress_bar.Fraction    = Controller.ProgressBarPercentage / 100;                    Button cancel_button = new Button () { Label = "Cancel" };                  Button finish_button = new Button ("Finish") { Sensitive = false };                                    Label progress_label = new Label ("Preparing to fetch files…") {                      Justify = Justification.Right'                      Xalign  = 1                  };                                      Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                      Application.Invoke (delegate {                          progress_bar.Fraction = percentage / 100;                          progress_label.Text   = speed;                      });                  };                                    cancel_button.Clicked += delegate { Controller.SyncingCancelled (); };                      VBox bar_wrapper = new VBox (false' 0);                  bar_wrapper.PackStart (progress_bar' false' false' 21);                  bar_wrapper.PackStart (progress_label' false' true' 0);                    Add (bar_wrapper);                  AddButton (cancel_button);                  AddButton (finish_button);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Error) {                  Header = "Oops! Something went wrong" + "…";                    VBox points = new VBox (false' 0);                  Image list_point_one   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_two   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_three = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                    Label label_one = new Label () {                      Markup = "<b>" + Controller.PreviousUrl + "</b> is the address we’ve compiled. " +                      "Does this look alright?"'                      Wrap   = true'                      Xalign = 0                  };                    Label label_two = new Label () {                      Text   = "Is this computer’s Client ID known by the host?"'                      Wrap   = true'                      Xalign = 0                  };                                    points.PackStart (new Label ("Please check the following:") { Xalign = 0 }' false' false' 6);                    HBox point_one = new HBox (false' 0);                  point_one.PackStart (list_point_one' false' false' 0);                  point_one.PackStart (label_one' true' true' 12);                  points.PackStart (point_one' false' false' 12);                                    HBox point_two = new HBox (false' 0);                  point_two.PackStart (list_point_two' false' false' 0);                  point_two.PackStart (label_two' true' true' 12);                  points.PackStart (point_two' false' false' 12);                    if (warnings.Length > 0) {                      string warnings_markup = "";                        foreach (string warning in warnings)                          warnings_markup += "\n<b>" + warning + "</b>";                        Label label_three = new Label () {                          Markup = "Here’s the raw error message:" + warnings_markup'                          Wrap   = true'                          Xalign = 0                      };                        HBox point_three = new HBox (false' 0);                      point_three.PackStart (list_point_three' false' false' 0);                      point_three.PackStart (label_three' true' true' 12);                      points.PackStart (point_three' false' false' 12);                  }                    points.PackStart (new Label ("")' true' true' 0);                    Button cancel_button = new Button ("Cancel");                  Button try_again_button = new Button ("Retry") { Sensitive = true };                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  try_again_button.Clicked += delegate { Controller.ErrorPageCompleted (); };                                      AddButton (cancel_button);                  AddButton (try_again_button);                  Add (points);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Error) {                  Header = "Oops! Something went wrong" + "…";                    VBox points = new VBox (false' 0);                  Image list_point_one   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_two   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_three = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                    Label label_one = new Label () {                      Markup = "<b>" + Controller.PreviousUrl + "</b> is the address we’ve compiled. " +                      "Does this look alright?"'                      Wrap   = true'                      Xalign = 0                  };                    Label label_two = new Label () {                      Text   = "Is this computer’s Client ID known by the host?"'                      Wrap   = true'                      Xalign = 0                  };                                    points.PackStart (new Label ("Please check the following:") { Xalign = 0 }' false' false' 6);                    HBox point_one = new HBox (false' 0);                  point_one.PackStart (list_point_one' false' false' 0);                  point_one.PackStart (label_one' true' true' 12);                  points.PackStart (point_one' false' false' 12);                                    HBox point_two = new HBox (false' 0);                  point_two.PackStart (list_point_two' false' false' 0);                  point_two.PackStart (label_two' true' true' 12);                  points.PackStart (point_two' false' false' 12);                    if (warnings.Length > 0) {                      string warnings_markup = "";                        foreach (string warning in warnings)                          warnings_markup += "\n<b>" + warning + "</b>";                        Label label_three = new Label () {                          Markup = "Here’s the raw error message:" + warnings_markup'                          Wrap   = true'                          Xalign = 0                      };                        HBox point_three = new HBox (false' 0);                      point_three.PackStart (list_point_three' false' false' 0);                      point_three.PackStart (label_three' true' true' 12);                      points.PackStart (point_three' false' false' 12);                  }                    points.PackStart (new Label ("")' true' true' 0);                    Button cancel_button = new Button ("Cancel");                  Button try_again_button = new Button ("Retry") { Sensitive = true };                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  try_again_button.Clicked += delegate { Controller.ErrorPageCompleted (); };                                      AddButton (cancel_button);                  AddButton (try_again_button);                  Add (points);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Error) {                  Header = "Oops! Something went wrong" + "…";                    VBox points = new VBox (false' 0);                  Image list_point_one   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_two   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_three = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                    Label label_one = new Label () {                      Markup = "<b>" + Controller.PreviousUrl + "</b> is the address we’ve compiled. " +                      "Does this look alright?"'                      Wrap   = true'                      Xalign = 0                  };                    Label label_two = new Label () {                      Text   = "Is this computer’s Client ID known by the host?"'                      Wrap   = true'                      Xalign = 0                  };                                    points.PackStart (new Label ("Please check the following:") { Xalign = 0 }' false' false' 6);                    HBox point_one = new HBox (false' 0);                  point_one.PackStart (list_point_one' false' false' 0);                  point_one.PackStart (label_one' true' true' 12);                  points.PackStart (point_one' false' false' 12);                                    HBox point_two = new HBox (false' 0);                  point_two.PackStart (list_point_two' false' false' 0);                  point_two.PackStart (label_two' true' true' 12);                  points.PackStart (point_two' false' false' 12);                    if (warnings.Length > 0) {                      string warnings_markup = "";                        foreach (string warning in warnings)                          warnings_markup += "\n<b>" + warning + "</b>";                        Label label_three = new Label () {                          Markup = "Here’s the raw error message:" + warnings_markup'                          Wrap   = true'                          Xalign = 0                      };                        HBox point_three = new HBox (false' 0);                      point_three.PackStart (list_point_three' false' false' 0);                      point_three.PackStart (label_three' true' true' 12);                      points.PackStart (point_three' false' false' 12);                  }                    points.PackStart (new Label ("")' true' true' 0);                    Button cancel_button = new Button ("Cancel");                  Button try_again_button = new Button ("Retry") { Sensitive = true };                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  try_again_button.Clicked += delegate { Controller.ErrorPageCompleted (); };                                      AddButton (cancel_button);                  AddButton (try_again_button);                  Add (points);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Error) {                  Header = "Oops! Something went wrong" + "…";                    VBox points = new VBox (false' 0);                  Image list_point_one   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_two   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_three = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                    Label label_one = new Label () {                      Markup = "<b>" + Controller.PreviousUrl + "</b> is the address we’ve compiled. " +                      "Does this look alright?"'                      Wrap   = true'                      Xalign = 0                  };                    Label label_two = new Label () {                      Text   = "Is this computer’s Client ID known by the host?"'                      Wrap   = true'                      Xalign = 0                  };                                    points.PackStart (new Label ("Please check the following:") { Xalign = 0 }' false' false' 6);                    HBox point_one = new HBox (false' 0);                  point_one.PackStart (list_point_one' false' false' 0);                  point_one.PackStart (label_one' true' true' 12);                  points.PackStart (point_one' false' false' 12);                                    HBox point_two = new HBox (false' 0);                  point_two.PackStart (list_point_two' false' false' 0);                  point_two.PackStart (label_two' true' true' 12);                  points.PackStart (point_two' false' false' 12);                    if (warnings.Length > 0) {                      string warnings_markup = "";                        foreach (string warning in warnings)                          warnings_markup += "\n<b>" + warning + "</b>";                        Label label_three = new Label () {                          Markup = "Here’s the raw error message:" + warnings_markup'                          Wrap   = true'                          Xalign = 0                      };                        HBox point_three = new HBox (false' 0);                      point_three.PackStart (list_point_three' false' false' 0);                      point_three.PackStart (label_three' true' true' 12);                      points.PackStart (point_three' false' false' 12);                  }                    points.PackStart (new Label ("")' true' true' 0);                    Button cancel_button = new Button ("Cancel");                  Button try_again_button = new Button ("Retry") { Sensitive = true };                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  try_again_button.Clicked += delegate { Controller.ErrorPageCompleted (); };                                      AddButton (cancel_button);                  AddButton (try_again_button);                  Add (points);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Error) {                  Header = "Oops! Something went wrong" + "…";                    VBox points = new VBox (false' 0);                  Image list_point_one   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_two   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_three = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                    Label label_one = new Label () {                      Markup = "<b>" + Controller.PreviousUrl + "</b> is the address we’ve compiled. " +                      "Does this look alright?"'                      Wrap   = true'                      Xalign = 0                  };                    Label label_two = new Label () {                      Text   = "Is this computer’s Client ID known by the host?"'                      Wrap   = true'                      Xalign = 0                  };                                    points.PackStart (new Label ("Please check the following:") { Xalign = 0 }' false' false' 6);                    HBox point_one = new HBox (false' 0);                  point_one.PackStart (list_point_one' false' false' 0);                  point_one.PackStart (label_one' true' true' 12);                  points.PackStart (point_one' false' false' 12);                                    HBox point_two = new HBox (false' 0);                  point_two.PackStart (list_point_two' false' false' 0);                  point_two.PackStart (label_two' true' true' 12);                  points.PackStart (point_two' false' false' 12);                    if (warnings.Length > 0) {                      string warnings_markup = "";                        foreach (string warning in warnings)                          warnings_markup += "\n<b>" + warning + "</b>";                        Label label_three = new Label () {                          Markup = "Here’s the raw error message:" + warnings_markup'                          Wrap   = true'                          Xalign = 0                      };                        HBox point_three = new HBox (false' 0);                      point_three.PackStart (list_point_three' false' false' 0);                      point_three.PackStart (label_three' true' true' 12);                      points.PackStart (point_three' false' false' 12);                  }                    points.PackStart (new Label ("")' true' true' 0);                    Button cancel_button = new Button ("Cancel");                  Button try_again_button = new Button ("Retry") { Sensitive = true };                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  try_again_button.Clicked += delegate { Controller.ErrorPageCompleted (); };                                      AddButton (cancel_button);                  AddButton (try_again_button);                  Add (points);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Error) {                  Header = "Oops! Something went wrong" + "…";                    VBox points = new VBox (false' 0);                  Image list_point_one   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_two   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_three = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                    Label label_one = new Label () {                      Markup = "<b>" + Controller.PreviousUrl + "</b> is the address we’ve compiled. " +                      "Does this look alright?"'                      Wrap   = true'                      Xalign = 0                  };                    Label label_two = new Label () {                      Text   = "Is this computer’s Client ID known by the host?"'                      Wrap   = true'                      Xalign = 0                  };                                    points.PackStart (new Label ("Please check the following:") { Xalign = 0 }' false' false' 6);                    HBox point_one = new HBox (false' 0);                  point_one.PackStart (list_point_one' false' false' 0);                  point_one.PackStart (label_one' true' true' 12);                  points.PackStart (point_one' false' false' 12);                                    HBox point_two = new HBox (false' 0);                  point_two.PackStart (list_point_two' false' false' 0);                  point_two.PackStart (label_two' true' true' 12);                  points.PackStart (point_two' false' false' 12);                    if (warnings.Length > 0) {                      string warnings_markup = "";                        foreach (string warning in warnings)                          warnings_markup += "\n<b>" + warning + "</b>";                        Label label_three = new Label () {                          Markup = "Here’s the raw error message:" + warnings_markup'                          Wrap   = true'                          Xalign = 0                      };                        HBox point_three = new HBox (false' 0);                      point_three.PackStart (list_point_three' false' false' 0);                      point_three.PackStart (label_three' true' true' 12);                      points.PackStart (point_three' false' false' 12);                  }                    points.PackStart (new Label ("")' true' true' 0);                    Button cancel_button = new Button ("Cancel");                  Button try_again_button = new Button ("Retry") { Sensitive = true };                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  try_again_button.Clicked += delegate { Controller.ErrorPageCompleted (); };                                      AddButton (cancel_button);                  AddButton (try_again_button);                  Add (points);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Error) {                  Header = "Oops! Something went wrong" + "…";                    VBox points = new VBox (false' 0);                  Image list_point_one   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_two   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_three = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                    Label label_one = new Label () {                      Markup = "<b>" + Controller.PreviousUrl + "</b> is the address we’ve compiled. " +                      "Does this look alright?"'                      Wrap   = true'                      Xalign = 0                  };                    Label label_two = new Label () {                      Text   = "Is this computer’s Client ID known by the host?"'                      Wrap   = true'                      Xalign = 0                  };                                    points.PackStart (new Label ("Please check the following:") { Xalign = 0 }' false' false' 6);                    HBox point_one = new HBox (false' 0);                  point_one.PackStart (list_point_one' false' false' 0);                  point_one.PackStart (label_one' true' true' 12);                  points.PackStart (point_one' false' false' 12);                                    HBox point_two = new HBox (false' 0);                  point_two.PackStart (list_point_two' false' false' 0);                  point_two.PackStart (label_two' true' true' 12);                  points.PackStart (point_two' false' false' 12);                    if (warnings.Length > 0) {                      string warnings_markup = "";                        foreach (string warning in warnings)                          warnings_markup += "\n<b>" + warning + "</b>";                        Label label_three = new Label () {                          Markup = "Here’s the raw error message:" + warnings_markup'                          Wrap   = true'                          Xalign = 0                      };                        HBox point_three = new HBox (false' 0);                      point_three.PackStart (list_point_three' false' false' 0);                      point_three.PackStart (label_three' true' true' 12);                      points.PackStart (point_three' false' false' 12);                  }                    points.PackStart (new Label ("")' true' true' 0);                    Button cancel_button = new Button ("Cancel");                  Button try_again_button = new Button ("Retry") { Sensitive = true };                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  try_again_button.Clicked += delegate { Controller.ErrorPageCompleted (); };                                      AddButton (cancel_button);                  AddButton (try_again_button);                  Add (points);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Error) {                  Header = "Oops! Something went wrong" + "…";                    VBox points = new VBox (false' 0);                  Image list_point_one   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_two   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_three = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                    Label label_one = new Label () {                      Markup = "<b>" + Controller.PreviousUrl + "</b> is the address we’ve compiled. " +                      "Does this look alright?"'                      Wrap   = true'                      Xalign = 0                  };                    Label label_two = new Label () {                      Text   = "Is this computer’s Client ID known by the host?"'                      Wrap   = true'                      Xalign = 0                  };                                    points.PackStart (new Label ("Please check the following:") { Xalign = 0 }' false' false' 6);                    HBox point_one = new HBox (false' 0);                  point_one.PackStart (list_point_one' false' false' 0);                  point_one.PackStart (label_one' true' true' 12);                  points.PackStart (point_one' false' false' 12);                                    HBox point_two = new HBox (false' 0);                  point_two.PackStart (list_point_two' false' false' 0);                  point_two.PackStart (label_two' true' true' 12);                  points.PackStart (point_two' false' false' 12);                    if (warnings.Length > 0) {                      string warnings_markup = "";                        foreach (string warning in warnings)                          warnings_markup += "\n<b>" + warning + "</b>";                        Label label_three = new Label () {                          Markup = "Here’s the raw error message:" + warnings_markup'                          Wrap   = true'                          Xalign = 0                      };                        HBox point_three = new HBox (false' 0);                      point_three.PackStart (list_point_three' false' false' 0);                      point_three.PackStart (label_three' true' true' 12);                      points.PackStart (point_three' false' false' 12);                  }                    points.PackStart (new Label ("")' true' true' 0);                    Button cancel_button = new Button ("Cancel");                  Button try_again_button = new Button ("Retry") { Sensitive = true };                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  try_again_button.Clicked += delegate { Controller.ErrorPageCompleted (); };                                      AddButton (cancel_button);                  AddButton (try_again_button);                  Add (points);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Error) {                  Header = "Oops! Something went wrong" + "…";                    VBox points = new VBox (false' 0);                  Image list_point_one   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_two   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_three = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                    Label label_one = new Label () {                      Markup = "<b>" + Controller.PreviousUrl + "</b> is the address we’ve compiled. " +                      "Does this look alright?"'                      Wrap   = true'                      Xalign = 0                  };                    Label label_two = new Label () {                      Text   = "Is this computer’s Client ID known by the host?"'                      Wrap   = true'                      Xalign = 0                  };                                    points.PackStart (new Label ("Please check the following:") { Xalign = 0 }' false' false' 6);                    HBox point_one = new HBox (false' 0);                  point_one.PackStart (list_point_one' false' false' 0);                  point_one.PackStart (label_one' true' true' 12);                  points.PackStart (point_one' false' false' 12);                                    HBox point_two = new HBox (false' 0);                  point_two.PackStart (list_point_two' false' false' 0);                  point_two.PackStart (label_two' true' true' 12);                  points.PackStart (point_two' false' false' 12);                    if (warnings.Length > 0) {                      string warnings_markup = "";                        foreach (string warning in warnings)                          warnings_markup += "\n<b>" + warning + "</b>";                        Label label_three = new Label () {                          Markup = "Here’s the raw error message:" + warnings_markup'                          Wrap   = true'                          Xalign = 0                      };                        HBox point_three = new HBox (false' 0);                      point_three.PackStart (list_point_three' false' false' 0);                      point_three.PackStart (label_three' true' true' 12);                      points.PackStart (point_three' false' false' 12);                  }                    points.PackStart (new Label ("")' true' true' 0);                    Button cancel_button = new Button ("Cancel");                  Button try_again_button = new Button ("Retry") { Sensitive = true };                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  try_again_button.Clicked += delegate { Controller.ErrorPageCompleted (); };                                      AddButton (cancel_button);                  AddButton (try_again_button);                  Add (points);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Error) {                  Header = "Oops! Something went wrong" + "…";                    VBox points = new VBox (false' 0);                  Image list_point_one   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_two   = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                  Image list_point_three = new Image (UserInterfaceHelpers.GetIcon ("list-point"' 16));                    Label label_one = new Label () {                      Markup = "<b>" + Controller.PreviousUrl + "</b> is the address we’ve compiled. " +                      "Does this look alright?"'                      Wrap   = true'                      Xalign = 0                  };                    Label label_two = new Label () {                      Text   = "Is this computer’s Client ID known by the host?"'                      Wrap   = true'                      Xalign = 0                  };                                    points.PackStart (new Label ("Please check the following:") { Xalign = 0 }' false' false' 6);                    HBox point_one = new HBox (false' 0);                  point_one.PackStart (list_point_one' false' false' 0);                  point_one.PackStart (label_one' true' true' 12);                  points.PackStart (point_one' false' false' 12);                                    HBox point_two = new HBox (false' 0);                  point_two.PackStart (list_point_two' false' false' 0);                  point_two.PackStart (label_two' true' true' 12);                  points.PackStart (point_two' false' false' 12);                    if (warnings.Length > 0) {                      string warnings_markup = "";                        foreach (string warning in warnings)                          warnings_markup += "\n<b>" + warning + "</b>";                        Label label_three = new Label () {                          Markup = "Here’s the raw error message:" + warnings_markup'                          Wrap   = true'                          Xalign = 0                      };                        HBox point_three = new HBox (false' 0);                      point_three.PackStart (list_point_three' false' false' 0);                      point_three.PackStart (label_three' true' true' 12);                      points.PackStart (point_three' false' false' 12);                  }                    points.PackStart (new Label ("")' true' true' 0);                    Button cancel_button = new Button ("Cancel");                  Button try_again_button = new Button ("Retry") { Sensitive = true };                      cancel_button.Clicked += delegate { Controller.PageCancelled (); };                  try_again_button.Clicked += delegate { Controller.ErrorPageCompleted (); };                                      AddButton (cancel_button);                  AddButton (try_again_button);                  Add (points);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.StorageSetup) {                  Header = string.Format ("Storage type for ‘{0}’"' Controller.SyncingFolder);                  Description = "What type of storage would you like to use?";                    VBox layout_vertical = new VBox (false' 0);                  VBox layout_radio_buttons = new VBox (false' 0) { BorderWidth = 12 };                    foreach (StorageTypeInfo storage_type in SparkleShare.Controller.FetcherAvailableStorageTypes) {                      RadioButton radio_button = new RadioButton (null'                          storage_type.Name + "\n" + storage_type.Description);                        (radio_button.Child as Label).Markup = string.Format(                          "<b>{0}</b>\n<span fgcolor=\"{1}\">{2}</span>"'                          storage_type.Name' SparkleShare.UI.SecondaryTextColor' storage_type.Description);                        (radio_button.Child as Label).Xpad = 9;                                           layout_radio_buttons.PackStart (radio_button' false' false' 9);                      radio_button.Group = (layout_radio_buttons.Children [0] as RadioButton).Group;                  }                    layout_vertical.PackStart (new Label ("")' true' true' 0);                  layout_vertical.PackStart (layout_radio_buttons' false' false' 0);                  layout_vertical.PackStart (new Label ("")' true' true' 0);                  Add (layout_vertical);                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue");                    continue_button.Clicked += delegate {                      int checkbox_index= 0;                      foreach (RadioButton radio_button in layout_radio_buttons.Children) {                          if (radio_button.Active) {                              StorageTypeInfo selected_storage_type = SparkleShare.Controller.FetcherAvailableStorageTypes [checkbox_index];                              Controller.StoragePageCompleted (selected_storage_type.Type);                              return;                          }                            checkbox_index++;                      }                  };                    cancel_button.Clicked += delegate {                      Controller.SyncingCancelled ();                  };                    AddButton (cancel_button);                  AddButton (continue_button);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.StorageSetup) {                  Header = string.Format ("Storage type for ‘{0}’"' Controller.SyncingFolder);                  Description = "What type of storage would you like to use?";                    VBox layout_vertical = new VBox (false' 0);                  VBox layout_radio_buttons = new VBox (false' 0) { BorderWidth = 12 };                    foreach (StorageTypeInfo storage_type in SparkleShare.Controller.FetcherAvailableStorageTypes) {                      RadioButton radio_button = new RadioButton (null'                          storage_type.Name + "\n" + storage_type.Description);                        (radio_button.Child as Label).Markup = string.Format(                          "<b>{0}</b>\n<span fgcolor=\"{1}\">{2}</span>"'                          storage_type.Name' SparkleShare.UI.SecondaryTextColor' storage_type.Description);                        (radio_button.Child as Label).Xpad = 9;                                           layout_radio_buttons.PackStart (radio_button' false' false' 9);                      radio_button.Group = (layout_radio_buttons.Children [0] as RadioButton).Group;                  }                    layout_vertical.PackStart (new Label ("")' true' true' 0);                  layout_vertical.PackStart (layout_radio_buttons' false' false' 0);                  layout_vertical.PackStart (new Label ("")' true' true' 0);                  Add (layout_vertical);                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue");                    continue_button.Clicked += delegate {                      int checkbox_index= 0;                      foreach (RadioButton radio_button in layout_radio_buttons.Children) {                          if (radio_button.Active) {                              StorageTypeInfo selected_storage_type = SparkleShare.Controller.FetcherAvailableStorageTypes [checkbox_index];                              Controller.StoragePageCompleted (selected_storage_type.Type);                              return;                          }                            checkbox_index++;                      }                  };                    cancel_button.Clicked += delegate {                      Controller.SyncingCancelled ();                  };                    AddButton (cancel_button);                  AddButton (continue_button);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.StorageSetup) {                  Header = string.Format ("Storage type for ‘{0}’"' Controller.SyncingFolder);                  Description = "What type of storage would you like to use?";                    VBox layout_vertical = new VBox (false' 0);                  VBox layout_radio_buttons = new VBox (false' 0) { BorderWidth = 12 };                    foreach (StorageTypeInfo storage_type in SparkleShare.Controller.FetcherAvailableStorageTypes) {                      RadioButton radio_button = new RadioButton (null'                          storage_type.Name + "\n" + storage_type.Description);                        (radio_button.Child as Label).Markup = string.Format(                          "<b>{0}</b>\n<span fgcolor=\"{1}\">{2}</span>"'                          storage_type.Name' SparkleShare.UI.SecondaryTextColor' storage_type.Description);                        (radio_button.Child as Label).Xpad = 9;                                           layout_radio_buttons.PackStart (radio_button' false' false' 9);                      radio_button.Group = (layout_radio_buttons.Children [0] as RadioButton).Group;                  }                    layout_vertical.PackStart (new Label ("")' true' true' 0);                  layout_vertical.PackStart (layout_radio_buttons' false' false' 0);                  layout_vertical.PackStart (new Label ("")' true' true' 0);                  Add (layout_vertical);                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue");                    continue_button.Clicked += delegate {                      int checkbox_index= 0;                      foreach (RadioButton radio_button in layout_radio_buttons.Children) {                          if (radio_button.Active) {                              StorageTypeInfo selected_storage_type = SparkleShare.Controller.FetcherAvailableStorageTypes [checkbox_index];                              Controller.StoragePageCompleted (selected_storage_type.Type);                              return;                          }                            checkbox_index++;                      }                  };                    cancel_button.Clicked += delegate {                      Controller.SyncingCancelled ();                  };                    AddButton (cancel_button);                  AddButton (continue_button);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.CryptoSetup || type == PageType.CryptoPassword) {                  if (type == PageType.CryptoSetup) {                      Header      = string.Format ("Encryption password for ‘{0}’"' Controller.SyncingFolder);                      Description = "Please a provide a strong password that you don’t use elsewhere.";                                    } else {                      Header      = string.Format ("‘{0}’ contains encrypted files"' Controller.SyncingFolder);                      Description = "Please enter the password to see their contents.";                  }                    Label password_label = new Label ("<b>" + "Password" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry password_entry = new Entry () {                      Xalign = 0'                      Visibility = false'                      ActivatesDefault = true                  };                                    CheckButton show_password_check_button = new CheckButton ("Make visible") {                      Active = false'                      Xalign = 0'                  };                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    table.Attach (password_label' 0' 1' 0' 1);                  table.Attach (password_entry' 1' 2' 0' 1);                                    table.Attach (show_password_check_button' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                       Image warning_image = new Image (                      UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                    Label warning_label = new Label () {                      Xalign = 0'                      Wrap   = true'                      Text   = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."                  };                    HBox warning_layout = new HBox (false' 0);                  warning_layout.PackStart (warning_image' false' false' 15);                  warning_layout.PackStart (warning_label' true' true' 0);                                    VBox warning_wrapper = new VBox (false' 0);                  warning_wrapper.PackStart (warning_layout' false' false' 15);                    if (type == PageType.CryptoSetup)                      wrapper.PackStart (warning_wrapper' false' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                                                      Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    show_password_check_button.Toggled += delegate {                      password_entry.Visibility = !password_entry.Visibility;                  };                    password_entry.Changed += delegate {                      if (type == PageType.CryptoSetup)                          Controller.CheckCryptoSetupPage (password_entry.Text);                      else                          Controller.CheckCryptoPasswordPage (password_entry.Text);                  };                                     cancel_button.Clicked += delegate { Controller.CryptoPageCancelled (); };                                    continue_button.Clicked += delegate {                       if (type == PageType.CryptoSetup)                          Controller.CryptoSetupPageCompleted (password_entry.Text);                      else                          Controller.CryptoPasswordPageCompleted (password_entry.Text);                  };                                                      Add (wrapper);                    AddButton (cancel_button);                  AddButton (continue_button);                    password_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.CryptoSetup || type == PageType.CryptoPassword) {                  if (type == PageType.CryptoSetup) {                      Header      = string.Format ("Encryption password for ‘{0}’"' Controller.SyncingFolder);                      Description = "Please a provide a strong password that you don’t use elsewhere.";                                    } else {                      Header      = string.Format ("‘{0}’ contains encrypted files"' Controller.SyncingFolder);                      Description = "Please enter the password to see their contents.";                  }                    Label password_label = new Label ("<b>" + "Password" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry password_entry = new Entry () {                      Xalign = 0'                      Visibility = false'                      ActivatesDefault = true                  };                                    CheckButton show_password_check_button = new CheckButton ("Make visible") {                      Active = false'                      Xalign = 0'                  };                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    table.Attach (password_label' 0' 1' 0' 1);                  table.Attach (password_entry' 1' 2' 0' 1);                                    table.Attach (show_password_check_button' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                       Image warning_image = new Image (                      UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                    Label warning_label = new Label () {                      Xalign = 0'                      Wrap   = true'                      Text   = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."                  };                    HBox warning_layout = new HBox (false' 0);                  warning_layout.PackStart (warning_image' false' false' 15);                  warning_layout.PackStart (warning_label' true' true' 0);                                    VBox warning_wrapper = new VBox (false' 0);                  warning_wrapper.PackStart (warning_layout' false' false' 15);                    if (type == PageType.CryptoSetup)                      wrapper.PackStart (warning_wrapper' false' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                                                      Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    show_password_check_button.Toggled += delegate {                      password_entry.Visibility = !password_entry.Visibility;                  };                    password_entry.Changed += delegate {                      if (type == PageType.CryptoSetup)                          Controller.CheckCryptoSetupPage (password_entry.Text);                      else                          Controller.CheckCryptoPasswordPage (password_entry.Text);                  };                                     cancel_button.Clicked += delegate { Controller.CryptoPageCancelled (); };                                    continue_button.Clicked += delegate {                       if (type == PageType.CryptoSetup)                          Controller.CryptoSetupPageCompleted (password_entry.Text);                      else                          Controller.CryptoPasswordPageCompleted (password_entry.Text);                  };                                                      Add (wrapper);                    AddButton (cancel_button);                  AddButton (continue_button);                    password_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.CryptoSetup || type == PageType.CryptoPassword) {                  if (type == PageType.CryptoSetup) {                      Header      = string.Format ("Encryption password for ‘{0}’"' Controller.SyncingFolder);                      Description = "Please a provide a strong password that you don’t use elsewhere.";                                    } else {                      Header      = string.Format ("‘{0}’ contains encrypted files"' Controller.SyncingFolder);                      Description = "Please enter the password to see their contents.";                  }                    Label password_label = new Label ("<b>" + "Password" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry password_entry = new Entry () {                      Xalign = 0'                      Visibility = false'                      ActivatesDefault = true                  };                                    CheckButton show_password_check_button = new CheckButton ("Make visible") {                      Active = false'                      Xalign = 0'                  };                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    table.Attach (password_label' 0' 1' 0' 1);                  table.Attach (password_entry' 1' 2' 0' 1);                                    table.Attach (show_password_check_button' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                       Image warning_image = new Image (                      UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                    Label warning_label = new Label () {                      Xalign = 0'                      Wrap   = true'                      Text   = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."                  };                    HBox warning_layout = new HBox (false' 0);                  warning_layout.PackStart (warning_image' false' false' 15);                  warning_layout.PackStart (warning_label' true' true' 0);                                    VBox warning_wrapper = new VBox (false' 0);                  warning_wrapper.PackStart (warning_layout' false' false' 15);                    if (type == PageType.CryptoSetup)                      wrapper.PackStart (warning_wrapper' false' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                                                      Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    show_password_check_button.Toggled += delegate {                      password_entry.Visibility = !password_entry.Visibility;                  };                    password_entry.Changed += delegate {                      if (type == PageType.CryptoSetup)                          Controller.CheckCryptoSetupPage (password_entry.Text);                      else                          Controller.CheckCryptoPasswordPage (password_entry.Text);                  };                                     cancel_button.Clicked += delegate { Controller.CryptoPageCancelled (); };                                    continue_button.Clicked += delegate {                       if (type == PageType.CryptoSetup)                          Controller.CryptoSetupPageCompleted (password_entry.Text);                      else                          Controller.CryptoPasswordPageCompleted (password_entry.Text);                  };                                                      Add (wrapper);                    AddButton (cancel_button);                  AddButton (continue_button);                    password_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.CryptoSetup || type == PageType.CryptoPassword) {                  if (type == PageType.CryptoSetup) {                      Header      = string.Format ("Encryption password for ‘{0}’"' Controller.SyncingFolder);                      Description = "Please a provide a strong password that you don’t use elsewhere.";                                    } else {                      Header      = string.Format ("‘{0}’ contains encrypted files"' Controller.SyncingFolder);                      Description = "Please enter the password to see their contents.";                  }                    Label password_label = new Label ("<b>" + "Password" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry password_entry = new Entry () {                      Xalign = 0'                      Visibility = false'                      ActivatesDefault = true                  };                                    CheckButton show_password_check_button = new CheckButton ("Make visible") {                      Active = false'                      Xalign = 0'                  };                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    table.Attach (password_label' 0' 1' 0' 1);                  table.Attach (password_entry' 1' 2' 0' 1);                                    table.Attach (show_password_check_button' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                       Image warning_image = new Image (                      UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                    Label warning_label = new Label () {                      Xalign = 0'                      Wrap   = true'                      Text   = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."                  };                    HBox warning_layout = new HBox (false' 0);                  warning_layout.PackStart (warning_image' false' false' 15);                  warning_layout.PackStart (warning_label' true' true' 0);                                    VBox warning_wrapper = new VBox (false' 0);                  warning_wrapper.PackStart (warning_layout' false' false' 15);                    if (type == PageType.CryptoSetup)                      wrapper.PackStart (warning_wrapper' false' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                                                      Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    show_password_check_button.Toggled += delegate {                      password_entry.Visibility = !password_entry.Visibility;                  };                    password_entry.Changed += delegate {                      if (type == PageType.CryptoSetup)                          Controller.CheckCryptoSetupPage (password_entry.Text);                      else                          Controller.CheckCryptoPasswordPage (password_entry.Text);                  };                                     cancel_button.Clicked += delegate { Controller.CryptoPageCancelled (); };                                    continue_button.Clicked += delegate {                       if (type == PageType.CryptoSetup)                          Controller.CryptoSetupPageCompleted (password_entry.Text);                      else                          Controller.CryptoPasswordPageCompleted (password_entry.Text);                  };                                                      Add (wrapper);                    AddButton (cancel_button);                  AddButton (continue_button);                    password_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.CryptoSetup || type == PageType.CryptoPassword) {                  if (type == PageType.CryptoSetup) {                      Header      = string.Format ("Encryption password for ‘{0}’"' Controller.SyncingFolder);                      Description = "Please a provide a strong password that you don’t use elsewhere.";                                    } else {                      Header      = string.Format ("‘{0}’ contains encrypted files"' Controller.SyncingFolder);                      Description = "Please enter the password to see their contents.";                  }                    Label password_label = new Label ("<b>" + "Password" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry password_entry = new Entry () {                      Xalign = 0'                      Visibility = false'                      ActivatesDefault = true                  };                                    CheckButton show_password_check_button = new CheckButton ("Make visible") {                      Active = false'                      Xalign = 0'                  };                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    table.Attach (password_label' 0' 1' 0' 1);                  table.Attach (password_entry' 1' 2' 0' 1);                                    table.Attach (show_password_check_button' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                       Image warning_image = new Image (                      UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                    Label warning_label = new Label () {                      Xalign = 0'                      Wrap   = true'                      Text   = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."                  };                    HBox warning_layout = new HBox (false' 0);                  warning_layout.PackStart (warning_image' false' false' 15);                  warning_layout.PackStart (warning_label' true' true' 0);                                    VBox warning_wrapper = new VBox (false' 0);                  warning_wrapper.PackStart (warning_layout' false' false' 15);                    if (type == PageType.CryptoSetup)                      wrapper.PackStart (warning_wrapper' false' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                                                      Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    show_password_check_button.Toggled += delegate {                      password_entry.Visibility = !password_entry.Visibility;                  };                    password_entry.Changed += delegate {                      if (type == PageType.CryptoSetup)                          Controller.CheckCryptoSetupPage (password_entry.Text);                      else                          Controller.CheckCryptoPasswordPage (password_entry.Text);                  };                                     cancel_button.Clicked += delegate { Controller.CryptoPageCancelled (); };                                    continue_button.Clicked += delegate {                       if (type == PageType.CryptoSetup)                          Controller.CryptoSetupPageCompleted (password_entry.Text);                      else                          Controller.CryptoPasswordPageCompleted (password_entry.Text);                  };                                                      Add (wrapper);                    AddButton (cancel_button);                  AddButton (continue_button);                    password_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.CryptoSetup || type == PageType.CryptoPassword) {                  if (type == PageType.CryptoSetup) {                      Header      = string.Format ("Encryption password for ‘{0}’"' Controller.SyncingFolder);                      Description = "Please a provide a strong password that you don’t use elsewhere.";                                    } else {                      Header      = string.Format ("‘{0}’ contains encrypted files"' Controller.SyncingFolder);                      Description = "Please enter the password to see their contents.";                  }                    Label password_label = new Label ("<b>" + "Password" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry password_entry = new Entry () {                      Xalign = 0'                      Visibility = false'                      ActivatesDefault = true                  };                                    CheckButton show_password_check_button = new CheckButton ("Make visible") {                      Active = false'                      Xalign = 0'                  };                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    table.Attach (password_label' 0' 1' 0' 1);                  table.Attach (password_entry' 1' 2' 0' 1);                                    table.Attach (show_password_check_button' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                       Image warning_image = new Image (                      UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                    Label warning_label = new Label () {                      Xalign = 0'                      Wrap   = true'                      Text   = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."                  };                    HBox warning_layout = new HBox (false' 0);                  warning_layout.PackStart (warning_image' false' false' 15);                  warning_layout.PackStart (warning_label' true' true' 0);                                    VBox warning_wrapper = new VBox (false' 0);                  warning_wrapper.PackStart (warning_layout' false' false' 15);                    if (type == PageType.CryptoSetup)                      wrapper.PackStart (warning_wrapper' false' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                                                      Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    show_password_check_button.Toggled += delegate {                      password_entry.Visibility = !password_entry.Visibility;                  };                    password_entry.Changed += delegate {                      if (type == PageType.CryptoSetup)                          Controller.CheckCryptoSetupPage (password_entry.Text);                      else                          Controller.CheckCryptoPasswordPage (password_entry.Text);                  };                                     cancel_button.Clicked += delegate { Controller.CryptoPageCancelled (); };                                    continue_button.Clicked += delegate {                       if (type == PageType.CryptoSetup)                          Controller.CryptoSetupPageCompleted (password_entry.Text);                      else                          Controller.CryptoPasswordPageCompleted (password_entry.Text);                  };                                                      Add (wrapper);                    AddButton (cancel_button);                  AddButton (continue_button);                    password_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.CryptoSetup || type == PageType.CryptoPassword) {                  if (type == PageType.CryptoSetup) {                      Header      = string.Format ("Encryption password for ‘{0}’"' Controller.SyncingFolder);                      Description = "Please a provide a strong password that you don’t use elsewhere.";                                    } else {                      Header      = string.Format ("‘{0}’ contains encrypted files"' Controller.SyncingFolder);                      Description = "Please enter the password to see their contents.";                  }                    Label password_label = new Label ("<b>" + "Password" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry password_entry = new Entry () {                      Xalign = 0'                      Visibility = false'                      ActivatesDefault = true                  };                                    CheckButton show_password_check_button = new CheckButton ("Make visible") {                      Active = false'                      Xalign = 0'                  };                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    table.Attach (password_label' 0' 1' 0' 1);                  table.Attach (password_entry' 1' 2' 0' 1);                                    table.Attach (show_password_check_button' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                       Image warning_image = new Image (                      UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                    Label warning_label = new Label () {                      Xalign = 0'                      Wrap   = true'                      Text   = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."                  };                    HBox warning_layout = new HBox (false' 0);                  warning_layout.PackStart (warning_image' false' false' 15);                  warning_layout.PackStart (warning_label' true' true' 0);                                    VBox warning_wrapper = new VBox (false' 0);                  warning_wrapper.PackStart (warning_layout' false' false' 15);                    if (type == PageType.CryptoSetup)                      wrapper.PackStart (warning_wrapper' false' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                                                      Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    show_password_check_button.Toggled += delegate {                      password_entry.Visibility = !password_entry.Visibility;                  };                    password_entry.Changed += delegate {                      if (type == PageType.CryptoSetup)                          Controller.CheckCryptoSetupPage (password_entry.Text);                      else                          Controller.CheckCryptoPasswordPage (password_entry.Text);                  };                                     cancel_button.Clicked += delegate { Controller.CryptoPageCancelled (); };                                    continue_button.Clicked += delegate {                       if (type == PageType.CryptoSetup)                          Controller.CryptoSetupPageCompleted (password_entry.Text);                      else                          Controller.CryptoPasswordPageCompleted (password_entry.Text);                  };                                                      Add (wrapper);                    AddButton (cancel_button);                  AddButton (continue_button);                    password_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.CryptoSetup || type == PageType.CryptoPassword) {                  if (type == PageType.CryptoSetup) {                      Header      = string.Format ("Encryption password for ‘{0}’"' Controller.SyncingFolder);                      Description = "Please a provide a strong password that you don’t use elsewhere.";                                    } else {                      Header      = string.Format ("‘{0}’ contains encrypted files"' Controller.SyncingFolder);                      Description = "Please enter the password to see their contents.";                  }                    Label password_label = new Label ("<b>" + "Password" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry password_entry = new Entry () {                      Xalign = 0'                      Visibility = false'                      ActivatesDefault = true                  };                                    CheckButton show_password_check_button = new CheckButton ("Make visible") {                      Active = false'                      Xalign = 0'                  };                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    table.Attach (password_label' 0' 1' 0' 1);                  table.Attach (password_entry' 1' 2' 0' 1);                                    table.Attach (show_password_check_button' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                       Image warning_image = new Image (                      UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                    Label warning_label = new Label () {                      Xalign = 0'                      Wrap   = true'                      Text   = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."                  };                    HBox warning_layout = new HBox (false' 0);                  warning_layout.PackStart (warning_image' false' false' 15);                  warning_layout.PackStart (warning_label' true' true' 0);                                    VBox warning_wrapper = new VBox (false' 0);                  warning_wrapper.PackStart (warning_layout' false' false' 15);                    if (type == PageType.CryptoSetup)                      wrapper.PackStart (warning_wrapper' false' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                                                      Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    show_password_check_button.Toggled += delegate {                      password_entry.Visibility = !password_entry.Visibility;                  };                    password_entry.Changed += delegate {                      if (type == PageType.CryptoSetup)                          Controller.CheckCryptoSetupPage (password_entry.Text);                      else                          Controller.CheckCryptoPasswordPage (password_entry.Text);                  };                                     cancel_button.Clicked += delegate { Controller.CryptoPageCancelled (); };                                    continue_button.Clicked += delegate {                       if (type == PageType.CryptoSetup)                          Controller.CryptoSetupPageCompleted (password_entry.Text);                      else                          Controller.CryptoPasswordPageCompleted (password_entry.Text);                  };                                                      Add (wrapper);                    AddButton (cancel_button);                  AddButton (continue_button);                    password_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.CryptoSetup || type == PageType.CryptoPassword) {                  if (type == PageType.CryptoSetup) {                      Header      = string.Format ("Encryption password for ‘{0}’"' Controller.SyncingFolder);                      Description = "Please a provide a strong password that you don’t use elsewhere.";                                    } else {                      Header      = string.Format ("‘{0}’ contains encrypted files"' Controller.SyncingFolder);                      Description = "Please enter the password to see their contents.";                  }                    Label password_label = new Label ("<b>" + "Password" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry password_entry = new Entry () {                      Xalign = 0'                      Visibility = false'                      ActivatesDefault = true                  };                                    CheckButton show_password_check_button = new CheckButton ("Make visible") {                      Active = false'                      Xalign = 0'                  };                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    table.Attach (password_label' 0' 1' 0' 1);                  table.Attach (password_entry' 1' 2' 0' 1);                                    table.Attach (show_password_check_button' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                       Image warning_image = new Image (                      UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                    Label warning_label = new Label () {                      Xalign = 0'                      Wrap   = true'                      Text   = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."                  };                    HBox warning_layout = new HBox (false' 0);                  warning_layout.PackStart (warning_image' false' false' 15);                  warning_layout.PackStart (warning_label' true' true' 0);                                    VBox warning_wrapper = new VBox (false' 0);                  warning_wrapper.PackStart (warning_layout' false' false' 15);                    if (type == PageType.CryptoSetup)                      wrapper.PackStart (warning_wrapper' false' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                                                      Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    show_password_check_button.Toggled += delegate {                      password_entry.Visibility = !password_entry.Visibility;                  };                    password_entry.Changed += delegate {                      if (type == PageType.CryptoSetup)                          Controller.CheckCryptoSetupPage (password_entry.Text);                      else                          Controller.CheckCryptoPasswordPage (password_entry.Text);                  };                                     cancel_button.Clicked += delegate { Controller.CryptoPageCancelled (); };                                    continue_button.Clicked += delegate {                       if (type == PageType.CryptoSetup)                          Controller.CryptoSetupPageCompleted (password_entry.Text);                      else                          Controller.CryptoPasswordPageCompleted (password_entry.Text);                  };                                                      Add (wrapper);                    AddButton (cancel_button);                  AddButton (continue_button);                    password_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.CryptoSetup || type == PageType.CryptoPassword) {                  if (type == PageType.CryptoSetup) {                      Header      = string.Format ("Encryption password for ‘{0}’"' Controller.SyncingFolder);                      Description = "Please a provide a strong password that you don’t use elsewhere.";                                    } else {                      Header      = string.Format ("‘{0}’ contains encrypted files"' Controller.SyncingFolder);                      Description = "Please enter the password to see their contents.";                  }                    Label password_label = new Label ("<b>" + "Password" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry password_entry = new Entry () {                      Xalign = 0'                      Visibility = false'                      ActivatesDefault = true                  };                                    CheckButton show_password_check_button = new CheckButton ("Make visible") {                      Active = false'                      Xalign = 0'                  };                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    table.Attach (password_label' 0' 1' 0' 1);                  table.Attach (password_entry' 1' 2' 0' 1);                                    table.Attach (show_password_check_button' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                       Image warning_image = new Image (                      UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                    Label warning_label = new Label () {                      Xalign = 0'                      Wrap   = true'                      Text   = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."                  };                    HBox warning_layout = new HBox (false' 0);                  warning_layout.PackStart (warning_image' false' false' 15);                  warning_layout.PackStart (warning_label' true' true' 0);                                    VBox warning_wrapper = new VBox (false' 0);                  warning_wrapper.PackStart (warning_layout' false' false' 15);                    if (type == PageType.CryptoSetup)                      wrapper.PackStart (warning_wrapper' false' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                                                      Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    show_password_check_button.Toggled += delegate {                      password_entry.Visibility = !password_entry.Visibility;                  };                    password_entry.Changed += delegate {                      if (type == PageType.CryptoSetup)                          Controller.CheckCryptoSetupPage (password_entry.Text);                      else                          Controller.CheckCryptoPasswordPage (password_entry.Text);                  };                                     cancel_button.Clicked += delegate { Controller.CryptoPageCancelled (); };                                    continue_button.Clicked += delegate {                       if (type == PageType.CryptoSetup)                          Controller.CryptoSetupPageCompleted (password_entry.Text);                      else                          Controller.CryptoPasswordPageCompleted (password_entry.Text);                  };                                                      Add (wrapper);                    AddButton (cancel_button);                  AddButton (continue_button);                    password_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.CryptoSetup || type == PageType.CryptoPassword) {                  if (type == PageType.CryptoSetup) {                      Header      = string.Format ("Encryption password for ‘{0}’"' Controller.SyncingFolder);                      Description = "Please a provide a strong password that you don’t use elsewhere.";                                    } else {                      Header      = string.Format ("‘{0}’ contains encrypted files"' Controller.SyncingFolder);                      Description = "Please enter the password to see their contents.";                  }                    Label password_label = new Label ("<b>" + "Password" + "</b>") {                      UseMarkup = true'                      Xalign    = 1                  };                    Entry password_entry = new Entry () {                      Xalign = 0'                      Visibility = false'                      ActivatesDefault = true                  };                                    CheckButton show_password_check_button = new CheckButton ("Make visible") {                      Active = false'                      Xalign = 0'                  };                    Table table = new Table (2' 3' true) {                      RowSpacing    = 6'                      ColumnSpacing = 6                  };                    table.Attach (password_label' 0' 1' 0' 1);                  table.Attach (password_entry' 1' 2' 0' 1);                                    table.Attach (show_password_check_button' 1' 2' 1' 2);                                    VBox wrapper = new VBox (false' 9);                  wrapper.PackStart (table' true' false' 0);                       Image warning_image = new Image (                      UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                    Label warning_label = new Label () {                      Xalign = 0'                      Wrap   = true'                      Text   = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."                  };                    HBox warning_layout = new HBox (false' 0);                  warning_layout.PackStart (warning_image' false' false' 15);                  warning_layout.PackStart (warning_label' true' true' 0);                                    VBox warning_wrapper = new VBox (false' 0);                  warning_wrapper.PackStart (warning_layout' false' false' 15);                    if (type == PageType.CryptoSetup)                      wrapper.PackStart (warning_wrapper' false' false' 0);                                    Button cancel_button = new Button ("Cancel");                  Button continue_button = new Button ("Continue") { Sensitive = false };                                                      Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                      Application.Invoke (delegate { continue_button.Sensitive = button_enabled; });                  };                    show_password_check_button.Toggled += delegate {                      password_entry.Visibility = !password_entry.Visibility;                  };                    password_entry.Changed += delegate {                      if (type == PageType.CryptoSetup)                          Controller.CheckCryptoSetupPage (password_entry.Text);                      else                          Controller.CheckCryptoPasswordPage (password_entry.Text);                  };                                     cancel_button.Clicked += delegate { Controller.CryptoPageCancelled (); };                                    continue_button.Clicked += delegate {                       if (type == PageType.CryptoSetup)                          Controller.CryptoSetupPageCompleted (password_entry.Text);                      else                          Controller.CryptoPasswordPageCompleted (password_entry.Text);                  };                                                      Add (wrapper);                    AddButton (cancel_button);                  AddButton (continue_button);                    password_entry.GrabFocus ();              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Finished) {                  Header      = "Your shared project is ready!";                  Description = "You can find the files in your SparkleShare folder.";                                    UrgencyHint = true;                    Button show_files_button = new Button ("Show Files");                  Button finish_button     = new Button ("Finish");                      show_files_button.Clicked += delegate { Controller.ShowFilesClicked (); };                  finish_button.Clicked += delegate { Controller.FinishPageCompleted (); };                      if (warnings.Length > 0) {                      Image warning_image = new Image (UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                                            Label warning_label = new Label (warnings [0]) {                          Xalign = 0'                          Wrap   = true                      };                        HBox warning_layout = new HBox (false' 0);                      warning_layout.PackStart (warning_image' false' false' 15);                      warning_layout.PackStart (warning_label' true' true' 0);                                            VBox warning_wrapper = new VBox (false' 0);                      warning_wrapper.PackStart (warning_layout' false' false' 0);                        Add (warning_wrapper);                    } else {                      Add (null);                  }                    AddButton (show_files_button);                  AddButton (finish_button);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,ShowPage,The following statement contains a magic number: if (type == PageType.Finished) {                  Header      = "Your shared project is ready!";                  Description = "You can find the files in your SparkleShare folder.";                                    UrgencyHint = true;                    Button show_files_button = new Button ("Show Files");                  Button finish_button     = new Button ("Finish");                      show_files_button.Clicked += delegate { Controller.ShowFilesClicked (); };                  finish_button.Clicked += delegate { Controller.FinishPageCompleted (); };                      if (warnings.Length > 0) {                      Image warning_image = new Image (UserInterfaceHelpers.GetIcon ("dialog-information"' 24));                                            Label warning_label = new Label (warnings [0]) {                          Xalign = 0'                          Wrap   = true                      };                        HBox warning_layout = new HBox (false' 0);                      warning_layout.PackStart (warning_image' false' false' 15);                      warning_layout.PackStart (warning_label' true' true' 0);                                            VBox warning_wrapper = new VBox (false' 0);                      warning_wrapper.PackStart (warning_layout' false' false' 0);                        Add (warning_wrapper);                    } else {                      Add (null);                  }                    AddButton (show_files_button);                  AddButton (finish_button);              }
Magic Number,SparkleShare,Setup,C:\repos\hbons_SparkleShare\SparkleShare\Linux\Setup.cs,RenderServiceColumn,The following statement contains a magic number: string markup = (string) model.GetValue (iter' 2);
Magic Number,SparkleShare,SetupWindow,C:\repos\hbons_SparkleShare\SparkleShare\Linux\SetupWindow.cs,SetupWindow,The following statement contains a magic number: SetSizeRequest (400' 400);
Magic Number,SparkleShare,SetupWindow,C:\repos\hbons_SparkleShare\SparkleShare\Linux\SetupWindow.cs,SetupWindow,The following statement contains a magic number: SetSizeRequest (400' 400);
Magic Number,SparkleShare,SetupWindow,C:\repos\hbons_SparkleShare\SparkleShare\Linux\SetupWindow.cs,SetupWindow,The following statement contains a magic number: VBox layout_vertical = new VBox (false' 16);
Magic Number,SparkleShare,SetupWindow,C:\repos\hbons_SparkleShare\SparkleShare\Linux\SetupWindow.cs,SetupWindow,The following statement contains a magic number: layout_vertical.BorderWidth = 16;
Magic Number,SparkleShare,SetupWindow,C:\repos\hbons_SparkleShare\SparkleShare\Linux\SetupWindow.cs,SetupWindow,The following statement contains a magic number: HBox layout_actions = new HBox (false ' 16);
Magic Number,SparkleShare,SetupWindow,C:\repos\hbons_SparkleShare\SparkleShare\Linux\SetupWindow.cs,CreateButtonBox,The following statement contains a magic number: return new HBox () {                  BorderWidth = 0'                  Homogeneous = false'                  Spacing     = 6              };
Magic Number,SparkleShare,SetupWindow,C:\repos\hbons_SparkleShare\SparkleShare\Linux\SetupWindow.cs,AddButton,The following statement contains a magic number: (button.Child as Label).Xpad = 15;
Magic Number,SparkleShare,StatusIcon,C:\repos\hbons_SparkleShare\SparkleShare\Linux\StatusIcon.cs,CreateMenu,The following statement contains a magic number: folder_item.Image = new Image (UserInterfaceHelpers.GetIcon ("org.sparkleshare.SparkleShare"' 16));
Magic Number,SparkleShare,StatusIcon,C:\repos\hbons_SparkleShare\SparkleShare\Linux\StatusIcon.cs,CreateMenu,The following statement contains a magic number: if (Controller.Projects.Length > 0) {                  int i = 0;                  foreach (ProjectInfo project in Controller.Projects) {                      SparkleMenuItem item = new SparkleMenuItem (project.Name);                      Gdk.Pixbuf folder_icon = UserInterfaceHelpers.GetIcon ("folder"' 16);                        item.Submenu = new Menu ();                        this.state_menu_items [i] = new SparkleMenuItem (project.StatusMessage) { Sensitive = false };                        (item.Submenu as Menu).Add (this.state_menu_items [i]);                      (item.Submenu as Menu).Add (new SeparatorMenuItem ());                        if (project.IsPaused) {                          MenuItem resume_item;                            if (project.UnsyncedChangesInfo.Count > 0) {                              string icons_path = Path.Combine (UserInterface.AssetsPath' "icons"' "hicolor"' "12x12"' "status");                                foreach (KeyValuePair<string' string> pair in project.UnsyncedChangesInfo) {                                  string icon_path = Path.Combine (icons_path' pair.Value.Replace ("-12"' ""));                                    (item.Submenu as Menu).Add (new SparkleMenuItem (pair.Key) {                                      Image     = new Image (icon_path)'                                      Sensitive = false                                  });                              }                                if (!string.IsNullOrEmpty (project.MoreUnsyncedChanges)) {                                  (item.Submenu as Menu).Add (new MenuItem (project.MoreUnsyncedChanges) {                                      Sensitive = false                                  });                              }                                                            (item.Submenu as Menu).Add (new SeparatorMenuItem ());                              resume_item = new MenuItem ("Sync and Resume…");                                                         } else {                              resume_item = new MenuItem ("Resume");                          }                                                    resume_item.Activated += Controller.ResumeDelegate (project.Name);                          (item.Submenu as Menu).Add (resume_item);                                                } else {                          if (Controller.Projects [i].HasError) {                              folder_icon = IconTheme.Default.LoadIcon ("dialog-warning"' 16' IconLookupFlags.GenericFallback);                                                            MenuItem try_again_item = new MenuItem ("Retry Sync");                              try_again_item.Activated += Controller.TryAgainDelegate (project.Name);                              (item.Submenu as Menu).Add (try_again_item);                            } else {                              MenuItem pause_item = new MenuItem ("Pause");                              pause_item.Activated += Controller.PauseDelegate (project.Name);                              (item.Submenu as Menu).Add (pause_item);                          }                      }                        (item.Child as Label).UseUnderline = false;                      item.Image = new Image (folder_icon);                      this.menu.Add (item);                        i++;                  };              }
Magic Number,SparkleShare,StatusIcon,C:\repos\hbons_SparkleShare\SparkleShare\Linux\StatusIcon.cs,CreateMenu,The following statement contains a magic number: if (Controller.Projects.Length > 0) {                  int i = 0;                  foreach (ProjectInfo project in Controller.Projects) {                      SparkleMenuItem item = new SparkleMenuItem (project.Name);                      Gdk.Pixbuf folder_icon = UserInterfaceHelpers.GetIcon ("folder"' 16);                        item.Submenu = new Menu ();                        this.state_menu_items [i] = new SparkleMenuItem (project.StatusMessage) { Sensitive = false };                        (item.Submenu as Menu).Add (this.state_menu_items [i]);                      (item.Submenu as Menu).Add (new SeparatorMenuItem ());                        if (project.IsPaused) {                          MenuItem resume_item;                            if (project.UnsyncedChangesInfo.Count > 0) {                              string icons_path = Path.Combine (UserInterface.AssetsPath' "icons"' "hicolor"' "12x12"' "status");                                foreach (KeyValuePair<string' string> pair in project.UnsyncedChangesInfo) {                                  string icon_path = Path.Combine (icons_path' pair.Value.Replace ("-12"' ""));                                    (item.Submenu as Menu).Add (new SparkleMenuItem (pair.Key) {                                      Image     = new Image (icon_path)'                                      Sensitive = false                                  });                              }                                if (!string.IsNullOrEmpty (project.MoreUnsyncedChanges)) {                                  (item.Submenu as Menu).Add (new MenuItem (project.MoreUnsyncedChanges) {                                      Sensitive = false                                  });                              }                                                            (item.Submenu as Menu).Add (new SeparatorMenuItem ());                              resume_item = new MenuItem ("Sync and Resume…");                                                         } else {                              resume_item = new MenuItem ("Resume");                          }                                                    resume_item.Activated += Controller.ResumeDelegate (project.Name);                          (item.Submenu as Menu).Add (resume_item);                                                } else {                          if (Controller.Projects [i].HasError) {                              folder_icon = IconTheme.Default.LoadIcon ("dialog-warning"' 16' IconLookupFlags.GenericFallback);                                                            MenuItem try_again_item = new MenuItem ("Retry Sync");                              try_again_item.Activated += Controller.TryAgainDelegate (project.Name);                              (item.Submenu as Menu).Add (try_again_item);                            } else {                              MenuItem pause_item = new MenuItem ("Pause");                              pause_item.Activated += Controller.PauseDelegate (project.Name);                              (item.Submenu as Menu).Add (pause_item);                          }                      }                        (item.Child as Label).UseUnderline = false;                      item.Image = new Image (folder_icon);                      this.menu.Add (item);                        i++;                  };              }
Magic Number,SparkleShare,StatusIcon,C:\repos\hbons_SparkleShare\SparkleShare\Linux\StatusIcon.cs,CreateMenu,The following statement contains a magic number: if (Controller.LinkCodeItemEnabled) {                  link_code_item.Submenu = new Menu ();                                    string link_code = SparkleShare.Controller.UserAuthenticationInfo.PublicKey.Substring (0' 20) + "...";                  MenuItem code_item = new MenuItem (link_code) { Sensitive = false };                                    MenuItem copy_item = new MenuItem ("Copy to Clipboard");                  copy_item.Activated += delegate { Controller.CopyToClipboardClicked (); };                                    (link_code_item.Submenu as Menu).Add (code_item);                  (link_code_item.Submenu as Menu).Add (new SeparatorMenuItem ());                  (link_code_item.Submenu as Menu).Add (copy_item);              }
Magic Number,SparkleShare,UserInterface,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterface.cs,UserInterface,The following statement contains a magic number: color = UserInterfaceHelpers.MixColors (                  UserInterfaceHelpers.RGBAToColor (tree_view.StyleContext.GetColor (StateFlags.Selected))'                  UserInterfaceHelpers.RGBAToColor (tree_view.StyleContext.GetBackgroundColor (StateFlags.Selected))'                  0.39);
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,ColorToHex,The following statement contains a magic number: return string.Format ("#{0:X2}{1:X2}{2:X2}"'                  (int) Math.Truncate (color.Red   / 256.00)'                  (int) Math.Truncate (color.Green / 256.00)'                  (int) Math.Truncate (color.Blue  / 256.00));
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,ColorToHex,The following statement contains a magic number: return string.Format ("#{0:X2}{1:X2}{2:X2}"'                  (int) Math.Truncate (color.Red   / 256.00)'                  (int) Math.Truncate (color.Green / 256.00)'                  (int) Math.Truncate (color.Blue  / 256.00));
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,ColorToHex,The following statement contains a magic number: return string.Format ("#{0:X2}{1:X2}{2:X2}"'                  (int) Math.Truncate (color.Red   / 256.00)'                  (int) Math.Truncate (color.Green / 256.00)'                  (int) Math.Truncate (color.Blue  / 256.00));
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,RGBAToColor,The following statement contains a magic number: return new Gdk.Color () {                  Red   = (ushort) (rgba.Red * 65535)'                  Green = (ushort) (rgba.Green * 65535)'                  Blue  = (ushort)(rgba.Blue * 65535)              };
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,RGBAToColor,The following statement contains a magic number: return new Gdk.Color () {                  Red   = (ushort) (rgba.Red * 65535)'                  Green = (ushort) (rgba.Green * 65535)'                  Blue  = (ushort)(rgba.Blue * 65535)              };
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,RGBAToColor,The following statement contains a magic number: return new Gdk.Color () {                  Red   = (ushort) (rgba.Red * 65535)'                  Green = (ushort) (rgba.Green * 65535)'                  Blue  = (ushort)(rgba.Blue * 65535)              };
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,MixColors,The following statement contains a magic number: return new Gdk.Color (                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Red * (1.0 - ratio) +                      second_color.Red * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Green * (1.0 - ratio) +                      second_color.Green * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Blue * (1.0 - ratio) +                      second_color.Blue * ratio))) / 65535)              );
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,MixColors,The following statement contains a magic number: return new Gdk.Color (                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Red * (1.0 - ratio) +                      second_color.Red * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Green * (1.0 - ratio) +                      second_color.Green * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Blue * (1.0 - ratio) +                      second_color.Blue * ratio))) / 65535)              );
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,MixColors,The following statement contains a magic number: return new Gdk.Color (                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Red * (1.0 - ratio) +                      second_color.Red * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Green * (1.0 - ratio) +                      second_color.Green * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Blue * (1.0 - ratio) +                      second_color.Blue * ratio))) / 65535)              );
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,MixColors,The following statement contains a magic number: return new Gdk.Color (                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Red * (1.0 - ratio) +                      second_color.Red * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Green * (1.0 - ratio) +                      second_color.Green * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Blue * (1.0 - ratio) +                      second_color.Blue * ratio))) / 65535)              );
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,MixColors,The following statement contains a magic number: return new Gdk.Color (                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Red * (1.0 - ratio) +                      second_color.Red * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Green * (1.0 - ratio) +                      second_color.Green * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Blue * (1.0 - ratio) +                      second_color.Blue * ratio))) / 65535)              );
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,MixColors,The following statement contains a magic number: return new Gdk.Color (                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Red * (1.0 - ratio) +                      second_color.Red * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Green * (1.0 - ratio) +                      second_color.Green * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Blue * (1.0 - ratio) +                      second_color.Blue * ratio))) / 65535)              );
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,MixColors,The following statement contains a magic number: return new Gdk.Color (                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Red * (1.0 - ratio) +                      second_color.Red * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Green * (1.0 - ratio) +                      second_color.Green * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Blue * (1.0 - ratio) +                      second_color.Blue * ratio))) / 65535)              );
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,MixColors,The following statement contains a magic number: return new Gdk.Color (                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Red * (1.0 - ratio) +                      second_color.Red * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Green * (1.0 - ratio) +                      second_color.Green * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Blue * (1.0 - ratio) +                      second_color.Blue * ratio))) / 65535)              );
Magic Number,SparkleShare,UserInterfaceHelpers,C:\repos\hbons_SparkleShare\SparkleShare\Linux\UserInterfaceHelpers.cs,MixColors,The following statement contains a magic number: return new Gdk.Color (                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Red * (1.0 - ratio) +                      second_color.Red * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Green * (1.0 - ratio) +                      second_color.Green * ratio))) / 65535)'                  Convert.ToByte ((255 * (Math.Min (65535' first_color.Blue * (1.0 - ratio) +                      second_color.Blue * ratio))) / 65535)              );
Magic Number,SparkleShare,AboutController,C:\repos\hbons_SparkleShare\SparkleShare\Common\AboutController.cs,CheckForNewVersion,The following statement contains a magic number: Thread.Sleep (500);
Magic Number,SparkleShare,Avatars,C:\repos\hbons_SparkleShare\SparkleShare\Common\Avatars.cs,GetAvatar,The following statement contains a magic number: try {                  byte [] buffer = client.DownloadData (url);                    if (client.ResponseHeaders ["content-type"].Equals (MediaTypeNames.Image.Jpeg' StringComparison.InvariantCultureIgnoreCase)) {                      avatar_file_path += ".jpg";                    } else if (client.ResponseHeaders ["content-type"].Equals (MediaTypeNames.Image.Gif' StringComparison.InvariantCultureIgnoreCase)) {                      avatar_file_path += ".gif";                                    } else {                      avatar_file_path += ".png";                  }                                    if (buffer.Length > 255) {                      if (!Directory.Exists (avatars_path)) {                          Directory.CreateDirectory (avatars_path);                          Logger.LogInfo ("Avatars"' "Created '" + avatars_path + "'");                      }                                            File.WriteAllBytes (avatar_file_path' buffer);                      Logger.LogInfo ("Avatars"' "Fetched " + size + "x" + size + " avatar for " + email);                                            return avatar_file_path;                                        } else {                      return null;                  }                                } catch (Exception e) {                  Logger.LogInfo ("Avatars"' "Error fetching avatar for " + email' e);                  skipped_avatars.Add (email);                                    return null;              }
Magic Number,SparkleShare,BaseController,C:\repos\hbons_SparkleShare\SparkleShare\Common\BaseController.cs,AddRepository,The following statement contains a magic number: repo.NewChangeSet += delegate (ChangeSet change_set) {                  if (AvatarsEnabled)                      change_set.User.AvatarFilePath = Avatars.GetAvatar (change_set.User.Email' 48' Config.DirectoryPath);                                    NotificationRaised (change_set);              };
Magic Number,SparkleShare,BaseController,C:\repos\hbons_SparkleShare\SparkleShare\Common\BaseController.cs,HandleInvite,The following statement contains a magic number: if (this.fetcher != null &&                  this.fetcher.IsActive) {                                    AlertNotificationRaised ("SparkleShare Setup seems busy"' "Please wait for it to finish");                                } else {                  SparkleInvite invite = new SparkleInvite (path);                                    // It may be that the invite we received a path to isn't                  // fully downloaded yet' so we try to read it several times                  int tries = 0;                  while (!invite.IsValid) {                      Thread.Sleep (100);                      invite = new SparkleInvite (path);                      tries++;                                            if (tries > 10) {                          AlertNotificationRaised ("Oh noes!"' "This invite seems screwed up...");                          break;                      }                  }                                    if (invite.IsValid)                      InviteReceived (invite);                                    File.Delete (path);              }
Magic Number,SparkleShare,BaseController,C:\repos\hbons_SparkleShare\SparkleShare\Common\BaseController.cs,HandleInvite,The following statement contains a magic number: if (this.fetcher != null &&                  this.fetcher.IsActive) {                                    AlertNotificationRaised ("SparkleShare Setup seems busy"' "Please wait for it to finish");                                } else {                  SparkleInvite invite = new SparkleInvite (path);                                    // It may be that the invite we received a path to isn't                  // fully downloaded yet' so we try to read it several times                  int tries = 0;                  while (!invite.IsValid) {                      Thread.Sleep (100);                      invite = new SparkleInvite (path);                      tries++;                                            if (tries > 10) {                          AlertNotificationRaised ("Oh noes!"' "This invite seems screwed up...");                          break;                      }                  }                                    if (invite.IsValid)                      InviteReceived (invite);                                    File.Delete (path);              }
Magic Number,SparkleShare,BaseController,C:\repos\hbons_SparkleShare\SparkleShare\Common\BaseController.cs,DetermineFolderPath,The following statement contains a magic number: int suffix = 2 + Directory.GetDirectories (folder_group_path' folder_name + " (*").Length;
Magic Number,SparkleShare,EventLogController,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,LinkClicked,The following statement contains a magic number: if (href.StartsWith ("http")) {                  SparkleShare.Controller.OpenWebsite (href);                            } else if (href.StartsWith ("restore://") && this.restore_revision_info == null) {                  Regex regex = new Regex ("restore://(.+)/([a-f0-9]+)/(.+)/(.{3} [0-9]+ [0-9]+h[0-9]+)/(.+)");                  Match match = regex.Match (href);                                    if (match.Success) {                      string author_name = match.Groups [3].Value;                      string timestamp   = match.Groups [4].Value;                        this.restore_revision_info = new RevisionInfo () {                          Folder   = new SparkleFolder (match.Groups [1].Value)'                          Revision = match.Groups [2].Value'                          FilePath = Uri.UnescapeDataString (match.Groups [5].Value)                      };                        string file_name = Path.GetFileNameWithoutExtension (this.restore_revision_info.FilePath) +                          " (" + author_name + " " + timestamp + ")" + Path.GetExtension (this.restore_revision_info.FilePath);                        string target_folder_path = Path.Combine (this.restore_revision_info.Folder.FullPath'                          Path.GetDirectoryName (this.restore_revision_info.FilePath));                        ShowSaveDialogEvent (file_name' target_folder_path);                  }                                } else if (href.StartsWith ("back://")) {                  this.history_view_active = false;                  SelectedFolder           = this.selected_folder; // TODO: Return to the same position on the page                    UpdateChooserEnablementEvent (true);                } else if (href.StartsWith ("history://")) {                  this.history_view_active = true;                    ContentLoadingEvent ();                  UpdateSizeInfoEvent ("…"' "…");                  UpdateChooserEnablementEvent (false);                    string folder    = href.Replace ("history://"' "").Split ("/".ToCharArray ()) [0];                  string file_path = href.Replace ("history://" + folder + "/"' "");                    byte [] file_path_bytes = Encoding.Default.GetBytes (file_path);                  file_path               = Encoding.UTF8.GetString (file_path_bytes);                    file_path = Uri.UnescapeDataString (file_path);                    foreach (BaseRepository repo in SparkleShare.Controller.Repositories) {                      if (!repo.Name.Equals (folder))  						continue;    			        new Thread (() => {                          SparkleDelay delay = new SparkleDelay ();                          List<ChangeSet> change_sets = repo.GetChangeSets (file_path);                          string html = GetHistoryHTMLLog (change_sets' file_path);                          delay.Stop ();    						if (!string.IsNullOrEmpty (html))  	                    	UpdateContentEvent (html);                    	}).Start ();                        break;                  }                } else {                  if (href.StartsWith ("file:///"))                      href = href.Substring (7);                                    SparkleShare.Controller.OpenFile (href);              }
Magic Number,SparkleShare,EventLogController,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,LinkClicked,The following statement contains a magic number: if (href.StartsWith ("http")) {                  SparkleShare.Controller.OpenWebsite (href);                            } else if (href.StartsWith ("restore://") && this.restore_revision_info == null) {                  Regex regex = new Regex ("restore://(.+)/([a-f0-9]+)/(.+)/(.{3} [0-9]+ [0-9]+h[0-9]+)/(.+)");                  Match match = regex.Match (href);                                    if (match.Success) {                      string author_name = match.Groups [3].Value;                      string timestamp   = match.Groups [4].Value;                        this.restore_revision_info = new RevisionInfo () {                          Folder   = new SparkleFolder (match.Groups [1].Value)'                          Revision = match.Groups [2].Value'                          FilePath = Uri.UnescapeDataString (match.Groups [5].Value)                      };                        string file_name = Path.GetFileNameWithoutExtension (this.restore_revision_info.FilePath) +                          " (" + author_name + " " + timestamp + ")" + Path.GetExtension (this.restore_revision_info.FilePath);                        string target_folder_path = Path.Combine (this.restore_revision_info.Folder.FullPath'                          Path.GetDirectoryName (this.restore_revision_info.FilePath));                        ShowSaveDialogEvent (file_name' target_folder_path);                  }                                } else if (href.StartsWith ("back://")) {                  this.history_view_active = false;                  SelectedFolder           = this.selected_folder; // TODO: Return to the same position on the page                    UpdateChooserEnablementEvent (true);                } else if (href.StartsWith ("history://")) {                  this.history_view_active = true;                    ContentLoadingEvent ();                  UpdateSizeInfoEvent ("…"' "…");                  UpdateChooserEnablementEvent (false);                    string folder    = href.Replace ("history://"' "").Split ("/".ToCharArray ()) [0];                  string file_path = href.Replace ("history://" + folder + "/"' "");                    byte [] file_path_bytes = Encoding.Default.GetBytes (file_path);                  file_path               = Encoding.UTF8.GetString (file_path_bytes);                    file_path = Uri.UnescapeDataString (file_path);                    foreach (BaseRepository repo in SparkleShare.Controller.Repositories) {                      if (!repo.Name.Equals (folder))  						continue;    			        new Thread (() => {                          SparkleDelay delay = new SparkleDelay ();                          List<ChangeSet> change_sets = repo.GetChangeSets (file_path);                          string html = GetHistoryHTMLLog (change_sets' file_path);                          delay.Stop ();    						if (!string.IsNullOrEmpty (html))  	                    	UpdateContentEvent (html);                    	}).Start ();                        break;                  }                } else {                  if (href.StartsWith ("file:///"))                      href = href.Substring (7);                                    SparkleShare.Controller.OpenFile (href);              }
Magic Number,SparkleShare,EventLogController,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,LinkClicked,The following statement contains a magic number: if (href.StartsWith ("http")) {                  SparkleShare.Controller.OpenWebsite (href);                            } else if (href.StartsWith ("restore://") && this.restore_revision_info == null) {                  Regex regex = new Regex ("restore://(.+)/([a-f0-9]+)/(.+)/(.{3} [0-9]+ [0-9]+h[0-9]+)/(.+)");                  Match match = regex.Match (href);                                    if (match.Success) {                      string author_name = match.Groups [3].Value;                      string timestamp   = match.Groups [4].Value;                        this.restore_revision_info = new RevisionInfo () {                          Folder   = new SparkleFolder (match.Groups [1].Value)'                          Revision = match.Groups [2].Value'                          FilePath = Uri.UnescapeDataString (match.Groups [5].Value)                      };                        string file_name = Path.GetFileNameWithoutExtension (this.restore_revision_info.FilePath) +                          " (" + author_name + " " + timestamp + ")" + Path.GetExtension (this.restore_revision_info.FilePath);                        string target_folder_path = Path.Combine (this.restore_revision_info.Folder.FullPath'                          Path.GetDirectoryName (this.restore_revision_info.FilePath));                        ShowSaveDialogEvent (file_name' target_folder_path);                  }                                } else if (href.StartsWith ("back://")) {                  this.history_view_active = false;                  SelectedFolder           = this.selected_folder; // TODO: Return to the same position on the page                    UpdateChooserEnablementEvent (true);                } else if (href.StartsWith ("history://")) {                  this.history_view_active = true;                    ContentLoadingEvent ();                  UpdateSizeInfoEvent ("…"' "…");                  UpdateChooserEnablementEvent (false);                    string folder    = href.Replace ("history://"' "").Split ("/".ToCharArray ()) [0];                  string file_path = href.Replace ("history://" + folder + "/"' "");                    byte [] file_path_bytes = Encoding.Default.GetBytes (file_path);                  file_path               = Encoding.UTF8.GetString (file_path_bytes);                    file_path = Uri.UnescapeDataString (file_path);                    foreach (BaseRepository repo in SparkleShare.Controller.Repositories) {                      if (!repo.Name.Equals (folder))  						continue;    			        new Thread (() => {                          SparkleDelay delay = new SparkleDelay ();                          List<ChangeSet> change_sets = repo.GetChangeSets (file_path);                          string html = GetHistoryHTMLLog (change_sets' file_path);                          delay.Stop ();    						if (!string.IsNullOrEmpty (html))  	                    	UpdateContentEvent (html);                    	}).Start ();                        break;                  }                } else {                  if (href.StartsWith ("file:///"))                      href = href.Substring (7);                                    SparkleShare.Controller.OpenFile (href);              }
Magic Number,SparkleShare,EventLogController,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,LinkClicked,The following statement contains a magic number: if (href.StartsWith ("http")) {                  SparkleShare.Controller.OpenWebsite (href);                            } else if (href.StartsWith ("restore://") && this.restore_revision_info == null) {                  Regex regex = new Regex ("restore://(.+)/([a-f0-9]+)/(.+)/(.{3} [0-9]+ [0-9]+h[0-9]+)/(.+)");                  Match match = regex.Match (href);                                    if (match.Success) {                      string author_name = match.Groups [3].Value;                      string timestamp   = match.Groups [4].Value;                        this.restore_revision_info = new RevisionInfo () {                          Folder   = new SparkleFolder (match.Groups [1].Value)'                          Revision = match.Groups [2].Value'                          FilePath = Uri.UnescapeDataString (match.Groups [5].Value)                      };                        string file_name = Path.GetFileNameWithoutExtension (this.restore_revision_info.FilePath) +                          " (" + author_name + " " + timestamp + ")" + Path.GetExtension (this.restore_revision_info.FilePath);                        string target_folder_path = Path.Combine (this.restore_revision_info.Folder.FullPath'                          Path.GetDirectoryName (this.restore_revision_info.FilePath));                        ShowSaveDialogEvent (file_name' target_folder_path);                  }                                } else if (href.StartsWith ("back://")) {                  this.history_view_active = false;                  SelectedFolder           = this.selected_folder; // TODO: Return to the same position on the page                    UpdateChooserEnablementEvent (true);                } else if (href.StartsWith ("history://")) {                  this.history_view_active = true;                    ContentLoadingEvent ();                  UpdateSizeInfoEvent ("…"' "…");                  UpdateChooserEnablementEvent (false);                    string folder    = href.Replace ("history://"' "").Split ("/".ToCharArray ()) [0];                  string file_path = href.Replace ("history://" + folder + "/"' "");                    byte [] file_path_bytes = Encoding.Default.GetBytes (file_path);                  file_path               = Encoding.UTF8.GetString (file_path_bytes);                    file_path = Uri.UnescapeDataString (file_path);                    foreach (BaseRepository repo in SparkleShare.Controller.Repositories) {                      if (!repo.Name.Equals (folder))  						continue;    			        new Thread (() => {                          SparkleDelay delay = new SparkleDelay ();                          List<ChangeSet> change_sets = repo.GetChangeSets (file_path);                          string html = GetHistoryHTMLLog (change_sets' file_path);                          delay.Stop ();    						if (!string.IsNullOrEmpty (html))  	                    	UpdateContentEvent (html);                    	}).Start ();                        break;                  }                } else {                  if (href.StartsWith ("file:///"))                      href = href.Substring (7);                                    SparkleShare.Controller.OpenFile (href);              }
Magic Number,SparkleShare,EventLogController,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,LinkClicked,The following statement contains a magic number: if (href.StartsWith ("http")) {                  SparkleShare.Controller.OpenWebsite (href);                            } else if (href.StartsWith ("restore://") && this.restore_revision_info == null) {                  Regex regex = new Regex ("restore://(.+)/([a-f0-9]+)/(.+)/(.{3} [0-9]+ [0-9]+h[0-9]+)/(.+)");                  Match match = regex.Match (href);                                    if (match.Success) {                      string author_name = match.Groups [3].Value;                      string timestamp   = match.Groups [4].Value;                        this.restore_revision_info = new RevisionInfo () {                          Folder   = new SparkleFolder (match.Groups [1].Value)'                          Revision = match.Groups [2].Value'                          FilePath = Uri.UnescapeDataString (match.Groups [5].Value)                      };                        string file_name = Path.GetFileNameWithoutExtension (this.restore_revision_info.FilePath) +                          " (" + author_name + " " + timestamp + ")" + Path.GetExtension (this.restore_revision_info.FilePath);                        string target_folder_path = Path.Combine (this.restore_revision_info.Folder.FullPath'                          Path.GetDirectoryName (this.restore_revision_info.FilePath));                        ShowSaveDialogEvent (file_name' target_folder_path);                  }                                } else if (href.StartsWith ("back://")) {                  this.history_view_active = false;                  SelectedFolder           = this.selected_folder; // TODO: Return to the same position on the page                    UpdateChooserEnablementEvent (true);                } else if (href.StartsWith ("history://")) {                  this.history_view_active = true;                    ContentLoadingEvent ();                  UpdateSizeInfoEvent ("…"' "…");                  UpdateChooserEnablementEvent (false);                    string folder    = href.Replace ("history://"' "").Split ("/".ToCharArray ()) [0];                  string file_path = href.Replace ("history://" + folder + "/"' "");                    byte [] file_path_bytes = Encoding.Default.GetBytes (file_path);                  file_path               = Encoding.UTF8.GetString (file_path_bytes);                    file_path = Uri.UnescapeDataString (file_path);                    foreach (BaseRepository repo in SparkleShare.Controller.Repositories) {                      if (!repo.Name.Equals (folder))  						continue;    			        new Thread (() => {                          SparkleDelay delay = new SparkleDelay ();                          List<ChangeSet> change_sets = repo.GetChangeSets (file_path);                          string html = GetHistoryHTMLLog (change_sets' file_path);                          delay.Stop ();    						if (!string.IsNullOrEmpty (html))  	                    	UpdateContentEvent (html);                    	}).Start ();                        break;                  }                } else {                  if (href.StartsWith ("file:///"))                      href = href.Substring (7);                                    SparkleShare.Controller.OpenFile (href);              }
Magic Number,SparkleShare,EventLogController,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetLog,The following statement contains a magic number: if (list.Count > 100)                  return list.GetRange (0' 100);              else                  return list.GetRange (0' list.Count);
Magic Number,SparkleShare,EventLogController,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetLog,The following statement contains a magic number: if (list.Count > 100)                  return list.GetRange (0' 100);              else                  return list.GetRange (0' list.Count);
Magic Number,SparkleShare,EventLogController,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetHTMLLog,The following statement contains a magic number: int midnight = (int) (DateTime.Today.AddDays (1) - new DateTime (1970' 1' 1)).TotalSeconds;
Magic Number,SparkleShare,EventLogController,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetAvatarFilePath,The following statement contains a magic number: string fetched_avatar = Avatars.GetAvatar (user.Email' 48' SparkleShare.Controller.Config.DirectoryPath);
Magic Number,SparkleShare,SparkleDelay,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,Stop,The following statement contains a magic number: if (ElapsedMilliseconds < 500)                      Thread.Sleep (500 - (int) ElapsedMilliseconds);
Magic Number,SparkleShare,SparkleDelay,C:\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,Stop,The following statement contains a magic number: if (ElapsedMilliseconds < 500)                      Thread.Sleep (500 - (int) ElapsedMilliseconds);
Magic Number,SparkleShare,NoteController,C:\repos\hbons_SparkleShare\SparkleShare\Common\NoteController.cs,NoteController,The following statement contains a magic number: if (SparkleShare.Controller.AvatarsEnabled && !SparkleShare.Controller.FirstRun)                  AvatarFilePath = Avatars.GetAvatar (SparkleShare.Controller.CurrentUser.Email'                      48' SparkleShare.Controller.Config.DirectoryPath);
Magic Number,SparkleShare,SetupController,C:\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,AddPageCompleted,The following statement contains a magic number: if (remote_path.EndsWith (".git"))                  SyncingFolder = remote_path.Substring (0' remote_path.Length - 4);
Magic Number,SparkleShare,SetupController,C:\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,InvitePageCompleted,The following statement contains a magic number: if (PendingInvite.RemotePath.EndsWith (".git"))                  SyncingFolder = PendingInvite.RemotePath.Substring (0' PendingInvite.RemotePath.Length - 4);
Magic Number,SparkleShare,SetupController,C:\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,StoragePageCompleted,The following statement contains a magic number: ProgressBarPercentage = 100.0;
Magic Number,SparkleShare,SetupController,C:\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,StoragePageCompleted,The following statement contains a magic number: new Thread (() => {                  Thread.Sleep (1000);                  SparkleShare.Controller.FinishFetcher (storage_type);                }).Start ();
Magic Number,SparkleShare,SetupController,C:\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,CryptoPasswordPageCompleted,The following statement contains a magic number: ProgressBarPercentage = 100.0;
Magic Number,SparkleShare,SetupController,C:\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,CryptoPasswordPageCompleted,The following statement contains a magic number: new Thread (() => {                  Thread.Sleep (1000);                  SparkleShare.Controller.FinishFetcher (StorageType.Encrypted' password);                }).Start ();
Magic Number,SparkleShare,StatusIconController,C:\repos\hbons_SparkleShare\SparkleShare\Common\StatusIconController.cs,StatusIconController,The following statement contains a magic number: var timer = new Timers.Timer { Interval = 30 * 1000 };
Magic Number,SparkleShare,StatusIconController,C:\repos\hbons_SparkleShare\SparkleShare\Common\StatusIconController.cs,StatusIconController,The following statement contains a magic number: var timer = new Timers.Timer { Interval = 30 * 1000 };
Magic Number,SparkleShare,StatusIconController,C:\repos\hbons_SparkleShare\SparkleShare\Common\StatusIconController.cs,RecentEventsClicked,The following statement contains a magic number: new Thread (() => {                  while (!SparkleShare.Controller.RepositoriesLoaded)                      Thread.Sleep (100);                    SparkleShare.Controller.ShowEventLogWindow ();                            }).Start ();
