Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The method has 179 lines of code.
Complex Method,Sparkles.Git,GitFetcher,C:\repos\hbons_SparkleShare\Sparkles\Git\GitFetcher.cs,Fetch,Cyclomatic complexity of the method is 9
Complex Method,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,SyncDown,Cyclomatic complexity of the method is 8
Complex Method,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ResolveConflict,Cyclomatic complexity of the method is 9
Complex Method,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,Cyclomatic complexity of the method is 21
Complex Method,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,PrepareDirectories,Cyclomatic complexity of the method is 8
Long Statement,Sparkles.Git,GitFetcher,C:\repos\hbons_SparkleShare\Sparkles\Git\GitFetcher.cs,EnableFetchedRepoCrypto,The length of the statement  "                string.Format ("\"openssl enc -d -aes-256-cbc -base64 -S {0} -pass file:{1} -md sha256\""' password_salt' password_file)); " is 122.
Long Statement,Sparkles.Git,GitFetcher,C:\repos\hbons_SparkleShare\Sparkles\Git\GitFetcher.cs,EnableFetchedRepoCrypto,The length of the statement  "                string.Format ("\"openssl enc -e -aes-256-cbc -base64 -S {0} -pass file:{1} -md sha256\""' password_salt' password_file)); " is 122.
Complex Conditional,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ResolveConflict,The conditional expression  "line.StartsWith ("UU") || line.StartsWith ("AA") ||                      line.StartsWith ("AU") || line.StartsWith ("UA")"  is complex.
Complex Conditional,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The conditional expression  "change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)"  is complex.
Complex Conditional,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ResolveSpecialChars,The conditional expression  "s [i] == '\\' &&                      s.Length - i > 3 &&                      char.IsNumber (s [i + 1]) &&                      char.IsNumber (s [i + 2]) &&                      char.IsNumber (s [i + 3])"  is complex.
Magic Number,Sparkles.Git,GitFetcher,C:\repos\hbons_SparkleShare\Sparkles\Git\GitFetcher.cs,Fetch,The following statement contains a magic number: Thread.Sleep (500);
Magic Number,Sparkles.Git,GitFetcher,C:\repos\hbons_SparkleShare\Sparkles\Git\GitFetcher.cs,Fetch,The following statement contains a magic number: OnProgressChanged (100' 0' "");
Magic Number,Sparkles.Git,GitFetcher,C:\repos\hbons_SparkleShare\Sparkles\Git\GitFetcher.cs,Fetch,The following statement contains a magic number: Thread.Sleep (500);
Magic Number,Sparkles.Git,GitCommand,C:\repos\hbons_SparkleShare\Sparkles\Git\GitCommand.cs,ParseProgress,The following statement contains a magic number: if (line.StartsWith ("Git LFS:")) {                  match = progress_regex_lfs_skipped.Match (line);                    int current_file = 0;                  int total_file_count = 0;                  int skipped_file_count = 0;                    if (match.Success) {                      // "skipped" files are objects that have already been transferred                      skipped_file_count = int.Parse (match.Groups [3].Value);                    } else {                        match = progress_regex_lfs.Match (line);                        if (!match.Success)                          return ErrorStatus.None;                  }                    current_file = int.Parse (match.Groups [1].Value);                    if (current_file == 0)                      return ErrorStatus.None;                    total_file_count = int.Parse (match.Groups [2].Value) - skipped_file_count;                    percentage = Math.Round ((double) current_file / total_file_count * 100' 0);                  information = string.Format ("{0} of {1} files"' current_file' total_file_count);                    return ErrorStatus.None;              }
Magic Number,Sparkles.Git,GitCommand,C:\repos\hbons_SparkleShare\Sparkles\Git\GitCommand.cs,ParseProgress,The following statement contains a magic number: if (line.StartsWith ("Git LFS:")) {                  match = progress_regex_lfs_skipped.Match (line);                    int current_file = 0;                  int total_file_count = 0;                  int skipped_file_count = 0;                    if (match.Success) {                      // "skipped" files are objects that have already been transferred                      skipped_file_count = int.Parse (match.Groups [3].Value);                    } else {                        match = progress_regex_lfs.Match (line);                        if (!match.Success)                          return ErrorStatus.None;                  }                    current_file = int.Parse (match.Groups [1].Value);                    if (current_file == 0)                      return ErrorStatus.None;                    total_file_count = int.Parse (match.Groups [2].Value) - skipped_file_count;                    percentage = Math.Round ((double) current_file / total_file_count * 100' 0);                  information = string.Format ("{0} of {1} files"' current_file' total_file_count);                    return ErrorStatus.None;              }
Magic Number,Sparkles.Git,GitCommand,C:\repos\hbons_SparkleShare\Sparkles\Git\GitCommand.cs,ParseProgress,The following statement contains a magic number: if (line.StartsWith ("Git LFS:")) {                  match = progress_regex_lfs_skipped.Match (line);                    int current_file = 0;                  int total_file_count = 0;                  int skipped_file_count = 0;                    if (match.Success) {                      // "skipped" files are objects that have already been transferred                      skipped_file_count = int.Parse (match.Groups [3].Value);                    } else {                        match = progress_regex_lfs.Match (line);                        if (!match.Success)                          return ErrorStatus.None;                  }                    current_file = int.Parse (match.Groups [1].Value);                    if (current_file == 0)                      return ErrorStatus.None;                    total_file_count = int.Parse (match.Groups [2].Value) - skipped_file_count;                    percentage = Math.Round ((double) current_file / total_file_count * 100' 0);                  information = string.Format ("{0} of {1} files"' current_file' total_file_count);                    return ErrorStatus.None;              }
Magic Number,Sparkles.Git,GitCommand,C:\repos\hbons_SparkleShare\Sparkles\Git\GitCommand.cs,ParseProgress,The following statement contains a magic number: if (line.Contains ("Compressing objects")) {                  // "Compressing objects" stage                  percentage = (number / 100 * 20);                } else if (line.Contains ("Writing objects")) {                  percentage = (number / 100 * 80 + 20);                  Match speed_match = speed_regex.Match (line);                    if (speed_match.Success) {                      speed = double.Parse (speed_match.Groups [1].Value' new CultureInfo ("en-US")) * 1024;                        if (speed_match.Groups [2].Value.Equals ("M"))                          speed = speed * 1024;                        information = speed.ToSize ();                  }              }
Magic Number,Sparkles.Git,GitCommand,C:\repos\hbons_SparkleShare\Sparkles\Git\GitCommand.cs,ParseProgress,The following statement contains a magic number: if (line.Contains ("Compressing objects")) {                  // "Compressing objects" stage                  percentage = (number / 100 * 20);                } else if (line.Contains ("Writing objects")) {                  percentage = (number / 100 * 80 + 20);                  Match speed_match = speed_regex.Match (line);                    if (speed_match.Success) {                      speed = double.Parse (speed_match.Groups [1].Value' new CultureInfo ("en-US")) * 1024;                        if (speed_match.Groups [2].Value.Equals ("M"))                          speed = speed * 1024;                        information = speed.ToSize ();                  }              }
Magic Number,Sparkles.Git,GitCommand,C:\repos\hbons_SparkleShare\Sparkles\Git\GitCommand.cs,ParseProgress,The following statement contains a magic number: if (line.Contains ("Compressing objects")) {                  // "Compressing objects" stage                  percentage = (number / 100 * 20);                } else if (line.Contains ("Writing objects")) {                  percentage = (number / 100 * 80 + 20);                  Match speed_match = speed_regex.Match (line);                    if (speed_match.Success) {                      speed = double.Parse (speed_match.Groups [1].Value' new CultureInfo ("en-US")) * 1024;                        if (speed_match.Groups [2].Value.Equals ("M"))                          speed = speed * 1024;                        information = speed.ToSize ();                  }              }
Magic Number,Sparkles.Git,GitCommand,C:\repos\hbons_SparkleShare\Sparkles\Git\GitCommand.cs,ParseProgress,The following statement contains a magic number: if (line.Contains ("Compressing objects")) {                  // "Compressing objects" stage                  percentage = (number / 100 * 20);                } else if (line.Contains ("Writing objects")) {                  percentage = (number / 100 * 80 + 20);                  Match speed_match = speed_regex.Match (line);                    if (speed_match.Success) {                      speed = double.Parse (speed_match.Groups [1].Value' new CultureInfo ("en-US")) * 1024;                        if (speed_match.Groups [2].Value.Equals ("M"))                          speed = speed * 1024;                        information = speed.ToSize ();                  }              }
Magic Number,Sparkles.Git,GitCommand,C:\repos\hbons_SparkleShare\Sparkles\Git\GitCommand.cs,ParseProgress,The following statement contains a magic number: if (line.Contains ("Compressing objects")) {                  // "Compressing objects" stage                  percentage = (number / 100 * 20);                } else if (line.Contains ("Writing objects")) {                  percentage = (number / 100 * 80 + 20);                  Match speed_match = speed_regex.Match (line);                    if (speed_match.Success) {                      speed = double.Parse (speed_match.Groups [1].Value' new CultureInfo ("en-US")) * 1024;                        if (speed_match.Groups [2].Value.Equals ("M"))                          speed = speed * 1024;                        information = speed.ToSize ();                  }              }
Magic Number,Sparkles.Git,GitCommand,C:\repos\hbons_SparkleShare\Sparkles\Git\GitCommand.cs,ParseProgress,The following statement contains a magic number: if (line.Contains ("Compressing objects")) {                  // "Compressing objects" stage                  percentage = (number / 100 * 20);                } else if (line.Contains ("Writing objects")) {                  percentage = (number / 100 * 80 + 20);                  Match speed_match = speed_regex.Match (line);                    if (speed_match.Success) {                      speed = double.Parse (speed_match.Groups [1].Value' new CultureInfo ("en-US")) * 1024;                        if (speed_match.Groups [2].Value.Equals ("M"))                          speed = speed * 1024;                        information = speed.ToSize ();                  }              }
Magic Number,Sparkles.Git,GitCommand,C:\repos\hbons_SparkleShare\Sparkles\Git\GitCommand.cs,ParseProgress,The following statement contains a magic number: if (line.Contains ("Compressing objects")) {                  // "Compressing objects" stage                  percentage = (number / 100 * 20);                } else if (line.Contains ("Writing objects")) {                  percentage = (number / 100 * 80 + 20);                  Match speed_match = speed_regex.Match (line);                    if (speed_match.Success) {                      speed = double.Parse (speed_match.Groups [1].Value' new CultureInfo ("en-US")) * 1024;                        if (speed_match.Groups [2].Value.Equals ("M"))                          speed = speed * 1024;                        information = speed.ToSize ();                  }              }
Magic Number,Sparkles.Git,GitCommand,C:\repos\hbons_SparkleShare\Sparkles\Git\GitCommand.cs,ParseProgress,The following statement contains a magic number: if (line.Contains ("Compressing objects")) {                  // "Compressing objects" stage                  percentage = (number / 100 * 20);                } else if (line.Contains ("Writing objects")) {                  percentage = (number / 100 * 80 + 20);                  Match speed_match = speed_regex.Match (line);                    if (speed_match.Success) {                      speed = double.Parse (speed_match.Groups [1].Value' new CultureInfo ("en-US")) * 1024;                        if (speed_match.Groups [2].Value.Equals ("M"))                          speed = speed * 1024;                        information = speed.ToSize ();                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ResolveConflict,The following statement contains a magic number: foreach (string line in lines) {                  string conflicting_path = line.Substring (3);                  conflicting_path        = EnsureSpecialCharacters (conflicting_path);                  conflicting_path        = conflicting_path.Trim ("\"".ToCharArray ());                    // Remove possible rename indicators                  string [] separators = {" -> \""' " -> "};                  foreach (string separator in separators) {                      if (conflicting_path.Contains (separator)) {                          conflicting_path = conflicting_path.Substring (                              conflicting_path.IndexOf (separator) + separator.Length);                      }                  }                    Logger.LogInfo ("Git"' Name + " | Conflict type: " + line);                    // Ignore conflicts in hidden files and use the local versions                  if (conflicting_path.EndsWith (".sparkleshare") || conflicting_path.EndsWith (".empty")) {                      Logger.LogInfo ("Git"' Name + " | Ignoring conflict in special file: " + conflicting_path);                        // Recover local version                      var git_ours = new GitCommand (LocalPath' "checkout --ours \"" + conflicting_path + "\"");                      git_ours.StartAndWaitForExit ();                        string abs_conflicting_path = Path.Combine (LocalPath' conflicting_path);                        if (File.Exists (abs_conflicting_path))                          File.SetAttributes (abs_conflicting_path' FileAttributes.Hidden);                                    continue;                  }                    Logger.LogInfo ("Git"' Name + " | Resolving: " + conflicting_path);                    // Both the local and server version have been modified                  if (line.StartsWith ("UU") || line.StartsWith ("AA") ||                      line.StartsWith ("AU") || line.StartsWith ("UA")) {                        // Recover local version                      var git_ours = new GitCommand (LocalPath' "checkout --ours \"" + conflicting_path + "\"");                      git_ours.StartAndWaitForExit ();                        // Append a timestamp to local version.                      // Windows doesn't allow colons in the file name' so                      // we use "h" between the hours and minutes instead.                      string timestamp  = DateTime.Now.ToString ("MMM d H\\hmm");                      string our_path = Path.GetFileNameWithoutExtension (conflicting_path) +                          " (" + base.local_config.User.Name + "' " + timestamp + ")" + Path.GetExtension (conflicting_path);                        string abs_conflicting_path = Path.Combine (LocalPath' conflicting_path);                      string abs_our_path         = Path.Combine (LocalPath' our_path);                        if (File.Exists (abs_conflicting_path) && !File.Exists (abs_our_path))                          File.Move (abs_conflicting_path' abs_our_path);                        // Recover server version                      var git_theirs = new GitCommand (LocalPath' "checkout --theirs \"" + conflicting_path + "\"");                      git_theirs.StartAndWaitForExit ();                        trigger_conflict_event = true;                                  // The server version has been modified' but the local version was removed                  } else if (line.StartsWith ("DU")) {                        // The modified local version is already in the checkout' so it just needs to be added.                      // We need to specifically mention the file' so we can't reuse the Add () method                      var git_add = new GitCommand (LocalPath' "add \"" + conflicting_path + "\"");                      git_add.StartAndWaitForExit ();                                      // The local version has been modified' but the server version was removed                  } else if (line.StartsWith ("UD")) {                                            // Recover server version                      var git_theirs = new GitCommand (LocalPath' "checkout --theirs \"" + conflicting_path + "\"");                      git_theirs.StartAndWaitForExit ();                                  // Server and local versions were removed                  } else if (line.StartsWith ("DD")) {                      Logger.LogInfo ("Git"' Name + " | No need to resolve: " + line);                    // New local files                  } else if (line.StartsWith ("??")) {                      Logger.LogInfo ("Git"' Name + " | Found new file' no need to resolve: " + line);                                    } else {                      Logger.LogInfo ("Git"' Name + " | Don't know what to do with: " + line);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string line in lines) {                  if (line.StartsWith ("commit") && !first_pass) {                      entries.Add (entry);                      entry = "";                      line_number = 0;                    } else {                      first_pass = false;                  }                    // Only parse first 250 files to prevent memory issues                  if (line_number < 250) {                      entry += line + "\n";                      line_number++;                  }                    last_entry = entry;              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,GetChangeSetsInternal,The following statement contains a magic number: foreach (string log_entry in entries) {                  Match match = this.log_regex.Match (log_entry);                    if (!match.Success) {                      match = this.merge_regex.Match (log_entry);                        if (!match.Success)                          continue;                  }                    ChangeSet change_set = new ChangeSet ();                    change_set.Folder    = new SparkleFolder (Name);                  change_set.Revision  = match.Groups [1].Value;                  change_set.User      = new User (match.Groups [2].Value' match.Groups [3].Value);                    if (change_set.User.Name == "SparkleShare")                      continue;                    change_set.RemoteUrl = RemoteUrl;                    if (StorageType == StorageType.Encrypted) {                      string password_file_path = Path.Combine (LocalPath' ".git"' "info"' "encryption_password");                      string password = File.ReadAllText (password_file_path);                        try {                          change_set.User = new User (                              change_set.User.Name.AESDecrypt (password)'                              change_set.User.Email.AESDecrypt (password));                        } catch (Exception e) {                          Console.WriteLine (e.StackTrace);                          change_set.User = new User (match.Groups [2].Value' match.Groups [3].Value);                      }                  }                    change_set.Timestamp = new DateTime (int.Parse (match.Groups [4].Value)'                      int.Parse (match.Groups [5].Value)' int.Parse (match.Groups [6].Value)'                      int.Parse (match.Groups [7].Value)' int.Parse (match.Groups [8].Value)'                      int.Parse (match.Groups [9].Value));                    string time_zone     = match.Groups [10].Value;                  int our_offset       = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours;                  int their_offset     = int.Parse (time_zone.Substring (0' 3));                  change_set.Timestamp = change_set.Timestamp.AddHours (their_offset * -1);                  change_set.Timestamp = change_set.Timestamp.AddHours (our_offset);                    string [] entry_lines = log_entry.Split ("\n".ToCharArray ());                    // Parse file list. Lines containing file changes start with ":"                  foreach (string entry_line in entry_lines) {                      // Skip lines containing backspace characters                      if (!entry_line.StartsWith (":") || entry_line.Contains ("\\177"))                          continue;                        string file_path = entry_line.Substring (39);                        if (file_path.Equals (".sparkleshare"))                          continue;                        string type_letter    = entry_line [37].ToString ();                      bool change_is_folder = false;                        if (file_path.EndsWith (".empty")) {                           file_path        = file_path.Substring (0' file_path.Length - ".empty".Length);                          change_is_folder = true;                      }                        try {                          file_path = EnsureSpecialCharacters (file_path);                                                } catch (Exception e) {                          Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                          continue;                      }                        file_path = file_path.Replace ("\\\""' "\"");                        Change change = new Change () {                          Path      = file_path'                          IsFolder  = change_is_folder'                          Timestamp = change_set.Timestamp'                          Type      = ChangeType.Added                      };                        if (type_letter.Equals ("R")) {                          int tab_pos         = entry_line.LastIndexOf ("\t");                          file_path           = entry_line.Substring (42' tab_pos - 42);                          string to_file_path = entry_line.Substring (tab_pos + 1);                            try {                              file_path = EnsureSpecialCharacters (file_path);                                                        } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + file_path + "'"' e);                              continue;                          }                            try {                              to_file_path = EnsureSpecialCharacters (to_file_path);                            } catch (Exception e) {                              Logger.LogInfo ("Local"' "Error parsing file name '" + to_file_path + "'"' e);                              continue;                          }                            file_path    = file_path.Replace ("\\\""' "\"");                          to_file_path = to_file_path.Replace ("\\\""' "\"");                            if (file_path.EndsWith (".empty")) {                              file_path = file_path.Substring (0' file_path.Length - 6);                              change_is_folder = true;                          }                            if (to_file_path.EndsWith (".empty")) {                              to_file_path = to_file_path.Substring (0' to_file_path.Length - 6);                              change_is_folder = true;                          }                                                           change.Path        = file_path;                          change.MovedToPath = to_file_path;                          change.Type        = ChangeType.Moved;                        } else if (type_letter.Equals ("M")) {                          change.Type = ChangeType.Edited;                        } else if (type_letter.Equals ("D")) {                          change.Type = ChangeType.Deleted;                      }                        change_set.Changes.Add (change);                  }                    // Group commits per user' per day                  if (change_sets.Count > 0 && path == null) {                      ChangeSet last_change_set = change_sets [change_sets.Count - 1];                        if (change_set.Timestamp.Year  == last_change_set.Timestamp.Year &&                          change_set.Timestamp.Month == last_change_set.Timestamp.Month &&                          change_set.Timestamp.Day   == last_change_set.Timestamp.Day &&                          change_set.User.Name.Equals (last_change_set.User.Name)) {                            last_change_set.Changes.AddRange (change_set.Changes);                            if (DateTime.Compare (last_change_set.Timestamp' change_set.Timestamp) < 1) {                              last_change_set.FirstTimestamp = last_change_set.Timestamp;                              last_change_set.Timestamp      = change_set.Timestamp;                              last_change_set.Revision       = change_set.Revision;                            } else {                              last_change_set.FirstTimestamp = change_set.Timestamp;                          }                        } else {                          change_sets.Add (change_set);                      }                    } else {                      // Don't show removals or moves in the revision list of a file                      if (path != null) {                          List<Change> changes_to_skip = new List<Change> ();                            foreach (Change change in change_set.Changes) {                              if ((change.Type == ChangeType.Deleted || change.Type == ChangeType.Moved)                                  && change.Path.Equals (path)) {                                    changes_to_skip.Add (change);                              }                          }                            foreach (Change change_to_skip in changes_to_skip)                              change_set.Changes.Remove (change_to_skip);                      }                                                            change_sets.Add (change_set);                  }              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,EnsureSpecialCharacters,The following statement contains a magic number: if (path.StartsWith ("\""))                  path = ResolveSpecialChars (path.Substring (1' path.Length - 2));
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ResolveSpecialChars,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {                  while (s [i] == '\\' &&                      s.Length - i > 3 &&                      char.IsNumber (s [i + 1]) &&                      char.IsNumber (s [i + 2]) &&                      char.IsNumber (s [i + 3])) {                        codes.Add (Convert.ToByte (s.Substring (i + 1' 3)' 8));                      i += 4;                  }                    if (codes.Count > 0) {                      builder.Append (Encoding.UTF8.GetString (codes.ToArray ()));                      codes.Clear ();                  }                    builder.Append (s [i]);              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ResolveSpecialChars,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {                  while (s [i] == '\\' &&                      s.Length - i > 3 &&                      char.IsNumber (s [i + 1]) &&                      char.IsNumber (s [i + 2]) &&                      char.IsNumber (s [i + 3])) {                        codes.Add (Convert.ToByte (s.Substring (i + 1' 3)' 8));                      i += 4;                  }                    if (codes.Count > 0) {                      builder.Append (Encoding.UTF8.GetString (codes.ToArray ()));                      codes.Clear ();                  }                    builder.Append (s [i]);              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ResolveSpecialChars,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {                  while (s [i] == '\\' &&                      s.Length - i > 3 &&                      char.IsNumber (s [i + 1]) &&                      char.IsNumber (s [i + 2]) &&                      char.IsNumber (s [i + 3])) {                        codes.Add (Convert.ToByte (s.Substring (i + 1' 3)' 8));                      i += 4;                  }                    if (codes.Count > 0) {                      builder.Append (Encoding.UTF8.GetString (codes.ToArray ()));                      codes.Clear ();                  }                    builder.Append (s [i]);              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ResolveSpecialChars,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {                  while (s [i] == '\\' &&                      s.Length - i > 3 &&                      char.IsNumber (s [i + 1]) &&                      char.IsNumber (s [i + 2]) &&                      char.IsNumber (s [i + 3])) {                        codes.Add (Convert.ToByte (s.Substring (i + 1' 3)' 8));                      i += 4;                  }                    if (codes.Count > 0) {                      builder.Append (Encoding.UTF8.GetString (codes.ToArray ()));                      codes.Clear ();                  }                    builder.Append (s [i]);              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ResolveSpecialChars,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {                  while (s [i] == '\\' &&                      s.Length - i > 3 &&                      char.IsNumber (s [i + 1]) &&                      char.IsNumber (s [i + 2]) &&                      char.IsNumber (s [i + 3])) {                        codes.Add (Convert.ToByte (s.Substring (i + 1' 3)' 8));                      i += 4;                  }                    if (codes.Count > 0) {                      builder.Append (Encoding.UTF8.GetString (codes.ToArray ()));                      codes.Clear ();                  }                    builder.Append (s [i]);              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ResolveSpecialChars,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {                  while (s [i] == '\\' &&                      s.Length - i > 3 &&                      char.IsNumber (s [i + 1]) &&                      char.IsNumber (s [i + 2]) &&                      char.IsNumber (s [i + 3])) {                        codes.Add (Convert.ToByte (s.Substring (i + 1' 3)' 8));                      i += 4;                  }                    if (codes.Count > 0) {                      builder.Append (Encoding.UTF8.GetString (codes.ToArray ()));                      codes.Clear ();                  }                    builder.Append (s [i]);              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ParseStatus,The following statement contains a magic number: while (!git_status.StandardOutput.EndOfStream) {                  string line = git_status.StandardOutput.ReadLine ();                  line        = line.Trim ();                                    if (line.EndsWith (".empty") || line.EndsWith (".empty\""))                      line = line.Replace (".empty"' "");                    Change change;                                    if (line.StartsWith ("R")) {                      string path = line.Substring (3' line.IndexOf (" -> ") - 3).Trim ("\" ".ToCharArray ());                      string moved_to_path = line.Substring (line.IndexOf (" -> ") + 4).Trim ("\" ".ToCharArray ());                                            change = new Change () {                          Type = ChangeType.Moved'                          Path = EnsureSpecialCharacters (path)'                          MovedToPath = EnsureSpecialCharacters (moved_to_path)                      };                                        } else {                      string path = line.Substring (2).Trim ("\" ".ToCharArray ());                      change = new Change () { Path = EnsureSpecialCharacters (path) };                      change.Type = ChangeType.Added;                        if (line.StartsWith ("M")) {                          change.Type = ChangeType.Edited;                                                } else if (line.StartsWith ("D")) {                          change.Type = ChangeType.Deleted;                      }                  }                    changes.Add (change);              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ParseStatus,The following statement contains a magic number: while (!git_status.StandardOutput.EndOfStream) {                  string line = git_status.StandardOutput.ReadLine ();                  line        = line.Trim ();                                    if (line.EndsWith (".empty") || line.EndsWith (".empty\""))                      line = line.Replace (".empty"' "");                    Change change;                                    if (line.StartsWith ("R")) {                      string path = line.Substring (3' line.IndexOf (" -> ") - 3).Trim ("\" ".ToCharArray ());                      string moved_to_path = line.Substring (line.IndexOf (" -> ") + 4).Trim ("\" ".ToCharArray ());                                            change = new Change () {                          Type = ChangeType.Moved'                          Path = EnsureSpecialCharacters (path)'                          MovedToPath = EnsureSpecialCharacters (moved_to_path)                      };                                        } else {                      string path = line.Substring (2).Trim ("\" ".ToCharArray ());                      change = new Change () { Path = EnsureSpecialCharacters (path) };                      change.Type = ChangeType.Added;                        if (line.StartsWith ("M")) {                          change.Type = ChangeType.Edited;                                                } else if (line.StartsWith ("D")) {                          change.Type = ChangeType.Deleted;                      }                  }                    changes.Add (change);              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ParseStatus,The following statement contains a magic number: while (!git_status.StandardOutput.EndOfStream) {                  string line = git_status.StandardOutput.ReadLine ();                  line        = line.Trim ();                                    if (line.EndsWith (".empty") || line.EndsWith (".empty\""))                      line = line.Replace (".empty"' "");                    Change change;                                    if (line.StartsWith ("R")) {                      string path = line.Substring (3' line.IndexOf (" -> ") - 3).Trim ("\" ".ToCharArray ());                      string moved_to_path = line.Substring (line.IndexOf (" -> ") + 4).Trim ("\" ".ToCharArray ());                                            change = new Change () {                          Type = ChangeType.Moved'                          Path = EnsureSpecialCharacters (path)'                          MovedToPath = EnsureSpecialCharacters (moved_to_path)                      };                                        } else {                      string path = line.Substring (2).Trim ("\" ".ToCharArray ());                      change = new Change () { Path = EnsureSpecialCharacters (path) };                      change.Type = ChangeType.Added;                        if (line.StartsWith ("M")) {                          change.Type = ChangeType.Edited;                                                } else if (line.StartsWith ("D")) {                          change.Type = ChangeType.Deleted;                      }                  }                    changes.Add (change);              }
Magic Number,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,ParseStatus,The following statement contains a magic number: while (!git_status.StandardOutput.EndOfStream) {                  string line = git_status.StandardOutput.ReadLine ();                  line        = line.Trim ();                                    if (line.EndsWith (".empty") || line.EndsWith (".empty\""))                      line = line.Replace (".empty"' "");                    Change change;                                    if (line.StartsWith ("R")) {                      string path = line.Substring (3' line.IndexOf (" -> ") - 3).Trim ("\" ".ToCharArray ());                      string moved_to_path = line.Substring (line.IndexOf (" -> ") + 4).Trim ("\" ".ToCharArray ());                                            change = new Change () {                          Type = ChangeType.Moved'                          Path = EnsureSpecialCharacters (path)'                          MovedToPath = EnsureSpecialCharacters (moved_to_path)                      };                                        } else {                      string path = line.Substring (2).Trim ("\" ".ToCharArray ());                      change = new Change () { Path = EnsureSpecialCharacters (path) };                      change.Type = ChangeType.Added;                        if (line.StartsWith ("M")) {                          change.Type = ChangeType.Edited;                                                } else if (line.StartsWith ("D")) {                          change.Type = ChangeType.Deleted;                      }                  }                    changes.Add (change);              }
Missing Default,Sparkles.Git,GitRepository,C:\repos\hbons_SparkleShare\Sparkles\Git\GitRepository.cs,FormatCommitMessage,The following switch statement is missing a default case: switch (change.Type) {                      case ChangeType.Edited:                          message += "/";                          break;                      case ChangeType.Deleted:                          message += "-";                          break;                      case ChangeType.Added:                          message += "+";                          break;                      }
