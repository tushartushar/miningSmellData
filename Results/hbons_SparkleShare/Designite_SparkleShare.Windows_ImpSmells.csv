Implementation smell,Namespace,Class,File,Method,Description
Long Method,SparkleShare,EventLogController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetHTMLLog,The method has 105 lines of code.
Long Method,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The method has 733 lines of code.
Long Method,SparkleShare,StatusIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,CreateMenu,The method has 173 lines of code.
Complex Method,SparkleShare,Avatars,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\Avatars.cs,GetAvatar,Cyclomatic complexity of the method is 9
Complex Method,SparkleShare,EventLogController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,LinkClicked,Cyclomatic complexity of the method is 10
Complex Method,SparkleShare,EventLogController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetHTMLLog,Cyclomatic complexity of the method is 16
Complex Method,SparkleShare,StatusIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,CreateMenu,Cyclomatic complexity of the method is 9
Long Parameter List,SparkleShare,UnManagedMethods,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Shortcut.cs,ExtractIconEx,The method has 5 parameters. Parameters: lpszFile' nIconIndex' phIconLarge' phIconSmall' nIcons
Long Statement,SparkleShare,Avatars,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\Avatars.cs,GetAvatar,The length of the statement  "                if (client.ResponseHeaders ["content-type"].Equals (MediaTypeNames.Image.Jpeg' StringComparison.InvariantCultureIgnoreCase)) { " is 126.
Long Statement,SparkleShare,Avatars,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\Avatars.cs,GetAvatar,The length of the statement  "                } else if (client.ResponseHeaders ["content-type"].Equals (MediaTypeNames.Image.Gif' StringComparison.InvariantCultureIgnoreCase)) { " is 132.
Long Statement,SparkleShare,Note,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Note.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/SparkleShare.Windows;component/userinterface/note.xaml"' System.UriKind.Relative); " is 128.
Long Statement,SparkleShare,SparkleProtocolHandler,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\ProtocolHandler.cs,AddProtocolHandler,The length of the statement  "                    using (RegistryKey key = Registry.CurrentUser.CreateSubKey("Software").CreateSubKey("Classes").CreateSubKey(handleName)) " is 120.
Complex Conditional,SparkleShare,SetupController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,SetupController,The conditional expression  "this.current_page == PageType.Syncing ||                      this.current_page == PageType.Finished ||                      this.current_page == PageType.CryptoSetup ||                      this.current_page == PageType.CryptoPassword"  is complex.
Magic Number,SparkleShare,AboutController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\AboutController.cs,CheckForNewVersion,The following statement contains a magic number: Thread.Sleep (500);
Magic Number,SparkleShare,Avatars,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\Avatars.cs,GetAvatar,The following statement contains a magic number: buffer.Length > 255
Magic Number,SparkleShare,BaseController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\BaseController.cs,AddRepository,The following statement contains a magic number: repo.NewChangeSet += delegate (ChangeSet change_set) {                  if (AvatarsEnabled)                      change_set.User.AvatarFilePath = Avatars.GetAvatar (change_set.User.Email' 48' Config.DirectoryPath);                    NotificationRaised (change_set);              };
Magic Number,SparkleShare,BaseController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\BaseController.cs,DetermineFolderPath,The following statement contains a magic number: int suffix = 2 + Directory.GetDirectories (folder_group_path' folder_name + " (*").Length;
Magic Number,SparkleShare,EventLogController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetLog,The following statement contains a magic number: return list.GetRange (0' 100);
Magic Number,SparkleShare,EventLogController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetLog,The following statement contains a magic number: list.Count > 100
Magic Number,SparkleShare,EventLogController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetHTMLLog,The following statement contains a magic number: int midnight = (int) (DateTime.Today.AddDays (1) - new DateTime (1970' 1' 1)).TotalSeconds;
Magic Number,SparkleShare,EventLogController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,GetAvatarFilePath,The following statement contains a magic number: string fetched_avatar = Avatars.GetAvatar (user.Email' 48' SparkleShare.Controller.Config.DirectoryPath);
Magic Number,SparkleShare,SparkleDelay,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,Stop,The following statement contains a magic number: Thread.Sleep (500 - (int) ElapsedMilliseconds);
Magic Number,SparkleShare,SparkleDelay,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\EventLogController.cs,Stop,The following statement contains a magic number: ElapsedMilliseconds < 500
Magic Number,SparkleShare,NoteController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\NoteController.cs,NoteController,The following statement contains a magic number: AvatarFilePath = Avatars.GetAvatar (SparkleShare.Controller.CurrentUser.Email'                      48' SparkleShare.Controller.Config.DirectoryPath);
Magic Number,SparkleShare,SetupController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,AddPageCompleted,The following statement contains a magic number: SyncingFolder = remote_path.Substring (0' remote_path.Length - 4);
Magic Number,SparkleShare,SetupController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,InvitePageCompleted,The following statement contains a magic number: SyncingFolder = PendingInvite.RemotePath.Substring (0' PendingInvite.RemotePath.Length - 4);
Magic Number,SparkleShare,SetupController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,StoragePageCompleted,The following statement contains a magic number: ProgressBarPercentage = 100.0;
Magic Number,SparkleShare,SetupController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,StoragePageCompleted,The following statement contains a magic number: new Thread (() => {                  Thread.Sleep (1000);                  SparkleShare.Controller.FinishFetcher (storage_type);                }).Start ();
Magic Number,SparkleShare,SetupController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,CryptoPasswordPageCompleted,The following statement contains a magic number: ProgressBarPercentage = 100.0;
Magic Number,SparkleShare,SetupController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\SetupController.cs,CryptoPasswordPageCompleted,The following statement contains a magic number: new Thread (() => {                  Thread.Sleep (1000);                  SparkleShare.Controller.FinishFetcher (StorageType.Encrypted' password);                }).Start ();
Magic Number,SparkleShare,StatusIconController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\StatusIconController.cs,StatusIconController,The following statement contains a magic number: var timer = new Timers.Timer { Interval = 30 * 1000 };
Magic Number,SparkleShare,StatusIconController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\StatusIconController.cs,StatusIconController,The following statement contains a magic number: var timer = new Timers.Timer { Interval = 30 * 1000 };
Magic Number,SparkleShare,StatusIconController,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Common\StatusIconController.cs,RecentEventsClicked,The following statement contains a magic number: new Thread (() => {                  while (!SparkleShare.Controller.RepositoriesLoaded)                      Thread.Sleep (100);                    SparkleShare.Controller.ShowEventLogWindow ();                            }).Start ();
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,About,The following statement contains a magic number: Height     = 288;
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,About,The following statement contains a magic number: Width      = 720;
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Image image = new Image () {  				Width  = 720'                  Height = 260              };
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Image image = new Image () {  				Width  = 720'                  Height = 260              };
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Label version = new Label () {                  Content    = "version " + Controller.RunningVersion'                  FontSize   = 11'                  Foreground = new SolidColorBrush (Colors.White)              };
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: this.updates = new Label () {                  Content    = "Checking for updates..."'                  FontSize   = 11'                  Foreground = new SolidColorBrush (Color.FromArgb (128' 255' 255' 255))              };
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: this.updates = new Label () {                  Content    = "Checking for updates..."'                  FontSize   = 11'                  Foreground = new SolidColorBrush (Color.FromArgb (128' 255' 255' 255))              };
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: this.updates = new Label () {                  Content    = "Checking for updates..."'                  FontSize   = 11'                  Foreground = new SolidColorBrush (Color.FromArgb (128' 255' 255' 255))              };
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: this.updates = new Label () {                  Content    = "Checking for updates..."'                  FontSize   = 11'                  Foreground = new SolidColorBrush (Color.FromArgb (128' 255' 255' 255))              };
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: this.updates = new Label () {                  Content    = "Checking for updates..."'                  FontSize   = 11'                  Foreground = new SolidColorBrush (Color.FromArgb (128' 255' 255' 255))              };
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: TextBlock credits = new TextBlock () {                  FontSize     = 11'                  Foreground   = new SolidColorBrush (Colors.White)'                  Text         = "Copyright © 2010–" + DateTime.Now.Year + " Hylke Bons and others.\n" +                      "\n" +                      "SparkleShare is Open Source software. You are free to use' modify' " +                      "and redistribute it under the GNU General Public License version 3 or later."'                  TextWrapping = TextWrapping.Wrap'                  Width        = 318              };
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: TextBlock credits = new TextBlock () {                  FontSize     = 11'                  Foreground   = new SolidColorBrush (Colors.White)'                  Text         = "Copyright © 2010–" + DateTime.Now.Year + " Hylke Bons and others.\n" +                      "\n" +                      "SparkleShare is Open Source software. You are free to use' modify' " +                      "and redistribute it under the GNU General Public License version 3 or later."'                  TextWrapping = TextWrapping.Wrap'                  Width        = 318              };
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetLeft (version' 289);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetTop (version' 92);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetLeft (this.updates' 289);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetTop (this.updates' 109);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetLeft (credits' 294);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetTop (credits' 142);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetLeft (website_link' 289);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetTop (website_link' 222);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetLeft (credits_link' 289 + website_link.ActualWidth + 60);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetLeft (credits_link' 289 + website_link.ActualWidth + 60);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetTop (credits_link' 222);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetLeft (report_problem_link' 289 + website_link.ActualWidth + credits_link.ActualWidth + 115);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetLeft (report_problem_link' 289 + website_link.ActualWidth + credits_link.ActualWidth + 115);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetTop (report_problem_link' 222);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetLeft (debug_log_link' 289 + website_link.ActualWidth + credits_link.ActualWidth +                  report_problem_link.ActualWidth + 220);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetLeft (debug_log_link' 289 + website_link.ActualWidth + credits_link.ActualWidth +                  report_problem_link.ActualWidth + 220);
Magic Number,SparkleShare,About,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,CreateAbout,The following statement contains a magic number: Canvas.SetTop (debug_log_link' 222);
Magic Number,SparkleShare,SparkleLink,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,SparkleLink,The following statement contains a magic number: FontSize   = 11;
Magic Number,SparkleShare,SparkleLink,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,SparkleLink,The following statement contains a magic number: Foreground = new SolidColorBrush (Color.FromRgb (135' 178' 227));
Magic Number,SparkleShare,SparkleLink,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,SparkleLink,The following statement contains a magic number: Foreground = new SolidColorBrush (Color.FromRgb (135' 178' 227));
Magic Number,SparkleShare,SparkleLink,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,SparkleLink,The following statement contains a magic number: Foreground = new SolidColorBrush (Color.FromRgb (135' 178' 227));
Magic Number,SparkleShare,SparkleLink,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,SparkleLink,The following statement contains a magic number: TextDecoration underline = new TextDecoration () {                  Pen              = new Pen (new SolidColorBrush (Color.FromRgb (135' 178' 227))' 1)'                  PenThicknessUnit = TextDecorationUnit.FontRecommended              };
Magic Number,SparkleShare,SparkleLink,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,SparkleLink,The following statement contains a magic number: TextDecoration underline = new TextDecoration () {                  Pen              = new Pen (new SolidColorBrush (Color.FromRgb (135' 178' 227))' 1)'                  PenThicknessUnit = TextDecorationUnit.FontRecommended              };
Magic Number,SparkleShare,SparkleLink,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\About.cs,SparkleLink,The following statement contains a magic number: TextDecoration underline = new TextDecoration () {                  Pen              = new Pen (new SolidColorBrush (Color.FromRgb (135' 178' 227))' 1)'                  PenThicknessUnit = TextDecorationUnit.FontRecommended              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,EventLog,The following statement contains a magic number: Background = new SolidColorBrush(Color.FromRgb(240' 240' 240));
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,EventLog,The following statement contains a magic number: Background = new SolidColorBrush(Color.FromRgb(240' 240' 240));
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,EventLog,The following statement contains a magic number: Background = new SolidColorBrush(Color.FromRgb(240' 240' 240));
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,EventLog,The following statement contains a magic number: CoInternetSetFeatureEnabled(21' 0x00000002' true);
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: label_Size = new Label {                  Content = "Size: ?"'                  Height = 28'                  HorizontalAlignment = HorizontalAlignment.Left'                  Margin = new Thickness(20' 0' 0' 0)'                  FontWeight = FontWeights.Bold              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: label_Size = new Label {                  Content = "Size: ?"'                  Height = 28'                  HorizontalAlignment = HorizontalAlignment.Left'                  Margin = new Thickness(20' 0' 0' 0)'                  FontWeight = FontWeights.Bold              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: label_History = new Label {                  Content = "History: ?"'                  Height = 28'                  HorizontalAlignment = HorizontalAlignment.Left'                  Margin = new Thickness(100' 0' 0' 0)'                  FontWeight = FontWeights.Bold              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: label_History = new Label {                  Content = "History: ?"'                  Height = 28'                  HorizontalAlignment = HorizontalAlignment.Left'                  Margin = new Thickness(100' 0' 0' 0)'                  FontWeight = FontWeights.Bold              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: combobox = new ComboBox {                  HorizontalAlignment = HorizontalAlignment.Right'                  VerticalAlignment = VerticalAlignment.Center'                  Margin = new Thickness(0' 0' 6' 0)'                  MinWidth = 120              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: combobox = new ComboBox {                  HorizontalAlignment = HorizontalAlignment.Right'                  VerticalAlignment = VerticalAlignment.Center'                  Margin = new Thickness(0' 0' 6' 0)'                  MinWidth = 120              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: Border border = new Border {                  VerticalAlignment = VerticalAlignment.Top'                  Height = 35'                  Background = new SolidColorBrush(Color.FromArgb(255' 240' 240' 240))'                  BorderBrush = new SolidColorBrush(Color.FromArgb(255' 223' 223' 223))'                  BorderThickness = new Thickness(0' 0' 0' 1)              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: Border border = new Border {                  VerticalAlignment = VerticalAlignment.Top'                  Height = 35'                  Background = new SolidColorBrush(Color.FromArgb(255' 240' 240' 240))'                  BorderBrush = new SolidColorBrush(Color.FromArgb(255' 223' 223' 223))'                  BorderThickness = new Thickness(0' 0' 0' 1)              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: Border border = new Border {                  VerticalAlignment = VerticalAlignment.Top'                  Height = 35'                  Background = new SolidColorBrush(Color.FromArgb(255' 240' 240' 240))'                  BorderBrush = new SolidColorBrush(Color.FromArgb(255' 223' 223' 223))'                  BorderThickness = new Thickness(0' 0' 0' 1)              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: Border border = new Border {                  VerticalAlignment = VerticalAlignment.Top'                  Height = 35'                  Background = new SolidColorBrush(Color.FromArgb(255' 240' 240' 240))'                  BorderBrush = new SolidColorBrush(Color.FromArgb(255' 223' 223' 223))'                  BorderThickness = new Thickness(0' 0' 0' 1)              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: Border border = new Border {                  VerticalAlignment = VerticalAlignment.Top'                  Height = 35'                  Background = new SolidColorBrush(Color.FromArgb(255' 240' 240' 240))'                  BorderBrush = new SolidColorBrush(Color.FromArgb(255' 223' 223' 223))'                  BorderThickness = new Thickness(0' 0' 0' 1)              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: Border border = new Border {                  VerticalAlignment = VerticalAlignment.Top'                  Height = 35'                  Background = new SolidColorBrush(Color.FromArgb(255' 240' 240' 240))'                  BorderBrush = new SolidColorBrush(Color.FromArgb(255' 223' 223' 223))'                  BorderThickness = new Thickness(0' 0' 0' 1)              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: Border border = new Border {                  VerticalAlignment = VerticalAlignment.Top'                  Height = 35'                  Background = new SolidColorBrush(Color.FromArgb(255' 240' 240' 240))'                  BorderBrush = new SolidColorBrush(Color.FromArgb(255' 223' 223' 223))'                  BorderThickness = new Thickness(0' 0' 0' 1)              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: Border border = new Border {                  VerticalAlignment = VerticalAlignment.Top'                  Height = 35'                  Background = new SolidColorBrush(Color.FromArgb(255' 240' 240' 240))'                  BorderBrush = new SolidColorBrush(Color.FromArgb(255' 223' 223' 223))'                  BorderThickness = new Thickness(0' 0' 0' 1)              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: Border border = new Border {                  VerticalAlignment = VerticalAlignment.Top'                  Height = 35'                  Background = new SolidColorBrush(Color.FromArgb(255' 240' 240' 240))'                  BorderBrush = new SolidColorBrush(Color.FromArgb(255' 223' 223' 223))'                  BorderThickness = new Thickness(0' 0' 0' 1)              };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,CreateEventLog,The following statement contains a magic number: Grid browserGrid = new Grid { Margin = new Thickness(0' 35' 0' 0) };
Magic Number,SparkleShare,EventLog,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\EventLog.cs,UpdateChooser,The following statement contains a magic number: int row = 2;
Magic Number,SparkleShare,Note,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Note.xaml.cs,Note,The following statement contains a magic number: Background = new SolidColorBrush(Color.FromRgb(240' 240' 240));
Magic Number,SparkleShare,Note,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Note.xaml.cs,Note,The following statement contains a magic number: Background = new SolidColorBrush(Color.FromRgb(240' 240' 240));
Magic Number,SparkleShare,Note,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Note.xaml.cs,Note,The following statement contains a magic number: Background = new SolidColorBrush(Color.FromRgb(240' 240' 240));
Magic Number,SparkleShare,Note,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Note.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.cover = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.user_image = ((System.Windows.Media.ImageBrush)(target));              return;              case 3:              this.user_name_text_block = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.user_email_text_field = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.balloon_text_field = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.cancel_button = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.sync_button = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,SparkleShare,Note,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Note.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.cover = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.user_image = ((System.Windows.Media.ImageBrush)(target));              return;              case 3:              this.user_name_text_block = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.user_email_text_field = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.balloon_text_field = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.cancel_button = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.sync_button = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,SparkleShare,Note,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Note.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.cover = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.user_image = ((System.Windows.Media.ImageBrush)(target));              return;              case 3:              this.user_name_text_block = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.user_email_text_field = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.balloon_text_field = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.cancel_button = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.sync_button = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,SparkleShare,Note,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Note.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.cover = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.user_image = ((System.Windows.Media.ImageBrush)(target));              return;              case 3:              this.user_name_text_block = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.user_email_text_field = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.balloon_text_field = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.cancel_button = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.sync_button = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,SparkleShare,Note,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Note.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.cover = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.user_image = ((System.Windows.Media.ImageBrush)(target));              return;              case 3:              this.user_name_text_block = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.user_email_text_field = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.balloon_text_field = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.cancel_button = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.sync_button = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,SparkleShare,Note,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Note.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.cover = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.user_image = ((System.Windows.Media.ImageBrush)(target));              return;              case 3:              this.user_name_text_block = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.user_email_text_field = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.balloon_text_field = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.cancel_button = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.sync_button = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,SparkleShare,NotifyIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\NotifyIcon.cs,ShowBalloonTip,The following statement contains a magic number: Notification.ShowBalloonTip(5 * 1000' title' subtext' Forms.ToolTipIcon.Info);
Magic Number,SparkleShare,NotifyIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\NotifyIcon.cs,ShowBalloonTip,The following statement contains a magic number: Notification.ShowBalloonTip(5 * 1000' title' subtext' Forms.ToolTipIcon.Info);
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following statement contains a magic number: Controller.ChangePageEvent += delegate (PageType type' string [] warnings) {                  Dispatcher.BeginInvoke ((Action) delegate {                      Reset ();                        // TODO: Remove switch statement for ifs                      switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }                                            ShowAll ();                  });                      };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: Width      = 640;
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: Height     = 440;
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: SourceInitialized += delegate {                  const int gwl_style = -16;                  const int ws_sysmenu = 0x00080000;                   WindowInteropHelper helper = new WindowInteropHelper (this);                  int style = GetWindowLong (helper.Handle' gwl_style);                  SetWindowLong (helper.Handle' gwl_style' style & ~ws_sysmenu);              };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: this.bar = new Rectangle () {                  Width  = Width'                  Height = 40'                  Fill   = new SolidColorBrush (Color.FromRgb (240' 240' 240))                  };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: this.bar = new Rectangle () {                  Width  = Width'                  Height = 40'                  Fill   = new SolidColorBrush (Color.FromRgb (240' 240' 240))                  };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: this.bar = new Rectangle () {                  Width  = Width'                  Height = 40'                  Fill   = new SolidColorBrush (Color.FromRgb (240' 240' 240))                  };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: this.bar = new Rectangle () {                  Width  = Width'                  Height = 40'                  Fill   = new SolidColorBrush (Color.FromRgb (240' 240' 240))                  };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: this.line = new Rectangle () {                  Width  = Width'                  Height = 1'                  Fill   = new SolidColorBrush (Color.FromRgb (223' 223' 223))                  };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: this.line = new Rectangle () {                  Width  = Width'                  Height = 1'                  Fill   = new SolidColorBrush (Color.FromRgb (223' 223' 223))                  };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: this.line = new Rectangle () {                  Width  = Width'                  Height = 1'                  Fill   = new SolidColorBrush (Color.FromRgb (223' 223' 223))                  };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: this.side_splash = new Image () {                  Width  = 150'                  Height = 482              };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: this.side_splash = new Image () {                  Width  = 150'                  Height = 482              };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,SetupWindow,The following statement contains a magic number: Canvas.SetBottom (this.line' 40);
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: Label header_label = new Label () {                  Content    = Header'                  Foreground = new SolidColorBrush (Color.FromRgb (0' 51' 153))'                  FontSize   = 16              };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: Label header_label = new Label () {                  Content    = Header'                  Foreground = new SolidColorBrush (Color.FromRgb (0' 51' 153))'                  FontSize   = 16              };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: Label header_label = new Label () {                  Content    = Header'                  Foreground = new SolidColorBrush (Color.FromRgb (0' 51' 153))'                  FontSize   = 16              };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: TextBlock description_label = new TextBlock () {                  Text         = Description'                   TextWrapping = TextWrapping.Wrap'                  Width        = 375              };
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: Canvas.SetLeft (header_label' 180);
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: Canvas.SetTop (header_label' 18);
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: Canvas.SetLeft (description_label' 185);
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: Canvas.SetTop (description_label' 60);
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: int right = 9;
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: button.Width = rect.Width + 26;
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: button.Width = 75;
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: button.Width < 75
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: Canvas.SetBottom (button' 9);
Magic Number,SparkleShare,SetupWindow,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\SetupWindow.cs,ShowAll,The following statement contains a magic number: right += (int) button.Width + 9;
Magic Number,SparkleShare,Spinner,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Spinner.cs,Spinner,The following statement contains a magic number: this.timer = new Timer () {                  Interval = 400 / frame_count              };
Magic Number,SparkleShare,StatusIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,CreateMenu,The following statement contains a magic number: Image folder_image = new Image {                  Source = UserInterfaceHelpers.GetImageSource("sparkleshare-folder")'                  Width = 16'                  Height = 16              };
Magic Number,SparkleShare,StatusIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,CreateMenu,The following statement contains a magic number: Image folder_image = new Image {                  Source = UserInterfaceHelpers.GetImageSource("sparkleshare-folder")'                  Width = 16'                  Height = 16              };
Magic Number,SparkleShare,StatusIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,CreateMenu,The following statement contains a magic number: SparkleMenuItem code_item = new SparkleMenuItem {                      Header = SparkleShare.Controller.UserAuthenticationInfo.PublicKey.Substring(0' 20) + "..."                  };
Magic Number,SparkleShare,StatusIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,CreateMenu,The following statement contains a magic number: CheckBox notify_check_box = new CheckBox {                  Margin = new Thickness(6' 0' 0' 0)'                  IsChecked = SparkleShare.Controller.NotificationsEnabled              };
Magic Number,SparkleShare,StatusIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,CreateMenu,The following statement contains a magic number: SparkleMenuItem subfolder_item = new SparkleMenuItem {                          Header = project.Name.Replace("_"' "__")'                          Icon = new Image {                              Source = UserInterfaceHelpers.GetImageSource("folder")'                              Width = 16'                              Height = 16                          }                      };
Magic Number,SparkleShare,StatusIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,CreateMenu,The following statement contains a magic number: SparkleMenuItem subfolder_item = new SparkleMenuItem {                          Header = project.Name.Replace("_"' "__")'                          Icon = new Image {                              Source = UserInterfaceHelpers.GetImageSource("folder")'                              Width = 16'                              Height = 16                          }                      };
Magic Number,SparkleShare,StatusIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,CreateMenu,The following statement contains a magic number: SparkleMenuItem open_item = new SparkleMenuItem {                          Header = "Open folder"'                          Icon = new Image                          {                              Source = UserInterfaceHelpers.GetImageSource("folder")'                              Width = 16'                              Height = 16                          }                      };
Magic Number,SparkleShare,StatusIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,CreateMenu,The following statement contains a magic number: SparkleMenuItem open_item = new SparkleMenuItem {                          Header = "Open folder"'                          Icon = new Image                          {                              Source = UserInterfaceHelpers.GetImageSource("folder")'                              Width = 16'                              Height = 16                          }                      };
Magic Number,SparkleShare,SparkleMenuItem,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,SparkleMenuItem,The following statement contains a magic number: Padding = new Thickness(6' 3' 4' 0);
Magic Number,SparkleShare,SparkleMenuItem,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,SparkleMenuItem,The following statement contains a magic number: Padding = new Thickness(6' 3' 4' 0);
Magic Number,SparkleShare,SparkleMenuItem,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,SparkleMenuItem,The following statement contains a magic number: Padding = new Thickness(6' 3' 4' 0);
Duplicate Code,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The method contains a code clone-set at the following line numbers (starting from the method definition): ((519' 538)' (632' 651))
Duplicate Code,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The method contains a code clone-set at the following line numbers (starting from the method definition): ((591' 611)' (693' 713))
Missing Default,SparkleShare,Note,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Note.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.cover = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.user_image = ((System.Windows.Media.ImageBrush)(target));              return;              case 3:              this.user_name_text_block = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.user_email_text_field = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.balloon_text_field = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.cancel_button = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.sync_button = ((System.Windows.Controls.Button)(target));              return;              }
Missing Default,SparkleShare,Setup,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\Setup.cs,Setup,The following switch statement is missing a default case: switch (type) {                      case PageType.Setup: {                          Header      = "Welcome to SparkleShare!";                          Description  = "First off' what’s your name and email?\n(Visible only to team members)";                                                    TextBlock name_label = new TextBlock () {                              Text = "Full Name:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    string name = System.Security.Principal.WindowsIdentity.GetCurrent ().Name;                          name = name.Split ("\\".ToCharArray ()) [1];                            TextBox name_box = new TextBox () {                              Text  = name'                              Width = 175                          };                                                    TextBlock email_label = new TextBlock () {                              Text    = "Email:"'                              Width = 150'                              TextAlignment = TextAlignment.Right'                              FontWeight = FontWeights.Bold                          };                                                    TextBox email_box = new TextBox () {                              Width = 175                          };                                                                                              Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                                              ContentCanvas.Children.Add (name_label);                          Canvas.SetLeft (name_label' 180);                          Canvas.SetTop (name_label' 200 + 3);                                                    ContentCanvas.Children.Add (name_box);                          Canvas.SetLeft (name_box' 340);                          Canvas.SetTop (name_box' 200);                                                    ContentCanvas.Children.Add (email_label);                          Canvas.SetLeft (email_label' 180);                          Canvas.SetTop (email_label' 230 + 3);                                                    ContentCanvas.Children.Add (email_box);                          Canvas.SetLeft (email_box' 340);                          Canvas.SetTop (email_box' 230);                                                    Buttons.Add (cancel_button);                          Buttons.Add (continue_button);                                                    Controller.UpdateSetupContinueButtonEvent += delegate (bool enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = enabled;                              });                          };                                                    name_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    email_box.TextChanged += delegate {                              Controller.CheckSetupPage (name_box.Text' email_box.Text);                          };                                                    cancel_button.Click += delegate {                              Dispatcher.BeginInvoke ((Action) delegate {                                  SparkleShare.UI.StatusIcon.Dispose ();                                      Controller.SetupPageCancelled ();                              });                          };                                                    continue_button.Click += delegate {                              Controller.SetupPageCompleted (name_box.Text' email_box.Text);                          };                                                    Controller.CheckSetupPage (name_box.Text' email_box.Text);                            if (name_box.Text.Equals (""))                               name_box.Focus ();                          else                              email_box.Focus ();                            break;                      }                        case PageType.Invite: {                          Header      = "You’ve received an invite!";                             Description = "Do you want to add this project to SparkleShare?";                                                              TextBlock address_label = new TextBlock () {                              Text = "Address:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                                                TextBlock address_value = new TextBlock () {                              Text  = Controller.PendingInvite.Address'                              Width = 175'                              FontWeight = FontWeights.Bold                          };                                                                              TextBlock path_label = new TextBlock () {                              Text  = "Remote Path:"'                              Width = 150'                              TextAlignment = TextAlignment.Right                          };                                                    TextBlock path_value = new TextBlock () {                              Width = 175'                              Text = Controller.PendingInvite.RemotePath'                              FontWeight = FontWeights.Bold                          };                                                                                                        Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                              ContentCanvas.Children.Add (address_label);                          Canvas.SetLeft (address_label' 180);                          Canvas.SetTop (address_label' 200);                                                    ContentCanvas.Children.Add (address_value);                          Canvas.SetLeft (address_value' 340);                          Canvas.SetTop (address_value' 200);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetLeft (path_label' 180);                          Canvas.SetTop (path_label' 225);                                                    ContentCanvas.Children.Add (path_value);                          Canvas.SetLeft (path_value' 340);                          Canvas.SetTop (path_value' 225);                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                                              cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    add_button.Click += delegate {                              Controller.InvitePageCompleted ();                          };                                                    break;                      }                                                case PageType.Add: {                          Header = "Where’s your project hosted?";                                                      ListView list_view = new ListView () {                              Width  = 419'                              Height = 195'                              SelectionMode = SelectionMode.Single                          };                                                    GridView grid_view = new GridView () {                              AllowsColumnReorder = false                          };                                                    grid_view.Columns.Add (new GridViewColumn ());                                                string xaml =                                  "<DataTemplate xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"" +                              "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">" +                              "  <Grid>" +                              "    <StackPanel Orientation=\"Horizontal\">" +                              "      <Image Margin=\"5'0'0'0\" Source=\"{Binding Image}\" Height=\"24\" Width=\"24\"/>" +                              "      <StackPanel>" +                              "        <TextBlock Padding=\"10'4'0'0\" FontWeight=\"Bold\" Text=\"{Binding Name}\">" +                              "        </TextBlock>" +                              "        <TextBlock Padding=\"10'0'0'4\" Opacity=\"0.5\" Text=\"{Binding Description}\">" +                              "        </TextBlock>" +                              "      </StackPanel>" +                              "    </StackPanel>" +                              "  </Grid>" +                              "</DataTemplate>";                            grid_view.Columns [0].CellTemplate = (DataTemplate) XamlReader.Parse (xaml);                            Style header_style = new Style(typeof (GridViewColumnHeader));                          header_style.Setters.Add (new Setter (GridViewColumnHeader.VisibilityProperty' Visibility.Collapsed));                          grid_view.ColumnHeaderContainerStyle = header_style;                                                    foreach (Preset plugin in Controller.Presets) {                              // FIXME: images are blurry                              BitmapFrame image = BitmapFrame.Create (                                  new Uri (plugin.ImagePath)                              );                                                            list_view.Items.Add (                                  new {                                      Name        = plugin.Name'                                      Description = plugin.Description'                                      Image       = image                                  }                              );                          }                                                            list_view.View          = grid_view;                          list_view.SelectedIndex = Controller.SelectedPresetIndex;                                                    TextBlock address_label = new TextBlock () {                              Text       = "Address:"'                              FontWeight = FontWeights.Bold                          };                                                                                TextBox address_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousAddress'                              IsEnabled = (Controller.SelectedPreset.Address == null)                          };                                                    TextBlock address_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.AddressExample'                              FontSize   = 11'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    TextBlock path_label = new TextBlock () {                              Text       = "Remote Path:"'                              FontWeight = FontWeights.Bold'                              Width      = 200                          };                                                                                TextBox path_box = new TextBox () {                              Width = 200'                              Text  = Controller.PreviousPath'                              IsEnabled = (Controller.SelectedPreset.Path == null)                          };                                                    TextBlock path_help_label = new TextBlock () {                              Text       = Controller.SelectedPreset.PathExample'                              FontSize   = 11'                              Width      = 200'                              Foreground = new SolidColorBrush (Color.FromRgb (128' 128' 128))                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button add_button = new Button () {                              Content = "Add"                          };                            CheckBox history_check_box = new CheckBox ()                          {                              Content   = "Fetch prior revisions"'                              IsChecked = Controller.FetchPriorHistory                          };                                                    history_check_box.Click += delegate {                              Controller.HistoryItemChanged (history_check_box.IsChecked.Value);                          };                                                    ContentCanvas.Children.Add (history_check_box);                          Canvas.SetLeft (history_check_box' 185);                          Canvas.SetBottom (history_check_box' 12);                                                    ContentCanvas.Children.Add (list_view);                          Canvas.SetTop (list_view' 70);                          Canvas.SetLeft (list_view' 185);                                                    ContentCanvas.Children.Add (address_label);                          Canvas.SetTop (address_label' 285);                          Canvas.SetLeft (address_label' 185);                                                    ContentCanvas.Children.Add (address_box);                          Canvas.SetTop (address_box' 305);                          Canvas.SetLeft (address_box' 185);                                                    ContentCanvas.Children.Add (address_help_label);                          Canvas.SetTop (address_help_label' 330);                          Canvas.SetLeft (address_help_label' 185);                                                    ContentCanvas.Children.Add (path_label);                          Canvas.SetTop (path_label' 285);                          Canvas.SetRight (path_label' 30);                                                    ContentCanvas.Children.Add (path_box);                          Canvas.SetTop (path_box' 305);                          Canvas.SetRight (path_box' 30);                                                    ContentCanvas.Children.Add (path_help_label);                          Canvas.SetTop (path_help_label' 330);                          Canvas.SetRight (path_help_label' 30);                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                                                    Buttons.Add (add_button);                          Buttons.Add (cancel_button);                                                    address_box.Focus ();                          address_box.Select (address_box.Text.Length' 0);                                                      Controller.ChangeAddressFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  address_box.Text        = text;                                  address_box.IsEnabled   = (state == FieldState.Enabled);                                  address_help_label.Text = example_text;                              });                          };                            Controller.ChangePathFieldEvent += delegate (string text'                              string example_text' FieldState state) {                                Dispatcher.BeginInvoke ((Action) delegate {                                  path_box.Text        = text;                                  path_box.IsEnabled   = (state == FieldState.Enabled);                                  path_help_label.Text = example_text;                              });                          };                                                    Controller.UpdateAddProjectButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  add_button.IsEnabled = button_enabled;                              });                          };                                                    list_view.SelectionChanged += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                                                    list_view.KeyDown += delegate {                              Controller.SelectedPresetChanged (list_view.SelectedIndex);                          };                            Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                                                    address_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    path_box.TextChanged += delegate {                              Controller.CheckAddPage (address_box.Text' path_box.Text' list_view.SelectedIndex);                          };                                                    cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                            add_button.Click += delegate {                              Controller.AddPageCompleted (address_box.Text' path_box.Text);                          };                                                                      break;                      }                                                                          case PageType.Syncing: {                          Header      = "Adding project ‘" + Controller.SyncingFolder + "’…";                          Description = "This may take a while for large projects.\nIsn’t it coffee-o’clock?";                            Button finish_button = new Button () {                              Content   = "Finish"'                              IsEnabled = false                          };                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                            ProgressBar progress_bar = new ProgressBar () {                              Width  = 414'                              Height = 15'                              Value  = Controller.ProgressBarPercentage                          };                            TextBlock progress_label = new TextBlock () {                              Width = 414'                              Text = "Preparing to fetch files…"'                              TextAlignment = TextAlignment.Right                          };                            ContentCanvas.Children.Add (progress_bar);                          ContentCanvas.Children.Add (progress_label);                            Canvas.SetLeft (progress_bar' 185);                          Canvas.SetTop (progress_bar' 150);                            Canvas.SetLeft (progress_label' 185);                          Canvas.SetTop (progress_label' 175);                                                    TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Normal;                                                    Buttons.Add (cancel_button);                          Buttons.Add(finish_button);                                                                                                          Controller.UpdateProgressBarEvent += delegate (double percentage' string speed) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  progress_bar.Value = percentage;                                      TaskbarItemInfo.ProgressValue = percentage / 100;                                  progress_label.Text = speed;                              });                          };                                cancel_button.Click += delegate {                              Controller.SyncingCancelled ();                          };                                                    break;                      }                                                                          case PageType.Error: {                          Header      = "Oops! Something went wrong…";                          Description = "Please check the following:";                            TextBlock help_block = new TextBlock () {                              TextWrapping = TextWrapping.Wrap'                              Width        = 310                              };                            TextBlock bullets_block = new TextBlock () {                              Text = "•\n\n\n•"                          };                            help_block.Inlines.Add (new Bold (new Run (Controller.PreviousUrl)));                          help_block.Inlines.Add (" is the address we’ve compiled. Does this look alright?\n\n");                          help_block.Inlines.Add ("Is this computer’s Client ID known by the host?");                            if (warnings.Length > 0) {                              bullets_block.Text += "\n\n•";                              help_block.Inlines.Add ("\n\nHere’s the raw error message:");                                foreach (string warning in warnings) {                                  help_block.Inlines.Add ("\n");                                  help_block.Inlines.Add (new Bold (new Run (warning)));                              }                          }                            Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    Button try_again_button = new Button () {                              Content = "Try again…"                          };                                                      ContentCanvas.Children.Add (bullets_block);                          Canvas.SetLeft (bullets_block' 195);                          Canvas.SetTop (bullets_block' 100);                                                    ContentCanvas.Children.Add (help_block);                          Canvas.SetLeft (help_block' 210);                          Canvas.SetTop (help_block' 100);                                                    TaskbarItemInfo.ProgressValue = 1.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.Error;                                                    Buttons.Add (try_again_button);                          Buttons.Add (cancel_button);                                                          cancel_button.Click += delegate {                              Controller.PageCancelled ();                          };                                                    try_again_button.Click += delegate {                              Controller.ErrorPageCompleted ();                          };                                                    break;                      }                            case PageType.CryptoSetup: {                          // TODO: Merge crypto pages                          Header      = "Set up file encryption";                          Description = "Please a provide a strong password that you don’t use elsewhere.";                            TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    TextBlock info_label = new TextBlock () {                              Text         = "This password can’t be changed later' and your files can’t be recovered if it’s forgotten."'                              TextWrapping = TextWrapping.Wrap'                              Width        = 315                          };                            Image warning_image = new Image () {                              Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                  Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                          };                            show_password_checkbox.Checked += delegate {                              visible_password_box.Text       = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility         = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password           = visible_password_box.Text;                              password_box.Visibility         = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoSetupPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoSetupPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoSetupPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoSetupPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoSetupContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                            ContentCanvas.Children.Add (info_label);                          Canvas.SetLeft (info_label' 240);                          Canvas.SetTop (info_label' 300);                                                                                                     ContentCanvas.Children.Add (warning_image);                          Canvas.SetLeft (warning_image' 193);                          Canvas.SetTop (warning_image' 300);                                                Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                            break;                      }                                                case PageType.CryptoPassword: {                                                    Header      = "This project contains encrypted files";                          Description = "Please enter the password to see their contents.";                                                    TextBlock password_label = new TextBlock () {                              Text       = "Password:"'                              FontWeight = FontWeights.Bold                          };                                                    PasswordBox password_box = new PasswordBox () {                              Width = 200                          };                                                    TextBox visible_password_box = new TextBox () {                              Width = 200'                              Visibility = Visibility.Hidden                          };                                                    CheckBox show_password_checkbox = new CheckBox () {                              Content = "Show password"'                              IsChecked = false                          };                                                    show_password_checkbox.Checked += delegate {                              visible_password_box.Text = password_box.Password;                              visible_password_box.Visibility = Visibility.Visible;                              password_box.Visibility = Visibility.Hidden;                          };                                                    show_password_checkbox.Unchecked += delegate {                              password_box.Password = visible_password_box.Text;                              password_box.Visibility = Visibility.Visible;                              visible_password_box.Visibility = Visibility.Hidden;                          };                                                    password_box.PasswordChanged += delegate {                              Controller.CheckCryptoPasswordPage (password_box.Password);                          };                                                    visible_password_box.TextChanged += delegate {                              Controller.CheckCryptoPasswordPage (visible_password_box.Text);                          };                                                    Button continue_button = new Button () {                              Content = "Continue"'                              IsEnabled = false                          };                                                    continue_button.Click += delegate {                              if (show_password_checkbox.IsChecked == true)                                  Controller.CryptoPasswordPageCompleted (visible_password_box.Text);                              else                                  Controller.CryptoPasswordPageCompleted (password_box.Password);                          };                                                    Button cancel_button = new Button () {                              Content = "Cancel"                          };                                                    cancel_button.Click += delegate {                              Controller.CryptoPageCancelled ();                          };                                                    Controller.UpdateCryptoPasswordContinueButtonEvent += delegate (bool button_enabled) {                              Dispatcher.BeginInvoke ((Action) delegate {                                  continue_button.IsEnabled = button_enabled;                              });                          };                                                    ContentCanvas.Children.Add (password_label);                          Canvas.SetLeft (password_label' 270);                          Canvas.SetTop (password_label' 180);                                                    ContentCanvas.Children.Add (password_box);                          Canvas.SetLeft (password_box' 335);                          Canvas.SetTop (password_box' 180);                                                    ContentCanvas.Children.Add (visible_password_box);                          Canvas.SetLeft (visible_password_box' 335);                          Canvas.SetTop (visible_password_box' 180);                                                    ContentCanvas.Children.Add (show_password_checkbox);                          Canvas.SetLeft (show_password_checkbox' 338);                          Canvas.SetTop (show_password_checkbox' 208);                                                    Buttons.Add (continue_button);                          Buttons.Add (cancel_button);                            password_box.Focus ();                                                    break;                      }                        case PageType.Finished: {                          Header      = "Your shared project is ready!";                          Description = "You can find the files in your SparkleShare folder.";                                                                              Button finish_button = new Button () {                              Content = "Finish"                          };                                Button show_files_button = new Button () {                              Content = "Show files"                          };                            if (warnings.Length > 0) {                              Image warning_image = new Image () {                                  Source = Imaging.CreateBitmapSourceFromHIcon (Drawing.SystemIcons.Information.Handle'                                      Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ())                              };                                                            TextBlock warning_block = new TextBlock () {                                  Text         = warnings [0]'                                  Width        = 310'                                  TextWrapping = TextWrapping.Wrap                              };                                                                                                                ContentCanvas.Children.Add (warning_image);                              Canvas.SetLeft (warning_image' 193);                              Canvas.SetTop (warning_image' 100);                                                                                                                ContentCanvas.Children.Add (warning_block);                              Canvas.SetLeft (warning_block' 240);                              Canvas.SetTop (warning_block' 100);                          }                                                    TaskbarItemInfo.ProgressValue = 0.0;                          TaskbarItemInfo.ProgressState = TaskbarItemProgressState.None;                            Buttons.Add (show_files_button);                          Buttons.Add (finish_button);                                                      finish_button.Click += delegate {                              Controller.FinishPageCompleted ();                          };                            show_files_button.Click += delegate {                              Controller.ShowFilesClicked ();                          };                            break;                      }                      }
Missing Default,SparkleShare,StatusIcon,D:\research\architectureSmells\repos\hbons_SparkleShare\SparkleShare\Windows\UserInterface\StatusIcon.cs,StatusIcon,The following switch statement is missing a default case: switch(state) {                          case IconState.Idle: {                                  this.notify_icon.Icon = this.syncing_idle_image;                                  break;                              }                          case IconState.SyncingUp: {                                  this.notify_icon.Icon = this.syncing_up_image;                                  break;                              }                          case IconState.SyncingDown: {                                  this.notify_icon.Icon = this.syncing_down_image;                                  break;                              }                          case IconState.Syncing: {                                  this.notify_icon.Icon = this.syncing_image;                                  break;                              }                          case IconState.Error: {                                  this.notify_icon.Icon = this.syncing_error_image;                                  break;                              }                      }
